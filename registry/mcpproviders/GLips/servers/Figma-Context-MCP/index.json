{
  "repo_ref": "GLips/Figma-Context-MCP",
  "name": "io.github.GLips/Figma-Context-MCP",
  "description": "Give your coding agent access to your Figma data. Implement designs in any framework in one-shot. This MCP server is specifically designed for use with Cursor. It simplifies and translates Figma API responses to provide only the most relevant layout and styling information to the model, improving AI accuracy and relevance.",
  "version_detail": {
    "version": "0.2.1"
  },
  "remotes": [
    {
      "url": "http://localhost:PORT/mcp",
      "transporttype": "http"
    }
  ],
  "registries": [
    {
      "name": "npm",
      "package_name": "figma-developer-mcp",
      "license": "",
      "command_arguments": {
        "sub_commands": [],
        "positional_arguments": [
          "-y",
          "figma-developer-mcp",
          "--figma-api-key=YOUR-KEY",
          "--stdio"
        ],
        "environment_variables": [
          {
            "name": "FIGMA_API_KEY",
            "description": "Figma API access token",
            "required": true
          },
          {
            "name": "PORT",
            "description": "Port number for HTTP server",
            "required": false
          }
        ],
        "named_arguments": null
      }
    }
  ],
  "prompts": [],
  "tools": [
    {
      "name": "get_figma_data",
      "description": "When the nodeId cannot be obtained, obtain the layout information about the entire Figma file",
      "inputschema": {
        "type": "object",
        "properties": {
          "fileKey": {
            "type": "string",
            "description": "The key of the Figma file to fetch, often found in a provided URL like figma.com/(file|design)/<fileKey>/..."
          },
          "nodeId": {
            "type": "string",
            "description": "The ID of the node to fetch, often found as URL parameter node-id=<nodeId>, always use if provided"
          },
          "depth": {
            "type": "number",
            "description": "How many levels deep to traverse the node tree, only use if explicitly requested by the user"
          }
        },
        "required": [
          "fileKey"
        ]
      }
    },
    {
      "name": "download_figma_images",
      "description": "Download SVG and PNG images used in a Figma file based on the IDs of image or icon nodes",
      "inputschema": {
        "type": "object",
        "properties": {
          "fileKey": {
            "type": "string",
            "description": "The key of the Figma file containing the node"
          },
          "nodes": {
            "type": "array",
            "description": "The nodes to fetch as images",
            "items": {
              "type": "object",
              "properties": {
                "nodeId": {
                  "type": "string",
                  "description": "The ID of the Figma image node to fetch, formatted as 1234:5678"
                },
                "imageRef": {
                  "type": "string",
                  "description": "If a node has an imageRef fill, you must include this variable. Leave blank when downloading Vector SVG images."
                },
                "fileName": {
                  "type": "string",
                  "description": "The local name for saving the fetched file"
                }
              },
              "required": [
                "nodeId",
                "fileName"
              ]
            }
          },
          "localPath": {
            "type": "string",
            "description": "The absolute path to the directory where images are stored in the project. If the directory does not exist, it will be created. The format of this path should respect the directory format of the operating system you are running on. Don't use any special character escaping in the path name either."
          }
        },
        "required": [
          "fileKey",
          "nodes",
          "localPath"
        ]
      }
    }
  ],
  "resources": [],
  "documentation": "https://www.framelink.ai/docs/quickstart?utm_source=github&utm_medium=referral&utm_campaign=readme"
}