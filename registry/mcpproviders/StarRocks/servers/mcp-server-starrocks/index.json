{
  "repo_ref": "StarRocks/mcp-server-starrocks",
  "name": "io.github.StarRocks/mcp-server-starrocks",
  "description": "The StarRocks MCP Server acts as a bridge between AI assistants and StarRocks databases. It allows for direct SQL execution, database exploration, data visualization via charts, and retrieving detailed schema/data overviews without requiring complex client-side setup.",
  "version_detail": {
    "version": "0.1.2"
  },
  "remotes": [],
  "registries": [
    {
      "name": "npm",
      "package_name": "mcp-server-starrocks",
      "license": "",
      "command_arguments": {
        "sub_commands": [],
        "positional_arguments": [
          "run",
          "--with",
          "mcp-server-starrocks",
          "mcp-server-starrocks"
        ],
        "environment_variables": [
          {
            "name": "STARROCKS_HOST",
            "description": "Hostname or IP address of the StarRocks FE service.",
            "required": false
          },
          {
            "name": "STARROCKS_PORT",
            "description": "MySQL protocol port of the StarRocks FE service.",
            "required": false
          },
          {
            "name": "STARROCKS_USER",
            "description": "StarRocks username.",
            "required": false
          },
          {
            "name": "STARROCKS_PASSWORD",
            "description": "StarRocks password.",
            "required": false
          },
          {
            "name": "STARROCKS_DB",
            "description": "Default database to use if not specified in tool arguments or resource URIs.",
            "required": false
          },
          {
            "name": "STARROCKS_OVERVIEW_LIMIT",
            "description": "Approximate character limit for the total text generated by overview tools when fetching data to populate the cache.",
            "required": false
          }
        ],
        "named_arguments": null
      }
    }
  ],
  "prompts": [],
  "tools": [
    {
      "name": "read_query",
      "description": "Execute a SELECT query or commands that return a ResultSet",
      "inputschema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "SQL query to execute"
          }
        },
        "required": [
          "query"
        ]
      }
    },
    {
      "name": "write_query",
      "description": "Execute an DDL/DML or other StarRocks command that do not have a ResultSet",
      "inputschema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "SQL to execute"
          }
        },
        "required": [
          "query"
        ]
      }
    },
    {
      "name": "query_and_plotly_chart",
      "description": "using sql `query` to extract data from database, then using python `plotly_expr` to generate a chart for UI to display",
      "inputschema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "SQL query to execute"
          },
          "plotly_expr": {
            "type": "string",
            "description": "a one function call expression, with 2 vars binded: `px` as `import plotly.express as px`, and `df` as dataframe generated by query `plotly_expr` example: `px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\", marginal_y=\"violin\", marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")`"
          }
        }
      }
    },
    {
      "name": "table_overview",
      "description": "Get an overview of a specific table: columns, sample rows (up to 5), and total row count. Uses cache unless refresh=true.",
      "inputschema": {
        "type": "object",
        "properties": {
          "table": {
            "type": "string",
            "description": "Database name. Optional: uses the default database 'root' if `db` part is omitted."
          },
          "refresh": {
            "type": "boolean",
            "description": "Optional: Set to true to force refresh the overview, ignoring the cache. Defaults to false.",
            "default": false
          }
        },
        "required": [
          "table"
        ]
      }
    },
    {
      "name": "db_overview",
      "description": "Get an overview (columns, sample rows, row count) for ALL tables in a database. Uses cache unless refresh=True.",
      "inputschema": {
        "type": "object",
        "properties": {
          "db": {
            "type": "string",
            "description": "Database name. Optional: uses the default database 'root' if not provided."
          },
          "refresh": {
            "type": "boolean",
            "description": "Optional: Set to true to force refresh the overview, ignoring the cache. Defaults to false.",
            "default": false
          }
        },
        "required": []
      }
    }
  ],
  "resources": [
    {
      "uritemplate": "starrocks:///databases",
      "name": "All Databases",
      "description": "List all databases in StarRocks",
      "mimetype": "text/plain"
    },
    {
      "uritemplate": "starrocks:///{db}/{table}/schema",
      "name": "Table Schema",
      "description": "Get the schema of a table using SHOW CREATE TABLE",
      "mimetype": "text/plain"
    },
    {
      "uritemplate": "starrocks:///{db}/tables",
      "name": "Database Tables",
      "description": "List all tables in a specific database",
      "mimetype": "text/plain"
    },
    {
      "uritemplate": "proc:///{+path}",
      "name": "System internal information",
      "description": "Internal information exposed by StarRocks similar to linux /proc, following are some common paths:\n\n'/frontends' Shows the information of FE nodes.\n'/backends' Shows the information of BE nodes if this SR is non cloud native deployment.\n'/compute_nodes' Shows the information of CN nodes if this SR is cloud native deployment.\n'/dbs' Shows the information of databases.\n'/dbs/<DB_ID>' Shows the information of a database by database ID.\n'/dbs/<DB_ID>/<TABLE_ID>' Shows the information of tables by database ID.\n'/dbs/<DB_ID>/<TABLE_ID>/partitions' Shows the information of partitions by database ID and table ID.\n'/transactions' Shows the information of transactions by database.\n'/transactions/<DB_ID>' Show the information of transactions by database ID.\n'/transactions/<DB_ID>/running' Show the information of running transactions by database ID.\n'/transactions/<DB_ID>/finished' Show the information of finished transactions by database ID.\n'/jobs' Shows the information of jobs.\n'/statistic' Shows the statistics of each database.\n'/tasks' Shows the total number of all generic tasks and the failed tasks.\n'/cluster_balance' Shows the load balance information.\n'/routine_loads' Shows the information of Routine Load.\n'/colocation_group' Shows the information of Colocate Join groups.\n'/catalog' Shows the information of catalogs.",
      "mimetype": "text/plain"
    }
  ]
}