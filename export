{
  "specversion": "1.0-rc1",
  "registryid": "xRegistry",
  "self": "#/",
  "xid": "/",
  "epoch": 304,
  "createdat": "2025-05-12T08:17:35.052584843Z",
  "modifiedat": "2025-05-12T08:22:44.366561595Z",

  "capabilities": {
    "apis": [
      "/capabilities",
      "/export",
      "/model"
    ],
    "flags": [
      "collections",
      "doc",
      "epoch",
      "filter",
      "inline",
      "nodefaultversionid",
      "nodefaultversionsticky",
      "noepoch",
      "noreadonly",
      "offered",
      "schema",
      "setdefaultversionid",
      "specversion"
    ],
    "mutable": [
      "capabilities",
      "entities",
      "model"
    ],
    "pagination": false,
    "schemas": [
      "xregistry-json/1.0-rc1"
    ],
    "shortself": false,
    "specversions": [
      "1.0-rc1"
    ],
    "sticky": true
  },
  "model": {
    "attributes": {
      "specversion": {
        "name": "specversion",
        "type": "string",
        "readonly": true,
        "required": true
      },
      "registryid": {
        "name": "registryid",
        "type": "string",
        "readonly": true,
        "immutable": true,
        "required": true
      },
      "self": {
        "name": "self",
        "type": "url",
        "readonly": true,
        "immutable": true,
        "required": true
      },
      "xid": {
        "name": "xid",
        "type": "xid",
        "readonly": true,
        "immutable": true,
        "required": true
      },
      "epoch": {
        "name": "epoch",
        "type": "uinteger",
        "readonly": true,
        "required": true
      },
      "name": {
        "name": "name",
        "type": "string"
      },
      "description": {
        "name": "description",
        "type": "string"
      },
      "documentation": {
        "name": "documentation",
        "type": "url"
      },
      "labels": {
        "name": "labels",
        "type": "map",
        "item": {
          "type": "string"
        }
      },
      "createdat": {
        "name": "createdat",
        "type": "timestamp",
        "required": true
      },
      "modifiedat": {
        "name": "modifiedat",
        "type": "timestamp",
        "required": true
      },
      "capabilities": {
        "name": "capabilities",
        "type": "object",
        "attributes": {
          "*": {
            "name": "*",
            "type": "any"
          }
        }
      },
      "model": {
        "name": "model",
        "type": "object",
        "attributes": {
          "*": {
            "name": "*",
            "type": "any"
          }
        }
      },
      "mcpprovidersurl": {
        "name": "mcpprovidersurl",
        "type": "url",
        "readonly": true,
        "immutable": true,
        "required": true
      },
      "mcpproviderscount": {
        "name": "mcpproviderscount",
        "type": "uinteger",
        "readonly": true,
        "required": true
      },
      "mcpproviders": {
        "name": "mcpproviders",
        "type": "map",
        "item": {
          "type": "object",
          "attributes": {
            "*": {
              "name": "*",
              "type": "any"
            }
          }
        }
      }
    },
    "groups": {
      "mcpproviders": {
        "plural": "mcpproviders",
        "singular": "mcpprovider",
        "attributes": {
          "mcpproviderid": {
            "name": "mcpproviderid",
            "type": "string",
            "immutable": true,
            "required": true
          },
          "self": {
            "name": "self",
            "type": "url",
            "readonly": true,
            "immutable": true,
            "required": true
          },
          "xid": {
            "name": "xid",
            "type": "xid",
            "readonly": true,
            "immutable": true,
            "required": true
          },
          "epoch": {
            "name": "epoch",
            "type": "uinteger",
            "readonly": true,
            "required": true
          },
          "name": {
            "name": "name",
            "type": "string"
          },
          "description": {
            "name": "description",
            "type": "string"
          },
          "documentation": {
            "name": "documentation",
            "type": "url"
          },
          "labels": {
            "name": "labels",
            "type": "map",
            "item": {
              "type": "string"
            }
          },
          "createdat": {
            "name": "createdat",
            "type": "timestamp",
            "required": true
          },
          "modifiedat": {
            "name": "modifiedat",
            "type": "timestamp",
            "required": true
          },
          "serversurl": {
            "name": "serversurl",
            "type": "url",
            "readonly": true,
            "immutable": true,
            "required": true
          },
          "serverscount": {
            "name": "serverscount",
            "type": "uinteger",
            "readonly": true,
            "required": true
          },
          "servers": {
            "name": "servers",
            "type": "map",
            "item": {
              "type": "object",
              "attributes": {
                "*": {
                  "name": "*",
                  "type": "any"
                }
              }
            }
          }
        },
        "resources": {
          "servers": {
            "plural": "servers",
            "singular": "server",
            "maxversions": 0,
            "setversionid": false,
            "setdefaultversionsticky": false,
            "hasdocument": false,
            "singleversionroot": true,
            "attributes": {
              "serverid": {
                "name": "serverid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "versionid": {
                "name": "versionid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "readonly": true,
                "required": true
              },
              "name": {
                "name": "name",
                "type": "string",
                "description": "Unique reverse-DNS identifier of the repository."
              },
              "isdefault": {
                "name": "isdefault",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "description": "Repository or server overview."
              },
              "documentation": {
                "name": "documentation",
                "type": "url"
              },
              "labels": {
                "name": "labels",
                "type": "map",
                "item": {
                  "type": "string"
                }
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "ancestor": {
                "name": "ancestor",
                "type": "string",
                "required": true
              },
              "contenttype": {
                "name": "contenttype",
                "type": "string"
              },
              "prompts": {
                "name": "prompts",
                "type": "array",
                "description": "Static prompt templates bundled with this server.",
                "item": {
                  "type": "object",
                  "attributes": {
                    "arguments": {
                      "name": "arguments",
                      "type": "array",
                      "item": {
                        "type": "object",
                        "attributes": {
                          "description": {
                            "name": "description",
                            "type": "string"
                          },
                          "name": {
                            "name": "name",
                            "type": "string"
                          },
                          "required": {
                            "name": "required",
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "description": {
                      "name": "description",
                      "type": "string"
                    },
                    "name": {
                      "name": "name",
                      "type": "string"
                    }
                  }
                }
              },
              "registries": {
                "name": "registries",
                "type": "array",
                "description": "Package registry metadata blocks.",
                "item": {
                  "type": "object",
                  "attributes": {
                    "command_arguments": {
                      "name": "command_arguments",
                      "type": "object",
                      "attributes": {
                        "environment_variables": {
                          "name": "environment_variables",
                          "type": "array",
                          "item": {
                            "type": "object",
                            "attributes": {
                              "description": {
                                "name": "description",
                                "type": "string"
                              },
                              "name": {
                                "name": "name",
                                "type": "string"
                              },
                              "required": {
                                "name": "required",
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "named_arguments": {
                          "name": "named_arguments",
                          "type": "array",
                          "item": {
                            "type": "string"
                          }
                        },
                        "positional_arguments": {
                          "name": "positional_arguments",
                          "type": "array",
                          "item": {
                            "type": "string"
                          }
                        },
                        "sub_commands": {
                          "name": "sub_commands",
                          "type": "array",
                          "item": {
                            "type": "object",
                            "attributes": {
                              "description": {
                                "name": "description",
                                "type": "string"
                              },
                              "name": {
                                "name": "name",
                                "type": "string"
                              },
                              "named_arguments": {
                                "name": "named_arguments",
                                "type": "array",
                                "item": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "license": {
                      "name": "license",
                      "type": "string"
                    },
                    "name": {
                      "name": "name",
                      "type": "string"
                    },
                    "package_name": {
                      "name": "package_name",
                      "type": "string"
                    }
                  }
                }
              },
              "remotes": {
                "name": "remotes",
                "type": "array",
                "description": "Source‑code hosting locations.",
                "item": {
                  "type": "object",
                  "attributes": {
                    "transporttype": {
                      "name": "transporttype",
                      "type": "string"
                    },
                    "url": {
                      "name": "url",
                      "type": "url"
                    }
                  }
                }
              },
              "repo_ref": {
                "name": "repo_ref",
                "type": "string",
                "description": "Repository reference for the server."
              },
              "resources": {
                "name": "resources",
                "type": "array",
                "description": "Data resources the server can expose or subscribe to.",
                "item": {
                  "type": "object",
                  "attributes": {
                    "description": {
                      "name": "description",
                      "type": "string"
                    },
                    "mimetype": {
                      "name": "mimetype",
                      "type": "string"
                    },
                    "name": {
                      "name": "name",
                      "type": "string"
                    },
                    "uritemplate": {
                      "name": "uritemplate",
                      "type": "uritemplate"
                    }
                  }
                }
              },
              "tools": {
                "name": "tools",
                "type": "array",
                "description": "Tool definitions invocable via the MCP runtime.",
                "item": {
                  "type": "object",
                  "attributes": {
                    "description": {
                      "name": "description",
                      "type": "string"
                    },
                    "inputschema": {
                      "name": "inputschema",
                      "type": "any"
                    },
                    "name": {
                      "name": "name",
                      "type": "string"
                    }
                  }
                }
              },
              "version_detail": {
                "name": "version_detail",
                "type": "object",
                "attributes": {
                  "version": {
                    "name": "version",
                    "type": "string",
                    "description": "Semantic version number detail."
                  }
                }
              },
              "metaurl": {
                "name": "metaurl",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "meta": {
                "name": "meta",
                "type": "object",
                "attributes": {
                  "*": {
                    "name": "*",
                    "type": "any"
                  }
                }
              },
              "versionsurl": {
                "name": "versionsurl",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "versionscount": {
                "name": "versionscount",
                "type": "uinteger",
                "readonly": true,
                "required": true
              },
              "versions": {
                "name": "versions",
                "type": "map",
                "item": {
                  "type": "object",
                  "attributes": {
                    "*": {
                      "name": "*",
                      "type": "any"
                    }
                  }
                }
              }
            },
            "metaattributes": {
              "serverid": {
                "name": "serverid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xref": {
                "name": "xref",
                "type": "url"
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "readonly": true,
                "required": true
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "readonly": {
                "name": "readonly",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              },
              "compatibility": {
                "name": "compatibility",
                "type": "string",
                "enum": [
                  "none",
                  "backward",
                  "backward_transitive",
                  "forward",
                  "forward_transitive",
                  "full",
                  "full_transitive"
                ],
                "strict": false,
                "required": true,
                "default": "none"
              },
              "compatibilityauthority": {
                "name": "compatibilityauthority",
                "type": "string",
                "enum": [
                  "external",
                  "server"
                ],
                "strict": false
              },
              "deprecated": {
                "name": "deprecated",
                "type": "object",
                "attributes": {
                  "alternative": {
                    "name": "alternative",
                    "type": "url"
                  },
                  "docs": {
                    "name": "docs",
                    "type": "url"
                  },
                  "effective": {
                    "name": "effective",
                    "type": "timestamp"
                  },
                  "removal": {
                    "name": "removal",
                    "type": "timestamp"
                  },
                  "*": {
                    "name": "*",
                    "type": "any"
                  }
                }
              },
              "defaultversionid": {
                "name": "defaultversionid",
                "type": "string",
                "required": true
              },
              "defaultversionurl": {
                "name": "defaultversionurl",
                "type": "url",
                "readonly": true,
                "required": true
              },
              "defaultversionsticky": {
                "name": "defaultversionsticky",
                "type": "boolean",
                "required": true,
                "default": false
              }
            }
          }
        }
      }
    }
  },

  "mcpprovidersurl": "#/mcpproviders",
  "mcpproviders": {
    "21st-dev": {
      "mcpproviderid": "21st-dev",
      "self": "#/mcpproviders/21st-dev",
      "xid": "/mcpproviders/21st-dev",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:56.565565283Z",
      "modifiedat": "2025-05-12T08:19:56.565565283Z",

      "serversurl": "#/mcpproviders/21st-dev/servers",
      "servers": {
        "magic-mcp": {
          "serverid": "magic-mcp",
          "self": "#/mcpproviders/21st-dev/servers/magic-mcp",
          "xid": "/mcpproviders/21st-dev/servers/magic-mcp",

          "metaurl": "#/mcpproviders/21st-dev/servers/magic-mcp/meta",
          "meta": {
            "serverid": "magic-mcp",
            "self": "#/mcpproviders/21st-dev/servers/magic-mcp/meta",
            "xid": "/mcpproviders/21st-dev/servers/magic-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:56.565565283Z",
            "modifiedat": "2025-05-12T08:19:56.565565283Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/21st-dev/servers/magic-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/21st-dev/servers/magic-mcp/versions",
          "versions": {
            "1": {
              "serverid": "magic-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/21st-dev/servers/magic-mcp/versions/1",
              "xid": "/mcpproviders/21st-dev/servers/magic-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.21st-dev/magic-mcp",
              "isdefault": true,
              "description": "Magic Component Platform (MCP) is a powerful AI-driven tool that helps developers create beautiful, modern UI components instantly through natural language descriptions. It integrates seamlessly with popular IDEs and provides a streamlined workflow for UI development.",
              "createdat": "2025-05-12T08:19:56.565565283Z",
              "modifiedat": "2025-05-12T08:19:56.565565283Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for authentication",
                        "name": "API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@21st-dev/magic@latest",
                      "API_KEY=\"your-api-key\""
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@21st-dev/magic"
                }
              ],
              "remotes": [],
              "repo_ref": "21st-dev/magic-mcp",
              "resources": [],
              "tools": [
                {
                  "name": "CreateUiTool"
                },
                {
                  "name": "LogoSearchTool"
                },
                {
                  "name": "FetchUiTool"
                },
                {
                  "name": "RefineUiTool"
                }
              ],
              "version_detail": {
                "version": "0.0.46"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "66julienmartin": {
      "mcpproviderid": "66julienmartin",
      "self": "#/mcpproviders/66julienmartin",
      "xid": "/mcpproviders/66julienmartin",
      "epoch": 2,
      "createdat": "2025-05-12T08:19:48.258386353Z",
      "modifiedat": "2025-05-12T08:19:49.616639225Z",

      "serversurl": "#/mcpproviders/66julienmartin/servers",
      "servers": {
        "MCP-server-Deepseek_R1": {
          "serverid": "MCP-server-Deepseek_R1",
          "self": "#/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1",
          "xid": "/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1",

          "metaurl": "#/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1/meta",
          "meta": {
            "serverid": "MCP-server-Deepseek_R1",
            "self": "#/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1/meta",
            "xid": "/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:49.616639225Z",
            "modifiedat": "2025-05-12T08:19:49.616639225Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1/versions",
          "versions": {
            "1": {
              "serverid": "MCP-server-Deepseek_R1",
              "versionid": "1",
              "self": "#/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1/versions/1",
              "xid": "/mcpproviders/66julienmartin/servers/MCP-server-Deepseek_R1/versions/1",
              "epoch": 1,
              "name": "io.github.66julienmartin/MCP-server-Deepseek_R1",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation for the Deepseek R1 language model. Deepseek R1 is a powerful language model optimized for reasoning tasks with a context window of 8192 tokens.",
              "createdat": "2025-05-12T08:19:49.616639225Z",
              "modifiedat": "2025-05-12T08:19:49.616639225Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Deepseek R1 model",
                        "name": "DEEPSEEK_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "/path/to/deepseek-r1-mcp/build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "66julienmartin/MCP-server-Deepseek_R1",
              "resources": [],
              "tools": [
                {
                  "description": "Generate text using DeepSeek R1 model",
                  "inputschema": {
                    "properties": {
                      "max_tokens": {
                        "description": "Maximum tokens to generate (default: 8192)",
                        "maximum": 8192,
                        "minimum": 1,
                        "type": "number"
                      },
                      "prompt": {
                        "description": "Input text for DeepSeek",
                        "type": "string"
                      },
                      "temperature": {
                        "description": "Sampling temperature (default: 0.2)",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "deepseek_r1"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "MCP-server-Qwen_Max": {
          "serverid": "MCP-server-Qwen_Max",
          "self": "#/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max",
          "xid": "/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max",

          "metaurl": "#/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max/meta",
          "meta": {
            "serverid": "MCP-server-Qwen_Max",
            "self": "#/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max/meta",
            "xid": "/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:48.258386353Z",
            "modifiedat": "2025-05-12T08:19:48.258386353Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max/versions",
          "versions": {
            "1": {
              "serverid": "MCP-server-Qwen_Max",
              "versionid": "1",
              "self": "#/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max/versions/1",
              "xid": "/mcpproviders/66julienmartin/servers/MCP-server-Qwen_Max/versions/1",
              "epoch": 1,
              "name": "io.github.66julienmartin/MCP-server-Qwen_Max",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation for the Qwen Max language model.",
              "createdat": "2025-05-12T08:19:48.258386353Z",
              "modifiedat": "2025-05-12T08:19:48.258386353Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Dashscope",
                        "name": "DASHSCOPE_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "/path/to/Qwen_Max/build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@66julienmartin/mcp-server-qwen_max"
                }
              ],
              "remotes": [],
              "repo_ref": "66julienmartin/MCP-server-Qwen_Max",
              "resources": [],
              "tools": [
                {
                  "description": "Generate text using Qwen Max model",
                  "inputschema": {
                    "properties": {
                      "max_tokens": {
                        "default": 8192,
                        "description": "Maximum number of tokens to generate",
                        "type": "number"
                      },
                      "prompt": {
                        "description": "The text prompt to generate content from",
                        "type": "string"
                      },
                      "temperature": {
                        "default": 0.7,
                        "description": "Sampling temperature (0-2)",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "qwen_max"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "AI-Agent-Hub": {
      "mcpproviderid": "AI-Agent-Hub",
      "self": "#/mcpproviders/AI-Agent-Hub",
      "xid": "/mcpproviders/AI-Agent-Hub",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:49.004227112Z",
      "modifiedat": "2025-05-12T08:17:49.004227112Z",

      "serversurl": "#/mcpproviders/AI-Agent-Hub/servers",
      "servers": {
        "ai-agent-marketplace-index-mcp": {
          "serverid": "ai-agent-marketplace-index-mcp",
          "self": "#/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp",
          "xid": "/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp",

          "metaurl": "#/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp/meta",
          "meta": {
            "serverid": "ai-agent-marketplace-index-mcp",
            "self": "#/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp/meta",
            "xid": "/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:49.004227112Z",
            "modifiedat": "2025-05-12T08:17:49.004227112Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp/versions",
          "versions": {
            "1": {
              "serverid": "ai-agent-marketplace-index-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp/versions/1",
              "xid": "/mcpproviders/AI-Agent-Hub/servers/ai-agent-marketplace-index-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.AI-Agent-Hub/ai-agent-marketplace-index-mcp",
              "isdefault": true,
              "description": "MCP Server for AI Agent Marketplace Index from DeepNLP, allowing AI assistants to search available AI agents by keywords or category, including tools for searching AI agents and listing AI agents to the marketplace.",
              "createdat": "2025-05-12T08:17:49.004227112Z",
              "modifiedat": "2025-05-12T08:17:49.004227112Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Microsoft Bing Search API key",
                        "name": "BING_SEARCH_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "run",
                      "-m",
                      "ai-agent-marketplace-index-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "ai-agent-marketplace-index-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "AI-Agent-Hub/ai-agent-marketplace-index-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "General search of AI Agents for information, websites, content and metric statistic of web traffic, etc.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of results to return.",
                        "type": "integer"
                      },
                      "q": {
                        "description": "Query string to search AI agents.",
                        "type": "string"
                      },
                      "timeout": {
                        "description": "Timeout in seconds for the API call.",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "q"
                    ],
                    "type": "object"
                  },
                  "name": "search_ai_agent"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "AI-QL": {
      "mcpproviderid": "AI-QL",
      "self": "#/mcpproviders/AI-QL",
      "xid": "/mcpproviders/AI-QL",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:44.609645079Z",
      "modifiedat": "2025-05-12T08:17:44.609645079Z",

      "serversurl": "#/mcpproviders/AI-QL/servers",
      "servers": {
        "chat-mcp": {
          "serverid": "chat-mcp",
          "self": "#/mcpproviders/AI-QL/servers/chat-mcp",
          "xid": "/mcpproviders/AI-QL/servers/chat-mcp",

          "metaurl": "#/mcpproviders/AI-QL/servers/chat-mcp/meta",
          "meta": {
            "serverid": "chat-mcp",
            "self": "#/mcpproviders/AI-QL/servers/chat-mcp/meta",
            "xid": "/mcpproviders/AI-QL/servers/chat-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:44.609645079Z",
            "modifiedat": "2025-05-12T08:17:44.609645079Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/AI-QL/servers/chat-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/AI-QL/servers/chat-mcp/versions",
          "versions": {
            "1": {
              "serverid": "chat-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/AI-QL/servers/chat-mcp/versions/1",
              "xid": "/mcpproviders/AI-QL/servers/chat-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.AI-QL/chat-mcp",
              "isdefault": true,
              "description": "A Cross-Platform Interface for LLMs utilizing the MCP (Model Context Protocol) to connect and interact with various Large Language Models (LLMs).",
              "createdat": "2025-05-12T08:17:44.609645079Z",
              "modifiedat": "2025-05-12T08:17:44.609645079Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "unspecified"
                }
              ],
              "remotes": [],
              "repo_ref": "AI-QL/chat-mcp",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Adfin-Engineering": {
      "mcpproviderid": "Adfin-Engineering",
      "self": "#/mcpproviders/Adfin-Engineering",
      "xid": "/mcpproviders/Adfin-Engineering",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:41.407782299Z",
      "modifiedat": "2025-05-12T08:17:41.407782299Z",

      "serversurl": "#/mcpproviders/Adfin-Engineering/servers",
      "servers": {
        "mcp-server-adfin": {
          "serverid": "mcp-server-adfin",
          "self": "#/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin",
          "xid": "/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin",

          "metaurl": "#/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin/meta",
          "meta": {
            "serverid": "mcp-server-adfin",
            "self": "#/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin/meta",
            "xid": "/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:41.407782299Z",
            "modifiedat": "2025-05-12T08:17:41.407782299Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-adfin",
              "versionid": "1",
              "self": "#/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin/versions/1",
              "xid": "/mcpproviders/Adfin-Engineering/servers/mcp-server-adfin/versions/1",
              "epoch": 1,
              "name": "io.github.Adfin-Engineering/mcp-server-adfin",
              "isdefault": true,
              "description": "MCP server implementation providing tools for filesystem operations and Adfin API interactions, enabling Claude Desktop integration.",
              "createdat": "2025-05-12T08:17:41.407782299Z",
              "modifiedat": "2025-05-12T08:17:41.407782299Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "User email for Adfin authentication",
                        "name": "ADFIN_EMAIL",
                        "required": true
                      },
                      {
                        "description": "User password for Adfin authentication",
                        "name": "ADFIN_PASSWORD",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "\u003cabsolute_path_to_adfin_mcp_folder\u003e",
                      "run",
                      "main_adfin_mcp.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "unknown"
                }
              ],
              "remotes": [],
              "repo_ref": "Adfin-Engineering/mcp-server-adfin",
              "resources": [],
              "tools": [
                {
                  "description": "Get the current working directory.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_cwd"
                },
                {
                  "description": "Get the files from the current working directory.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_cwd"
                },
                {
                  "description": "Search recursively for a file starting from the current working directory given the exact name of the file.",
                  "inputschema": {
                    "properties": {
                      "file_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "file_name"
                    ],
                    "type": "object"
                  },
                  "name": "search_for_file"
                },
                {
                  "description": "Search recursively for a file or folder starting from the current working directory.",
                  "inputschema": {
                    "properties": {
                      "file_or_folder_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "file_or_folder_name"
                    ],
                    "type": "object"
                  },
                  "name": "search_for_file_partial"
                },
                {
                  "description": "Make the Desktop the current working directory.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "make_desktop_cwd"
                },
                {
                  "description": "Make a folder the current working directory. That folder must be present in the previous cwd.",
                  "inputschema": {
                    "properties": {
                      "folder_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "folder_name"
                    ],
                    "type": "object"
                  },
                  "name": "make_folder_cwd"
                },
                {
                  "description": "Upload an invoice to Adfin given its absolute path.",
                  "inputschema": {
                    "properties": {
                      "invoice_path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "invoice_path"
                    ],
                    "type": "object"
                  },
                  "name": "upload_invoice_to_adfin"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Aiven-Open": {
      "mcpproviderid": "Aiven-Open",
      "self": "#/mcpproviders/Aiven-Open",
      "xid": "/mcpproviders/Aiven-Open",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:06.441220367Z",
      "modifiedat": "2025-05-12T08:18:06.441220367Z",

      "serversurl": "#/mcpproviders/Aiven-Open/servers",
      "servers": {
        "mcp-aiven": {
          "serverid": "mcp-aiven",
          "self": "#/mcpproviders/Aiven-Open/servers/mcp-aiven",
          "xid": "/mcpproviders/Aiven-Open/servers/mcp-aiven",

          "metaurl": "#/mcpproviders/Aiven-Open/servers/mcp-aiven/meta",
          "meta": {
            "serverid": "mcp-aiven",
            "self": "#/mcpproviders/Aiven-Open/servers/mcp-aiven/meta",
            "xid": "/mcpproviders/Aiven-Open/servers/mcp-aiven/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:06.441220367Z",
            "modifiedat": "2025-05-12T08:18:06.441220367Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Aiven-Open/servers/mcp-aiven/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Aiven-Open/servers/mcp-aiven/versions",
          "versions": {
            "1": {
              "serverid": "mcp-aiven",
              "versionid": "1",
              "self": "#/mcpproviders/Aiven-Open/servers/mcp-aiven/versions/1",
              "xid": "/mcpproviders/Aiven-Open/servers/mcp-aiven/versions/1",
              "epoch": 1,
              "name": "io.github.Aiven-Open/mcp-aiven",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for Aiven providing access to Aiven services such as PostgreSQL, Kafka, ClickHouse, Valkey and OpenSearch, enabling LLMs to build full stack solutions.",
              "createdat": "2025-05-12T08:18:06.441220367Z",
              "modifiedat": "2025-05-12T08:18:06.441220367Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "The Aiven API url",
                        "name": "AIVEN_BASE_URL",
                        "required": true
                      },
                      {
                        "description": "The authentication token",
                        "name": "AIVEN_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "dev",
                      "mcp_aiven/mcp_server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp-aiven"
                }
              ],
              "remotes": [],
              "repo_ref": "Aiven-Open/mcp-aiven",
              "resources": [],
              "tools": [
                {
                  "description": "List all projects on your Aiven account.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_projects"
                },
                {
                  "description": "List all services in a specific Aiven project.",
                  "inputschema": {
                    "properties": {
                      "project_name": {
                        "description": "Name of the Aiven project to list services for.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_name"
                    ],
                    "type": "object"
                  },
                  "name": "list_services"
                },
                {
                  "description": "Get the detail of your service in a specific Aiven project.",
                  "inputschema": {
                    "properties": {
                      "project_name": {
                        "description": "Name of the Aiven project.",
                        "type": "string"
                      },
                      "service_name": {
                        "description": "Name of the service within the project.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_name",
                      "service_name"
                    ],
                    "type": "object"
                  },
                  "name": "get_service_details"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "AshDevFr": {
      "mcpproviderid": "AshDevFr",
      "self": "#/mcpproviders/AshDevFr",
      "xid": "/mcpproviders/AshDevFr",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:13.467437313Z",
      "modifiedat": "2025-05-12T08:22:13.467437313Z",

      "serversurl": "#/mcpproviders/AshDevFr/servers",
      "servers": {
        "discourse-mcp-server": {
          "serverid": "discourse-mcp-server",
          "self": "#/mcpproviders/AshDevFr/servers/discourse-mcp-server",
          "xid": "/mcpproviders/AshDevFr/servers/discourse-mcp-server",

          "metaurl": "#/mcpproviders/AshDevFr/servers/discourse-mcp-server/meta",
          "meta": {
            "serverid": "discourse-mcp-server",
            "self": "#/mcpproviders/AshDevFr/servers/discourse-mcp-server/meta",
            "xid": "/mcpproviders/AshDevFr/servers/discourse-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:13.467437313Z",
            "modifiedat": "2025-05-12T08:22:13.467437313Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/AshDevFr/servers/discourse-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/AshDevFr/servers/discourse-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "discourse-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/AshDevFr/servers/discourse-mcp-server/versions/1",
              "xid": "/mcpproviders/AshDevFr/servers/discourse-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.AshDevFr/discourse-mcp-server",
              "isdefault": true,
              "description": "Node.js server implementing Model Context Protocol (MCP) for Discourse search operation.",
              "createdat": "2025-05-12T08:22:13.467437313Z",
              "modifiedat": "2025-05-12T08:22:13.467437313Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "run",
                      "-i",
                      "--rm",
                      "-e",
                      "DISCOURSE_API_URL=https://try.discourse.org",
                      "-e",
                      "DISCOURSE_API_KEY=1234",
                      "-e",
                      "DISCOURSE_API_USERNAME=ash"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "ashdev/discourse-mcp-server"
                },
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "DISCOURSE_API_URL",
                        "required": true
                      },
                      {
                        "name": "DISCOURSE_API_KEY",
                        "required": false
                      },
                      {
                        "name": "DISCOURSE_API_USERNAME",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@ashdev/discourse-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@ashdev/discourse-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "AshDevFr/discourse-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Search Discourse posts",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "Query",
                        "minLength": 5,
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_posts"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "AshikNesin": {
      "mcpproviderid": "AshikNesin",
      "self": "#/mcpproviders/AshikNesin",
      "xid": "/mcpproviders/AshikNesin",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:13.483264737Z",
      "modifiedat": "2025-05-12T08:19:13.483264737Z",

      "serversurl": "#/mcpproviders/AshikNesin/servers",
      "servers": {
        "pushover-mcp": {
          "serverid": "pushover-mcp",
          "self": "#/mcpproviders/AshikNesin/servers/pushover-mcp",
          "xid": "/mcpproviders/AshikNesin/servers/pushover-mcp",

          "metaurl": "#/mcpproviders/AshikNesin/servers/pushover-mcp/meta",
          "meta": {
            "serverid": "pushover-mcp",
            "self": "#/mcpproviders/AshikNesin/servers/pushover-mcp/meta",
            "xid": "/mcpproviders/AshikNesin/servers/pushover-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:13.483264737Z",
            "modifiedat": "2025-05-12T08:19:13.483264737Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/AshikNesin/servers/pushover-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/AshikNesin/servers/pushover-mcp/versions",
          "versions": {
            "1": {
              "serverid": "pushover-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/AshikNesin/servers/pushover-mcp/versions/1",
              "xid": "/mcpproviders/AshikNesin/servers/pushover-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.AshikNesin/pushover-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol implementation for sending notifications via Pushover.net.",
              "createdat": "2025-05-12T08:19:13.483264737Z",
              "modifiedat": "2025-05-12T08:19:13.483264737Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--token",
                      "YOUR_TOKEN",
                      "--user",
                      "YOUR_USER"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "pushover-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "AshikNesin/pushover-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Sends a notification via Pushover.",
                  "inputschema": {
                    "properties": {
                      "device": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      },
                      "priority": {
                        "type": "number"
                      },
                      "sound": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "url_title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "send"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "AudienseCo": {
      "mcpproviderid": "AudienseCo",
      "self": "#/mcpproviders/AudienseCo",
      "xid": "/mcpproviders/AudienseCo",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:27.915452652Z",
      "modifiedat": "2025-05-12T08:18:27.915452652Z",

      "serversurl": "#/mcpproviders/AudienseCo/servers",
      "servers": {
        "mcp-audiense-insights": {
          "serverid": "mcp-audiense-insights",
          "self": "#/mcpproviders/AudienseCo/servers/mcp-audiense-insights",
          "xid": "/mcpproviders/AudienseCo/servers/mcp-audiense-insights",

          "metaurl": "#/mcpproviders/AudienseCo/servers/mcp-audiense-insights/meta",
          "meta": {
            "serverid": "mcp-audiense-insights",
            "self": "#/mcpproviders/AudienseCo/servers/mcp-audiense-insights/meta",
            "xid": "/mcpproviders/AudienseCo/servers/mcp-audiense-insights/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:27.915452652Z",
            "modifiedat": "2025-05-12T08:18:27.915452652Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/AudienseCo/servers/mcp-audiense-insights/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/AudienseCo/servers/mcp-audiense-insights/versions",
          "versions": {
            "1": {
              "serverid": "mcp-audiense-insights",
              "versionid": "1",
              "self": "#/mcpproviders/AudienseCo/servers/mcp-audiense-insights/versions/1",
              "xid": "/mcpproviders/AudienseCo/servers/mcp-audiense-insights/versions/1",
              "epoch": 1,
              "name": "io.github.AudienseCo/mcp-audiense-insights",
              "isdefault": true,
              "description": "This server, based on the Model Context Protocol (MCP), allows Claude or any other MCP-compatible client to interact with your Audiense Insights account. It extracts marketing insights and audience analysis from Audiense reports, covering demographic, cultural, influencer, and content engagement analysis.",
              "createdat": "2025-05-12T08:18:27.915452652Z",
              "modifiedat": "2025-05-12T08:18:27.915452652Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "The name or id of the Audiense Insights report.",
                      "name": "reportName",
                      "required": true
                    }
                  ],
                  "description": "A prompt to extract marketing insights and audience understanding from Audiense reports through demographic, cultural, influencer, and content analysis.",
                  "name": "audiense-demo"
                },
                {
                  "arguments": [
                    {
                      "description": "The name or id of the Audiense Insights report.",
                      "name": "reportName",
                      "required": true
                    }
                  ],
                  "description": "A prompt to extract marketing insights and audience understanding from Audiense reports through demographic, cultural, influencer, and content analysis.",
                  "name": "audiense-demo2"
                },
                {
                  "arguments": [
                    {
                      "description": "The name or ID of the Audiense Insights report for the first brand to analyze.",
                      "name": "brand1",
                      "required": true
                    },
                    {
                      "description": "The name or ID of the Audiense Insights report for the second brand to analyze.",
                      "name": "brand2",
                      "required": true
                    }
                  ],
                  "description": "A prompt to match and compare audience segments across Audiense reports, identifying similarities, unique traits, and key insights based on demographics, interests, influencers, and engagement patterns.",
                  "name": "segment-matching"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "AUDIENSE_CLIENT_ID"
                      },
                      {
                        "name": "AUDIENSE_CLIENT_SECRET"
                      },
                      {
                        "name": "TWITTER_BEARER_TOKEN"
                      }
                    ],
                    "positional_arguments": [
                      "build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@AudienseCo/mcp-audiense-insights"
                }
              ],
              "remotes": [],
              "repo_ref": "AudienseCo/mcp-audiense-insights",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves the list of Audiense insights reports owned by the authenticated user.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-reports"
                },
                {
                  "description": "Retrieves detailed information about a specific intelligence report, including its status, segmentation type, audience size, segments, and access links.",
                  "inputschema": {
                    "properties": {
                      "report_id": {
                        "description": "The ID of the intelligence report.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "report_id"
                    ],
                    "type": "object"
                  },
                  "name": "get-report-info"
                },
                {
                  "description": "Retrieves aggregated insights for a given audience ID, providing statistical distributions across various attributes. Available insights include demographics (e.g., gender, age, country), behavioral traits (e.g., active hours, platform usage), psychographics (e.g., personality traits, interests), and socioeconomic factors (e.g., income, education status).",
                  "inputschema": {
                    "properties": {
                      "audience_insights_id": {
                        "description": "The ID of the audience insights.",
                        "type": "string"
                      },
                      "insights": {
                        "description": "Optional list of insight names to filter.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "audience_insights_id"
                    ],
                    "type": "object"
                  },
                  "name": "get-audience-insights"
                },
                {
                  "description": "Retrieves available baselines, optionally filtered by country.",
                  "inputschema": {
                    "properties": {
                      "country": {
                        "description": "ISO country code to filter by.",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-baselines"
                },
                {
                  "description": "Retrieves the list of available affinity categories that can be used as the categories parameter in the compare-audience-influencers tool.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-categories"
                },
                {
                  "description": "Compares the influencers of an audience with a baseline audience. The baseline is determined as follows: If the selection was the full audience and a single country represents more than 50% of the audience, that country is used as the baseline. Otherwise, the Global baseline is applied. If the selection was a specific segment, the full audience is used as the baseline. Each influencer comparison includes: - Affinity (%) - The level of alignment between the influencer and the audience. Baseline Affinity (%) - The influencer’s affinity within the baseline audience. Uniqueness Score - A measure of how distinct the influencer is within the selected audience compared to the baseline.",
                  "inputschema": {
                    "properties": {
                      "audience_influencers_id": {
                        "description": "The ID of the audience influencers.",
                        "type": "string"
                      },
                      "baseline_audience_influencers_id": {
                        "description": "The ID of the baseline audience influencers.",
                        "type": "string"
                      },
                      "bio_keyword": {
                        "description": "Keyword to filter influencers by their biography.",
                        "type": "string"
                      },
                      "categories": {
                        "description": "Filter influencers by categories.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "count": {
                        "description": "Number of items per page (default: 200).",
                        "type": "number"
                      },
                      "countries": {
                        "description": "Filter influencers by country ISO codes.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "cursor": {
                        "description": "Cursor for pagination.",
                        "type": "number"
                      },
                      "entity_type": {
                        "description": "Filter by entity type (person or brand).",
                        "enum": [
                          "person",
                          "brand"
                        ],
                        "type": "string"
                      },
                      "followers_max": {
                        "description": "Maximum number of followers.",
                        "type": "number"
                      },
                      "followers_min": {
                        "description": "Minimum number of followers.",
                        "type": "number"
                      }
                    },
                    "required": [
                      "audience_influencers_id",
                      "baseline_audience_influencers_id"
                    ],
                    "type": "object"
                  },
                  "name": "compare-audience-influencers"
                },
                {
                  "description": "Retrieves audience content engagement details for a given audience. This tool provides a detailed breakdown of the content an audience interacts with, including: - Liked Content: Popular posts, top domains, top emojis, top hashtags, top links, top media, and a word cloud. - Shared Content: Content that the audience shares, categorized similarly to liked content. - Influential Content: Content from influential accounts that impact the audience, with similar categorization. Each category contains: popularPost, topDomains, topEmojis, topHashtags, topLinks, topMedia, wordcloud.",
                  "inputschema": {
                    "properties": {
                      "audience_content_id": {
                        "description": "The ID of the audience content to retrieve.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "audience_content_id"
                    ],
                    "type": "object"
                  },
                  "name": "get-audience-content"
                },
                {
                  "description": "Generates a comprehensive summary of an Audiense report, including segment details, top insights, and influencers.",
                  "inputschema": {
                    "properties": {
                      "report_id": {
                        "description": "The ID of the intelligence report to summarize.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "report_id"
                    ],
                    "type": "object"
                  },
                  "name": "report-summary"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Automata-Labs-team": {
      "mcpproviderid": "Automata-Labs-team",
      "self": "#/mcpproviders/Automata-Labs-team",
      "xid": "/mcpproviders/Automata-Labs-team",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:45.92569848Z",
      "modifiedat": "2025-05-12T08:20:45.92569848Z",

      "serversurl": "#/mcpproviders/Automata-Labs-team/servers",
      "servers": {
        "code-sandbox-mcp": {
          "serverid": "code-sandbox-mcp",
          "self": "#/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp",
          "xid": "/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp",

          "metaurl": "#/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp/meta",
          "meta": {
            "serverid": "code-sandbox-mcp",
            "self": "#/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp/meta",
            "xid": "/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:45.92569848Z",
            "modifiedat": "2025-05-12T08:20:45.92569848Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp/versions",
          "versions": {
            "1": {
              "serverid": "code-sandbox-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp/versions/1",
              "xid": "/mcpproviders/Automata-Labs-team/servers/code-sandbox-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.Automata-Labs-team/code-sandbox-mcp",
              "isdefault": true,
              "description": "A secure sandbox environment for executing code within Docker containers. This MCP server provides AI applications with a safe and isolated environment for running code while maintaining security through containerization.",
              "createdat": "2025-05-12T08:20:45.92569848Z",
              "modifiedat": "2025-05-12T08:20:45.92569848Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "docker",
                  "package_name": "code-sandbox-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "Automata-Labs-team/code-sandbox-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Initialize a new compute environment for code execution. Creates a container based on the specified Docker image.",
                  "inputschema": {
                    "properties": {
                      "image": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "sandbox_initialize"
                },
                {
                  "description": "Copy a directory to the sandboxed filesystem.",
                  "inputschema": {
                    "properties": {
                      "container_id": {
                        "type": "string"
                      },
                      "dest_dir": {
                        "type": "string"
                      },
                      "local_src_dir": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "container_id",
                      "local_src_dir"
                    ],
                    "type": "object"
                  },
                  "name": "copy_project"
                },
                {
                  "description": "Write a file to the sandboxed filesystem.",
                  "inputschema": {
                    "properties": {
                      "container_id": {
                        "type": "string"
                      },
                      "dest_dir": {
                        "type": "string"
                      },
                      "file_contents": {
                        "type": "string"
                      },
                      "file_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "container_id",
                      "file_name",
                      "file_contents"
                    ],
                    "type": "object"
                  },
                  "name": "write_file"
                },
                {
                  "description": "Execute commands in the sandboxed environment.",
                  "inputschema": {
                    "properties": {
                      "commands": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "container_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "container_id",
                      "commands"
                    ],
                    "type": "object"
                  },
                  "name": "sandbox_exec"
                },
                {
                  "description": "Copy a single file to the sandboxed filesystem.",
                  "inputschema": {
                    "properties": {
                      "container_id": {
                        "type": "string"
                      },
                      "dest_path": {
                        "type": "string"
                      },
                      "local_src_file": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "container_id",
                      "local_src_file"
                    ],
                    "type": "object"
                  },
                  "name": "copy_file"
                },
                {
                  "description": "Stop and remove a running container sandbox.",
                  "inputschema": {
                    "properties": {
                      "container_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "container_id"
                    ],
                    "type": "object"
                  },
                  "name": "sandbox_stop"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Bankless": {
      "mcpproviderid": "Bankless",
      "self": "#/mcpproviders/Bankless",
      "xid": "/mcpproviders/Bankless",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:13.868100298Z",
      "modifiedat": "2025-05-12T08:21:13.868100298Z",

      "serversurl": "#/mcpproviders/Bankless/servers",
      "servers": {
        "onchain-mcp": {
          "serverid": "onchain-mcp",
          "self": "#/mcpproviders/Bankless/servers/onchain-mcp",
          "xid": "/mcpproviders/Bankless/servers/onchain-mcp",

          "metaurl": "#/mcpproviders/Bankless/servers/onchain-mcp/meta",
          "meta": {
            "serverid": "onchain-mcp",
            "self": "#/mcpproviders/Bankless/servers/onchain-mcp/meta",
            "xid": "/mcpproviders/Bankless/servers/onchain-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:13.868100298Z",
            "modifiedat": "2025-05-12T08:21:13.868100298Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Bankless/servers/onchain-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Bankless/servers/onchain-mcp/versions",
          "versions": {
            "1": {
              "serverid": "onchain-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/Bankless/servers/onchain-mcp/versions/1",
              "xid": "/mcpproviders/Bankless/servers/onchain-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.Bankless/onchain-mcp",
              "isdefault": true,
              "description": "MCP (Model Context Protocol) server for blockchain data interaction through the Bankless API.",
              "createdat": "2025-05-12T08:21:13.868100298Z",
              "modifiedat": "2025-05-12T08:21:13.868100298Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/bankless-onchain-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "Bankless/onchain-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Read contract state from a blockchain. important:  \n                \n                In case of a tuple, don't use type tuple, but specify the inner types (found in the source) in order. For nested structs, include the substructs types.\n    \n    Example: \n    struct DataTypeA {\n    DataTypeB b;\n    //the liquidity index. Expressed in ray\n    uint128 liquidityIndex;\n    }\n    \n    struct DataTypeB {\n    address token;\n    }\n    \n    results in outputs for function with return type DataTypeA (tuple in abi): outputs: [{\"type\": \"address\"}, {\"type\": \"uint128\"}]",
                  "inputschema": {
                    "properties": {
                      "contract": {
                        "type": "string"
                      },
                      "inputs": {
                        "items": {
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "value": {}
                          },
                          "required": [
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "method": {
                        "type": "string"
                      },
                      "network": {
                        "type": "string"
                      },
                      "outputs": {
                        "items": {
                          "properties": {
                            "type": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "network",
                      "contract",
                      "method",
                      "inputs",
                      "outputs"
                    ],
                    "type": "object"
                  },
                  "name": "read_contract"
                },
                {
                  "description": "Gets the proxy address for a given network and contract",
                  "inputschema": {
                    "properties": {
                      "contract": {
                        "type": "string"
                      },
                      "network": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "contract"
                    ],
                    "type": "object"
                  },
                  "name": "get_proxy"
                },
                {
                  "description": "Gets the ABI for a given contract on a specific network",
                  "inputschema": {
                    "properties": {
                      "contract": {
                        "type": "string"
                      },
                      "network": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "contract"
                    ],
                    "type": "object"
                  },
                  "name": "get_abi"
                },
                {
                  "description": "Gets the source code for a given contract on a specific network",
                  "inputschema": {
                    "properties": {
                      "contract": {
                        "type": "string"
                      },
                      "network": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "contract"
                    ],
                    "type": "object"
                  },
                  "name": "get_source"
                },
                {
                  "description": "Fetches event logs for a given network and filter criteria",
                  "inputschema": {
                    "properties": {
                      "addresses": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "fromBlock": {
                        "type": [
                          "string",
                          "number",
                          "null"
                        ]
                      },
                      "network": {
                        "type": "string"
                      },
                      "optionalTopics": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "toBlock": {
                        "type": [
                          "string",
                          "number",
                          "null"
                        ]
                      },
                      "topic": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "addresses",
                      "topic"
                    ],
                    "type": "object"
                  },
                  "name": "get_events"
                },
                {
                  "description": "Builds an event topic signature based on event name and arguments",
                  "inputschema": {
                    "properties": {
                      "arguments": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "name": {
                        "type": "string"
                      },
                      "network": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "name",
                      "arguments"
                    ],
                    "type": "object"
                  },
                  "name": "build_event_topic"
                },
                {
                  "description": "Gets transaction history for a user and optional contract",
                  "inputschema": {
                    "properties": {
                      "contract": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "includeData": {
                        "type": [
                          "boolean",
                          "null"
                        ]
                      },
                      "methodId": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "network": {
                        "type": "string"
                      },
                      "startBlock": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "user": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "user"
                    ],
                    "type": "object"
                  },
                  "name": "get_transaction_history_for_user"
                },
                {
                  "description": "Gets detailed information about a specific transaction",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "type": "string"
                      },
                      "txHash": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "txHash"
                    ],
                    "type": "object"
                  },
                  "name": "get_transaction_info"
                },
                {
                  "description": "Gets all token balances for a given address on a specific network",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "type": "string"
                      },
                      "network": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "address"
                    ],
                    "type": "object"
                  },
                  "name": "get_token_balances_on_network"
                },
                {
                  "description": "Gets detailed information about a specific block by number or hash",
                  "inputschema": {
                    "properties": {
                      "blockId": {
                        "type": [
                          "string",
                          "number"
                        ]
                      },
                      "network": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "network",
                      "blockId"
                    ],
                    "type": "object"
                  },
                  "name": "get_block_info"
                }
              ],
              "version_detail": {
                "version": "0.6.2"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ChristianHinge": {
      "mcpproviderid": "ChristianHinge",
      "self": "#/mcpproviders/ChristianHinge",
      "xid": "/mcpproviders/ChristianHinge",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:12.748585989Z",
      "modifiedat": "2025-05-12T08:18:12.748585989Z",

      "serversurl": "#/mcpproviders/ChristianHinge/servers",
      "servers": {
        "dicom-mcp": {
          "serverid": "dicom-mcp",
          "self": "#/mcpproviders/ChristianHinge/servers/dicom-mcp",
          "xid": "/mcpproviders/ChristianHinge/servers/dicom-mcp",

          "metaurl": "#/mcpproviders/ChristianHinge/servers/dicom-mcp/meta",
          "meta": {
            "serverid": "dicom-mcp",
            "self": "#/mcpproviders/ChristianHinge/servers/dicom-mcp/meta",
            "xid": "/mcpproviders/ChristianHinge/servers/dicom-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:12.748585989Z",
            "modifiedat": "2025-05-12T08:18:12.748585989Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ChristianHinge/servers/dicom-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ChristianHinge/servers/dicom-mcp/versions",
          "versions": {
            "1": {
              "serverid": "dicom-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ChristianHinge/servers/dicom-mcp/versions/1",
              "xid": "/mcpproviders/ChristianHinge/servers/dicom-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ChristianHinge/dicom-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol server for DICOM (Digital Imaging and Communications in Medicine) interactions. This server provides tools to query and interact with DICOM servers, enabling Large Language Models to access and analyze medical imaging metadata.",
              "createdat": "2025-05-12T08:18:12.748585989Z",
              "modifiedat": "2025-05-12T08:18:12.748585989Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [],
              "remotes": [],
              "repo_ref": "ChristianHinge/dicom-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Lists all configured DICOM nodes and calling AE titles",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_dicom_nodes"
                },
                {
                  "description": "Switches to a different configured DICOM node",
                  "inputschema": {
                    "properties": {
                      "node_name": {
                        "description": "Name of the node to switch to",
                        "type": "string"
                      }
                    },
                    "required": [
                      "node_name"
                    ],
                    "type": "object"
                  },
                  "name": "switch_dicom_node"
                },
                {
                  "description": "Switches to a different configured calling AE title",
                  "inputschema": {
                    "properties": {
                      "aet_name": {
                        "description": "Name of the calling AE title to switch to",
                        "type": "string"
                      }
                    },
                    "required": [
                      "aet_name"
                    ],
                    "type": "object"
                  },
                  "name": "switch_calling_aet"
                },
                {
                  "description": "Tests connectivity to the configured DICOM node using C-ECHO",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "verify_connection"
                },
                {
                  "description": "Search for patients matching specified criteria",
                  "inputschema": {
                    "properties": {
                      "additional_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "attribute_preset": {
                        "type": "string"
                      },
                      "birth_date": {
                        "type": "string"
                      },
                      "exclude_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "name_pattern": {
                        "description": "Patient name pattern (can include wildcards)",
                        "type": "string"
                      },
                      "patient_id": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "query_patients"
                },
                {
                  "description": "Search for studies matching specified criteria",
                  "inputschema": {
                    "properties": {
                      "accession_number": {
                        "type": "string"
                      },
                      "additional_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "attribute_preset": {
                        "type": "string"
                      },
                      "exclude_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "modality_in_study": {
                        "type": "string"
                      },
                      "patient_id": {
                        "type": "string"
                      },
                      "study_date": {
                        "type": "string"
                      },
                      "study_description": {
                        "type": "string"
                      },
                      "study_instance_uid": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "query_studies"
                },
                {
                  "description": "Search for series within a study",
                  "inputschema": {
                    "properties": {
                      "additional_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "attribute_preset": {
                        "type": "string"
                      },
                      "exclude_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "modality": {
                        "type": "string"
                      },
                      "series_description": {
                        "type": "string"
                      },
                      "series_instance_uid": {
                        "type": "string"
                      },
                      "series_number": {
                        "type": "string"
                      },
                      "study_instance_uid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "study_instance_uid"
                    ],
                    "type": "object"
                  },
                  "name": "query_series"
                },
                {
                  "description": "Search for instances within a series",
                  "inputschema": {
                    "properties": {
                      "additional_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "attribute_preset": {
                        "type": "string"
                      },
                      "exclude_attributes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "instance_number": {
                        "type": "string"
                      },
                      "series_instance_uid": {
                        "type": "string"
                      },
                      "sop_instance_uid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "series_instance_uid"
                    ],
                    "type": "object"
                  },
                  "name": "query_instances"
                },
                {
                  "description": "Move a DICOM series to another DICOM node",
                  "inputschema": {
                    "properties": {
                      "destination_node": {
                        "type": "string"
                      },
                      "series_instance_uid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "destination_node",
                      "series_instance_uid"
                    ],
                    "type": "object"
                  },
                  "name": "move_series"
                },
                {
                  "description": "Move a DICOM study to another DICOM node",
                  "inputschema": {
                    "properties": {
                      "destination_node": {
                        "type": "string"
                      },
                      "study_instance_uid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "destination_node",
                      "study_instance_uid"
                    ],
                    "type": "object"
                  },
                  "name": "move_study"
                },
                {
                  "description": "Get all available attribute presets for DICOM queries",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_attribute_presets"
                },
                {
                  "description": "Retrieve a DICOM instance with encapsulated PDF and extract its text content",
                  "inputschema": {
                    "properties": {
                      "series_instance_uid": {
                        "type": "string"
                      },
                      "sop_instance_uid": {
                        "type": "string"
                      },
                      "study_instance_uid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "study_instance_uid",
                      "series_instance_uid",
                      "sop_instance_uid"
                    ],
                    "type": "object"
                  },
                  "name": "extract_pdf_text_from_dicom"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ChristophEnglisch": {
      "mcpproviderid": "ChristophEnglisch",
      "self": "#/mcpproviders/ChristophEnglisch",
      "xid": "/mcpproviders/ChristophEnglisch",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:00.38533069Z",
      "modifiedat": "2025-05-12T08:21:00.38533069Z",

      "serversurl": "#/mcpproviders/ChristophEnglisch/servers",
      "servers": {
        "keycloak-model-context-protocol": {
          "serverid": "keycloak-model-context-protocol",
          "self": "#/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol",
          "xid": "/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol",

          "metaurl": "#/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol/meta",
          "meta": {
            "serverid": "keycloak-model-context-protocol",
            "self": "#/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol/meta",
            "xid": "/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:00.38533069Z",
            "modifiedat": "2025-05-12T08:21:00.38533069Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol/versions",
          "versions": {
            "1": {
              "serverid": "keycloak-model-context-protocol",
              "versionid": "1",
              "self": "#/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol/versions/1",
              "xid": "/mcpproviders/ChristophEnglisch/servers/keycloak-model-context-protocol/versions/1",
              "epoch": 1,
              "name": "io.github.ChristophEnglisch/keycloak-model-context-protocol",
              "isdefault": true,
              "description": "A Model Context Protocol server for Keycloak administration, providing tools to manage users and realms.",
              "createdat": "2025-05-12T08:21:00.38533069Z",
              "modifiedat": "2025-05-12T08:21:00.38533069Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "URL of the Keycloak server",
                        "name": "KEYCLOAK_URL",
                        "required": false
                      },
                      {
                        "description": "Keycloak admin username",
                        "name": "KEYCLOAK_ADMIN",
                        "required": false
                      },
                      {
                        "description": "Keycloak admin password",
                        "name": "KEYCLOAK_ADMIN_PASSWORD",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "keycloak-model-context-protocol"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "keycloak-model-context-protocol"
                }
              ],
              "remotes": [],
              "repo_ref": "ChristophEnglisch/keycloak-model-context-protocol",
              "resources": [],
              "tools": [
                {
                  "description": "Create a new user in a specific realm",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "format": "email",
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "realm": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "realm",
                      "username",
                      "email",
                      "firstName",
                      "lastName"
                    ],
                    "type": "object"
                  },
                  "name": "create-user"
                },
                {
                  "description": "Delete a user from a specific realm",
                  "inputschema": {
                    "properties": {
                      "realm": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "realm",
                      "userId"
                    ],
                    "type": "object"
                  },
                  "name": "delete-user"
                },
                {
                  "description": "List all available realms",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list-realms"
                },
                {
                  "description": "List users in a specific realm",
                  "inputschema": {
                    "properties": {
                      "realm": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "realm"
                    ],
                    "type": "object"
                  },
                  "name": "list-users"
                }
              ],
              "version_detail": {
                "version": "0.0.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ChronulusAI": {
      "mcpproviderid": "ChronulusAI",
      "self": "#/mcpproviders/ChronulusAI",
      "xid": "/mcpproviders/ChronulusAI",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:57.700870198Z",
      "modifiedat": "2025-05-12T08:17:57.700870198Z",

      "serversurl": "#/mcpproviders/ChronulusAI/servers",
      "servers": {
        "chronulus-mcp": {
          "serverid": "chronulus-mcp",
          "self": "#/mcpproviders/ChronulusAI/servers/chronulus-mcp",
          "xid": "/mcpproviders/ChronulusAI/servers/chronulus-mcp",

          "metaurl": "#/mcpproviders/ChronulusAI/servers/chronulus-mcp/meta",
          "meta": {
            "serverid": "chronulus-mcp",
            "self": "#/mcpproviders/ChronulusAI/servers/chronulus-mcp/meta",
            "xid": "/mcpproviders/ChronulusAI/servers/chronulus-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:57.700870198Z",
            "modifiedat": "2025-05-12T08:17:57.700870198Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ChronulusAI/servers/chronulus-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ChronulusAI/servers/chronulus-mcp/versions",
          "versions": {
            "1": {
              "serverid": "chronulus-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ChronulusAI/servers/chronulus-mcp/versions/1",
              "xid": "/mcpproviders/ChronulusAI/servers/chronulus-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ChronulusAI/chronulus-mcp",
              "isdefault": true,
              "description": "Chronulus MCP provides access to the Chronulus AI platform of forecasting and prediction agents.",
              "createdat": "2025-05-12T08:17:57.700870198Z",
              "modifiedat": "2025-05-12T08:17:57.700870198Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "chronulus-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "ChronulusAI/chronulus-mcp",
              "resources": [
                {
                  "description": "Get scorecard.tsx",
                  "mimetype": "text/javascript",
                  "name": "Scorecard React Template",
                  "uritemplate": "chronulus-react://Scorecard.jsx"
                },
                {
                  "description": "Get BetaPlot.jsx",
                  "mimetype": "text/javascript",
                  "name": "Beta Plot",
                  "uritemplate": "chronulus-react://BetaPlot.jsx"
                }
              ],
              "tools": [
                {
                  "description": "A tool that creates a new Chronulus Session and returns a session_id",
                  "name": "create_chronulus_session"
                },
                {
                  "description": "This tool creates a NormalizedForecaster agent with your session and input data model and then provides a forecast input data to the agent and returns the prediction data and text explanation from the agent.",
                  "name": "create_forecasting_agent_and_get_forecast"
                },
                {
                  "description": "This tool provides a forecast input to a previous created Chronulus NormalizedForecaster agent and returns the prediction data and text explanation from the agent.",
                  "name": "reuse_forecasting_agent_and_get_forecast"
                },
                {
                  "description": "A tool that rescales the prediction data (values between 0 and 1) from the NormalizedForecaster agent to scale required for a use case",
                  "name": "rescale_forecast"
                },
                {
                  "description": "A tool that saves a Chronulus forecast from NormalizedForecaster to separate CSV and TXT files",
                  "name": "save_forecast"
                },
                {
                  "description": "This tool creates a BinaryPredictor agent with your session and input data model and then provides prediction input data to the agent and returns the consensus a prediction from a panel of experts along with their individual estimates and text explanations.",
                  "name": "create_prediction_agent_and_get_predictions"
                },
                {
                  "description": "This tool provides prediction input data to a previously created Chronulus BinaryPredictor agent and returns the consensus a prediction from a panel of experts along with their individual estimates and text explanations.",
                  "name": "reuse_prediction_agent_and_get_prediction"
                },
                {
                  "description": "A tool that saves an analysis of a BinaryPredictor prediction to HTML.",
                  "name": "save_prediction_analysis_html"
                },
                {
                  "description": "A tool that retrieves the risk assessment scorecard for the Chronulus Session in Markdown format",
                  "name": "get_risk_assessment_scorecard"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "CircleCI-Public": {
      "mcpproviderid": "CircleCI-Public",
      "self": "#/mcpproviders/CircleCI-Public",
      "xid": "/mcpproviders/CircleCI-Public",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:52.36363895Z",
      "modifiedat": "2025-05-12T08:19:52.36363895Z",

      "serversurl": "#/mcpproviders/CircleCI-Public/servers",
      "servers": {
        "mcp-server-circleci": {
          "serverid": "mcp-server-circleci",
          "self": "#/mcpproviders/CircleCI-Public/servers/mcp-server-circleci",
          "xid": "/mcpproviders/CircleCI-Public/servers/mcp-server-circleci",

          "metaurl": "#/mcpproviders/CircleCI-Public/servers/mcp-server-circleci/meta",
          "meta": {
            "serverid": "mcp-server-circleci",
            "self": "#/mcpproviders/CircleCI-Public/servers/mcp-server-circleci/meta",
            "xid": "/mcpproviders/CircleCI-Public/servers/mcp-server-circleci/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:52.36363895Z",
            "modifiedat": "2025-05-12T08:19:52.36363895Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/CircleCI-Public/servers/mcp-server-circleci/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/CircleCI-Public/servers/mcp-server-circleci/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-circleci",
              "versionid": "1",
              "self": "#/mcpproviders/CircleCI-Public/servers/mcp-server-circleci/versions/1",
              "xid": "/mcpproviders/CircleCI-Public/servers/mcp-server-circleci/versions/1",
              "epoch": 1,
              "name": "io.github.CircleCI-Public/mcp-server-circleci",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) Server for CircleCI enabling natural language interaction with CircleCI pipelines and logs.",
              "createdat": "2025-05-12T08:19:52.36363895Z",
              "modifiedat": "2025-05-12T08:19:52.36363895Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "CircleCI API token for authentication",
                        "name": "CIRCLECI_TOKEN",
                        "required": true
                      },
                      {
                        "description": "Optional base URL for CircleCI on-prem customers",
                        "name": "CIRCLECI_BASE_URL",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@circleci/mcp-server-circleci"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@circleci/mcp-server-circleci"
                }
              ],
              "remotes": [],
              "repo_ref": "CircleCI-Public/mcp-server-circleci",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ClickHouse": {
      "mcpproviderid": "ClickHouse",
      "self": "#/mcpproviders/ClickHouse",
      "xid": "/mcpproviders/ClickHouse",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:27.461831021Z",
      "modifiedat": "2025-05-12T08:22:27.461831021Z",

      "serversurl": "#/mcpproviders/ClickHouse/servers",
      "servers": {
        "mcp-clickhouse": {
          "serverid": "mcp-clickhouse",
          "self": "#/mcpproviders/ClickHouse/servers/mcp-clickhouse",
          "xid": "/mcpproviders/ClickHouse/servers/mcp-clickhouse",

          "metaurl": "#/mcpproviders/ClickHouse/servers/mcp-clickhouse/meta",
          "meta": {
            "serverid": "mcp-clickhouse",
            "self": "#/mcpproviders/ClickHouse/servers/mcp-clickhouse/meta",
            "xid": "/mcpproviders/ClickHouse/servers/mcp-clickhouse/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:27.461831021Z",
            "modifiedat": "2025-05-12T08:22:27.461831021Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ClickHouse/servers/mcp-clickhouse/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ClickHouse/servers/mcp-clickhouse/versions",
          "versions": {
            "1": {
              "serverid": "mcp-clickhouse",
              "versionid": "1",
              "self": "#/mcpproviders/ClickHouse/servers/mcp-clickhouse/versions/1",
              "xid": "/mcpproviders/ClickHouse/servers/mcp-clickhouse/versions/1",
              "epoch": 1,
              "name": "io.github.ClickHouse/mcp-clickhouse",
              "isdefault": true,
              "description": "An MCP server for ClickHouse.",
              "createdat": "2025-05-12T08:22:27.461831021Z",
              "modifiedat": "2025-05-12T08:22:27.461831021Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "The hostname of your ClickHouse server",
                        "name": "CLICKHOUSE_HOST",
                        "required": true
                      },
                      {
                        "description": "The username for authentication",
                        "name": "CLICKHOUSE_USER",
                        "required": true
                      },
                      {
                        "description": "The password for authentication",
                        "name": "CLICKHOUSE_PASSWORD",
                        "required": true
                      },
                      {
                        "description": "The port of the ClickHouse server",
                        "name": "CLICKHOUSE_PORT",
                        "required": false
                      },
                      {
                        "description": "Use secure connection",
                        "name": "CLICKHOUSE_SECURE",
                        "required": false
                      },
                      {
                        "description": "Verify SSL certificates",
                        "name": "CLICKHOUSE_VERIFY",
                        "required": false
                      },
                      {
                        "description": "Connection timeout in seconds",
                        "name": "CLICKHOUSE_CONNECT_TIMEOUT",
                        "required": false
                      },
                      {
                        "description": "Send/receive timeout in seconds",
                        "name": "CLICKHOUSE_SEND_RECEIVE_TIMEOUT",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp-clickhouse"
                }
              ],
              "remotes": [],
              "repo_ref": "ClickHouse/mcp-clickhouse",
              "resources": [],
              "tools": [
                {
                  "description": "Run a SELECT query in a ClickHouse database",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SELECT query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "run_select_query"
                },
                {
                  "description": "List available ClickHouse databases",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_databases"
                },
                {
                  "description": "List available ClickHouse tables in a database, including schema, comment, row count, and column count.",
                  "inputschema": {
                    "properties": {
                      "database": {
                        "description": "The name of the database",
                        "type": "string"
                      },
                      "like": {
                        "description": "Optional pattern to filter tables",
                        "type": "string"
                      }
                    },
                    "required": [
                      "database"
                    ],
                    "type": "object"
                  },
                  "name": "list_tables"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "CodeLogicIncEngineering": {
      "mcpproviderid": "CodeLogicIncEngineering",
      "self": "#/mcpproviders/CodeLogicIncEngineering",
      "xid": "/mcpproviders/CodeLogicIncEngineering",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:40.218796209Z",
      "modifiedat": "2025-05-12T08:19:40.218796209Z",

      "serversurl": "#/mcpproviders/CodeLogicIncEngineering/servers",
      "servers": {
        "codelogic-mcp-server": {
          "serverid": "codelogic-mcp-server",
          "self": "#/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server",
          "xid": "/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server",

          "metaurl": "#/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server/meta",
          "meta": {
            "serverid": "codelogic-mcp-server",
            "self": "#/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server/meta",
            "xid": "/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:40.218796209Z",
            "modifiedat": "2025-05-12T08:19:40.218796209Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "codelogic-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server/versions/1",
              "xid": "/mcpproviders/CodeLogicIncEngineering/servers/codelogic-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.CodeLogicIncEngineering/codelogic-mcp-server",
              "isdefault": true,
              "description": "An MCP Server to utilize Codelogic's rich software dependency data in your AI programming assistant.",
              "createdat": "2025-05-12T08:19:40.218796209Z",
              "modifiedat": "2025-05-12T08:19:40.218796209Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "URL of the CodeLogic server",
                        "name": "CODELOGIC_SERVER_HOST",
                        "required": true
                      },
                      {
                        "description": "Username for authentication",
                        "name": "CODELOGIC_USERNAME",
                        "required": true
                      },
                      {
                        "description": "Password for authentication",
                        "name": "CODELOGIC_PASSWORD",
                        "required": true
                      },
                      {
                        "description": "Workspace name in CodeLogic",
                        "name": "CODELOGIC_WORKSPACE_NAME",
                        "required": true
                      },
                      {
                        "description": "Enable debug mode",
                        "name": "CODELOGIC_DEBUG_MODE",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "codelogic-mcp-server@latest"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "astral-uv",
                  "package_name": "codelogic-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "CodeLogicIncEngineering/codelogic-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Analyze impacts of modifying a specific method within a given class or type.\nRecommended workflow:\n1. Use this tool before implementing code changes\n2. Run the tool against methods or functions that are being modified\n3. Carefully review the impact analysis results to understand potential downstream effects\nParticularly crucial when AI-suggested modifications are being considered.",
                  "inputschema": {
                    "properties": {
                      "class": {
                        "description": "Name of the class containing the method",
                        "type": "string"
                      },
                      "method": {
                        "description": "Name of the method being analyzed",
                        "type": "string"
                      }
                    },
                    "required": [
                      "method",
                      "class"
                    ],
                    "type": "object"
                  },
                  "name": "codelogic-method-impact"
                },
                {
                  "description": "Analyze impacts between code and database entities.\nRecommended workflow:\n1. Use this tool before implementing code or database changes\n2. Search for the relevant database entity\n3. Review the impact analysis to understand which code depends on this database object and vice versa\nParticularly crucial when AI-suggested modifications are being considered or when modifying SQL code.",
                  "inputschema": {
                    "properties": {
                      "entity_type": {
                        "description": "Type of database entity to search for (column, table, or view)",
                        "enum": [
                          "column",
                          "table",
                          "view"
                        ],
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the database entity to search for",
                        "type": "string"
                      },
                      "table_or_view": {
                        "description": "Name of the table or view containing the column (required for columns only)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "entity_type",
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "codelogic-database-impact"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "CoderGamester": {
      "mcpproviderid": "CoderGamester",
      "self": "#/mcpproviders/CoderGamester",
      "xid": "/mcpproviders/CoderGamester",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:56.233124498Z",
      "modifiedat": "2025-05-12T08:17:56.233124498Z",

      "serversurl": "#/mcpproviders/CoderGamester/servers",
      "servers": {
        "mcp-unity": {
          "serverid": "mcp-unity",
          "self": "#/mcpproviders/CoderGamester/servers/mcp-unity",
          "xid": "/mcpproviders/CoderGamester/servers/mcp-unity",

          "metaurl": "#/mcpproviders/CoderGamester/servers/mcp-unity/meta",
          "meta": {
            "serverid": "mcp-unity",
            "self": "#/mcpproviders/CoderGamester/servers/mcp-unity/meta",
            "xid": "/mcpproviders/CoderGamester/servers/mcp-unity/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:56.233124498Z",
            "modifiedat": "2025-05-12T08:17:56.233124498Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/CoderGamester/servers/mcp-unity/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/CoderGamester/servers/mcp-unity/versions",
          "versions": {
            "1": {
              "serverid": "mcp-unity",
              "versionid": "1",
              "self": "#/mcpproviders/CoderGamester/servers/mcp-unity/versions/1",
              "xid": "/mcpproviders/CoderGamester/servers/mcp-unity/versions/1",
              "epoch": 1,
              "name": "io.github.CoderGamester/mcp-unity",
              "isdefault": true,
              "description": "MCP Unity is an implementation of the Model Context Protocol for Unity Editor, allowing AI assistants to interact with your Unity projects. This package provides a bridge between Unity and a Node.js server that implements the MCP protocol, enabling AI agents like Claude, Windsurf, and Cursor to execute operations within the Unity Editor.",
              "createdat": "2025-05-12T08:17:56.233124498Z",
              "modifiedat": "2025-05-12T08:17:56.233124498Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "main.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@coderGamester/mcp-unity"
                }
              ],
              "remotes": [],
              "repo_ref": "CoderGamester/mcp-unity",
              "resources": [
                {
                  "description": "Retrieve tests from Unity's Test Runner",
                  "mimetype": "application/json",
                  "name": "get_tests",
                  "uritemplate": "unity://tests/{testMode}"
                },
                {
                  "description": "Retrieve a GameObject by ID or path",
                  "mimetype": "application/json",
                  "name": "get_gameobject",
                  "uritemplate": "unity://gameobject/{id}"
                },
                {
                  "description": "Retrieve Unity menu items",
                  "mimetype": "application/json",
                  "name": "get_menuitems",
                  "uritemplate": "unity://menuitems"
                },
                {
                  "description": "Retrieve Unity console logs",
                  "mimetype": "application/json",
                  "name": "get_consolelogs",
                  "uritemplate": "unity://consolelogs"
                },
                {
                  "description": "Retrieve Unity scene hierarchy",
                  "mimetype": "application/json",
                  "name": "get_hierarchy",
                  "uritemplate": "unity://hierarchy"
                },
                {
                  "description": "Retrieve Unity project packages",
                  "mimetype": "application/json",
                  "name": "get_packages",
                  "uritemplate": "unity://packages"
                },
                {
                  "description": "Retrieve Unity project assets",
                  "mimetype": "application/json",
                  "name": "get_assets",
                  "uritemplate": "unity://assets"
                }
              ],
              "tools": [
                {
                  "description": "Tool to interact with Unity menu items",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "menuItemTool"
                },
                {
                  "description": "Tool to select a GameObject in Unity",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "selectGameObjectTool"
                },
                {
                  "description": "Tool to add a package to Unity project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "addPackageTool"
                },
                {
                  "description": "Tool to run Unity tests",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "runTestsTool"
                },
                {
                  "description": "Tool to send notification messages",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "notifyMessageTool"
                },
                {
                  "description": "Tool to update Unity components",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "updateComponentTool"
                },
                {
                  "description": "Tool to add assets to Unity scene",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "addAssetToSceneTool"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Coding-Solo": {
      "mcpproviderid": "Coding-Solo",
      "self": "#/mcpproviders/Coding-Solo",
      "xid": "/mcpproviders/Coding-Solo",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:44.373678629Z",
      "modifiedat": "2025-05-12T08:17:44.373678629Z",

      "serversurl": "#/mcpproviders/Coding-Solo/servers",
      "servers": {
        "godot-mcp": {
          "serverid": "godot-mcp",
          "self": "#/mcpproviders/Coding-Solo/servers/godot-mcp",
          "xid": "/mcpproviders/Coding-Solo/servers/godot-mcp",

          "metaurl": "#/mcpproviders/Coding-Solo/servers/godot-mcp/meta",
          "meta": {
            "serverid": "godot-mcp",
            "self": "#/mcpproviders/Coding-Solo/servers/godot-mcp/meta",
            "xid": "/mcpproviders/Coding-Solo/servers/godot-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:44.373678629Z",
            "modifiedat": "2025-05-12T08:17:44.373678629Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Coding-Solo/servers/godot-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Coding-Solo/servers/godot-mcp/versions",
          "versions": {
            "1": {
              "serverid": "godot-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/Coding-Solo/servers/godot-mcp/versions/1",
              "xid": "/mcpproviders/Coding-Solo/servers/godot-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.Coding-Solo/godot-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for interacting with the Godot game engine. It enables AI assistants to launch the Godot editor, run Godot projects, capture debug output, and control project execution.",
              "createdat": "2025-05-12T08:17:44.373678629Z",
              "modifiedat": "2025-05-12T08:17:44.373678629Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Enable debug mode (set to 'true' to enable)",
                        "name": "DEBUG",
                        "required": false
                      },
                      {
                        "description": "Path to the Godot executable",
                        "name": "GODOT_PATH",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/godot-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "Coding-Solo/godot-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Launch Godot editor for a specific project",
                  "inputschema": {
                    "properties": {
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath"
                    ],
                    "type": "object"
                  },
                  "name": "launch_editor"
                },
                {
                  "description": "Run the Godot project and capture output",
                  "inputschema": {
                    "properties": {
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      },
                      "scene": {
                        "description": "Optional: Specific scene to run",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath"
                    ],
                    "type": "object"
                  },
                  "name": "run_project"
                },
                {
                  "description": "Get the current debug output and errors",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_debug_output"
                },
                {
                  "description": "Stop the currently running Godot project",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "stop_project"
                },
                {
                  "description": "Get the installed Godot version",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_godot_version"
                },
                {
                  "description": "List Godot projects in a directory",
                  "inputschema": {
                    "properties": {
                      "directory": {
                        "description": "Directory to search for Godot projects",
                        "type": "string"
                      },
                      "recursive": {
                        "description": "Whether to search recursively (default: false)",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "directory"
                    ],
                    "type": "object"
                  },
                  "name": "list_projects"
                },
                {
                  "description": "Retrieve metadata about a Godot project",
                  "inputschema": {
                    "properties": {
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath"
                    ],
                    "type": "object"
                  },
                  "name": "get_project_info"
                },
                {
                  "description": "Create a new Godot scene file",
                  "inputschema": {
                    "properties": {
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      },
                      "rootNodeType": {
                        "default": "Node2D",
                        "description": "Type of the root node (e.g., Node2D, Node3D)",
                        "type": "string"
                      },
                      "scenePath": {
                        "description": "Path where the scene file will be saved (relative to project)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath",
                      "scenePath"
                    ],
                    "type": "object"
                  },
                  "name": "create_scene"
                },
                {
                  "description": "Add a node to an existing scene",
                  "inputschema": {
                    "properties": {
                      "nodeName": {
                        "description": "Name for the new node",
                        "type": "string"
                      },
                      "nodeType": {
                        "description": "Type of node to add (e.g., Sprite2D, CollisionShape2D)",
                        "type": "string"
                      },
                      "parentNodePath": {
                        "default": "root",
                        "description": "Path to the parent node (e.g., \"root\" or \"root/Player\")",
                        "type": "string"
                      },
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Optional properties to set on the node",
                        "type": "object"
                      },
                      "scenePath": {
                        "description": "Path to the scene file (relative to project)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath",
                      "scenePath",
                      "nodeType",
                      "nodeName"
                    ],
                    "type": "object"
                  },
                  "name": "add_node"
                },
                {
                  "description": "Load a sprite into a Sprite2D node",
                  "inputschema": {
                    "properties": {
                      "nodePath": {
                        "description": "Path to the Sprite2D node (e.g., \"root/Player/Sprite2D\")",
                        "type": "string"
                      },
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      },
                      "scenePath": {
                        "description": "Path to the scene file (relative to project)",
                        "type": "string"
                      },
                      "texturePath": {
                        "description": "Path to the texture file (relative to project)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath",
                      "scenePath",
                      "nodePath",
                      "texturePath"
                    ],
                    "type": "object"
                  },
                  "name": "load_sprite"
                },
                {
                  "description": "Export a scene as a MeshLibrary resource",
                  "inputschema": {
                    "properties": {
                      "meshItemNames": {
                        "description": "Optional: Names of specific mesh items to include (defaults to all)",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "outputPath": {
                        "description": "Path where the mesh library (.res) will be saved",
                        "type": "string"
                      },
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      },
                      "scenePath": {
                        "description": "Path to the scene file (.tscn) to export",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath",
                      "scenePath",
                      "outputPath"
                    ],
                    "type": "object"
                  },
                  "name": "export_mesh_library"
                },
                {
                  "description": "Save changes to a scene file",
                  "inputschema": {
                    "properties": {
                      "newPath": {
                        "description": "Optional: New path to save the scene to (for creating variants)",
                        "type": "string"
                      },
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      },
                      "scenePath": {
                        "description": "Path to the scene file (relative to project)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath",
                      "scenePath"
                    ],
                    "type": "object"
                  },
                  "name": "save_scene"
                },
                {
                  "description": "Get the UID for a specific file in a Godot project (for Godot 4.4+)",
                  "inputschema": {
                    "properties": {
                      "filePath": {
                        "description": "Path to the file (relative to project) for which to get the UID",
                        "type": "string"
                      },
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath",
                      "filePath"
                    ],
                    "type": "object"
                  },
                  "name": "get_uid"
                },
                {
                  "description": "Update UID references in a Godot project by resaving resources (for Godot 4.4+)",
                  "inputschema": {
                    "properties": {
                      "projectPath": {
                        "description": "Path to the Godot project directory",
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectPath"
                    ],
                    "type": "object"
                  },
                  "name": "update_project_uids"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ConechoAI": {
      "mcpproviderid": "ConechoAI",
      "self": "#/mcpproviders/ConechoAI",
      "xid": "/mcpproviders/ConechoAI",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:51.2746736Z",
      "modifiedat": "2025-05-12T08:20:51.2746736Z",

      "serversurl": "#/mcpproviders/ConechoAI/servers",
      "servers": {
        "openai-websearch-mcp": {
          "serverid": "openai-websearch-mcp",
          "self": "#/mcpproviders/ConechoAI/servers/openai-websearch-mcp",
          "xid": "/mcpproviders/ConechoAI/servers/openai-websearch-mcp",

          "metaurl": "#/mcpproviders/ConechoAI/servers/openai-websearch-mcp/meta",
          "meta": {
            "serverid": "openai-websearch-mcp",
            "self": "#/mcpproviders/ConechoAI/servers/openai-websearch-mcp/meta",
            "xid": "/mcpproviders/ConechoAI/servers/openai-websearch-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:51.2746736Z",
            "modifiedat": "2025-05-12T08:20:51.2746736Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ConechoAI/servers/openai-websearch-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ConechoAI/servers/openai-websearch-mcp/versions",
          "versions": {
            "1": {
              "serverid": "openai-websearch-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ConechoAI/servers/openai-websearch-mcp/versions/1",
              "xid": "/mcpproviders/ConechoAI/servers/openai-websearch-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ConechoAI/openai-websearch-mcp",
              "isdefault": true,
              "description": "This MCP server provides access to OpenAI's websearch functionality through the Model Context Protocol. It allows AI assistants to search the web during conversations with users, providing up-to-date information that may not be available in the assistant's training data.",
              "createdat": "2025-05-12T08:20:51.2746736Z",
              "modifiedat": "2025-05-12T08:20:51.2746736Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "OPENAI_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "openai-websearch-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uvx",
                  "package_name": "openai-websearch-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "ConechoAI/openai-websearch-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "It allows AI assistants to search the web during conversations with users",
                  "inputschema": {
                    "properties": {
                      "input": {
                        "type": "string"
                      },
                      "model": {
                        "enum": [
                          "gpt-4o",
                          "gpt-4o-mini"
                        ],
                        "type": "string"
                      },
                      "search_context_size": {
                        "enum": [
                          "low",
                          "medium",
                          "high"
                        ],
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "web_search_preview",
                          "web_search_preview_2025_03_11"
                        ],
                        "type": "string"
                      },
                      "user_location": {
                        "properties": {
                          "city": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "region": {
                            "type": "string"
                          },
                          "timezone": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "input",
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "web_search"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "DMontgomery40": {
      "mcpproviderid": "DMontgomery40",
      "self": "#/mcpproviders/DMontgomery40",
      "xid": "/mcpproviders/DMontgomery40",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:04.57100187Z",
      "modifiedat": "2025-05-12T08:18:04.57100187Z",

      "serversurl": "#/mcpproviders/DMontgomery40/servers",
      "servers": {
        "deepseek-mcp-server": {
          "serverid": "deepseek-mcp-server",
          "self": "#/mcpproviders/DMontgomery40/servers/deepseek-mcp-server",
          "xid": "/mcpproviders/DMontgomery40/servers/deepseek-mcp-server",

          "metaurl": "#/mcpproviders/DMontgomery40/servers/deepseek-mcp-server/meta",
          "meta": {
            "serverid": "deepseek-mcp-server",
            "self": "#/mcpproviders/DMontgomery40/servers/deepseek-mcp-server/meta",
            "xid": "/mcpproviders/DMontgomery40/servers/deepseek-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:04.57100187Z",
            "modifiedat": "2025-05-12T08:18:04.57100187Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/DMontgomery40/servers/deepseek-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/DMontgomery40/servers/deepseek-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "deepseek-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/DMontgomery40/servers/deepseek-mcp-server/versions/1",
              "xid": "/mcpproviders/DMontgomery40/servers/deepseek-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.DMontgomery40/deepseek-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for the DeepSeek API, allowing seamless integration of DeepSeek's powerful language models with MCP-compatible applications like Claude Desktop.",
              "createdat": "2025-05-12T08:18:04.57100187Z",
              "modifiedat": "2025-05-12T08:18:04.57100187Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for DeepSeek API",
                        "name": "DEEPSEEK_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "deepseek-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "deepseek-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "DMontgomery40/deepseek-mcp-server",
              "resources": [
                {
                  "description": "Resource exposing available models with their capabilities.",
                  "name": "models",
                  "uritemplate": "models://{modelId}"
                },
                {
                  "description": "Resource exposing configuration options for models.",
                  "name": "model-config",
                  "uritemplate": "config://{modelId}"
                }
              ],
              "tools": [
                {
                  "description": "Chat completion tool for generating responses from DeepSeek models.",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "frequency_penalty": {
                        "maximum": 2,
                        "minimum": -2,
                        "type": "number"
                      },
                      "max_tokens": {
                        "minimum": 1,
                        "type": "integer"
                      },
                      "message": {
                        "type": "string"
                      },
                      "messages": {
                        "items": {
                          "properties": {
                            "content": {
                              "type": "string"
                            },
                            "role": {
                              "enum": [
                                "system",
                                "user",
                                "assistant"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "model": {
                        "type": "string"
                      },
                      "presence_penalty": {
                        "maximum": 2,
                        "minimum": -2,
                        "type": "number"
                      },
                      "temperature": {
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number"
                      },
                      "top_p": {
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number"
                      }
                    },
                    "required": [
                      "model",
                      "temperature",
                      "max_tokens",
                      "top_p",
                      "frequency_penalty",
                      "presence_penalty"
                    ],
                    "type": "object"
                  },
                  "name": "chat_completion"
                },
                {
                  "description": "Multi-turn conversation support maintaining message history and context.",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "frequency_penalty": {
                        "maximum": 2,
                        "minimum": -2,
                        "type": "number"
                      },
                      "max_tokens": {
                        "minimum": 1,
                        "type": "integer"
                      },
                      "messages": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "properties": {
                                "content": {
                                  "properties": {
                                    "text": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "const": "text",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "text"
                                  ],
                                  "type": "object"
                                },
                                "role": {
                                  "enum": [
                                    "system",
                                    "user",
                                    "assistant"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "model": {
                        "type": "string"
                      },
                      "presence_penalty": {
                        "maximum": 2,
                        "minimum": -2,
                        "type": "number"
                      },
                      "temperature": {
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number"
                      },
                      "top_p": {
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number"
                      }
                    },
                    "required": [
                      "model",
                      "temperature",
                      "max_tokens",
                      "top_p",
                      "frequency_penalty",
                      "presence_penalty"
                    ],
                    "type": "object"
                  },
                  "name": "multi_turn_chat"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "DappierAI": {
      "mcpproviderid": "DappierAI",
      "self": "#/mcpproviders/DappierAI",
      "xid": "/mcpproviders/DappierAI",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:51.499692256Z",
      "modifiedat": "2025-05-12T08:17:51.499692256Z",

      "serversurl": "#/mcpproviders/DappierAI/servers",
      "servers": {
        "dappier-mcp": {
          "serverid": "dappier-mcp",
          "self": "#/mcpproviders/DappierAI/servers/dappier-mcp",
          "xid": "/mcpproviders/DappierAI/servers/dappier-mcp",

          "metaurl": "#/mcpproviders/DappierAI/servers/dappier-mcp/meta",
          "meta": {
            "serverid": "dappier-mcp",
            "self": "#/mcpproviders/DappierAI/servers/dappier-mcp/meta",
            "xid": "/mcpproviders/DappierAI/servers/dappier-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:51.499692256Z",
            "modifiedat": "2025-05-12T08:17:51.499692256Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/DappierAI/servers/dappier-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/DappierAI/servers/dappier-mcp/versions",
          "versions": {
            "1": {
              "serverid": "dappier-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/DappierAI/servers/dappier-mcp/versions/1",
              "xid": "/mcpproviders/DappierAI/servers/dappier-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.DappierAI/dappier-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that connects any LLM or Agentic AI to real-time, rights-cleared, proprietary data from trusted sources. Dappier enables your AI to become an expert in anything by providing access to specialized models, including Real-Time Web Search, News, Sports, Financial Stock Market Data, Crypto Data, and exclusive content from premium publishers.",
              "createdat": "2025-05-12T08:17:51.499692256Z",
              "modifiedat": "2025-05-12T08:17:51.499692256Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for accessing Dappier services",
                        "name": "DAPPIER_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "dappier-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "DappierAI/dappier-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves direct answers to real-time queries using AI-powered search. This includes web search results, financial information, news, weather, stock market updates, and more.",
                  "inputschema": {
                    "properties": {
                      "ai_model_id": {
                        "description": "The AI model ID to use for the query. Defaults to am_01j06ytn18ejftedz6dyhz2b15 (Real-Time Data).",
                        "type": "string"
                      },
                      "query": {
                        "description": "The user-provided input string for retrieving real-time data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "dappier_real_time_search"
                },
                {
                  "description": "Provides AI-powered content recommendations based on structured data models. Returns a list of articles with titles, summaries, images, and source URLs.",
                  "inputschema": {
                    "properties": {
                      "data_model_id": {
                        "description": "The data model ID to use for recommendations. Defaults to dm_01j0pb465keqmatq9k83dthx34 (Sports News).",
                        "type": "string"
                      },
                      "num_articles_ref": {
                        "description": "The minimum number of articles to return from the specified reference domain (ref). Defaults to 0.",
                        "type": "integer"
                      },
                      "query": {
                        "description": "The user-provided input string for AI recommendations.",
                        "type": "string"
                      },
                      "ref": {
                        "description": "The site domain where AI recommendations should be displayed. Defaults to None.",
                        "type": "string"
                      },
                      "search_algorithm": {
                        "description": "The search algorithm to use for retrieving articles. Options: most_recent, semantic, most_recent_semantic, trending. Defaults to most_recent.",
                        "type": "string"
                      },
                      "similarity_top_k": {
                        "description": "The number of top documents to retrieve based on similarity. Defaults to 9.",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "dappier_ai_recommendations"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "EduBase": {
      "mcpproviderid": "EduBase",
      "self": "#/mcpproviders/EduBase",
      "xid": "/mcpproviders/EduBase",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:45.635045863Z",
      "modifiedat": "2025-05-12T08:18:45.635045863Z",

      "serversurl": "#/mcpproviders/EduBase/servers",
      "servers": {
        "MCP": {
          "serverid": "MCP",
          "self": "#/mcpproviders/EduBase/servers/MCP",
          "xid": "/mcpproviders/EduBase/servers/MCP",

          "metaurl": "#/mcpproviders/EduBase/servers/MCP/meta",
          "meta": {
            "serverid": "MCP",
            "self": "#/mcpproviders/EduBase/servers/MCP/meta",
            "xid": "/mcpproviders/EduBase/servers/MCP/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:45.635045863Z",
            "modifiedat": "2025-05-12T08:18:45.635045863Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/EduBase/servers/MCP/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/EduBase/servers/MCP/versions",
          "versions": {
            "1": {
              "serverid": "MCP",
              "versionid": "1",
              "self": "#/mcpproviders/EduBase/servers/MCP/versions/1",
              "xid": "/mcpproviders/EduBase/servers/MCP/versions/1",
              "epoch": 1,
              "name": "io.github.EduBase/MCP",
              "isdefault": true,
              "description": "Implementation of the Model Context Protocol (MCP) server for the EduBase platform. It allows MCP clients and LLMs to interact with EduBase account and perform tasks.",
              "createdat": "2025-05-12T08:18:45.635045863Z",
              "modifiedat": "2025-05-12T08:18:45.635045863Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "URL of the EduBase API",
                        "name": "EDUBASE_API_URL",
                        "required": true
                      },
                      {
                        "description": "EduBase API application identifier",
                        "name": "EDUBASE_API_APP",
                        "required": true
                      },
                      {
                        "description": "EduBase API key",
                        "name": "EDUBASE_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Optional rate limit per second",
                        "name": "EDUBASE_API_MAXRATE",
                        "required": false
                      },
                      {
                        "description": "Optional rate limit per minute",
                        "name": "EDUBASE_API_MAXRATE60",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "/path/to/dist/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@EduBase/MCP"
                }
              ],
              "remotes": [],
              "repo_ref": "EduBase/MCP",
              "resources": [],
              "tools": [
                {
                  "description": "Tool for the GET /user endpoint",
                  "name": "edubase_get_user"
                },
                {
                  "description": "Tools named edubase_\u003cmethod\u003e_\u003cendpoint\u003e for each documented API endpoint",
                  "name": "edubase_get_"
                },
                {
                  "description": "Tools named edubase_\u003cmethod\u003e_\u003cendpoint\u003e for each documented API endpoint",
                  "name": "edubase_post_"
                },
                {
                  "description": "Tools named edubase_\u003cmethod\u003e_\u003cendpoint\u003e for each documented API endpoint",
                  "name": "edubase_delete_"
                }
              ],
              "version_detail": {
                "version": "1.0.10"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "EnesCinr": {
      "mcpproviderid": "EnesCinr",
      "self": "#/mcpproviders/EnesCinr",
      "xid": "/mcpproviders/EnesCinr",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:17.890506404Z",
      "modifiedat": "2025-05-12T08:21:17.890506404Z",

      "serversurl": "#/mcpproviders/EnesCinr/servers",
      "servers": {
        "twitter-mcp": {
          "serverid": "twitter-mcp",
          "self": "#/mcpproviders/EnesCinr/servers/twitter-mcp",
          "xid": "/mcpproviders/EnesCinr/servers/twitter-mcp",

          "metaurl": "#/mcpproviders/EnesCinr/servers/twitter-mcp/meta",
          "meta": {
            "serverid": "twitter-mcp",
            "self": "#/mcpproviders/EnesCinr/servers/twitter-mcp/meta",
            "xid": "/mcpproviders/EnesCinr/servers/twitter-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:17.890506404Z",
            "modifiedat": "2025-05-12T08:21:17.890506404Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/EnesCinr/servers/twitter-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/EnesCinr/servers/twitter-mcp/versions",
          "versions": {
            "1": {
              "serverid": "twitter-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/EnesCinr/servers/twitter-mcp/versions/1",
              "xid": "/mcpproviders/EnesCinr/servers/twitter-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.EnesCinr/twitter-mcp",
              "isdefault": true,
              "description": "This MCP server allows Clients to interact with Twitter, enabling posting tweets and searching Twitter.",
              "createdat": "2025-05-12T08:21:17.890506404Z",
              "modifiedat": "2025-05-12T08:21:17.890506404Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Twitter API key",
                        "name": "API_KEY",
                        "required": true
                      },
                      {
                        "description": "Twitter API secret key",
                        "name": "API_SECRET_KEY",
                        "required": true
                      },
                      {
                        "description": "Twitter access token",
                        "name": "ACCESS_TOKEN",
                        "required": true
                      },
                      {
                        "description": "Twitter access token secret",
                        "name": "ACCESS_TOKEN_SECRET",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@enescinar/twitter-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@enescinar/twitter-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "EnesCinr/twitter-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Post a new tweet to Twitter",
                  "inputschema": {
                    "properties": {
                      "text": {
                        "description": "The content of your tweet",
                        "maxLength": 280,
                        "type": "string"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "post_tweet"
                },
                {
                  "description": "Search for tweets on Twitter",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "description": "Number of tweets to return (10-100)",
                        "maximum": 100,
                        "minimum": 10,
                        "type": "number"
                      },
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query",
                      "count"
                    ],
                    "type": "object"
                  },
                  "name": "search_tweets"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Fewsats": {
      "mcpproviderid": "Fewsats",
      "self": "#/mcpproviders/Fewsats",
      "xid": "/mcpproviders/Fewsats",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:20.569250935Z",
      "modifiedat": "2025-05-12T08:18:20.569250935Z",

      "serversurl": "#/mcpproviders/Fewsats/servers",
      "servers": {
        "fewsats-mcp": {
          "serverid": "fewsats-mcp",
          "self": "#/mcpproviders/Fewsats/servers/fewsats-mcp",
          "xid": "/mcpproviders/Fewsats/servers/fewsats-mcp",

          "metaurl": "#/mcpproviders/Fewsats/servers/fewsats-mcp/meta",
          "meta": {
            "serverid": "fewsats-mcp",
            "self": "#/mcpproviders/Fewsats/servers/fewsats-mcp/meta",
            "xid": "/mcpproviders/Fewsats/servers/fewsats-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:20.569250935Z",
            "modifiedat": "2025-05-12T08:18:20.569250935Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Fewsats/servers/fewsats-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Fewsats/servers/fewsats-mcp/versions",
          "versions": {
            "1": {
              "serverid": "fewsats-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/Fewsats/servers/fewsats-mcp/versions/1",
              "xid": "/mcpproviders/Fewsats/servers/fewsats-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.Fewsats/fewsats-mcp",
              "isdefault": true,
              "description": "This MCP server integrates with Fewsats and allows AI Agents to purchase anything in a secure way.",
              "createdat": "2025-05-12T08:18:20.569250935Z",
              "modifiedat": "2025-05-12T08:18:20.569250935Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Fewsats",
                        "name": "FEWSATS_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uvx",
                  "package_name": "fewsats-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "Fewsats/fewsats-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve the balance of the user's wallet",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "balance"
                },
                {
                  "description": "Retrieve the user's payment methods",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "payment_methods"
                },
                {
                  "description": "Pays an offer with the specified ID from the l402_offers",
                  "inputschema": {
                    "properties": {
                      "l402_offer": {
                        "properties": {
                          "offers": {
                            "items": {
                              "properties": {
                                "amount": {
                                  "type": "number"
                                },
                                "currency": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "title": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "amount",
                                "currency",
                                "description",
                                "title"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "payment_context_token": {
                            "type": "string"
                          },
                          "payment_request_url": {
                            "type": "string"
                          },
                          "version": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "offers",
                          "payment_context_token",
                          "payment_request_url",
                          "version"
                        ],
                        "type": "object"
                      },
                      "offer_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "offer_id",
                      "l402_offer"
                    ],
                    "type": "object"
                  },
                  "name": "pay_offer"
                },
                {
                  "description": "Retrieve the details of a payment",
                  "inputschema": {
                    "properties": {
                      "pid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "pid"
                    ],
                    "type": "object"
                  },
                  "name": "payment_info"
                },
                {
                  "description": "Retrieve the user's billing information",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "billing_info"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Fibery-inc": {
      "mcpproviderid": "Fibery-inc",
      "self": "#/mcpproviders/Fibery-inc",
      "xid": "/mcpproviders/Fibery-inc",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:12.943736878Z",
      "modifiedat": "2025-05-12T08:20:12.943736878Z",

      "serversurl": "#/mcpproviders/Fibery-inc/servers",
      "servers": {
        "fibery-mcp-server": {
          "serverid": "fibery-mcp-server",
          "self": "#/mcpproviders/Fibery-inc/servers/fibery-mcp-server",
          "xid": "/mcpproviders/Fibery-inc/servers/fibery-mcp-server",

          "metaurl": "#/mcpproviders/Fibery-inc/servers/fibery-mcp-server/meta",
          "meta": {
            "serverid": "fibery-mcp-server",
            "self": "#/mcpproviders/Fibery-inc/servers/fibery-mcp-server/meta",
            "xid": "/mcpproviders/Fibery-inc/servers/fibery-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:12.943736878Z",
            "modifiedat": "2025-05-12T08:20:12.943736878Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Fibery-inc/servers/fibery-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Fibery-inc/servers/fibery-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "fibery-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/Fibery-inc/servers/fibery-mcp-server/versions/1",
              "xid": "/mcpproviders/Fibery-inc/servers/fibery-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.Fibery-inc/fibery-mcp-server",
              "isdefault": true,
              "description": "This MCP (Model Context Protocol) server provides integration between Fibery and any LLM provider supporting the MCP protocol (e.g., Claude for Desktop), allowing you to interact with your Fibery workspace using natural language.",
              "createdat": "2025-05-12T08:20:12.943736878Z",
              "modifiedat": "2025-05-12T08:20:12.943736878Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Fibery host (your-account.fibery.io)",
                        "name": "FIBERY_HOST",
                        "required": true
                      },
                      {
                        "description": "Fibery API Token",
                        "name": "FIBERY_API_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "tool",
                      "run",
                      "fibery-mcp-server",
                      "--fibery-host",
                      "your-domain.fibery.io",
                      "--fibery-api-token",
                      "your-api-token"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@Fibery-inc/fibery-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "Fibery-inc/fibery-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Provides the current date.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "current_date"
                },
                {
                  "description": "Get Fibery schema information.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "schema"
                },
                {
                  "description": "Get list of all fields (in format of 'Title [name]: type') in the selected Fibery database and for all related databases.",
                  "inputschema": {
                    "properties": {
                      "database_name": {
                        "description": "Database name as defined in Fibery schema",
                        "type": "string"
                      }
                    },
                    "required": [
                      "database_name"
                    ],
                    "type": "object"
                  },
                  "name": "describe_database"
                },
                {
                  "description": "Offers powerful, flexible access to your Fibery data through the Fibery API.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "query_database"
                },
                {
                  "description": "Creates new entities in your Fibery workspace with specified field values.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_entity"
                },
                {
                  "description": "Creates multiple new entities in your Fibery workspace with specified field values.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_entities_batch"
                },
                {
                  "description": "Updates existing entities in your Fibery workspace with new field values.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_entity"
                }
              ],
              "version_detail": {
                "version": "0.0.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Flux159": {
      "mcpproviderid": "Flux159",
      "self": "#/mcpproviders/Flux159",
      "xid": "/mcpproviders/Flux159",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:09.838837383Z",
      "modifiedat": "2025-05-12T08:21:09.838837383Z",

      "serversurl": "#/mcpproviders/Flux159/servers",
      "servers": {
        "mcp-server-kubernetes": {
          "serverid": "mcp-server-kubernetes",
          "self": "#/mcpproviders/Flux159/servers/mcp-server-kubernetes",
          "xid": "/mcpproviders/Flux159/servers/mcp-server-kubernetes",

          "metaurl": "#/mcpproviders/Flux159/servers/mcp-server-kubernetes/meta",
          "meta": {
            "serverid": "mcp-server-kubernetes",
            "self": "#/mcpproviders/Flux159/servers/mcp-server-kubernetes/meta",
            "xid": "/mcpproviders/Flux159/servers/mcp-server-kubernetes/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:09.838837383Z",
            "modifiedat": "2025-05-12T08:21:09.838837383Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Flux159/servers/mcp-server-kubernetes/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Flux159/servers/mcp-server-kubernetes/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-kubernetes",
              "versionid": "1",
              "self": "#/mcpproviders/Flux159/servers/mcp-server-kubernetes/versions/1",
              "xid": "/mcpproviders/Flux159/servers/mcp-server-kubernetes/versions/1",
              "epoch": 1,
              "name": "io.github.Flux159/mcp-server-kubernetes",
              "isdefault": true,
              "description": "MCP Server that can connect to a Kubernetes cluster and manage it.",
              "createdat": "2025-05-12T08:21:09.838837383Z",
              "modifiedat": "2025-05-12T08:21:09.838837383Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "mcp-server-kubernetes"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "bun",
                  "package_name": "mcp-server-kubernetes"
                }
              ],
              "remotes": [],
              "repo_ref": "Flux159/mcp-server-kubernetes",
              "resources": [
                {
                  "description": "List of pods in the default namespace",
                  "mimetype": "application/json",
                  "name": "Kubernetes Pods",
                  "uritemplate": "k8s://default/pods"
                },
                {
                  "description": "List of deployments in the default namespace",
                  "mimetype": "application/json",
                  "name": "Kubernetes Deployments",
                  "uritemplate": "k8s://default/deployments"
                },
                {
                  "description": "List of services in the default namespace",
                  "mimetype": "application/json",
                  "name": "Kubernetes Services",
                  "uritemplate": "k8s://default/services"
                },
                {
                  "description": "List of all namespaces",
                  "mimetype": "application/json",
                  "name": "Kubernetes Namespaces",
                  "uritemplate": "k8s://namespaces"
                },
                {
                  "description": "List of all nodes in the cluster",
                  "mimetype": "application/json",
                  "name": "Kubernetes Nodes",
                  "uritemplate": "k8s://nodes"
                }
              ],
              "tools": [
                {
                  "description": "Cleanup resources in the Kubernetes cluster.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "cleanup"
                },
                {
                  "description": "Create a Kubernetes namespace.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "create_namespace"
                },
                {
                  "description": "Create a Kubernetes pod.",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "template": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace",
                      "template"
                    ],
                    "type": "object"
                  },
                  "name": "create_pod"
                },
                {
                  "description": "Create a Kubernetes cronjob.",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "image": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "schedule": {
                        "type": "string"
                      },
                      "suspend": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "namespace",
                      "schedule",
                      "image"
                    ],
                    "type": "object"
                  },
                  "name": "create_cronjob"
                },
                {
                  "description": "Delete a Kubernetes cronjob.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "delete_cronjob"
                },
                {
                  "description": "Delete a Kubernetes pod.",
                  "inputschema": {
                    "properties": {
                      "ignoreNotFound": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "delete_pod"
                },
                {
                  "description": "Describe a Kubernetes pod.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "describe_pod"
                },
                {
                  "description": "Describe a Kubernetes node.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "describe_node"
                },
                {
                  "description": "Explain a Kubernetes resource.",
                  "inputschema": {
                    "properties": {
                      "apiVersion": {
                        "type": "string"
                      },
                      "output": {
                        "enum": [
                          "plaintext",
                          "plaintext-openapiv2"
                        ],
                        "type": "string"
                      },
                      "recursive": {
                        "type": "boolean"
                      },
                      "resource": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "resource"
                    ],
                    "type": "object"
                  },
                  "name": "explain_resource"
                },
                {
                  "description": "Get Kubernetes events.",
                  "inputschema": {
                    "properties": {
                      "fieldSelector": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_events"
                },
                {
                  "description": "Get logs from Kubernetes resources.",
                  "inputschema": {
                    "properties": {
                      "container": {
                        "type": "string"
                      },
                      "follow": {
                        "type": "boolean"
                      },
                      "labelSelector": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "pretty": {
                        "type": "boolean"
                      },
                      "resourceType": {
                        "type": "string"
                      },
                      "sinceSeconds": {
                        "type": "integer"
                      },
                      "tail": {
                        "type": "integer"
                      },
                      "timestamps": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "resourceType"
                    ],
                    "type": "object"
                  },
                  "name": "get_logs"
                },
                {
                  "description": "Install a Helm chart.",
                  "inputschema": {
                    "properties": {
                      "chart": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "repo": {
                        "type": "string"
                      },
                      "values": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "name",
                      "chart",
                      "repo",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "install_helm_chart"
                },
                {
                  "description": "List Kubernetes API resources.",
                  "inputschema": {
                    "properties": {
                      "apiGroup": {
                        "type": "string"
                      },
                      "namespaced": {
                        "type": "boolean"
                      },
                      "output": {
                        "enum": [
                          "wide",
                          "name",
                          "no-headers"
                        ],
                        "type": "string"
                      },
                      "verbs": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_api_resources"
                },
                {
                  "description": "List Kubernetes deployments.",
                  "inputschema": {
                    "properties": {
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_deployments"
                },
                {
                  "description": "List Kubernetes namespaces.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_namespaces"
                },
                {
                  "description": "List Kubernetes nodes.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_nodes"
                },
                {
                  "description": "List Kubernetes pods.",
                  "inputschema": {
                    "properties": {
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_pods"
                },
                {
                  "description": "List Kubernetes services.",
                  "inputschema": {
                    "properties": {
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_services"
                },
                {
                  "description": "List Kubernetes cronjobs.",
                  "inputschema": {
                    "properties": {
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_cronjobs"
                },
                {
                  "description": "List Kubernetes contexts.",
                  "inputschema": {
                    "properties": {
                      "showCurrent": {
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_contexts"
                },
                {
                  "description": "Get current Kubernetes context.",
                  "inputschema": {
                    "properties": {
                      "detailed": {
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_current_context"
                },
                {
                  "description": "Set current Kubernetes context.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "set_current_context"
                },
                {
                  "description": "Describe a Kubernetes cronjob.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "describe_cronjob"
                },
                {
                  "description": "List Kubernetes jobs.",
                  "inputschema": {
                    "properties": {
                      "cronJobName": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "list_jobs"
                },
                {
                  "description": "Get logs from Kubernetes jobs.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "tail": {
                        "type": "integer"
                      },
                      "timestamps": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "get_job_logs"
                },
                {
                  "description": "Uninstall a Helm chart.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "uninstall_helm_chart"
                },
                {
                  "description": "Upgrade a Helm chart.",
                  "inputschema": {
                    "properties": {
                      "chart": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "repo": {
                        "type": "string"
                      },
                      "values": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "name",
                      "chart",
                      "repo",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "upgrade_helm_chart"
                },
                {
                  "description": "Start port forwarding to a Kubernetes resource.",
                  "inputschema": {
                    "properties": {
                      "localPort": {
                        "type": "integer"
                      },
                      "resourceName": {
                        "type": "string"
                      },
                      "resourceType": {
                        "type": "string"
                      },
                      "targetPort": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "resourceType",
                      "resourceName",
                      "localPort",
                      "targetPort"
                    ],
                    "type": "object"
                  },
                  "name": "port_forward"
                },
                {
                  "description": "Stop port forwarding.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "stop_port_forward"
                },
                {
                  "description": "Delete a Kubernetes namespace.",
                  "inputschema": {
                    "properties": {
                      "ignoreNotFound": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "delete_namespace"
                },
                {
                  "description": "Delete a Kubernetes deployment.",
                  "inputschema": {
                    "properties": {
                      "ignoreNotFound": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "delete_deployment"
                },
                {
                  "description": "Create a Kubernetes deployment.",
                  "inputschema": {
                    "properties": {
                      "customConfig": {},
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "ports": {
                        "items": {
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "replicas": {
                        "type": "integer"
                      },
                      "template": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace",
                      "template"
                    ],
                    "type": "object"
                  },
                  "name": "create_deployment"
                },
                {
                  "description": "Update a Kubernetes deployment.",
                  "inputschema": {
                    "properties": {
                      "containerName": {
                        "type": "string"
                      },
                      "customConfig": {},
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "replicas": {
                        "type": "integer"
                      },
                      "template": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace",
                      "template"
                    ],
                    "type": "object"
                  },
                  "name": "update_deployment"
                },
                {
                  "description": "Describe a Kubernetes deployment.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "describe_deployment"
                },
                {
                  "description": "Scale a Kubernetes deployment.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "replicas": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "name",
                      "namespace",
                      "replicas"
                    ],
                    "type": "object"
                  },
                  "name": "scale_deployment"
                },
                {
                  "description": "Create a Kubernetes ConfigMap.",
                  "inputschema": {
                    "properties": {
                      "data": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace",
                      "data"
                    ],
                    "type": "object"
                  },
                  "name": "create_configmap"
                },
                {
                  "description": "Get a Kubernetes ConfigMap.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "get_configmap"
                },
                {
                  "description": "Update a Kubernetes ConfigMap.",
                  "inputschema": {
                    "properties": {
                      "data": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace",
                      "data"
                    ],
                    "type": "object"
                  },
                  "name": "update_configmap"
                },
                {
                  "description": "Delete a Kubernetes ConfigMap.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "delete_configmap"
                },
                {
                  "description": "Create a Kubernetes service.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "ports": {
                        "items": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "nodePort": {
                              "type": "integer"
                            },
                            "port": {
                              "type": "integer"
                            },
                            "protocol": {
                              "type": "string"
                            },
                            "targetPort": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "port"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "selector": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "type": {
                        "enum": [
                          "ClusterIP",
                          "NodePort",
                          "LoadBalancer"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "ports"
                    ],
                    "type": "object"
                  },
                  "name": "create_service"
                },
                {
                  "description": "Update a Kubernetes service.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "ports": {
                        "items": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "nodePort": {
                              "type": "integer"
                            },
                            "port": {
                              "type": "integer"
                            },
                            "protocol": {
                              "type": "string"
                            },
                            "targetPort": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "selector": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "type": {
                        "enum": [
                          "ClusterIP",
                          "NodePort",
                          "LoadBalancer"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "update_service"
                },
                {
                  "description": "Delete a Kubernetes service.",
                  "inputschema": {
                    "properties": {
                      "ignoreNotFound": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "delete_service"
                },
                {
                  "description": "Describe a Kubernetes service.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "describe_service"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "GLips": {
      "mcpproviderid": "GLips",
      "self": "#/mcpproviders/GLips",
      "xid": "/mcpproviders/GLips",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:50.134555399Z",
      "modifiedat": "2025-05-12T08:18:50.134555399Z",

      "serversurl": "#/mcpproviders/GLips/servers",
      "servers": {
        "Figma-Context-MCP": {
          "serverid": "Figma-Context-MCP",
          "self": "#/mcpproviders/GLips/servers/Figma-Context-MCP",
          "xid": "/mcpproviders/GLips/servers/Figma-Context-MCP",

          "metaurl": "#/mcpproviders/GLips/servers/Figma-Context-MCP/meta",
          "meta": {
            "serverid": "Figma-Context-MCP",
            "self": "#/mcpproviders/GLips/servers/Figma-Context-MCP/meta",
            "xid": "/mcpproviders/GLips/servers/Figma-Context-MCP/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:50.134555399Z",
            "modifiedat": "2025-05-12T08:18:50.134555399Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GLips/servers/Figma-Context-MCP/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GLips/servers/Figma-Context-MCP/versions",
          "versions": {
            "1": {
              "serverid": "Figma-Context-MCP",
              "versionid": "1",
              "self": "#/mcpproviders/GLips/servers/Figma-Context-MCP/versions/1",
              "xid": "/mcpproviders/GLips/servers/Figma-Context-MCP/versions/1",
              "epoch": 1,
              "name": "io.github.GLips/Figma-Context-MCP",
              "isdefault": true,
              "description": "Give your coding agent access to your Figma data. Implement designs in any framework in one-shot. This MCP server is specifically designed for use with Cursor. It simplifies and translates Figma API responses to provide only the most relevant layout and styling information to the model, improving AI accuracy and relevance.",
              "documentation": "https://www.framelink.ai/docs/quickstart?utm_source=github\u0026utm_medium=referral\u0026utm_campaign=readme",
              "createdat": "2025-05-12T08:18:50.134555399Z",
              "modifiedat": "2025-05-12T08:18:50.134555399Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Figma API access token",
                        "name": "FIGMA_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Port number for HTTP server",
                        "name": "PORT",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "figma-developer-mcp",
                      "--figma-api-key=YOUR-KEY",
                      "--stdio"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "figma-developer-mcp"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:PORT/mcp"
                }
              ],
              "repo_ref": "GLips/Figma-Context-MCP",
              "resources": [],
              "tools": [
                {
                  "description": "When the nodeId cannot be obtained, obtain the layout information about the entire Figma file",
                  "inputschema": {
                    "properties": {
                      "depth": {
                        "description": "How many levels deep to traverse the node tree, only use if explicitly requested by the user",
                        "type": "number"
                      },
                      "fileKey": {
                        "description": "The key of the Figma file to fetch, often found in a provided URL like figma.com/(file|design)/\u003cfileKey\u003e/...",
                        "type": "string"
                      },
                      "nodeId": {
                        "description": "The ID of the node to fetch, often found as URL parameter node-id=\u003cnodeId\u003e, always use if provided",
                        "type": "string"
                      }
                    },
                    "required": [
                      "fileKey"
                    ],
                    "type": "object"
                  },
                  "name": "get_figma_data"
                },
                {
                  "description": "Download SVG and PNG images used in a Figma file based on the IDs of image or icon nodes",
                  "inputschema": {
                    "properties": {
                      "fileKey": {
                        "description": "The key of the Figma file containing the node",
                        "type": "string"
                      },
                      "localPath": {
                        "description": "The absolute path to the directory where images are stored in the project. If the directory does not exist, it will be created. The format of this path should respect the directory format of the operating system you are running on. Don't use any special character escaping in the path name either.",
                        "type": "string"
                      },
                      "nodes": {
                        "description": "The nodes to fetch as images",
                        "items": {
                          "properties": {
                            "fileName": {
                              "description": "The local name for saving the fetched file",
                              "type": "string"
                            },
                            "imageRef": {
                              "description": "If a node has an imageRef fill, you must include this variable. Leave blank when downloading Vector SVG images.",
                              "type": "string"
                            },
                            "nodeId": {
                              "description": "The ID of the Figma image node to fetch, formatted as 1234:5678",
                              "type": "string"
                            }
                          },
                          "required": [
                            "nodeId",
                            "fileName"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "fileKey",
                      "nodes",
                      "localPath"
                    ],
                    "type": "object"
                  },
                  "name": "download_figma_images"
                }
              ],
              "version_detail": {
                "version": "0.2.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "GeLi2001": {
      "mcpproviderid": "GeLi2001",
      "self": "#/mcpproviders/GeLi2001",
      "xid": "/mcpproviders/GeLi2001",
      "epoch": 3,
      "createdat": "2025-05-12T08:17:53.952967632Z",
      "modifiedat": "2025-05-12T08:17:54.631166912Z",

      "serversurl": "#/mcpproviders/GeLi2001/servers",
      "servers": {
        "datadog-mcp-server": {
          "serverid": "datadog-mcp-server",
          "self": "#/mcpproviders/GeLi2001/servers/datadog-mcp-server",
          "xid": "/mcpproviders/GeLi2001/servers/datadog-mcp-server",

          "metaurl": "#/mcpproviders/GeLi2001/servers/datadog-mcp-server/meta",
          "meta": {
            "serverid": "datadog-mcp-server",
            "self": "#/mcpproviders/GeLi2001/servers/datadog-mcp-server/meta",
            "xid": "/mcpproviders/GeLi2001/servers/datadog-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:54.318444086Z",
            "modifiedat": "2025-05-12T08:17:54.318444086Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GeLi2001/servers/datadog-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GeLi2001/servers/datadog-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "datadog-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/GeLi2001/servers/datadog-mcp-server/versions/1",
              "xid": "/mcpproviders/GeLi2001/servers/datadog-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.GeLi2001/datadog-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for interacting with the Datadog API.",
              "createdat": "2025-05-12T08:17:54.318444086Z",
              "modifiedat": "2025-05-12T08:17:54.318444086Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Datadog API key",
                        "name": "DD_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Datadog Application key",
                        "name": "DD_APP_KEY",
                        "required": true
                      },
                      {
                        "description": "Datadog site domain",
                        "name": "DD_SITE",
                        "required": false
                      },
                      {
                        "description": "Datadog logs site domain",
                        "name": "DD_LOGS_SITE",
                        "required": false
                      },
                      {
                        "description": "Datadog metrics site domain",
                        "name": "DD_METRICS_SITE",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "datadog-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "GeLi2001/datadog-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Fetch monitors with optional filtering",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-monitors"
                },
                {
                  "description": "Get details of a specific monitor by ID",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-monitor"
                },
                {
                  "description": "List all dashboards",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-dashboards"
                },
                {
                  "description": "Get a specific dashboard by ID",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-dashboard"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "shopify-mcp": {
          "serverid": "shopify-mcp",
          "self": "#/mcpproviders/GeLi2001/servers/shopify-mcp",
          "xid": "/mcpproviders/GeLi2001/servers/shopify-mcp",

          "metaurl": "#/mcpproviders/GeLi2001/servers/shopify-mcp/meta",
          "meta": {
            "serverid": "shopify-mcp",
            "self": "#/mcpproviders/GeLi2001/servers/shopify-mcp/meta",
            "xid": "/mcpproviders/GeLi2001/servers/shopify-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:53.952967632Z",
            "modifiedat": "2025-05-12T08:17:53.952967632Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GeLi2001/servers/shopify-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GeLi2001/servers/shopify-mcp/versions",
          "versions": {
            "1": {
              "serverid": "shopify-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/GeLi2001/servers/shopify-mcp/versions/1",
              "xid": "/mcpproviders/GeLi2001/servers/shopify-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.GeLi2001/shopify-mcp",
              "isdefault": true,
              "description": "MCP Server for Shopify API, enabling interaction with store data through GraphQL API",
              "createdat": "2025-05-12T08:17:53.952967632Z",
              "modifiedat": "2025-05-12T08:17:53.952967632Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Shopify API access token",
                        "name": "SHOPIFY_ACCESS_TOKEN",
                        "required": true
                      },
                      {
                        "description": "Shopify store domain",
                        "name": "MYSHOPIFY_DOMAIN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "shopify-mcp",
                      "--accessToken",
                      "\u003cYOUR_ACCESS_TOKEN\u003e",
                      "--domain",
                      "\u003cYOUR_SHOP\u003e.myshopify.com"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "shopify-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "GeLi2001/shopify-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Get all products or search by title",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      },
                      "searchTitle": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "limit"
                    ],
                    "type": "object"
                  },
                  "name": "get-products"
                },
                {
                  "description": "Get a specific product by ID",
                  "inputschema": {
                    "properties": {
                      "productId": {
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "productId"
                    ],
                    "type": "object"
                  },
                  "name": "get-product-by-id"
                },
                {
                  "description": "Get customers or search by name/email",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      },
                      "searchQuery": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get-customers"
                },
                {
                  "description": "Advanced order querying and filtering",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      },
                      "status": {
                        "enum": [
                          "any",
                          "open",
                          "closed",
                          "cancelled"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get-orders"
                },
                {
                  "description": "Get order by ID",
                  "inputschema": {
                    "properties": {
                      "orderId": {
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "orderId"
                    ],
                    "type": "object"
                  },
                  "name": "get-order-by-id"
                },
                {
                  "description": "Update an order",
                  "inputschema": {
                    "properties": {
                      "customAttributes": {
                        "items": {
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "email": {
                        "format": "email",
                        "type": "string"
                      },
                      "id": {
                        "minLength": 1,
                        "type": "string"
                      },
                      "metafields": {
                        "items": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "key": {
                              "type": "string"
                            },
                            "namespace": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "note": {
                        "type": "string"
                      },
                      "shippingAddress": {
                        "properties": {
                          "address1": {
                            "type": "string"
                          },
                          "address2": {
                            "type": "string"
                          },
                          "city": {
                            "type": "string"
                          },
                          "company": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "firstName": {
                            "type": "string"
                          },
                          "lastName": {
                            "type": "string"
                          },
                          "phone": {
                            "type": "string"
                          },
                          "province": {
                            "type": "string"
                          },
                          "zip": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "tags": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "update-order"
                },
                {
                  "description": "Get orders for a specific customer",
                  "inputschema": {
                    "properties": {
                      "customerId": {
                        "pattern": "^\\d+$",
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "customerId"
                    ],
                    "type": "object"
                  },
                  "name": "get-customer-orders"
                },
                {
                  "description": "Update a customer's information",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "format": "email",
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "id": {
                        "pattern": "^\\d+$",
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "metafields": {
                        "items": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "key": {
                              "type": "string"
                            },
                            "namespace": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "note": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "tags": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "taxExempt": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "update-customer"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "tft-mcp-server": {
          "serverid": "tft-mcp-server",
          "self": "#/mcpproviders/GeLi2001/servers/tft-mcp-server",
          "xid": "/mcpproviders/GeLi2001/servers/tft-mcp-server",

          "metaurl": "#/mcpproviders/GeLi2001/servers/tft-mcp-server/meta",
          "meta": {
            "serverid": "tft-mcp-server",
            "self": "#/mcpproviders/GeLi2001/servers/tft-mcp-server/meta",
            "xid": "/mcpproviders/GeLi2001/servers/tft-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:54.631166912Z",
            "modifiedat": "2025-05-12T08:17:54.631166912Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GeLi2001/servers/tft-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GeLi2001/servers/tft-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "tft-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/GeLi2001/servers/tft-mcp-server/versions/1",
              "xid": "/mcpproviders/GeLi2001/servers/tft-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.GeLi2001/tft-mcp-server",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) server for Team Fight Tactics (TFT) that provides access to TFT game data through various tools.",
              "createdat": "2025-05-12T08:17:54.631166912Z",
              "modifiedat": "2025-05-12T08:17:54.631166912Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "mcp-server-tft",
                      "--apiKey",
                      "\u003cYOUR_RIOT_API_KEY\u003e",
                      "--gameName",
                      "\u003cYOUR_GAME_NAME\u003e",
                      "--tagLine",
                      "\u003cYOUR_TAG_LINE\u003e"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-server-tft"
                }
              ],
              "remotes": [],
              "repo_ref": "GeLi2001/tft-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Get TFT match history for the current player.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "description": "Number of matches to retrieve.",
                        "type": "integer"
                      },
                      "start": {
                        "description": "Start index for pagination.",
                        "type": "integer"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "tft_match_history"
                },
                {
                  "description": "Get detailed information about a specific TFT match.",
                  "inputschema": {
                    "properties": {
                      "matchId": {
                        "description": "The match ID to get details for.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "matchId"
                    ],
                    "type": "object"
                  },
                  "name": "tft_match_details"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 3
    },
    "GongRzhe": {
      "mcpproviderid": "GongRzhe",
      "self": "#/mcpproviders/GongRzhe",
      "xid": "/mcpproviders/GongRzhe",
      "epoch": 7,
      "createdat": "2025-05-12T08:21:30.07866553Z",
      "modifiedat": "2025-05-12T08:21:42.486610025Z",

      "serversurl": "#/mcpproviders/GongRzhe/servers",
      "servers": {
        "Gmail-MCP-Server": {
          "serverid": "Gmail-MCP-Server",
          "self": "#/mcpproviders/GongRzhe/servers/Gmail-MCP-Server",
          "xid": "/mcpproviders/GongRzhe/servers/Gmail-MCP-Server",

          "metaurl": "#/mcpproviders/GongRzhe/servers/Gmail-MCP-Server/meta",
          "meta": {
            "serverid": "Gmail-MCP-Server",
            "self": "#/mcpproviders/GongRzhe/servers/Gmail-MCP-Server/meta",
            "xid": "/mcpproviders/GongRzhe/servers/Gmail-MCP-Server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:32.121775581Z",
            "modifiedat": "2025-05-12T08:21:32.121775581Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/Gmail-MCP-Server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/Gmail-MCP-Server/versions",
          "versions": {
            "1": {
              "serverid": "Gmail-MCP-Server",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/Gmail-MCP-Server/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/Gmail-MCP-Server/versions/1",
              "epoch": 1,
              "name": "io.github.GongRzhe/Gmail-MCP-Server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for Gmail integration in Claude Desktop with auto authentication support. This server enables AI assistants to manage Gmail through natural language interactions.",
              "createdat": "2025-05-12T08:21:32.121775581Z",
              "modifiedat": "2025-05-12T08:21:32.121775581Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "@gongrzhe/server-gmail-autoauth-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@gongrzhe/server-gmail-autoauth-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "GongRzhe/Gmail-MCP-Server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "JSON-MCP-Server": {
          "serverid": "JSON-MCP-Server",
          "self": "#/mcpproviders/GongRzhe/servers/JSON-MCP-Server",
          "xid": "/mcpproviders/GongRzhe/servers/JSON-MCP-Server",

          "metaurl": "#/mcpproviders/GongRzhe/servers/JSON-MCP-Server/meta",
          "meta": {
            "serverid": "JSON-MCP-Server",
            "self": "#/mcpproviders/GongRzhe/servers/JSON-MCP-Server/meta",
            "xid": "/mcpproviders/GongRzhe/servers/JSON-MCP-Server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:34.15762664Z",
            "modifiedat": "2025-05-12T08:21:34.15762664Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/JSON-MCP-Server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/JSON-MCP-Server/versions",
          "versions": {
            "1": {
              "serverid": "JSON-MCP-Server",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/JSON-MCP-Server/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/JSON-MCP-Server/versions/1",
              "epoch": 1,
              "name": "io.github.GongRzhe/JSON-MCP-Server",
              "isdefault": true,
              "description": "A JSON Model Context Protocol (MCP) server implementation for querying and manipulating JSON data. This server enables LLMs to interact with JSON data through a set of standardized tools.",
              "createdat": "2025-05-12T08:21:34.15762664Z",
              "modifiedat": "2025-05-12T08:21:34.15762664Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@gongrzhe/server-json-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "GongRzhe/JSON-MCP-Server",
              "resources": [],
              "tools": [
                {
                  "description": "Query JSON data using JSONPath syntax with extended operations",
                  "inputschema": {
                    "properties": {
                      "jsonPath": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url",
                      "jsonPath"
                    ],
                    "type": "object"
                  },
                  "name": "query"
                },
                {
                  "description": "Filter JSON data using conditions",
                  "inputschema": {
                    "properties": {
                      "condition": {
                        "type": "string"
                      },
                      "jsonPath": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url",
                      "jsonPath",
                      "condition"
                    ],
                    "type": "object"
                  },
                  "name": "filter"
                }
              ],
              "version_detail": {
                "version": "1.0.3"
              }
            }
          },
          "versionscount": 1
        },
        "Langflow-DOC-QA-SERVER": {
          "serverid": "Langflow-DOC-QA-SERVER",
          "self": "#/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER",
          "xid": "/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER",

          "metaurl": "#/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER/meta",
          "meta": {
            "serverid": "Langflow-DOC-QA-SERVER",
            "self": "#/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER/meta",
            "xid": "/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:40.396246371Z",
            "modifiedat": "2025-05-12T08:21:40.396246371Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER/versions",
          "versions": {
            "1": {
              "serverid": "Langflow-DOC-QA-SERVER",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/Langflow-DOC-QA-SERVER/versions/1",
              "epoch": 1,
              "name": "io.github.GongRzhe/Langflow-DOC-QA-SERVER",
              "isdefault": true,
              "description": "A Model Context Protocol server for document Q\u0026A powered by Langflow",
              "createdat": "2025-05-12T08:21:40.396246371Z",
              "modifiedat": "2025-05-12T08:21:40.396246371Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "The endpoint URL for the Langflow API service.",
                        "name": "API_ENDPOINT",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "/path/to/doc-qa-server/build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@GongRzhe/Langflow-DOC-QA-SERVER"
                }
              ],
              "remotes": [],
              "repo_ref": "GongRzhe/Langflow-DOC-QA-SERVER",
              "resources": [],
              "tools": [
                {
                  "description": "Query the document Q\u0026A system with a prompt",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The query prompt to search for in the documents",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "query_docs"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        },
        "Quickchart-MCP-Server": {
          "serverid": "Quickchart-MCP-Server",
          "self": "#/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server",
          "xid": "/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server",

          "metaurl": "#/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server/meta",
          "meta": {
            "serverid": "Quickchart-MCP-Server",
            "self": "#/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server/meta",
            "xid": "/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:30.07866553Z",
            "modifiedat": "2025-05-12T08:21:30.07866553Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server/versions",
          "versions": {
            "1": {
              "serverid": "Quickchart-MCP-Server",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/Quickchart-MCP-Server/versions/1",
              "epoch": 1,
              "name": "io.github.GongRzhe/Quickchart-MCP-Server",
              "isdefault": true,
              "description": "A Model Context Protocol server for generating charts using QuickChart.io",
              "documentation": "https://quickchart.io/documentation/",
              "createdat": "2025-05-12T08:21:30.07866553Z",
              "modifiedat": "2025-05-12T08:21:30.07866553Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "/path/to/quickchart-server/build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@gongrzhe/quickchart-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "GongRzhe/Quickchart-MCP-Server",
              "resources": [],
              "tools": [
                {
                  "description": "Generate a chart using QuickChart",
                  "inputschema": {
                    "properties": {
                      "datasets": {
                        "items": {
                          "properties": {
                            "additionalConfig": {
                              "type": "object"
                            },
                            "backgroundColor": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              ]
                            },
                            "borderColor": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              ]
                            },
                            "data": {
                              "type": "array"
                            },
                            "label": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "labels": {
                        "description": "Labels for data points",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "options": {
                        "type": "object"
                      },
                      "title": {
                        "type": "string"
                      },
                      "type": {
                        "description": "Chart type (bar, line, pie, doughnut, radar, polarArea, scatter, bubble, radialGauge, speedometer)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "datasets"
                    ],
                    "type": "object"
                  },
                  "name": "generate_chart"
                },
                {
                  "description": "Download a chart image to a local file",
                  "inputschema": {
                    "properties": {
                      "config": {
                        "description": "Chart configuration object",
                        "type": "object"
                      },
                      "outputPath": {
                        "description": "Path where the chart image should be saved. If not provided, the chart will be saved to Desktop or home directory.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "config"
                    ],
                    "type": "object"
                  },
                  "name": "download_chart"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "REDIS-MCP-Server": {
          "serverid": "REDIS-MCP-Server",
          "self": "#/mcpproviders/GongRzhe/servers/REDIS-MCP-Server",
          "xid": "/mcpproviders/GongRzhe/servers/REDIS-MCP-Server",

          "metaurl": "#/mcpproviders/GongRzhe/servers/REDIS-MCP-Server/meta",
          "meta": {
            "serverid": "REDIS-MCP-Server",
            "self": "#/mcpproviders/GongRzhe/servers/REDIS-MCP-Server/meta",
            "xid": "/mcpproviders/GongRzhe/servers/REDIS-MCP-Server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:36.210905389Z",
            "modifiedat": "2025-05-12T08:21:36.210905389Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/REDIS-MCP-Server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/REDIS-MCP-Server/versions",
          "versions": {
            "1": {
              "serverid": "REDIS-MCP-Server",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/REDIS-MCP-Server/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/REDIS-MCP-Server/versions/1",
              "epoch": 1,
              "name": "io.github.GongRzhe/REDIS-MCP-Server",
              "isdefault": true,
              "description": "A Redis Model Context Protocol (MCP) server implementation for interacting with Redis databases. This server enables LLMs to interact with Redis key-value stores through a set of standardized tools.",
              "createdat": "2025-05-12T08:21:36.210905389Z",
              "modifiedat": "2025-05-12T08:21:36.210905389Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "@gongrzhe/server-redis-mcp@1.0.0",
                      "redis://localhost:6379"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@gongrzhe/server-redis-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "GongRzhe/REDIS-MCP-Server",
              "resources": [],
              "tools": [
                {
                  "description": "Set a Redis key-value pair with optional expiration",
                  "inputschema": {
                    "properties": {
                      "expireSeconds": {
                        "description": "Optional expiration time in seconds",
                        "type": "number"
                      },
                      "key": {
                        "description": "Redis key",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value to store",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "value"
                    ],
                    "type": "object"
                  },
                  "name": "set"
                },
                {
                  "description": "Get value by key from Redis",
                  "inputschema": {
                    "properties": {
                      "key": {
                        "description": "Redis key to retrieve",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "get"
                },
                {
                  "description": "Delete one or more keys from Redis",
                  "inputschema": {
                    "properties": {
                      "key": {
                        "description": "Key or array of keys to delete",
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "required": [
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "delete"
                },
                {
                  "description": "List Redis keys matching a pattern",
                  "inputschema": {
                    "properties": {
                      "pattern": {
                        "description": "Pattern to match keys (default: *)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "TRAVEL-PLANNER-MCP-Server": {
          "serverid": "TRAVEL-PLANNER-MCP-Server",
          "self": "#/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server",
          "xid": "/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server",

          "metaurl": "#/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server/meta",
          "meta": {
            "serverid": "TRAVEL-PLANNER-MCP-Server",
            "self": "#/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server/meta",
            "xid": "/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:38.293654924Z",
            "modifiedat": "2025-05-12T08:21:38.293654924Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server/versions",
          "versions": {
            "1": {
              "serverid": "TRAVEL-PLANNER-MCP-Server",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/TRAVEL-PLANNER-MCP-Server/versions/1",
              "epoch": 1,
              "name": "io.github.GongRzhe/TRAVEL-PLANNER-MCP-Server",
              "isdefault": true,
              "description": "A Travel Planner Model Context Protocol (MCP) server implementation for interacting with Google Maps and travel planning services. This server enables LLMs to perform travel-related tasks such as location search, place details lookup, and travel time calculations.",
              "createdat": "2025-05-12T08:21:38.293654924Z",
              "modifiedat": "2025-05-12T08:21:38.293654924Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your Google Maps API key with Places, Directions, Geocoding, and Time Zone APIs enabled",
                        "name": "GOOGLE_MAPS_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "@gongrzhe/server-travelplanner-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@gongrzhe/server-travelplanner-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "GongRzhe/TRAVEL-PLANNER-MCP-Server",
              "resources": [],
              "tools": [
                {
                  "description": "Creates a personalized travel itinerary based on user preferences",
                  "inputschema": {
                    "properties": {
                      "budget": {
                        "description": "Budget in USD",
                        "type": "number"
                      },
                      "destination": {
                        "description": "Destination location",
                        "type": "string"
                      },
                      "endDate": {
                        "description": "End date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "origin": {
                        "description": "Starting location",
                        "type": "string"
                      },
                      "preferences": {
                        "description": "Travel preferences",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "startDate": {
                        "description": "Start date (YYYY-MM-DD)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "origin",
                      "destination",
                      "startDate",
                      "endDate"
                    ],
                    "type": "object"
                  },
                  "name": "create_itinerary"
                },
                {
                  "description": "Optimizes an existing itinerary based on specified criteria",
                  "inputschema": {
                    "properties": {
                      "itineraryId": {
                        "description": "ID of the itinerary to optimize",
                        "type": "string"
                      },
                      "optimizationCriteria": {
                        "description": "Criteria for optimization (time, cost, etc.)",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "itineraryId",
                      "optimizationCriteria"
                    ],
                    "type": "object"
                  },
                  "name": "optimize_itinerary"
                },
                {
                  "description": "Searches for attractions and points of interest in a specified location",
                  "inputschema": {
                    "properties": {
                      "categories": {
                        "description": "Categories of attractions",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "location": {
                        "description": "Location to search attractions",
                        "type": "string"
                      },
                      "radius": {
                        "description": "Search radius in meters",
                        "type": "number"
                      }
                    },
                    "required": [
                      "location"
                    ],
                    "type": "object"
                  },
                  "name": "search_attractions"
                },
                {
                  "description": "Retrieves available transportation options between two points",
                  "inputschema": {
                    "properties": {
                      "date": {
                        "description": "Travel date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "destination": {
                        "description": "Destination point",
                        "type": "string"
                      },
                      "origin": {
                        "description": "Starting point",
                        "type": "string"
                      }
                    },
                    "required": [
                      "origin",
                      "destination",
                      "date"
                    ],
                    "type": "object"
                  },
                  "name": "get_transport_options"
                },
                {
                  "description": "Searches for accommodation options in a specified location",
                  "inputschema": {
                    "properties": {
                      "budget": {
                        "description": "Maximum price per night",
                        "type": "number"
                      },
                      "checkIn": {
                        "description": "Check-in date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "checkOut": {
                        "description": "Check-out date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "location": {
                        "description": "Location to search",
                        "type": "string"
                      }
                    },
                    "required": [
                      "location",
                      "checkIn",
                      "checkOut"
                    ],
                    "type": "object"
                  },
                  "name": "get_accommodations"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        },
        "terminal-controller-mcp": {
          "serverid": "terminal-controller-mcp",
          "self": "#/mcpproviders/GongRzhe/servers/terminal-controller-mcp",
          "xid": "/mcpproviders/GongRzhe/servers/terminal-controller-mcp",

          "metaurl": "#/mcpproviders/GongRzhe/servers/terminal-controller-mcp/meta",
          "meta": {
            "serverid": "terminal-controller-mcp",
            "self": "#/mcpproviders/GongRzhe/servers/terminal-controller-mcp/meta",
            "xid": "/mcpproviders/GongRzhe/servers/terminal-controller-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:42.486610025Z",
            "modifiedat": "2025-05-12T08:21:42.486610025Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GongRzhe/servers/terminal-controller-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GongRzhe/servers/terminal-controller-mcp/versions",
          "versions": {
            "1": {
              "serverid": "terminal-controller-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/GongRzhe/servers/terminal-controller-mcp/versions/1",
              "xid": "/mcpproviders/GongRzhe/servers/terminal-controller-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.GongRzhe/terminal-controller-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables secure terminal command execution, directory navigation, and file system operations through a standardized interface.",
              "createdat": "2025-05-12T08:21:42.486610025Z",
              "modifiedat": "2025-05-12T08:21:42.486610025Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-m",
                      "terminal_controller"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "terminal-controller"
                }
              ],
              "remotes": [],
              "repo_ref": "GongRzhe/terminal-controller-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Execute a terminal command and return its results.",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "type": "string"
                      },
                      "timeout": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "command"
                    ],
                    "type": "object"
                  },
                  "name": "execute_command"
                },
                {
                  "description": "Get recent command execution history.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "type": "integer"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_command_history"
                },
                {
                  "description": "Get the current working directory.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_current_directory"
                },
                {
                  "description": "Change the current working directory.",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "change_directory"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 7
    },
    "GreptimeTeam": {
      "mcpproviderid": "GreptimeTeam",
      "self": "#/mcpproviders/GreptimeTeam",
      "xid": "/mcpproviders/GreptimeTeam",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:57.975338791Z",
      "modifiedat": "2025-05-12T08:19:57.975338791Z",

      "serversurl": "#/mcpproviders/GreptimeTeam/servers",
      "servers": {
        "greptimedb-mcp-server": {
          "serverid": "greptimedb-mcp-server",
          "self": "#/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server",
          "xid": "/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server",

          "metaurl": "#/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server/meta",
          "meta": {
            "serverid": "greptimedb-mcp-server",
            "self": "#/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server/meta",
            "xid": "/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:57.975338791Z",
            "modifiedat": "2025-05-12T08:19:57.975338791Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "greptimedb-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server/versions/1",
              "xid": "/mcpproviders/GreptimeTeam/servers/greptimedb-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.GreptimeTeam/greptimedb-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation for GreptimeDB. This server provides AI assistants with a secure and structured way to explore and analyze databases. It enables them to list tables, read data, and execute SQL queries through a controlled interface, ensuring responsible database access.",
              "createdat": "2025-05-12T08:19:57.975338791Z",
              "modifiedat": "2025-05-12T08:19:57.975338791Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [],
                  "description": "Detailed explanation of when and how to use this prompt.",
                  "name": "example_prompt"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Database host",
                        "name": "GREPTIMEDB_HOST",
                        "required": true
                      },
                      {
                        "description": "Database port",
                        "name": "GREPTIMEDB_PORT",
                        "required": false
                      },
                      {
                        "description": "Database username",
                        "name": "GREPTIMEDB_USER",
                        "required": true
                      },
                      {
                        "description": "Database password",
                        "name": "GREPTIMEDB_PASSWORD",
                        "required": false
                      },
                      {
                        "description": "Database name",
                        "name": "GREPTIMEDB_DATABASE",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "/path/to/greptimedb-mcp-server",
                      "run",
                      "-m",
                      "greptimedb_mcp_server.server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "greptimedb-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "GreptimeTeam/greptimedb-mcp-server",
              "resources": [
                {
                  "description": "Data in table: {table}",
                  "mimetype": "text/plain",
                  "name": "Table",
                  "uritemplate": "greptime://{table}/data"
                }
              ],
              "tools": [
                {
                  "description": "Execute SQL query against GreptimeDB. Please use MySQL dialect when generating SQL queries.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SQL query to execute (using MySQL dialect)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_sql"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "InditexTech": {
      "mcpproviderid": "InditexTech",
      "self": "#/mcpproviders/InditexTech",
      "xid": "/mcpproviders/InditexTech",
      "epoch": 2,
      "createdat": "2025-05-12T08:18:43.083240529Z",
      "modifiedat": "2025-05-12T08:18:43.922879691Z",

      "serversurl": "#/mcpproviders/InditexTech/servers",
      "servers": {
        "mcp-server-simulator-ios-idb": {
          "serverid": "mcp-server-simulator-ios-idb",
          "self": "#/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb",
          "xid": "/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb",

          "metaurl": "#/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb/meta",
          "meta": {
            "serverid": "mcp-server-simulator-ios-idb",
            "self": "#/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb/meta",
            "xid": "/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:43.083240529Z",
            "modifiedat": "2025-05-12T08:18:43.083240529Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-simulator-ios-idb",
              "versionid": "1",
              "self": "#/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb/versions/1",
              "xid": "/mcpproviders/InditexTech/servers/mcp-server-simulator-ios-idb/versions/1",
              "epoch": 1,
              "name": "io.github.InditexTech/mcp-server-simulator-ios-idb",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables LLMs to interact with iOS simulators through natural language commands.",
              "createdat": "2025-05-12T08:18:43.083240529Z",
              "modifiedat": "2025-05-12T08:18:43.083240529Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "/path/to/mcp-server-simulator-ios-idb/dist/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-server-simulator-ios-idb"
                }
              ],
              "remotes": [],
              "repo_ref": "InditexTech/mcp-server-simulator-ios-idb",
              "resources": [],
              "tools": [
                {
                  "description": "Main tool for processing natural language instructions",
                  "inputschema": {
                    "properties": {
                      "instruction": {
                        "description": "Text instruction to process",
                        "type": "string"
                      }
                    },
                    "required": [
                      "instruction"
                    ],
                    "type": "object"
                  },
                  "name": "process-instruction"
                }
              ],
              "version_detail": {
                "version": "1.0.1"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-teams-server": {
          "serverid": "mcp-teams-server",
          "self": "#/mcpproviders/InditexTech/servers/mcp-teams-server",
          "xid": "/mcpproviders/InditexTech/servers/mcp-teams-server",

          "metaurl": "#/mcpproviders/InditexTech/servers/mcp-teams-server/meta",
          "meta": {
            "serverid": "mcp-teams-server",
            "self": "#/mcpproviders/InditexTech/servers/mcp-teams-server/meta",
            "xid": "/mcpproviders/InditexTech/servers/mcp-teams-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:43.922879691Z",
            "modifiedat": "2025-05-12T08:18:43.922879691Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/InditexTech/servers/mcp-teams-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/InditexTech/servers/mcp-teams-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-teams-server",
              "versionid": "1",
              "self": "#/mcpproviders/InditexTech/servers/mcp-teams-server/versions/1",
              "xid": "/mcpproviders/InditexTech/servers/mcp-teams-server/versions/1",
              "epoch": 1,
              "name": "io.github.InditexTech/mcp-teams-server",
              "isdefault": true,
              "description": "An MCP (Model Context Protocol) server implementation for Microsoft Teams integration, providing capabilities to read messages, create messages, reply to messages, mention members.",
              "createdat": "2025-05-12T08:18:43.922879691Z",
              "modifiedat": "2025-05-12T08:18:43.922879691Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "ghcr.io/inditextech/mcp-teams-server:latest"
                }
              ],
              "remotes": [],
              "repo_ref": "InditexTech/mcp-teams-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "JetBrains": {
      "mcpproviderid": "JetBrains",
      "self": "#/mcpproviders/JetBrains",
      "xid": "/mcpproviders/JetBrains",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:38.937005593Z",
      "modifiedat": "2025-05-12T08:19:38.937005593Z",

      "serversurl": "#/mcpproviders/JetBrains/servers",
      "servers": {
        "mcp-jetbrains": {
          "serverid": "mcp-jetbrains",
          "self": "#/mcpproviders/JetBrains/servers/mcp-jetbrains",
          "xid": "/mcpproviders/JetBrains/servers/mcp-jetbrains",

          "metaurl": "#/mcpproviders/JetBrains/servers/mcp-jetbrains/meta",
          "meta": {
            "serverid": "mcp-jetbrains",
            "self": "#/mcpproviders/JetBrains/servers/mcp-jetbrains/meta",
            "xid": "/mcpproviders/JetBrains/servers/mcp-jetbrains/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:38.937005593Z",
            "modifiedat": "2025-05-12T08:19:38.937005593Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/JetBrains/servers/mcp-jetbrains/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/JetBrains/servers/mcp-jetbrains/versions",
          "versions": {
            "1": {
              "serverid": "mcp-jetbrains",
              "versionid": "1",
              "self": "#/mcpproviders/JetBrains/servers/mcp-jetbrains/versions/1",
              "xid": "/mcpproviders/JetBrains/servers/mcp-jetbrains/versions/1",
              "epoch": 1,
              "name": "io.github.JetBrains/mcp-jetbrains",
              "isdefault": true,
              "description": "You can interact with an JetBrains IntelliJ IDE and its features through this MCP (Model Context Protocol) server. The server provides access to various IDE tools and functionalities. All requests should be formatted as JSON objects according to the Model Context Protocol specification.",
              "createdat": "2025-05-12T08:19:38.937005593Z",
              "modifiedat": "2025-05-12T08:19:38.937005593Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "IDE_PORT"
                      },
                      {
                        "name": "HOST"
                      },
                      {
                        "name": "LOG_ENABLED"
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@jetbrains/mcp-proxy"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@jetbrains/mcp-proxy"
                }
              ],
              "remotes": [],
              "repo_ref": "JetBrains/mcp-jetbrains",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "JexinSam": {
      "mcpproviderid": "JexinSam",
      "self": "#/mcpproviders/JexinSam",
      "xid": "/mcpproviders/JexinSam",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:54.899986487Z",
      "modifiedat": "2025-05-12T08:20:54.899986487Z",

      "serversurl": "#/mcpproviders/JexinSam/servers",
      "servers": {
        "mssql_mcp_server": {
          "serverid": "mssql_mcp_server",
          "self": "#/mcpproviders/JexinSam/servers/mssql_mcp_server",
          "xid": "/mcpproviders/JexinSam/servers/mssql_mcp_server",

          "metaurl": "#/mcpproviders/JexinSam/servers/mssql_mcp_server/meta",
          "meta": {
            "serverid": "mssql_mcp_server",
            "self": "#/mcpproviders/JexinSam/servers/mssql_mcp_server/meta",
            "xid": "/mcpproviders/JexinSam/servers/mssql_mcp_server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:54.899986487Z",
            "modifiedat": "2025-05-12T08:20:54.899986487Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/JexinSam/servers/mssql_mcp_server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/JexinSam/servers/mssql_mcp_server/versions",
          "versions": {
            "1": {
              "serverid": "mssql_mcp_server",
              "versionid": "1",
              "self": "#/mcpproviders/JexinSam/servers/mssql_mcp_server/versions/1",
              "xid": "/mcpproviders/JexinSam/servers/mssql_mcp_server/versions/1",
              "epoch": 1,
              "name": "io.github.JexinSam/mssql_mcp_server",
              "isdefault": true,
              "description": "MSSQL MCP Server is a Model Context Protocol (MCP) server that enables secure and structured interaction with Microsoft SQL Server (MSSQL) databases. It allows AI assistants to list available tables, read table contents, and execute SQL queries with controlled access, ensuring safer database exploration, strict permission enforcement, and logging of database interactions.",
              "createdat": "2025-05-12T08:20:54.899986487Z",
              "modifiedat": "2025-05-12T08:20:54.899986487Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "MSSQL driver environment variable",
                        "name": "MSSQL_DRIVER",
                        "required": true
                      },
                      {
                        "description": "MSSQL host environment variable",
                        "name": "MSSQL_HOST",
                        "required": true
                      },
                      {
                        "description": "MSSQL user environment variable",
                        "name": "MSSQL_USER",
                        "required": true
                      },
                      {
                        "description": "MSSQL password environment variable",
                        "name": "MSSQL_PASSWORD",
                        "required": true
                      },
                      {
                        "description": "MSSQL database environment variable",
                        "name": "MSSQL_DATABASE",
                        "required": true
                      },
                      {
                        "description": "Optional TrustServerCertificate environment variable",
                        "name": "TrustServerCertificate",
                        "required": false
                      },
                      {
                        "description": "Optional Trusted_Connection environment variable",
                        "name": "Trusted_Connection",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mssql-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "JexinSam/mssql_mcp_server",
              "resources": [
                {
                  "description": "Data in table: {table}",
                  "mimetype": "text/plain",
                  "name": "Table",
                  "uritemplate": "mssql://{table}/data"
                }
              ],
              "tools": [
                {
                  "description": "Execute an SQL query on the MSSQL server",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_sql"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "JordiNeil": {
      "mcpproviderid": "JordiNeil",
      "self": "#/mcpproviders/JordiNeil",
      "xid": "/mcpproviders/JordiNeil",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:12.201430834Z",
      "modifiedat": "2025-05-12T08:18:12.201430834Z",

      "serversurl": "#/mcpproviders/JordiNeil/servers",
      "servers": {
        "mcp-databricks-server": {
          "serverid": "mcp-databricks-server",
          "self": "#/mcpproviders/JordiNeil/servers/mcp-databricks-server",
          "xid": "/mcpproviders/JordiNeil/servers/mcp-databricks-server",

          "metaurl": "#/mcpproviders/JordiNeil/servers/mcp-databricks-server/meta",
          "meta": {
            "serverid": "mcp-databricks-server",
            "self": "#/mcpproviders/JordiNeil/servers/mcp-databricks-server/meta",
            "xid": "/mcpproviders/JordiNeil/servers/mcp-databricks-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:12.201430834Z",
            "modifiedat": "2025-05-12T08:18:12.201430834Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/JordiNeil/servers/mcp-databricks-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/JordiNeil/servers/mcp-databricks-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-databricks-server",
              "versionid": "1",
              "self": "#/mcpproviders/JordiNeil/servers/mcp-databricks-server/versions/1",
              "xid": "/mcpproviders/JordiNeil/servers/mcp-databricks-server/versions/1",
              "epoch": 1,
              "name": "io.github.JordiNeil/mcp-databricks-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that connects to Databricks API, allowing LLMs to run SQL queries, list jobs, and get job status.",
              "createdat": "2025-05-12T08:18:12.201430834Z",
              "modifiedat": "2025-05-12T08:18:12.201430834Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Databricks instance URL",
                        "name": "DATABRICKS_HOST",
                        "required": true
                      },
                      {
                        "description": "Personal access token for Databricks",
                        "name": "DATABRICKS_TOKEN",
                        "required": true
                      },
                      {
                        "description": "HTTP path for Databricks SQL warehouse",
                        "name": "DATABRICKS_HTTP_PATH",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/databricks-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "JordiNeil/mcp-databricks-server",
              "resources": [],
              "tools": [
                {
                  "description": "Execute SQL queries on your Databricks SQL warehouse",
                  "inputschema": {
                    "properties": {
                      "sql": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "sql"
                    ],
                    "type": "object"
                  },
                  "name": "run_sql_query"
                },
                {
                  "description": "List all Databricks jobs in your workspace",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_jobs"
                },
                {
                  "description": "Get the status of a specific Databricks job by ID",
                  "inputschema": {
                    "properties": {
                      "job_id": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "job_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_job_status"
                },
                {
                  "description": "Get detailed information about a specific Databricks job",
                  "inputschema": {
                    "properties": {
                      "job_id": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "job_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_job_details"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Klavis-AI": {
      "mcpproviderid": "Klavis-AI",
      "self": "#/mcpproviders/Klavis-AI",
      "xid": "/mcpproviders/Klavis-AI",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:01.689125932Z",
      "modifiedat": "2025-05-12T08:19:01.689125932Z",

      "serversurl": "#/mcpproviders/Klavis-AI/servers",
      "servers": {
        "klavis": {
          "serverid": "klavis",
          "self": "#/mcpproviders/Klavis-AI/servers/klavis",
          "xid": "/mcpproviders/Klavis-AI/servers/klavis",

          "metaurl": "#/mcpproviders/Klavis-AI/servers/klavis/meta",
          "meta": {
            "serverid": "klavis",
            "self": "#/mcpproviders/Klavis-AI/servers/klavis/meta",
            "xid": "/mcpproviders/Klavis-AI/servers/klavis/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:01.689125932Z",
            "modifiedat": "2025-05-12T08:19:01.689125932Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Klavis-AI/servers/klavis/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Klavis-AI/servers/klavis/versions",
          "versions": {
            "1": {
              "serverid": "klavis",
              "versionid": "1",
              "self": "#/mcpproviders/Klavis-AI/servers/klavis/versions/1",
              "xid": "/mcpproviders/Klavis-AI/servers/klavis/versions/1",
              "epoch": 1,
              "name": "io.github.Klavis-AI/klavis",
              "isdefault": true,
              "description": "MCP server providing web crawling, scraping, search, extraction, and related tools via Model Context Protocol.",
              "createdat": "2025-05-12T08:19:01.689125932Z",
              "modifiedat": "2025-05-12T08:19:01.689125932Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "klavisai/firecrawl-mcp:latest"
                },
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@klavis-ai/firecrawl-mcp"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:5000"
                }
              ],
              "repo_ref": "Klavis-AI/klavis",
              "resources": [],
              "tools": [
                {
                  "description": "Scrape a single webpage with advanced options for content extraction. Supports various formats including markdown, HTML, and screenshots. Can execute custom actions like clicking or scrolling before scraping.",
                  "inputschema": {
                    "properties": {
                      "actions": {
                        "description": "List of actions to perform before scraping",
                        "items": {
                          "properties": {
                            "direction": {
                              "description": "Scroll direction",
                              "enum": [
                                "up",
                                "down"
                              ],
                              "type": "string"
                            },
                            "fullPage": {
                              "description": "Take full page screenshot",
                              "type": "boolean"
                            },
                            "key": {
                              "description": "Key to press (for press action)",
                              "type": "string"
                            },
                            "milliseconds": {
                              "description": "Time to wait in milliseconds (for wait action)",
                              "type": "number"
                            },
                            "script": {
                              "description": "JavaScript code to execute",
                              "type": "string"
                            },
                            "selector": {
                              "description": "CSS selector for the target element",
                              "type": "string"
                            },
                            "text": {
                              "description": "Text to write (for write action)",
                              "type": "string"
                            },
                            "type": {
                              "description": "Type of action to perform",
                              "enum": [
                                "wait",
                                "click",
                                "screenshot",
                                "write",
                                "press",
                                "scroll",
                                "scrape",
                                "executeJavascript"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "excludeTags": {
                        "description": "HTML tags to exclude from extraction",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "extract": {
                        "description": "Configuration for structured data extraction",
                        "properties": {
                          "prompt": {
                            "description": "User prompt for LLM extraction",
                            "type": "string"
                          },
                          "schema": {
                            "description": "Schema for structured data extraction",
                            "type": "object"
                          },
                          "systemPrompt": {
                            "description": "System prompt for LLM extraction",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "formats": {
                        "default": [
                          "markdown"
                        ],
                        "description": "Content formats to extract (default: ['markdown'])",
                        "items": {
                          "enum": [
                            "markdown",
                            "html",
                            "rawHtml",
                            "screenshot",
                            "links",
                            "screenshot@fullPage",
                            "extract"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "includeTags": {
                        "description": "HTML tags to specifically include in extraction",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "location": {
                        "description": "Location settings for scraping",
                        "properties": {
                          "country": {
                            "description": "Country code for geolocation",
                            "type": "string"
                          },
                          "languages": {
                            "description": "Language codes for content",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "mobile": {
                        "description": "Use mobile viewport",
                        "type": "boolean"
                      },
                      "onlyMainContent": {
                        "description": "Extract only the main content, filtering out navigation, footers, etc.",
                        "type": "boolean"
                      },
                      "removeBase64Images": {
                        "description": "Remove base64 encoded images from output",
                        "type": "boolean"
                      },
                      "skipTlsVerification": {
                        "description": "Skip TLS certificate verification",
                        "type": "boolean"
                      },
                      "timeout": {
                        "description": "Maximum time in milliseconds to wait for the page to load",
                        "type": "number"
                      },
                      "url": {
                        "description": "The URL to scrape",
                        "type": "string"
                      },
                      "waitFor": {
                        "description": "Time in milliseconds to wait for dynamic content to load",
                        "type": "number"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_scrape"
                },
                {
                  "description": "Discover URLs from a starting point. Can use both sitemap.xml and HTML link discovery.",
                  "inputschema": {
                    "properties": {
                      "ignoreSitemap": {
                        "description": "Skip sitemap.xml discovery and only use HTML links",
                        "type": "boolean"
                      },
                      "includeSubdomains": {
                        "description": "Include URLs from subdomains in results",
                        "type": "boolean"
                      },
                      "limit": {
                        "description": "Maximum number of URLs to return",
                        "type": "number"
                      },
                      "search": {
                        "description": "Optional search term to filter URLs",
                        "type": "string"
                      },
                      "sitemapOnly": {
                        "description": "Only use sitemap.xml for discovery, ignore HTML links",
                        "type": "boolean"
                      },
                      "url": {
                        "description": "Starting URL for URL discovery",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_map"
                },
                {
                  "description": "Start an asynchronous crawl of multiple pages from a starting URL. Supports depth control, path filtering, and webhook notifications.",
                  "inputschema": {
                    "properties": {
                      "allowBackwardLinks": {
                        "description": "Allow crawling links that point to parent directories",
                        "type": "boolean"
                      },
                      "allowExternalLinks": {
                        "description": "Allow crawling links to external domains",
                        "type": "boolean"
                      },
                      "deduplicateSimilarURLs": {
                        "description": "Remove similar URLs during crawl",
                        "type": "boolean"
                      },
                      "excludePaths": {
                        "description": "URL paths to exclude from crawling",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "ignoreQueryParameters": {
                        "description": "Ignore query parameters when comparing URLs",
                        "type": "boolean"
                      },
                      "ignoreSitemap": {
                        "description": "Skip sitemap.xml discovery",
                        "type": "boolean"
                      },
                      "includePaths": {
                        "description": "Only crawl these URL paths",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "limit": {
                        "description": "Maximum number of pages to crawl",
                        "type": "number"
                      },
                      "maxDepth": {
                        "description": "Maximum link depth to crawl",
                        "type": "number"
                      },
                      "scrapeOptions": {
                        "description": "Options for scraping each page",
                        "properties": {
                          "excludeTags": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "formats": {
                            "items": {
                              "enum": [
                                "markdown",
                                "html",
                                "rawHtml",
                                "screenshot",
                                "links",
                                "screenshot@fullPage",
                                "extract"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "includeTags": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "onlyMainContent": {
                            "type": "boolean"
                          },
                          "waitFor": {
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "url": {
                        "description": "Starting URL for the crawl",
                        "type": "string"
                      },
                      "webhook": {
                        "oneOf": [
                          {
                            "description": "Webhook URL to notify when crawl is complete",
                            "type": "string"
                          },
                          {
                            "properties": {
                              "headers": {
                                "description": "Custom headers for webhook requests",
                                "type": "object"
                              },
                              "url": {
                                "description": "Webhook URL",
                                "type": "string"
                              }
                            },
                            "required": [
                              "url"
                            ],
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_crawl"
                },
                {
                  "description": "Scrape multiple URLs in batch mode. Returns a job ID that can be used to check status.",
                  "inputschema": {
                    "properties": {
                      "options": {
                        "properties": {
                          "excludeTags": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "formats": {
                            "items": {
                              "enum": [
                                "markdown",
                                "html",
                                "rawHtml",
                                "screenshot",
                                "links",
                                "screenshot@fullPage",
                                "extract"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "includeTags": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "onlyMainContent": {
                            "type": "boolean"
                          },
                          "waitFor": {
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "urls": {
                        "description": "List of URLs to scrape",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "urls"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_batch_scrape"
                },
                {
                  "description": "Check the status of a batch scraping job.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "Batch job ID to check",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_check_batch_status"
                },
                {
                  "description": "Check the status of a crawl job.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "Crawl job ID to check",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_check_crawl_status"
                },
                {
                  "description": "Search and retrieve content from web pages with optional scraping. Returns SERP results by default (url, title, description) or full page content when scrapeOptions are provided.",
                  "inputschema": {
                    "properties": {
                      "country": {
                        "description": "Country code for search results (default: us)",
                        "type": "string"
                      },
                      "filter": {
                        "description": "Search filter",
                        "type": "string"
                      },
                      "lang": {
                        "description": "Language code for search results (default: en)",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Maximum number of results to return (default: 5)",
                        "type": "number"
                      },
                      "location": {
                        "description": "Location settings for search",
                        "properties": {
                          "country": {
                            "description": "Country code for geolocation",
                            "type": "string"
                          },
                          "languages": {
                            "description": "Language codes for content",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "query": {
                        "description": "Search query string",
                        "type": "string"
                      },
                      "scrapeOptions": {
                        "description": "Options for scraping search results",
                        "properties": {
                          "formats": {
                            "description": "Content formats to extract from search results",
                            "items": {
                              "enum": [
                                "markdown",
                                "html",
                                "rawHtml"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "onlyMainContent": {
                            "description": "Extract only the main content from results",
                            "type": "boolean"
                          },
                          "waitFor": {
                            "description": "Time in milliseconds to wait for dynamic content",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "tbs": {
                        "description": "Time-based search filter",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_search"
                },
                {
                  "description": "Extract structured information from web pages using LLM. Supports both cloud AI and self-hosted LLM extraction.",
                  "inputschema": {
                    "properties": {
                      "allowExternalLinks": {
                        "description": "Allow extraction from external links",
                        "type": "boolean"
                      },
                      "enableWebSearch": {
                        "description": "Enable web search for additional context",
                        "type": "boolean"
                      },
                      "includeSubdomains": {
                        "description": "Include subdomains in extraction",
                        "type": "boolean"
                      },
                      "prompt": {
                        "description": "Prompt for the LLM extraction",
                        "type": "string"
                      },
                      "schema": {
                        "description": "JSON schema for structured data extraction",
                        "type": "object"
                      },
                      "systemPrompt": {
                        "description": "System prompt for LLM extraction",
                        "type": "string"
                      },
                      "urls": {
                        "description": "List of URLs to extract information from",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "urls"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_extract"
                },
                {
                  "description": "Generate standardized LLMs.txt file for a given URL, which provides context about how LLMs should interact with the website.",
                  "inputschema": {
                    "properties": {
                      "maxUrls": {
                        "description": "Maximum number of URLs to process (1-100, default: 10)",
                        "type": "number"
                      },
                      "showFullText": {
                        "description": "Whether to show the full LLMs-full.txt in the response",
                        "type": "boolean"
                      },
                      "url": {
                        "description": "The URL to generate LLMs.txt from",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_generate_llmstxt"
                }
              ],
              "version_detail": {
                "version": "1.7.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Kong": {
      "mcpproviderid": "Kong",
      "self": "#/mcpproviders/Kong",
      "xid": "/mcpproviders/Kong",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:39.874574079Z",
      "modifiedat": "2025-05-12T08:17:39.874574079Z",

      "serversurl": "#/mcpproviders/Kong/servers",
      "servers": {
        "mcp-konnect": {
          "serverid": "mcp-konnect",
          "self": "#/mcpproviders/Kong/servers/mcp-konnect",
          "xid": "/mcpproviders/Kong/servers/mcp-konnect",

          "metaurl": "#/mcpproviders/Kong/servers/mcp-konnect/meta",
          "meta": {
            "serverid": "mcp-konnect",
            "self": "#/mcpproviders/Kong/servers/mcp-konnect/meta",
            "xid": "/mcpproviders/Kong/servers/mcp-konnect/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:39.874574079Z",
            "modifiedat": "2025-05-12T08:17:39.874574079Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Kong/servers/mcp-konnect/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Kong/servers/mcp-konnect/versions",
          "versions": {
            "1": {
              "serverid": "mcp-konnect",
              "versionid": "1",
              "self": "#/mcpproviders/Kong/servers/mcp-konnect/versions/1",
              "xid": "/mcpproviders/Kong/servers/mcp-konnect/versions/1",
              "epoch": 1,
              "name": "io.github.Kong/mcp-konnect",
              "isdefault": true,
              "description": "Tools for managing and analyzing Kong Konnect API Gateway configurations and traffic",
              "createdat": "2025-05-12T08:17:39.874574079Z",
              "modifiedat": "2025-05-12T08:17:39.874574079Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your Kong Konnect API key",
                        "name": "KONNECT_ACCESS_TOKEN",
                        "required": true
                      },
                      {
                        "description": "The API region to use (defaults to US)",
                        "name": "KONNECT_REGION",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "dist/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "Kong/mcp-konnect",
              "resources": [],
              "tools": [
                {
                  "description": "Query and analyze Kong API Gateway requests with customizable filters.",
                  "inputschema": {
                    "properties": {
                      "consumerIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "excludeStatusCodes": {
                        "items": {
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "httpMethods": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "maxResults": {
                        "type": "integer"
                      },
                      "routeIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "serviceIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "statusCodes": {
                        "items": {
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "timeRange": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "timeRange"
                    ],
                    "type": "object"
                  },
                  "name": "query_api_requests"
                },
                {
                  "description": "Analyze API requests made by a specific consumer.",
                  "inputschema": {
                    "properties": {
                      "consumerId": {
                        "type": "string"
                      },
                      "failureOnly": {
                        "type": "boolean"
                      },
                      "maxResults": {
                        "type": "integer"
                      },
                      "successOnly": {
                        "type": "boolean"
                      },
                      "timeRange": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "consumerId",
                      "timeRange"
                    ],
                    "type": "object"
                  },
                  "name": "get_consumer_requests"
                },
                {
                  "description": "List all services associated with a control plane.",
                  "inputschema": {
                    "properties": {
                      "controlPlaneId": {
                        "type": "string"
                      },
                      "offset": {
                        "type": "string"
                      },
                      "size": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "controlPlaneId"
                    ],
                    "type": "object"
                  },
                  "name": "list_services"
                },
                {
                  "description": "List all routes associated with a control plane.",
                  "inputschema": {
                    "properties": {
                      "controlPlaneId": {
                        "type": "string"
                      },
                      "offset": {
                        "type": "string"
                      },
                      "size": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "controlPlaneId"
                    ],
                    "type": "object"
                  },
                  "name": "list_routes"
                },
                {
                  "description": "List all consumers associated with a control plane.",
                  "inputschema": {
                    "properties": {
                      "controlPlaneId": {
                        "type": "string"
                      },
                      "offset": {
                        "type": "string"
                      },
                      "size": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "controlPlaneId"
                    ],
                    "type": "object"
                  },
                  "name": "list_consumers"
                },
                {
                  "description": "List all plugins associated with a control plane.",
                  "inputschema": {
                    "properties": {
                      "controlPlaneId": {
                        "type": "string"
                      },
                      "offset": {
                        "type": "string"
                      },
                      "size": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "controlPlaneId"
                    ],
                    "type": "object"
                  },
                  "name": "list_plugins"
                },
                {
                  "description": "List control planes with filtering and pagination.",
                  "inputschema": {
                    "properties": {
                      "filterCloudGateway": {
                        "type": "boolean"
                      },
                      "filterClusterType": {
                        "type": "string"
                      },
                      "filterName": {
                        "type": "string"
                      },
                      "labels": {
                        "type": "object"
                      },
                      "pageNumber": {
                        "type": "integer"
                      },
                      "pageSize": {
                        "type": "integer"
                      },
                      "sort": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_control_planes"
                },
                {
                  "description": "Get details of a specific control plane.",
                  "inputschema": {
                    "properties": {
                      "controlPlaneId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "controlPlaneId"
                    ],
                    "type": "object"
                  },
                  "name": "get_control_plane"
                },
                {
                  "description": "List memberships of a control plane group.",
                  "inputschema": {
                    "properties": {
                      "groupId": {
                        "type": "string"
                      },
                      "pageAfter": {
                        "type": "string"
                      },
                      "pageSize": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "groupId"
                    ],
                    "type": "object"
                  },
                  "name": "list_control_plane_group_memberships"
                },
                {
                  "description": "Check membership of a control plane in a group.",
                  "inputschema": {
                    "properties": {
                      "controlPlaneId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "controlPlaneId"
                    ],
                    "type": "object"
                  },
                  "name": "check_control_plane_group_membership"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "KyrieTangSheng": {
      "mcpproviderid": "KyrieTangSheng",
      "self": "#/mcpproviders/KyrieTangSheng",
      "xid": "/mcpproviders/KyrieTangSheng",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:59.864721324Z",
      "modifiedat": "2025-05-12T08:17:59.864721324Z",

      "serversurl": "#/mcpproviders/KyrieTangSheng/servers",
      "servers": {
        "mcp-server-nationalparks": {
          "serverid": "mcp-server-nationalparks",
          "self": "#/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks",
          "xid": "/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks",

          "metaurl": "#/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks/meta",
          "meta": {
            "serverid": "mcp-server-nationalparks",
            "self": "#/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks/meta",
            "xid": "/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:59.864721324Z",
            "modifiedat": "2025-05-12T08:17:59.864721324Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-nationalparks",
              "versionid": "1",
              "self": "#/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks/versions/1",
              "xid": "/mcpproviders/KyrieTangSheng/servers/mcp-server-nationalparks/versions/1",
              "epoch": 1,
              "name": "io.github.KyrieTangSheng/mcp-server-nationalparks",
              "isdefault": true,
              "description": "MCP Server for the National Park Service (NPS) API, providing real-time information about U.S. National Parks, including park details, alerts, and activities.",
              "createdat": "2025-05-12T08:17:59.864721324Z",
              "modifiedat": "2025-05-12T08:17:59.864721324Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@KyrieTangSheng/mcp-server-nationalparks"
                }
              ],
              "remotes": [],
              "repo_ref": "KyrieTangSheng/mcp-server-nationalparks",
              "resources": [],
              "tools": [
                {
                  "description": "Search for national parks based on state, name, activities, or other criteria",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "findParks"
                },
                {
                  "description": "Get detailed information about a specific national park",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getParkDetails"
                },
                {
                  "description": "Get current alerts for national parks including closures, hazards, and important information",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getAlerts"
                },
                {
                  "description": "Get information about visitor centers and their operating hours",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getVisitorCenters"
                },
                {
                  "description": "Get information about available campgrounds and their amenities",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getCampgrounds"
                },
                {
                  "description": "Find upcoming events at parks",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getEvents"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Laksh-star": {
      "mcpproviderid": "Laksh-star",
      "self": "#/mcpproviders/Laksh-star",
      "xid": "/mcpproviders/Laksh-star",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:11.936559946Z",
      "modifiedat": "2025-05-12T08:21:11.936559946Z",

      "serversurl": "#/mcpproviders/Laksh-star/servers",
      "servers": {
        "mcp-server-tmdb": {
          "serverid": "mcp-server-tmdb",
          "self": "#/mcpproviders/Laksh-star/servers/mcp-server-tmdb",
          "xid": "/mcpproviders/Laksh-star/servers/mcp-server-tmdb",

          "metaurl": "#/mcpproviders/Laksh-star/servers/mcp-server-tmdb/meta",
          "meta": {
            "serverid": "mcp-server-tmdb",
            "self": "#/mcpproviders/Laksh-star/servers/mcp-server-tmdb/meta",
            "xid": "/mcpproviders/Laksh-star/servers/mcp-server-tmdb/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:11.936559946Z",
            "modifiedat": "2025-05-12T08:21:11.936559946Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Laksh-star/servers/mcp-server-tmdb/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Laksh-star/servers/mcp-server-tmdb/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-tmdb",
              "versionid": "1",
              "self": "#/mcpproviders/Laksh-star/servers/mcp-server-tmdb/versions/1",
              "xid": "/mcpproviders/Laksh-star/servers/mcp-server-tmdb/versions/1",
              "epoch": 1,
              "name": "io.github.Laksh-star/mcp-server-tmdb",
              "isdefault": true,
              "description": "This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.",
              "createdat": "2025-05-12T08:21:11.936559946Z",
              "modifiedat": "2025-05-12T08:21:11.936559946Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for TMDB access",
                        "name": "TMDB_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@Laksh-star/mcp-server-tmdb"
                }
              ],
              "remotes": [],
              "repo_ref": "Laksh-star/mcp-server-tmdb",
              "resources": [
                {
                  "description": "Comprehensive movie details including title, release date, rating, overview, genres, poster URL, cast information (top 5 actors), director, and selected reviews.",
                  "mimetype": "application/json",
                  "name": "Movies",
                  "uritemplate": "tmdb:///movie/{movie_id}"
                }
              ],
              "tools": [
                {
                  "description": "Search for movies by title or keywords",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "Search query for movie titles",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_movies"
                },
                {
                  "description": "Get movie recommendations based on a movie ID",
                  "inputschema": {
                    "properties": {
                      "movieId": {
                        "description": "TMDB movie ID to get recommendations for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "movieId"
                    ],
                    "type": "object"
                  },
                  "name": "get_recommendations"
                },
                {
                  "description": "Get trending movies for a time window",
                  "inputschema": {
                    "properties": {
                      "timeWindow": {
                        "description": "Time window for trending movies",
                        "enum": [
                          "day",
                          "week"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "timeWindow"
                    ],
                    "type": "object"
                  },
                  "name": "get_trending"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "MFYDev": {
      "mcpproviderid": "MFYDev",
      "self": "#/mcpproviders/MFYDev",
      "xid": "/mcpproviders/MFYDev",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:52.861469496Z",
      "modifiedat": "2025-05-12T08:17:52.861469496Z",

      "serversurl": "#/mcpproviders/MFYDev/servers",
      "servers": {
        "ghost-mcp": {
          "serverid": "ghost-mcp",
          "self": "#/mcpproviders/MFYDev/servers/ghost-mcp",
          "xid": "/mcpproviders/MFYDev/servers/ghost-mcp",

          "metaurl": "#/mcpproviders/MFYDev/servers/ghost-mcp/meta",
          "meta": {
            "serverid": "ghost-mcp",
            "self": "#/mcpproviders/MFYDev/servers/ghost-mcp/meta",
            "xid": "/mcpproviders/MFYDev/servers/ghost-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:52.861469496Z",
            "modifiedat": "2025-05-12T08:17:52.861469496Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/MFYDev/servers/ghost-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/MFYDev/servers/ghost-mcp/versions",
          "versions": {
            "1": {
              "serverid": "ghost-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/MFYDev/servers/ghost-mcp/versions/1",
              "xid": "/mcpproviders/MFYDev/servers/ghost-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.MFYDev/ghost-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude. This server provides secure and comprehensive access to your Ghost blog, leveraging JWT authentication and a rich set of MCP tools for managing posts, users, members, tiers, offers, and newsletters.",
              "createdat": "2025-05-12T08:17:52.861469496Z",
              "modifiedat": "2025-05-12T08:17:52.861469496Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "URL of your Ghost blog",
                        "name": "GHOST_API_URL",
                        "required": true
                      },
                      {
                        "description": "Admin API key for Ghost",
                        "name": "GHOST_ADMIN_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Ghost API version, e.g. v5.0",
                        "name": "GHOST_API_VERSION",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@fanyangmeng/ghost-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@fanyangmeng/ghost-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "MFYDev/ghost-mcp",
              "resources": [
                {
                  "description": "User resource identified by user_id.",
                  "name": "user",
                  "uritemplate": "user://{user_id}"
                },
                {
                  "description": "Member resource identified by member_id.",
                  "name": "member",
                  "uritemplate": "member://{member_id}"
                },
                {
                  "description": "Tier resource identified by tier_id.",
                  "name": "tier",
                  "uritemplate": "tier://{tier_id}"
                },
                {
                  "description": "Offer resource identified by offer_id.",
                  "name": "offer",
                  "uritemplate": "offer://{offer_id}"
                },
                {
                  "description": "Newsletter resource identified by newsletter_id.",
                  "name": "newsletter",
                  "uritemplate": "newsletter://{newsletter_id}"
                },
                {
                  "description": "Post resource identified by post_id.",
                  "name": "post",
                  "uritemplate": "post://{post_id}"
                },
                {
                  "description": "Blog information resource.",
                  "name": "blog-info",
                  "uritemplate": "blog://info"
                }
              ],
              "tools": [
                {
                  "description": "Browse invites with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "invites_browse"
                },
                {
                  "description": "Add a new invite with role_id and email.",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "role_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "role_id",
                      "email"
                    ],
                    "type": "object"
                  },
                  "name": "invites_add"
                },
                {
                  "description": "Delete an invite by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "invites_delete"
                },
                {
                  "description": "Browse members with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "members_browse"
                },
                {
                  "description": "Read a member by id or email.",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "members_read"
                },
                {
                  "description": "Add a new member with email and optional details.",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "labels": {
                        "items": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "name": {
                        "type": "string"
                      },
                      "newsletters": {
                        "items": {
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "note": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "email"
                    ],
                    "type": "object"
                  },
                  "name": "members_add"
                },
                {
                  "description": "Edit member details by id.",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "labels": {
                        "items": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "name": {
                        "type": "string"
                      },
                      "newsletters": {
                        "items": {
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "note": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "members_edit"
                },
                {
                  "description": "Delete a member by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "members_delete"
                },
                {
                  "description": "Browse offers with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "offers_browse"
                },
                {
                  "description": "Read an offer by id or code.",
                  "inputschema": {
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "offers_read"
                },
                {
                  "description": "Add a new offer with required fields.",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "type": "number"
                      },
                      "cadence": {
                        "type": "string"
                      },
                      "code": {
                        "type": "string"
                      },
                      "currency": {
                        "type": "string"
                      },
                      "display_description": {
                        "type": "string"
                      },
                      "display_title": {
                        "type": "string"
                      },
                      "duration": {
                        "type": "string"
                      },
                      "duration_in_months": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "tier_id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "code",
                      "cadence",
                      "duration",
                      "amount",
                      "tier_id",
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "offers_add"
                },
                {
                  "description": "Edit an offer by id with optional fields.",
                  "inputschema": {
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "display_description": {
                        "type": "string"
                      },
                      "display_title": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "offers_edit"
                },
                {
                  "description": "Delete an offer by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "offers_delete"
                },
                {
                  "description": "Browse posts with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "posts_browse"
                },
                {
                  "description": "Read a post by id or slug.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "posts_read"
                },
                {
                  "description": "Add a new post with title and optional content.",
                  "inputschema": {
                    "properties": {
                      "html": {
                        "type": "string"
                      },
                      "lexical": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "title"
                    ],
                    "type": "object"
                  },
                  "name": "posts_add"
                },
                {
                  "description": "Edit a post by id with optional fields.",
                  "inputschema": {
                    "properties": {
                      "html": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "lexical": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      },
                      "updated_at": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "updated_at"
                    ],
                    "type": "object"
                  },
                  "name": "posts_edit"
                },
                {
                  "description": "Delete a post by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "posts_delete"
                },
                {
                  "description": "Browse roles with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "roles_browse"
                },
                {
                  "description": "Read a role by id or name.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "roles_read"
                },
                {
                  "description": "Browse tags with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "tags_browse"
                },
                {
                  "description": "Read a tag by id or slug.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "tags_read"
                },
                {
                  "description": "Add a new tag with name and optional fields.",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "tags_add"
                },
                {
                  "description": "Edit a tag by id with optional fields.",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "tags_edit"
                },
                {
                  "description": "Delete a tag by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "tags_delete"
                },
                {
                  "description": "Browse tiers with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "include": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "tiers_browse"
                },
                {
                  "description": "Read a tier by id or slug.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "include": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "tiers_read"
                },
                {
                  "description": "Add a new tier with required name and optional details.",
                  "inputschema": {
                    "properties": {
                      "benefits": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "currency": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "monthly_price": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "visibility": {
                        "type": "string"
                      },
                      "welcome_page_url": {
                        "type": "string"
                      },
                      "yearly_price": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "tiers_add"
                },
                {
                  "description": "Edit a tier by id with optional fields.",
                  "inputschema": {
                    "properties": {
                      "benefits": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "currency": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "monthly_price": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "visibility": {
                        "type": "string"
                      },
                      "welcome_page_url": {
                        "type": "string"
                      },
                      "yearly_price": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "tiers_edit"
                },
                {
                  "description": "Delete a tier by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "tiers_delete"
                },
                {
                  "description": "Browse users with optional filters and pagination.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "order": {
                        "type": "string"
                      },
                      "page": {
                        "type": "number"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "users_browse"
                },
                {
                  "description": "Read a user by id, email, or slug.",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "users_read"
                },
                {
                  "description": "Edit a user by id with optional fields.",
                  "inputschema": {
                    "properties": {
                      "bio": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "facebook": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      },
                      "twitter": {
                        "type": "string"
                      },
                      "website": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "users_edit"
                },
                {
                  "description": "Delete a user by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "users_delete"
                },
                {
                  "description": "Add a webhook with event and target_url.",
                  "inputschema": {
                    "properties": {
                      "api_version": {
                        "type": "string"
                      },
                      "event": {
                        "type": "string"
                      },
                      "integration_id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "secret": {
                        "type": "string"
                      },
                      "target_url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "event",
                      "target_url"
                    ],
                    "type": "object"
                  },
                  "name": "webhooks_add"
                },
                {
                  "description": "Edit a webhook by id with optional fields.",
                  "inputschema": {
                    "properties": {
                      "api_version": {
                        "type": "string"
                      },
                      "event": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "target_url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "webhooks_edit"
                },
                {
                  "description": "Delete a webhook by id.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "webhooks_delete"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "MindscapeHQ": {
      "mcpproviderid": "MindscapeHQ",
      "self": "#/mcpproviders/MindscapeHQ",
      "xid": "/mcpproviders/MindscapeHQ",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:26.466895986Z",
      "modifiedat": "2025-05-12T08:18:26.466895986Z",

      "serversurl": "#/mcpproviders/MindscapeHQ/servers",
      "servers": {
        "mcp-server-raygun": {
          "serverid": "mcp-server-raygun",
          "self": "#/mcpproviders/MindscapeHQ/servers/mcp-server-raygun",
          "xid": "/mcpproviders/MindscapeHQ/servers/mcp-server-raygun",

          "metaurl": "#/mcpproviders/MindscapeHQ/servers/mcp-server-raygun/meta",
          "meta": {
            "serverid": "mcp-server-raygun",
            "self": "#/mcpproviders/MindscapeHQ/servers/mcp-server-raygun/meta",
            "xid": "/mcpproviders/MindscapeHQ/servers/mcp-server-raygun/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:26.466895986Z",
            "modifiedat": "2025-05-12T08:18:26.466895986Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/MindscapeHQ/servers/mcp-server-raygun/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/MindscapeHQ/servers/mcp-server-raygun/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-raygun",
              "versionid": "1",
              "self": "#/mcpproviders/MindscapeHQ/servers/mcp-server-raygun/versions/1",
              "xid": "/mcpproviders/MindscapeHQ/servers/mcp-server-raygun/versions/1",
              "epoch": 1,
              "name": "io.github.MindscapeHQ/mcp-server-raygun",
              "isdefault": true,
              "description": "MCP Server for Raygun's API V3 endpoints for interacting with your Crash Reporting and Real User Monitoring applications. This server provides comprehensive access to Raygun's API features through the Model Context Protocol.",
              "createdat": "2025-05-12T08:18:26.466895986Z",
              "modifiedat": "2025-05-12T08:18:26.466895986Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your Raygun PAT token",
                        "name": "RAYGUN_PAT_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@raygun.io/mcp-server-raygun"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@raygun.io/mcp-server-raygun"
                }
              ],
              "remotes": [],
              "repo_ref": "MindscapeHQ/mcp-server-raygun",
              "resources": [],
              "tools": [
                {
                  "description": "List all applications under your account",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_applications"
                },
                {
                  "description": "Get application details by identifier",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_application"
                },
                {
                  "description": "Get application details by API key",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_application_by_api_key"
                },
                {
                  "description": "Generate a new API key for an application",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "regenerate_application_api_key"
                },
                {
                  "description": "List error groups for an application",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_error_groups"
                },
                {
                  "description": "Get detailed information about an error group",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_error_group"
                },
                {
                  "description": "Set error group status to resolved",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "resolve_error_group"
                },
                {
                  "description": "Set error group status to active",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "activate_error_group"
                },
                {
                  "description": "Set error group status to ignored",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "ignore_error_group"
                },
                {
                  "description": "Set error group status to permanently ignored",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "permanently_ignore_error_group"
                },
                {
                  "description": "List deployments for an application",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_deployments"
                },
                {
                  "description": "Get deployment details by identifier",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_deployment"
                },
                {
                  "description": "Remove a deployment",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "delete_deployment"
                },
                {
                  "description": "Update deployment information",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "update_deployment"
                },
                {
                  "description": "Reprocess deployment commit data",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "reprocess_deployment_commits"
                },
                {
                  "description": "List customers for an application",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_customers"
                },
                {
                  "description": "List user sessions for an application",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_sessions"
                },
                {
                  "description": "Get detailed session information",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_session"
                },
                {
                  "description": "List monitored pages for an application",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_pages"
                },
                {
                  "description": "Get time-series performance metrics",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_page_metrics_time_series"
                },
                {
                  "description": "Get histogram of performance metrics",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_page_metrics_histogram"
                },
                {
                  "description": "Get time-series error metrics",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_error_metrics_time_series"
                },
                {
                  "description": "List source maps for an application",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_source_maps"
                },
                {
                  "description": "Get source map details",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_source_map"
                },
                {
                  "description": "Update source map information",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "update_source_map"
                },
                {
                  "description": "Remove a source map",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "delete_source_map"
                },
                {
                  "description": "Upload a new source map",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "upload_source_map"
                },
                {
                  "description": "Remove all source maps",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "delete_all_source_maps"
                },
                {
                  "description": "List pending team invitations",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_invitations"
                },
                {
                  "description": "Send a new team invitation",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "send_invitation"
                },
                {
                  "description": "Get invitation details",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_invitation"
                },
                {
                  "description": "Revoke a pending invitation",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "revoke_invitation"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "OctagonAI": {
      "mcpproviderid": "OctagonAI",
      "self": "#/mcpproviders/OctagonAI",
      "xid": "/mcpproviders/OctagonAI",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:47.118543123Z",
      "modifiedat": "2025-05-12T08:17:47.118543123Z",

      "serversurl": "#/mcpproviders/OctagonAI/servers",
      "servers": {
        "octagon-mcp-server": {
          "serverid": "octagon-mcp-server",
          "self": "#/mcpproviders/OctagonAI/servers/octagon-mcp-server",
          "xid": "/mcpproviders/OctagonAI/servers/octagon-mcp-server",

          "metaurl": "#/mcpproviders/OctagonAI/servers/octagon-mcp-server/meta",
          "meta": {
            "serverid": "octagon-mcp-server",
            "self": "#/mcpproviders/OctagonAI/servers/octagon-mcp-server/meta",
            "xid": "/mcpproviders/OctagonAI/servers/octagon-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:47.118543123Z",
            "modifiedat": "2025-05-12T08:17:47.118543123Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/OctagonAI/servers/octagon-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/OctagonAI/servers/octagon-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "octagon-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/OctagonAI/servers/octagon-mcp-server/versions/1",
              "xid": "/mcpproviders/OctagonAI/servers/octagon-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.OctagonAI/octagon-mcp-server",
              "isdefault": true,
              "description": "The Octagon MCP server provides specialized AI-powered financial research and analysis by integrating with the Octagon Market Intelligence API, enabling users to easily analyze and extract detailed insights from public filings, earnings call transcripts, financial metrics, stock market data, and extensive private market transactions within Claude Desktop and other popular MCP clients.",
              "documentation": "https://docs.octagonagents.com",
              "createdat": "2025-05-12T08:17:47.118543123Z",
              "modifiedat": "2025-05-12T08:17:47.118543123Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your Octagon API key",
                        "name": "OCTAGON_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Base URL for Octagon API",
                        "name": "OCTAGON_API_BASE_URL",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@OctagonAI/octagon-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@OctagonAI/octagon-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "OctagonAI/octagon-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "[PUBLIC MARKET INTELLIGENCE] A specialized agent for SEC filings analysis and financial data extraction. Covers over 8,000 public companies from SEC EDGAR with comprehensive coverage of financial statements from annual and quarterly reports (10-K, 10-Q, 20-F), offering filings (S-1), amendments, and event filings (8-K). Updated daily with historical data dating back to 2018 for time-series analysis. Best for extracting financial and segment metrics, management discussion, footnotes, risk factors, and quantitative data from SEC filings. Example queries: 'What was Apple's R\u0026D expense as a percentage of revenue in their latest fiscal year?', 'Find the risk factors related to supply chain in Tesla's latest 10-K', 'Extract quarterly revenue growth rates for Microsoft over the past 2 years'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-sec-agent"
                },
                {
                  "description": "[PUBLIC MARKET INTELLIGENCE] A specialized agent for analyzing earnings call transcripts and management commentary. Covers over 8,000 public companies with continuous daily updates for real-time insights. Historical data dating back to 2018 enables robust time-series analysis. Extract information from earnings call transcripts, including executive statements, financial guidance, analyst questions, and forward-looking statements. Best for analyzing management sentiment, extracting guidance figures, and identifying key business trends. Example queries: 'What did Amazon's CEO say about AWS growth expectations in the latest earnings call?', 'Summarize key financial metrics mentioned in Tesla's Q2 2023 earnings call', 'What questions did analysts ask about margins during Netflix's latest earnings call?'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-transcripts-agent"
                },
                {
                  "description": "[PUBLIC MARKET INTELLIGENCE] Specialized agent for financial statement analysis and ratio calculations. Capabilities: Analyze financial statements, calculate financial metrics, compare ratios, and evaluate performance indicators. Best for: Deep financial analysis and comparison of company financial performance. Example queries: 'Compare the gross margins, operating margins, and net margins of Apple, Microsoft, and Google over the last 3 years', 'Analyze Tesla's cash flow statements from 2021 to 2023 and calculate free cash flow trends', 'Calculate and explain key financial ratios for Amazon including P/E, EV/EBITDA, and ROIC'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-financials-agent"
                },
                {
                  "description": "[PUBLIC MARKET INTELLIGENCE] Specialized agent for stock market data and equity investment analysis. Capabilities: Analyze stock price movements, trading volumes, market trends, valuation metrics, and technical indicators. Best for: Stock market research, equity analysis, and trading pattern identification. Example queries: 'How has Apple's stock performed compared to the S\u0026P 500 over the last 6 months?', 'Analyze the trading volume patterns for Tesla stock before and after earnings releases', 'What were the major price movements for NVIDIA in 2023 and what were the catalysts?'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-stock-data-agent"
                },
                {
                  "description": "[PRIVATE MARKET INTELLIGENCE] A specialized database agent for looking up company information and financials. Capabilities: Query comprehensive company financial information and business intelligence from Octagon's company database. Best for: Finding basic information about companies, their financial metrics, and industry benchmarks. NOTE: For better and more accurate results, provide the company's website URL instead of just the company name. Example queries: 'What is the employee trends for Stripe (stripe.com)?', 'List the top 5 companies in the AI sector by revenue growth', 'Who are the top competitors to Databricks (databricks.com)?'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-companies-agent"
                },
                {
                  "description": "[PRIVATE MARKET INTELLIGENCE] A specialized database agent for company funding transactions and venture capital research. Capabilities: Extract information about funding rounds, investors, valuations, and investment trends. Best for: Researching startup funding history, investor activity, and venture capital patterns. NOTE: For better and more accurate results, provide the company's website URL instead of just the company name. Example queries: 'What was Anthropic's latest funding round size, valuation, and key investors (anthropic.com)?', 'How much has OpenAI raised in total funding and at what valuation (openai.com)?', 'Who were the lead investors in Databricks' Series G round and what was the post-money valuation (databricks.com)?'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-funding-agent"
                },
                {
                  "description": "[PRIVATE MARKET INTELLIGENCE] A specialized database agent for M\u0026A and IPO transaction analysis. Capabilities: Retrieve information about mergers, acquisitions, initial public offerings, and other financial transactions. Best for: Research on corporate transactions, IPO valuations, and M\u0026A activity. NOTE: For better and more accurate results, provide the company's website URL instead of just the company name. Example queries: 'What was the acquisition price when Microsoft (microsoft.com) acquired GitHub (github.com)?', 'List the valuation multiples for AI companies in 2024', 'List all the acquisitions and price, valuation by Salesforce (salesforce.com) in 2023?'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-deals-agent"
                },
                {
                  "description": "[PRIVATE MARKET INTELLIGENCE] A specialized database agent for looking up information on investors. Capabilities: Retrieve information about investors, their investment criteria, and past activities. Best for: Research on investors and details about their investment activities. NOTE: For better and more accurate results, provide the investor's website URL instead of just the investor name. Example queries: 'What is the latest investment criteria of Insight Partners (insightpartners.com)?', 'How many investments did Andreessen Horowitz (a16z.com) make in the last 6 months', 'What is the typical check size for QED Investors (qedinvestors.com)'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-investors-agent"
                },
                {
                  "description": "[PUBLIC \u0026 PRIVATE MARKET INTELLIGENCE] Specialized agent for financial data extraction from investor websites. Capabilities: Extract structured financial data from investor relations websites, tables, and online financial sources. Best for: Gathering financial data from websites that don't have accessible APIs. Example queries: 'Extract all data fields from zillow.com/san-francisco-ca/', 'Extract all data fields from www.carvana.com/cars/'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-scraper-agent"
                },
                {
                  "description": "[PUBLIC \u0026 PRIVATE MARKET INTELLIGENCE] A comprehensive agent that can utilize multiple sources for deep research analysis. Capabilities: Aggregate research across multiple data sources, synthesize information, and provide comprehensive investment research. Best for: Investment research questions requiring up-to-date aggregated information from the web. Example queries: 'Research the financial impact of Apple's privacy changes on digital advertising companies' revenue and margins', 'Analyze the competitive landscape in the cloud computing sector, focusing on AWS, Azure, and Google Cloud margin and growth trends', 'Investigate the factors driving electric vehicle adoption and their impact on battery supplier financials'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-deep-research-agent"
                },
                {
                  "description": "[PRIVATE MARKET INTELLIGENCE] A specialized database agent for analyzing private debts and lenders. Capabilities: Retrieve information about private debts and lenders. Best for: Research on borrowers, and lenders and details about the private debt facilities. Example queries: 'List all the debt activities from borrower American Tower', 'Compile all the debt activities from lender ING Group in Q4 2024'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-debts-agent"
                },
                {
                  "description": "[PUBLIC MARKET INTELLIGENCE] Specialized agent for analyzing financial ratios and key metrics of public companies. Capabilities: Calculate and analyze financial ratios, track key performance metrics over time, compare metrics across companies and sectors, evaluate company performance through various financial lenses. Best for: Detailed ratio analysis, historical metric trends, cross-company comparisons, valuation analysis, operational efficiency evaluation. Example queries: 'Get historical quarterly EV/S for $TSLA for the last 20 quarters', 'Compare operating margins and ROIC for AAPL, MSFT, and GOOGL', 'What is NVDA's cash conversion cycle trend over the past 8 quarters?', 'Calculate the Graham Number for META and compare it to current price', 'Show me Amazon's capex to operating cash flow ratio for the past 3 years'.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Your natural language query or request for the agent",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "octagon-metrics-agent"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Omar-V2": {
      "mcpproviderid": "Omar-V2",
      "self": "#/mcpproviders/Omar-V2",
      "xid": "/mcpproviders/Omar-V2",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:41.654527316Z",
      "modifiedat": "2025-05-12T08:17:41.654527316Z",

      "serversurl": "#/mcpproviders/Omar-V2/servers",
      "servers": {
        "mcp-ical": {
          "serverid": "mcp-ical",
          "self": "#/mcpproviders/Omar-V2/servers/mcp-ical",
          "xid": "/mcpproviders/Omar-V2/servers/mcp-ical",

          "metaurl": "#/mcpproviders/Omar-V2/servers/mcp-ical/meta",
          "meta": {
            "serverid": "mcp-ical",
            "self": "#/mcpproviders/Omar-V2/servers/mcp-ical/meta",
            "xid": "/mcpproviders/Omar-V2/servers/mcp-ical/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:41.654527316Z",
            "modifiedat": "2025-05-12T08:17:41.654527316Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Omar-V2/servers/mcp-ical/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Omar-V2/servers/mcp-ical/versions",
          "versions": {
            "1": {
              "serverid": "mcp-ical",
              "versionid": "1",
              "self": "#/mcpproviders/Omar-V2/servers/mcp-ical/versions/1",
              "xid": "/mcpproviders/Omar-V2/servers/mcp-ical/versions/1",
              "epoch": 1,
              "name": "io.github.Omar-V2/mcp-ical",
              "isdefault": true,
              "description": "Transform how you interact with your macOS calendar using natural language via the Model Context Protocol (MCP). Provides natural language calendar management including event creation, updates, schedule queries, and calendar management.",
              "createdat": "2025-05-12T08:17:41.654527316Z",
              "modifiedat": "2025-05-12T08:17:41.654527316Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--directory",
                      "/ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-ical",
                      "run"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "mcp-ical"
                }
              ],
              "remotes": [],
              "repo_ref": "Omar-V2/mcp-ical",
              "resources": [
                {
                  "description": "List all available calendars that can be used with calendar operations.",
                  "name": "calendars://list",
                  "uritemplate": "calendars://list"
                }
              ],
              "tools": [
                {
                  "description": "List all available calendars.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_calendars"
                },
                {
                  "description": "List calendar events in a date range.",
                  "inputschema": {
                    "properties": {
                      "calendar_name": {
                        "description": "Optional calendar name to filter by",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "end_date": {
                        "description": "End date in ISO8601 format (YYYY-MM-DDT23:59:59).",
                        "type": "string"
                      },
                      "start_date": {
                        "description": "Start date in ISO8601 format (YYYY-MM-DDT00:00:00).",
                        "type": "string"
                      }
                    },
                    "required": [
                      "start_date",
                      "end_date"
                    ],
                    "type": "object"
                  },
                  "name": "list_events"
                },
                {
                  "description": "Create a new calendar event with details like title, time, location, notes, reminders, and recurrence.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_event"
                },
                {
                  "description": "Update an existing calendar event with new details such as time, location, notes, reminders, and recurrence.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_event"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Omedia": {
      "mcpproviderid": "Omedia",
      "self": "#/mcpproviders/Omedia",
      "xid": "/mcpproviders/Omedia",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:42.649064877Z",
      "modifiedat": "2025-05-12T08:17:42.649064877Z",

      "serversurl": "#/mcpproviders/Omedia/servers",
      "servers": {
        "mcp-server-drupal": {
          "serverid": "mcp-server-drupal",
          "self": "#/mcpproviders/Omedia/servers/mcp-server-drupal",
          "xid": "/mcpproviders/Omedia/servers/mcp-server-drupal",

          "metaurl": "#/mcpproviders/Omedia/servers/mcp-server-drupal/meta",
          "meta": {
            "serverid": "mcp-server-drupal",
            "self": "#/mcpproviders/Omedia/servers/mcp-server-drupal/meta",
            "xid": "/mcpproviders/Omedia/servers/mcp-server-drupal/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:42.649064877Z",
            "modifiedat": "2025-05-12T08:17:42.649064877Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Omedia/servers/mcp-server-drupal/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Omedia/servers/mcp-server-drupal/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-drupal",
              "versionid": "1",
              "self": "#/mcpproviders/Omedia/servers/mcp-server-drupal/versions/1",
              "xid": "/mcpproviders/Omedia/servers/mcp-server-drupal/versions/1",
              "epoch": 1,
              "name": "io.github.Omedia/mcp-server-drupal",
              "isdefault": true,
              "description": "A typescript based companion Model Context Protocol (MCP) server for the Drupal MCP module that works with the STDIO transport.",
              "createdat": "2025-05-12T08:17:42.649064877Z",
              "modifiedat": "2025-05-12T08:17:42.649064877Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--drupal-url=__DRUPAL_BASE_URL__"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "ghcr.io/omedia/mcp-server-drupal"
                },
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--drupal-url",
                      "__DRUPAL_BASE_URL__"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "deno",
                  "package_name": "jsr:@omedia/mcp-server-drupal"
                }
              ],
              "remotes": [],
              "repo_ref": "Omedia/mcp-server-drupal",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "PaddleHQ": {
      "mcpproviderid": "PaddleHQ",
      "self": "#/mcpproviders/PaddleHQ",
      "xid": "/mcpproviders/PaddleHQ",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:54.792422492Z",
      "modifiedat": "2025-05-12T08:18:54.792422492Z",

      "serversurl": "#/mcpproviders/PaddleHQ/servers",
      "servers": {
        "paddle-mcp-server": {
          "serverid": "paddle-mcp-server",
          "self": "#/mcpproviders/PaddleHQ/servers/paddle-mcp-server",
          "xid": "/mcpproviders/PaddleHQ/servers/paddle-mcp-server",

          "metaurl": "#/mcpproviders/PaddleHQ/servers/paddle-mcp-server/meta",
          "meta": {
            "serverid": "paddle-mcp-server",
            "self": "#/mcpproviders/PaddleHQ/servers/paddle-mcp-server/meta",
            "xid": "/mcpproviders/PaddleHQ/servers/paddle-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:54.792422492Z",
            "modifiedat": "2025-05-12T08:18:54.792422492Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/PaddleHQ/servers/paddle-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/PaddleHQ/servers/paddle-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "paddle-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/PaddleHQ/servers/paddle-mcp-server/versions/1",
              "xid": "/mcpproviders/PaddleHQ/servers/paddle-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.PaddleHQ/paddle-mcp-server",
              "isdefault": true,
              "description": "This is a Model Context Protocol (MCP) server that provides tools for interacting with the Paddle API.",
              "createdat": "2025-05-12T08:18:54.792422492Z",
              "modifiedat": "2025-05-12T08:18:54.792422492Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Paddle MCP server",
                        "name": "PADDLE_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Environment to use: sandbox or production",
                        "name": "PADDLE_ENVIRONMENT",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@paddle/paddle-mcp",
                      "--api-key=PADDLE_API_KEY",
                      "--environment=(sandbox|production)"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@paddle/paddle-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "PaddleHQ/paddle-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "List products in your Paddle catalog",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "listProducts"
                },
                {
                  "description": "Create new products",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "createProduct"
                },
                {
                  "description": "List prices for products",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "listPrices"
                },
                {
                  "description": "Create new prices for products",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "createPrice"
                },
                {
                  "description": "List customers",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "listCustomers"
                },
                {
                  "description": "List transactions",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "listTransactions"
                },
                {
                  "description": "List subscriptions",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "listSubscriptions"
                },
                {
                  "description": "Create custom reports for financial analysis",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "createCustomReport"
                }
              ],
              "version_detail": {
                "version": "0.1.2"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ProgramComputer": {
      "mcpproviderid": "ProgramComputer",
      "self": "#/mcpproviders/ProgramComputer",
      "xid": "/mcpproviders/ProgramComputer",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:40.369500806Z",
      "modifiedat": "2025-05-12T08:18:40.369500806Z",

      "serversurl": "#/mcpproviders/ProgramComputer/servers",
      "servers": {
        "NASA-MCP-server": {
          "serverid": "NASA-MCP-server",
          "self": "#/mcpproviders/ProgramComputer/servers/NASA-MCP-server",
          "xid": "/mcpproviders/ProgramComputer/servers/NASA-MCP-server",

          "metaurl": "#/mcpproviders/ProgramComputer/servers/NASA-MCP-server/meta",
          "meta": {
            "serverid": "NASA-MCP-server",
            "self": "#/mcpproviders/ProgramComputer/servers/NASA-MCP-server/meta",
            "xid": "/mcpproviders/ProgramComputer/servers/NASA-MCP-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:40.369500806Z",
            "modifiedat": "2025-05-12T08:18:40.369500806Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ProgramComputer/servers/NASA-MCP-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ProgramComputer/servers/NASA-MCP-server/versions",
          "versions": {
            "1": {
              "serverid": "NASA-MCP-server",
              "versionid": "1",
              "self": "#/mcpproviders/ProgramComputer/servers/NASA-MCP-server/versions/1",
              "xid": "/mcpproviders/ProgramComputer/servers/NASA-MCP-server/versions/1",
              "epoch": 1,
              "name": "io.github.ProgramComputer/NASA-MCP-server",
              "isdefault": true,
              "description": "Model Context Protocol server for NASA APIs",
              "createdat": "2025-05-12T08:18:40.369500806Z",
              "modifiedat": "2025-05-12T08:18:40.369500806Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your NASA API key (get at api.nasa.gov)",
                        "name": "NASA_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@programcomputer/nasa-mcp-server@latest"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@programcomputer/nasa-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "ProgramComputer/NASA-MCP-server",
              "resources": [
                {
                  "description": "NASA Astronomy Picture of the Day",
                  "mimetype": "application/json",
                  "name": "nasa-apod-image",
                  "uritemplate": "nasa://apod/image?date={date}"
                },
                {
                  "description": "NASA EPIC Earth observation image",
                  "mimetype": "application/json",
                  "name": "nasa-epic-image",
                  "uritemplate": "nasa://epic/image?date={date}\u0026collection={collection}"
                },
                {
                  "description": "NASA Mars Rover photograph",
                  "mimetype": "image/jpeg",
                  "name": "mars-rover-photo",
                  "uritemplate": "nasa://mars-rover/photo?rover={rover}\u0026id={id}"
                },
                {
                  "description": "NASA Image and Video Library item",
                  "mimetype": "image/jpeg",
                  "name": "nasa-image",
                  "uritemplate": "nasa://images/item?nasa_id={nasa_id}"
                },
                {
                  "description": "NASA Global Imagery Browse Services (GIBS) satellite image",
                  "mimetype": "image/jpeg",
                  "name": "nasa-gibs-imagery",
                  "uritemplate": "nasa://gibs/imagery?layer={layer}\u0026date={date}"
                },
                {
                  "description": "JPL Small-Body Database entry",
                  "mimetype": "application/json",
                  "name": "jpl-asteroid-data",
                  "uritemplate": "jpl://sbdb?object={object}"
                },
                {
                  "description": "NASA Earth Landsat satellite imagery",
                  "mimetype": "application/json",
                  "name": "nasa-earth-imagery",
                  "uritemplate": "nasa://earth/imagery?lon={lon}\u0026lat={lat}\u0026date={date}"
                }
              ],
              "tools": [
                {
                  "description": "Fetch NASA's Astronomy Picture of the Day",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "description": "Count of random APODs to retrieve",
                        "type": "number"
                      },
                      "date": {
                        "description": "The date of the APOD image to retrieve (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "end_date": {
                        "description": "End date for date range search (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "start_date": {
                        "description": "Start date for date range search (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "thumbs": {
                        "description": "Return URL of thumbnail for video content",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "date"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_apod"
                },
                {
                  "description": "Near Earth Object Web Service - information about asteroids",
                  "inputschema": {
                    "properties": {
                      "asteroid_id": {
                        "description": "ID of a specific asteroid",
                        "type": "string"
                      },
                      "end_date": {
                        "description": "End date for asteroid search (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "start_date": {
                        "description": "Start date for asteroid search (YYYY-MM-DD)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "start_date",
                      "end_date"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_neo"
                },
                {
                  "description": "Earth Polychromatic Imaging Camera - views of Earth",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Image collection (natural or enhanced)",
                        "type": "string"
                      },
                      "date": {
                        "description": "Date of the image (YYYY-MM-DD)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "nasa_epic"
                },
                {
                  "description": "Global Imagery Browse Services - satellite imagery",
                  "inputschema": {
                    "properties": {
                      "date": {
                        "description": "Date of imagery (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "format": {
                        "description": "Image format (png, jpg, jpeg)",
                        "type": "string"
                      },
                      "layer": {
                        "description": "Layer name (e.g., MODIS_Terra_CorrectedReflectance_TrueColor)",
                        "type": "string"
                      },
                      "resolution": {
                        "description": "Resolution in pixels per degree",
                        "type": "number"
                      }
                    },
                    "required": [
                      "layer",
                      "date"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_gibs"
                },
                {
                  "description": "NASA Common Metadata Repository - search for NASA data collections",
                  "inputschema": {
                    "properties": {
                      "keyword": {
                        "description": "Search keyword",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Maximum number of results to return",
                        "type": "number"
                      },
                      "page": {
                        "description": "Page number for pagination",
                        "type": "number"
                      },
                      "sort_key": {
                        "description": "Field to sort results by",
                        "type": "string"
                      }
                    },
                    "required": [
                      "keyword"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_cmr"
                },
                {
                  "description": "NASA Fire Information for Resource Management System - fire data",
                  "inputschema": {
                    "properties": {
                      "days": {
                        "description": "Number of days of data to retrieve",
                        "type": "number"
                      },
                      "latitude": {
                        "description": "Latitude coordinate",
                        "type": "number"
                      },
                      "longitude": {
                        "description": "Longitude coordinate",
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_firms"
                },
                {
                  "description": "NASA Image and Video Library - search NASA's media archive",
                  "inputschema": {
                    "properties": {
                      "media_type": {
                        "description": "Media type (image, video, audio)",
                        "type": "string"
                      },
                      "page": {
                        "description": "Page number for pagination",
                        "type": "number"
                      },
                      "q": {
                        "description": "Search query",
                        "type": "string"
                      },
                      "year_end": {
                        "description": "End year for results",
                        "type": "string"
                      },
                      "year_start": {
                        "description": "Start year for results",
                        "type": "string"
                      }
                    },
                    "required": [
                      "q"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_images"
                },
                {
                  "description": "NASA Exoplanet Archive - data about planets beyond our solar system",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of results",
                        "type": "number"
                      },
                      "order": {
                        "description": "Ordering of results",
                        "type": "string"
                      },
                      "select": {
                        "description": "Columns to return",
                        "type": "string"
                      },
                      "table": {
                        "description": "Database table to query",
                        "type": "string"
                      },
                      "where": {
                        "description": "Filter conditions",
                        "type": "string"
                      }
                    },
                    "required": [
                      "table"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_exoplanet"
                },
                {
                  "description": "Space Weather Database Of Notifications, Knowledge, Information",
                  "inputschema": {
                    "properties": {
                      "endDate": {
                        "description": "End date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "startDate": {
                        "description": "Start date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of space weather event",
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_donki"
                },
                {
                  "description": "NASA Mars Rover Photos - images from Mars rovers",
                  "inputschema": {
                    "properties": {
                      "camera": {
                        "description": "Camera name",
                        "type": "string"
                      },
                      "earth_date": {
                        "description": "Earth date of the photos (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "page": {
                        "description": "Page number for pagination",
                        "type": "number"
                      },
                      "rover": {
                        "description": "Name of the rover (curiosity, opportunity, spirit, perseverance)",
                        "type": "string"
                      },
                      "sol": {
                        "description": "Martian sol (day) of the photos",
                        "type": "number"
                      }
                    },
                    "required": [
                      "rover"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_mars_rover"
                },
                {
                  "description": "Earth Observatory Natural Event Tracker - natural events data",
                  "inputschema": {
                    "properties": {
                      "category": {
                        "description": "Event category (wildfires, volcanoes, etc.)",
                        "type": "string"
                      },
                      "days": {
                        "description": "Number of days to look back",
                        "type": "number"
                      },
                      "limit": {
                        "description": "Maximum number of events to return",
                        "type": "number"
                      },
                      "source": {
                        "description": "Data source",
                        "type": "string"
                      },
                      "status": {
                        "description": "Event status (open, closed)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "nasa_eonet"
                },
                {
                  "description": "Prediction of Worldwide Energy Resources - meteorological data",
                  "inputschema": {
                    "properties": {
                      "community": {
                        "description": "User community (RE, SB, AG, etc.)",
                        "type": "string"
                      },
                      "end": {
                        "description": "End date (YYYYMMDD)",
                        "type": "string"
                      },
                      "format": {
                        "description": "Response format (json, csv, etc.)",
                        "type": "string"
                      },
                      "latitude": {
                        "description": "Latitude coordinate",
                        "type": "number"
                      },
                      "longitude": {
                        "description": "Longitude coordinate",
                        "type": "number"
                      },
                      "parameters": {
                        "description": "Comma-separated data parameters",
                        "type": "string"
                      },
                      "start": {
                        "description": "Start date (YYYYMMDD)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "parameters",
                      "community",
                      "longitude",
                      "latitude",
                      "start",
                      "end"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_power"
                },
                {
                  "description": "Small-Body Database (SBDB) - asteroid and comet data",
                  "inputschema": {
                    "properties": {
                      "cad": {
                        "description": "Include close approach data",
                        "type": "boolean"
                      },
                      "sstr": {
                        "description": "Search string (e.g., asteroid name, number, or designation)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sstr"
                    ],
                    "type": "object"
                  },
                  "name": "jpl_sbdb"
                },
                {
                  "description": "Fireball data - atmospheric impact events",
                  "inputschema": {
                    "properties": {
                      "date-max": {
                        "description": "End date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "date-min": {
                        "description": "Start date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Maximum number of results to return",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "jpl_fireball"
                },
                {
                  "description": "Julian Day number to/from calendar date/time converter",
                  "inputschema": {
                    "properties": {
                      "cd": {
                        "description": "Calendar date to convert to Julian date (YYYY-MM-DD or YYYY-MM-DDThh:mm:ss format)",
                        "type": "string"
                      },
                      "jd": {
                        "description": "Julian date to convert to calendar date",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "jpl_jd_cal"
                },
                {
                  "description": "Human-accessible NEOs (Near-Earth Objects) data",
                  "inputschema": {
                    "properties": {
                      "des": {
                        "description": "Object designation (e.g., '2000 SG344' or '433')",
                        "type": "string"
                      },
                      "dur": {
                        "description": "Minimum total mission duration (days). Values: 60-450, default: 450",
                        "type": "number"
                      },
                      "dv": {
                        "description": "Minimum total delta-V (km/s). Values: 4-12, default: 12",
                        "type": "number"
                      },
                      "h": {
                        "description": "Object's maximum absolute magnitude (mag). Values: 16-30",
                        "type": "number"
                      },
                      "launch": {
                        "description": "Launch window (year range). Values: 2020-2025, 2025-2030, 2030-2035, 2035-2040, 2040-2045, 2020-2045, default: 2020-2045",
                        "type": "string"
                      },
                      "occ": {
                        "description": "Object's maximum orbit condition code. Values: 0-8",
                        "type": "number"
                      },
                      "plot": {
                        "description": "Include base-64 encoded plot image",
                        "type": "boolean"
                      },
                      "spk": {
                        "description": "Object SPK-ID (e.g., '2000433')",
                        "type": "string"
                      },
                      "stay": {
                        "description": "Minimum stay time (days). Values: 8, 16, 24, 32, default: 8",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "jpl_nhats"
                },
                {
                  "description": "Asteroid and comet close approaches to the planets in the past and future",
                  "inputschema": {
                    "properties": {
                      "body": {
                        "description": "Body to find close approaches to (e.g., Earth, Mars, ALL). Default: Earth",
                        "type": "string"
                      },
                      "date-max": {
                        "description": "End date for search (YYYY-MM-DD). Default: +60 days",
                        "type": "string"
                      },
                      "date-min": {
                        "description": "Start date for search (YYYY-MM-DD). Default: now",
                        "type": "string"
                      },
                      "des": {
                        "description": "Object designation (e.g., '2000 SG344' or '433')",
                        "type": "string"
                      },
                      "dist-max": {
                        "description": "Maximum approach distance (e.g., 0.05, 10LD). Default: 0.05 au",
                        "type": "string"
                      },
                      "dist-min": {
                        "description": "Minimum approach distance. Default: none",
                        "type": "string"
                      },
                      "fullname": {
                        "description": "Include full object name in result. Default: false",
                        "type": "boolean"
                      },
                      "neo": {
                        "description": "Limit to NEOs. Default: true",
                        "type": "boolean"
                      },
                      "sort": {
                        "description": "Sort field: date, dist, dist-min, v-inf, v-rel, h, object. Default: date",
                        "type": "string"
                      },
                      "spk": {
                        "description": "Object SPK-ID (e.g., '2000433')",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "jpl_cad"
                },
                {
                  "description": "JPL Sentry - NEO Earth impact risk assessment data",
                  "inputschema": {
                    "properties": {
                      "all": {
                        "description": "Get all virtual impactors data",
                        "type": "boolean"
                      },
                      "date-max": {
                        "description": "End date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "date-min": {
                        "description": "Start date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "des": {
                        "description": "Object designation (e.g., '2011 AG5' or '29075')",
                        "type": "string"
                      },
                      "h-max": {
                        "description": "Maximum absolute magnitude (size filter)",
                        "type": "number"
                      },
                      "ip-min": {
                        "description": "Minimum impact probability",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Maximum number of results to return",
                        "type": "number"
                      },
                      "ps-min": {
                        "description": "Minimum Palermo Scale value",
                        "type": "string"
                      },
                      "removed": {
                        "description": "Get objects removed from Sentry monitoring",
                        "type": "boolean"
                      },
                      "spk": {
                        "description": "Object SPK-ID",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "jpl_sentry"
                },
                {
                  "description": "JPL Horizons - Solar system objects ephemeris data",
                  "inputschema": {
                    "properties": {
                      "CENTER": {
                        "description": "Coordinate center (e.g., '500@399' for Earth)",
                        "type": "string"
                      },
                      "COMMAND": {
                        "description": "Target object identifier (e.g., '499' for Mars, '1' for Ceres, 'C/2020 F3' for Comet NEOWISE)",
                        "type": "string"
                      },
                      "EPHEM_TYPE": {
                        "description": "Type of ephemeris (OBSERVER, VECTORS, ELEMENTS)",
                        "enum": [
                          "OBSERVER",
                          "VECTORS",
                          "ELEMENTS"
                        ],
                        "type": "string"
                      },
                      "MAKE_EPHEM": {
                        "description": "Generate ephemeris",
                        "enum": [
                          "YES",
                          "NO"
                        ],
                        "type": "string"
                      },
                      "OBJ_DATA": {
                        "description": "Include object data",
                        "enum": [
                          "YES",
                          "NO"
                        ],
                        "type": "string"
                      },
                      "OUT_UNITS": {
                        "description": "Output units for vector tables",
                        "enum": [
                          "KM-S",
                          "AU-D",
                          "KM-D"
                        ],
                        "type": "string"
                      },
                      "QUANTITIES": {
                        "description": "Observable quantities to include (e.g., 'A' for all, or '1,2,20,23' for specific ones)",
                        "type": "string"
                      },
                      "START_TIME": {
                        "description": "Start time for ephemeris (e.g., '2023-01-01')",
                        "type": "string"
                      },
                      "STEP_SIZE": {
                        "description": "Step size for ephemeris points (e.g., '1d' for daily, '1h' for hourly)",
                        "type": "string"
                      },
                      "STOP_TIME": {
                        "description": "Stop time for ephemeris (e.g., '2023-01-02')",
                        "type": "string"
                      },
                      "format": {
                        "description": "Response format (json, text)",
                        "enum": [
                          "json",
                          "text"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "COMMAND"
                    ],
                    "type": "object"
                  },
                  "name": "jpl_horizons"
                },
                {
                  "description": "JPL Horizons - Solar system objects ephemeris data (File Input)",
                  "inputschema": {
                    "properties": {
                      "CENTER": {
                        "description": "Coordinate center (e.g., '500@399' for Earth)",
                        "type": "string"
                      },
                      "COMMAND": {
                        "description": "Target object identifier (e.g., '499' for Mars, '1' for Ceres, 'C/2020 F3' for Comet NEOWISE)",
                        "type": "string"
                      },
                      "EPHEM_TYPE": {
                        "description": "Type of ephemeris (OBSERVER, VECTORS, ELEMENTS)",
                        "enum": [
                          "OBSERVER",
                          "VECTORS",
                          "ELEMENTS"
                        ],
                        "type": "string"
                      },
                      "MAKE_EPHEM": {
                        "description": "Generate ephemeris",
                        "enum": [
                          "YES",
                          "NO"
                        ],
                        "type": "string"
                      },
                      "OBJ_DATA": {
                        "description": "Include object data",
                        "enum": [
                          "YES",
                          "NO"
                        ],
                        "type": "string"
                      },
                      "OUT_UNITS": {
                        "description": "Output units for vector tables",
                        "enum": [
                          "KM-S",
                          "AU-D",
                          "KM-D"
                        ],
                        "type": "string"
                      },
                      "QUANTITIES": {
                        "description": "Observable quantities to include (e.g., 'A' for all, or '1,2,20,23' for specific ones)",
                        "type": "string"
                      },
                      "START_TIME": {
                        "description": "Start time for ephemeris (e.g., '2023-01-01')",
                        "type": "string"
                      },
                      "STEP_SIZE": {
                        "description": "Step size for ephemeris points (e.g., '1d' for daily, '1h' for hourly)",
                        "type": "string"
                      },
                      "STOP_TIME": {
                        "description": "Stop time for ephemeris (e.g., '2023-01-02')",
                        "type": "string"
                      },
                      "format": {
                        "description": "Response format (json, text)",
                        "enum": [
                          "json",
                          "text"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "COMMAND"
                    ],
                    "type": "object"
                  },
                  "name": "jpl_horizons_file"
                },
                {
                  "description": "JPL Three-Body Periodic Orbits Database",
                  "inputschema": {
                    "properties": {
                      "branch": {
                        "description": "Branch within family (N/S, E/W, etc., required for some families)",
                        "type": "string"
                      },
                      "family": {
                        "description": "Orbit family name (e.g., halo, dro, lyapunov)",
                        "type": "string"
                      },
                      "jacobimax": {
                        "description": "Maximum Jacobi constant",
                        "type": "number"
                      },
                      "jacobimin": {
                        "description": "Minimum Jacobi constant",
                        "type": "number"
                      },
                      "libr": {
                        "description": "Libration point (1-5, required for some families)",
                        "type": "integer"
                      },
                      "periodmax": {
                        "description": "Maximum period",
                        "type": "number"
                      },
                      "periodmin": {
                        "description": "Minimum period",
                        "type": "number"
                      },
                      "periodunits": {
                        "description": "Units for period (s, h, d, TU)",
                        "enum": [
                          "s",
                          "h",
                          "d",
                          "TU"
                        ],
                        "type": "string"
                      },
                      "stabmax": {
                        "description": "Maximum stability index",
                        "type": "number"
                      },
                      "stabmin": {
                        "description": "Minimum stability index",
                        "type": "number"
                      },
                      "sys": {
                        "description": "Three-body system (e.g., earth-moon, sun-earth)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sys",
                      "family"
                    ],
                    "type": "object"
                  },
                  "name": "jpl_periodic_orbits"
                },
                {
                  "description": "NASA OSDR - Get data files for an OSD study",
                  "inputschema": {
                    "properties": {
                      "accession_number": {
                        "description": "OSD study accession number (e.g., '87')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "accession_number"
                    ],
                    "type": "object"
                  },
                  "name": "nasa_osdr_files"
                },
                {
                  "description": "Scout - NEOCP orbits, ephemerides, and impact risk data",
                  "inputschema": {
                    "properties": {
                      "file": {
                        "description": "Type of data file to return (summary, ephem, obs, crit, all)",
                        "enum": [
                          "summary",
                          "ephem",
                          "obs",
                          "crit",
                          "all"
                        ],
                        "type": "string"
                      },
                      "limit": {
                        "description": "Limit number of results",
                        "type": "number"
                      },
                      "orbit_id": {
                        "description": "Scout internal orbit ID",
                        "type": "string"
                      },
                      "plot": {
                        "description": "Include plots in the response",
                        "type": "boolean"
                      },
                      "summary": {
                        "description": "Include summary data in the response",
                        "type": "boolean"
                      },
                      "tdes": {
                        "description": "Object temporary designation (e.g., P21Eolo)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "jpl_scout"
                }
              ],
              "version_detail": {
                "version": "1.0.11"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "RamXX": {
      "mcpproviderid": "RamXX",
      "self": "#/mcpproviders/RamXX",
      "xid": "/mcpproviders/RamXX",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:09.719460663Z",
      "modifiedat": "2025-05-12T08:20:09.719460663Z",

      "serversurl": "#/mcpproviders/RamXX/servers",
      "servers": {
        "mcp-tavily": {
          "serverid": "mcp-tavily",
          "self": "#/mcpproviders/RamXX/servers/mcp-tavily",
          "xid": "/mcpproviders/RamXX/servers/mcp-tavily",

          "metaurl": "#/mcpproviders/RamXX/servers/mcp-tavily/meta",
          "meta": {
            "serverid": "mcp-tavily",
            "self": "#/mcpproviders/RamXX/servers/mcp-tavily/meta",
            "xid": "/mcpproviders/RamXX/servers/mcp-tavily/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:09.719460663Z",
            "modifiedat": "2025-05-12T08:20:09.719460663Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/RamXX/servers/mcp-tavily/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/RamXX/servers/mcp-tavily/versions",
          "versions": {
            "1": {
              "serverid": "mcp-tavily",
              "versionid": "1",
              "self": "#/mcpproviders/RamXX/servers/mcp-tavily/versions/1",
              "xid": "/mcpproviders/RamXX/servers/mcp-tavily/versions/1",
              "epoch": 1,
              "name": "io.github.RamXX/mcp-tavily",
              "isdefault": true,
              "description": "A Model Context Protocol server that provides AI-powered web search capabilities using Tavily's search API. This server enables LLMs to perform sophisticated web searches, get direct answers to questions, and search recent news articles with AI-extracted relevant content.",
              "createdat": "2025-05-12T08:20:09.719460663Z",
              "modifiedat": "2025-05-12T08:20:09.719460663Z",
              "ancestor": "1",
              "prompts": [
                {
                  "description": "Search the web using Tavily's AI-powered search engine",
                  "name": "tavily_web_search"
                },
                {
                  "description": "Search the web and get an AI-generated answer with supporting evidence",
                  "name": "tavily_answer_search"
                },
                {
                  "description": "Search recent news articles with Tavily's news search",
                  "name": "tavily_news_search"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Tavily service",
                        "name": "TAVILY_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "mcp-tavily"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp-tavily"
                }
              ],
              "remotes": [],
              "repo_ref": "RamXX/mcp-tavily",
              "resources": [],
              "tools": [
                {
                  "description": "Performs comprehensive web searches with AI-powered content extraction.",
                  "inputschema": {
                    "properties": {
                      "exclude_domains": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "include_domains": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "max_results": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "search_depth": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "tavily_web_search"
                },
                {
                  "description": "Performs web searches and generates direct answers with supporting evidence.",
                  "inputschema": {
                    "properties": {
                      "exclude_domains": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "include_domains": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "max_results": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "search_depth": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "tavily_answer_search"
                },
                {
                  "description": "Searches recent news articles with publication dates.",
                  "inputschema": {
                    "properties": {
                      "days": {
                        "type": "integer"
                      },
                      "exclude_domains": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "include_domains": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "max_results": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "tavily_news_search"
                }
              ],
              "version_detail": {
                "version": "0.1.4"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "SaseQ": {
      "mcpproviderid": "SaseQ",
      "self": "#/mcpproviders/SaseQ",
      "xid": "/mcpproviders/SaseQ",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:44.180334963Z",
      "modifiedat": "2025-05-12T08:17:44.180334963Z",

      "serversurl": "#/mcpproviders/SaseQ/servers",
      "servers": {
        "discord-mcp": {
          "serverid": "discord-mcp",
          "self": "#/mcpproviders/SaseQ/servers/discord-mcp",
          "xid": "/mcpproviders/SaseQ/servers/discord-mcp",

          "metaurl": "#/mcpproviders/SaseQ/servers/discord-mcp/meta",
          "meta": {
            "serverid": "discord-mcp",
            "self": "#/mcpproviders/SaseQ/servers/discord-mcp/meta",
            "xid": "/mcpproviders/SaseQ/servers/discord-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:44.180334963Z",
            "modifiedat": "2025-05-12T08:17:44.180334963Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/SaseQ/servers/discord-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/SaseQ/servers/discord-mcp/versions",
          "versions": {
            "1": {
              "serverid": "discord-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/SaseQ/servers/discord-mcp/versions/1",
              "xid": "/mcpproviders/SaseQ/servers/discord-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.SaseQ/discord-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for the Discord API (JDA), allowing seamless integration of Discord Bot with MCP-compatible applications like Claude Desktop.",
              "createdat": "2025-05-12T08:17:44.180334963Z",
              "modifiedat": "2025-05-12T08:17:44.180334963Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Discord bot token",
                        "name": "DISCORD_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-jar",
                      "/absolute/path/to/discord-mcp-0.0.1-SNAPSHOT.jar"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "java",
                  "package_name": "@SaseQ/discord-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "SaseQ/discord-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Get detailed discord server information",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_server_info"
                },
                {
                  "description": "Send a message to a specific channel",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "send_message"
                },
                {
                  "description": "Edit a message from a specific channel",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "edit_message"
                },
                {
                  "description": "Delete a message from a specific channel",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_message"
                },
                {
                  "description": "Read recent message history from a specific channel",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "read_messages"
                },
                {
                  "description": "Send a private message to a specific user",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "send_private_message"
                },
                {
                  "description": "Edit a private message from a specific user",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "edit_private_message"
                },
                {
                  "description": "Delete a private message from a specific user",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_private_message"
                },
                {
                  "description": "Read recent message history from a specific user",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "read_private_messages"
                },
                {
                  "description": "Add a reaction (emoji) to a specific message",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "add_reaction"
                },
                {
                  "description": "Remove a specified reaction (emoji) from a message",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "remove_reaction"
                },
                {
                  "description": "Delete a channel",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_channel"
                },
                {
                  "description": "Find a channel type and ID using name and server ID",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "find_channel"
                },
                {
                  "description": "List of all channels",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_channels"
                },
                {
                  "description": "Create a new category for channels",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_category"
                },
                {
                  "description": "Delete a category",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_category"
                },
                {
                  "description": "Find a category ID using name and server ID",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "find_category"
                },
                {
                  "description": "List of channels in a specific category",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_channels_in_category"
                },
                {
                  "description": "Create a new webhook on a specific channel",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_webhook"
                },
                {
                  "description": "Delete a webhook",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_webhook"
                },
                {
                  "description": "List of webhooks on a specific channel",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_webhooks"
                },
                {
                  "description": "Send a message via webhook",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "send_webhook_message"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ShenghaiWang": {
      "mcpproviderid": "ShenghaiWang",
      "self": "#/mcpproviders/ShenghaiWang",
      "xid": "/mcpproviders/ShenghaiWang",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:56.721617601Z",
      "modifiedat": "2025-05-12T08:20:56.721617601Z",

      "serversurl": "#/mcpproviders/ShenghaiWang/servers",
      "servers": {
        "xcodebuild": {
          "serverid": "xcodebuild",
          "self": "#/mcpproviders/ShenghaiWang/servers/xcodebuild",
          "xid": "/mcpproviders/ShenghaiWang/servers/xcodebuild",

          "metaurl": "#/mcpproviders/ShenghaiWang/servers/xcodebuild/meta",
          "meta": {
            "serverid": "xcodebuild",
            "self": "#/mcpproviders/ShenghaiWang/servers/xcodebuild/meta",
            "xid": "/mcpproviders/ShenghaiWang/servers/xcodebuild/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:56.721617601Z",
            "modifiedat": "2025-05-12T08:20:56.721617601Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ShenghaiWang/servers/xcodebuild/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ShenghaiWang/servers/xcodebuild/versions",
          "versions": {
            "1": {
              "serverid": "xcodebuild",
              "versionid": "1",
              "self": "#/mcpproviders/ShenghaiWang/servers/xcodebuild/versions/1",
              "xid": "/mcpproviders/ShenghaiWang/servers/xcodebuild/versions/1",
              "epoch": 1,
              "name": "io.github.ShenghaiWang/xcodebuild",
              "isdefault": true,
              "description": "A Model Context Protocol server that builds iOS workspace/project that enables seamless workflow working with iOS projects in Visual Studio Code using extensions like Cline or Roo Code.",
              "createdat": "2025-05-12T08:20:56.721617601Z",
              "modifiedat": "2025-05-12T08:20:56.721617601Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "mcpxcodebuild"
                }
              ],
              "remotes": [],
              "repo_ref": "ShenghaiWang/xcodebuild",
              "resources": [],
              "tools": [
                {
                  "description": "Build iOS Xcode workspace/project",
                  "inputschema": {
                    "properties": {
                      "folder": {
                        "description": "The full path of the current folder that the iOS Xcode workspace/project sits",
                        "type": "string"
                      }
                    },
                    "required": [
                      "folder"
                    ],
                    "type": "object"
                  },
                  "name": "build"
                },
                {
                  "description": "Run test for iOS Xcode workspace/project",
                  "inputschema": {
                    "properties": {
                      "folder": {
                        "description": "The full path of the current folder that the iOS Xcode workspace/project sits",
                        "type": "string"
                      }
                    },
                    "required": [
                      "folder"
                    ],
                    "type": "object"
                  },
                  "name": "test"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Simon-Kansara": {
      "mcpproviderid": "Simon-Kansara",
      "self": "#/mcpproviders/Simon-Kansara",
      "xid": "/mcpproviders/Simon-Kansara",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:50.199898681Z",
      "modifiedat": "2025-05-12T08:17:50.199898681Z",

      "serversurl": "#/mcpproviders/Simon-Kansara/servers",
      "servers": {
        "ableton-live-mcp-server": {
          "serverid": "ableton-live-mcp-server",
          "self": "#/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server",
          "xid": "/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server",

          "metaurl": "#/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server/meta",
          "meta": {
            "serverid": "ableton-live-mcp-server",
            "self": "#/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server/meta",
            "xid": "/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:50.199898681Z",
            "modifiedat": "2025-05-12T08:17:50.199898681Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "ableton-live-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server/versions/1",
              "xid": "/mcpproviders/Simon-Kansara/servers/ableton-live-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.Simon-Kansara/ableton-live-mcp-server",
              "isdefault": true,
              "description": "The Ableton Live MCP Server is a server implementing the Model Context Protocol (MCP) to facilitate communication between LLMs and Ableton Live using OSC (Open Sound Control). It provides an MCP-compatible API for controlling Ableton Live from MCP clients.",
              "createdat": "2025-05-12T08:17:50.199898681Z",
              "modifiedat": "2025-05-12T08:17:50.199898681Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "osc_daemon.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "fastmcp"
                }
              ],
              "remotes": [],
              "repo_ref": "Simon-Kansara/ableton-live-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "SimonB97": {
      "mcpproviderid": "SimonB97",
      "self": "#/mcpproviders/SimonB97",
      "xid": "/mcpproviders/SimonB97",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:21.875019619Z",
      "modifiedat": "2025-05-12T08:21:21.875019619Z",

      "serversurl": "#/mcpproviders/SimonB97/servers",
      "servers": {
        "win-cli-mcp-server": {
          "serverid": "win-cli-mcp-server",
          "self": "#/mcpproviders/SimonB97/servers/win-cli-mcp-server",
          "xid": "/mcpproviders/SimonB97/servers/win-cli-mcp-server",

          "metaurl": "#/mcpproviders/SimonB97/servers/win-cli-mcp-server/meta",
          "meta": {
            "serverid": "win-cli-mcp-server",
            "self": "#/mcpproviders/SimonB97/servers/win-cli-mcp-server/meta",
            "xid": "/mcpproviders/SimonB97/servers/win-cli-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:21.875019619Z",
            "modifiedat": "2025-05-12T08:21:21.875019619Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/SimonB97/servers/win-cli-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/SimonB97/servers/win-cli-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "win-cli-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/SimonB97/servers/win-cli-mcp-server/versions/1",
              "xid": "/mcpproviders/SimonB97/servers/win-cli-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.SimonB97/win-cli-mcp-server",
              "isdefault": true,
              "description": "MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, Git Bash shells, and remote systems via SSH. It allows MCP clients to perform operations on your system, similar to Open Interpreter.",
              "createdat": "2025-05-12T08:21:21.875019619Z",
              "modifiedat": "2025-05-12T08:21:21.875019619Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-y",
                      "@simonb97/server-win-cli"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@simonb97/server-win-cli"
                }
              ],
              "remotes": [],
              "repo_ref": "SimonB97/win-cli-mcp-server",
              "resources": [
                {
                  "description": "SSH connection to {id} with host, port, and username",
                  "mimetype": "application/json",
                  "name": "SSH Connection",
                  "uritemplate": "ssh://{id}"
                },
                {
                  "description": "The current working directory of the CLI server",
                  "mimetype": "text/plain",
                  "name": "Current Working Directory",
                  "uritemplate": "cli://currentdir"
                },
                {
                  "description": "All SSH connection configurations",
                  "mimetype": "application/json",
                  "name": "SSH Configuration",
                  "uritemplate": "ssh://config"
                },
                {
                  "description": "Main CLI server configuration (excluding sensitive data)",
                  "mimetype": "application/json",
                  "name": "CLI Server Configuration",
                  "uritemplate": "cli://config"
                }
              ],
              "tools": [
                {
                  "description": "Execute a command in the specified shell (powershell, cmd, or gitbash)\n\nExample usage (PowerShell):\n```json\n{\n  \"shell\": \"powershell\",\n  \"command\": \"Get-Process | Select-Object -First 5\",\n  \"workingDir\": \"C:\\\\Users\\\\username\"\n}\n```\n\nExample usage (CMD):\n```json\n{\n  \"shell\": \"cmd\",\n  \"command\": \"dir /b\",\n  \"workingDir\": \"C:\\\\Projects\"\n}\n```\n\nExample usage (Git Bash):\n```json\n{\n  \"shell\": \"gitbash\",\n  \"command\": \"ls -la\",\n  \"workingDir\": \"/c/Users/username\"\n}\n```",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "description": "Command to execute",
                        "type": "string"
                      },
                      "shell": {
                        "description": "Shell to use for command execution",
                        "enum": [
                          "powershell",
                          "cmd",
                          "gitbash"
                        ],
                        "type": "string"
                      },
                      "workingDir": {
                        "description": "Working directory for command execution (optional)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "shell",
                      "command"
                    ],
                    "type": "object"
                  },
                  "name": "execute_command"
                },
                {
                  "description": "Get the history of executed commands\n\nExample usage:\n```json\n{\n  \"limit\": 5\n}\n```\n\nExample response:\n```json\n[\n  {\n    \"command\": \"Get-Process\",\n    \"output\": \"...\",\n    \"timestamp\": \"2024-03-20T10:30:00Z\",\n    \"exitCode\": 0\n  }\n]\n```",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of history entries to return (default: 10, max: 100)",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_command_history"
                },
                {
                  "description": "Execute a command on a remote host via SSH\n\nExample usage:\n```json\n{\n  \"connectionId\": \"raspberry-pi\",\n  \"command\": \"uname -a\"\n}\n```\n\nConfiguration required in config.json:\n```json\n{\n  \"ssh\": {\n    \"enabled\": true,\n    \"connections\": {\n      \"raspberry-pi\": {\n        \"host\": \"raspberrypi.local\",\n        \"port\": 22,\n        \"username\": \"pi\",\n        \"password\": \"raspberry\"\n      }\n    }\n  }\n}\n```",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "description": "Command to execute",
                        "type": "string"
                      },
                      "connectionId": {
                        "description": "ID of the SSH connection to use",
                        "enum": [],
                        "type": "string"
                      }
                    },
                    "required": [
                      "connectionId",
                      "command"
                    ],
                    "type": "object"
                  },
                  "name": "ssh_execute"
                },
                {
                  "description": "Disconnect from an SSH server\n\nExample usage:\n```json\n{\n  \"connectionId\": \"raspberry-pi\"\n}\n```\n\nUse this to cleanly close SSH connections when they're no longer needed.",
                  "inputschema": {
                    "properties": {
                      "connectionId": {
                        "description": "ID of the SSH connection to disconnect",
                        "enum": [],
                        "type": "string"
                      }
                    },
                    "required": [
                      "connectionId"
                    ],
                    "type": "object"
                  },
                  "name": "ssh_disconnect"
                },
                {
                  "description": "Create a new SSH connection",
                  "inputschema": {
                    "properties": {
                      "connectionConfig": {
                        "properties": {
                          "host": {
                            "description": "Host of the SSH connection",
                            "type": "string"
                          },
                          "password": {
                            "description": "Password for the SSH connection",
                            "type": "string"
                          },
                          "port": {
                            "description": "Port of the SSH connection",
                            "type": "number"
                          },
                          "privateKeyPath": {
                            "description": "Path to the private key for the SSH connection",
                            "type": "string"
                          },
                          "username": {
                            "description": "Username for the SSH connection",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "connectionId": {
                        "description": "ID of the SSH connection",
                        "type": "string"
                      }
                    },
                    "required": [
                      "connectionId",
                      "connectionConfig"
                    ],
                    "type": "object"
                  },
                  "name": "create_ssh_connection"
                },
                {
                  "description": "Read all SSH connections",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "read_ssh_connections"
                },
                {
                  "description": "Update an existing SSH connection",
                  "inputschema": {
                    "properties": {
                      "connectionConfig": {
                        "properties": {
                          "host": {
                            "description": "Host of the SSH connection",
                            "type": "string"
                          },
                          "password": {
                            "description": "Password for the SSH connection",
                            "type": "string"
                          },
                          "port": {
                            "description": "Port of the SSH connection",
                            "type": "number"
                          },
                          "privateKeyPath": {
                            "description": "Path to the private key for the SSH connection",
                            "type": "string"
                          },
                          "username": {
                            "description": "Username for the SSH connection",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "connectionId": {
                        "description": "ID of the SSH connection to update",
                        "type": "string"
                      }
                    },
                    "required": [
                      "connectionId",
                      "connectionConfig"
                    ],
                    "type": "object"
                  },
                  "name": "update_ssh_connection"
                },
                {
                  "description": "Delete an existing SSH connection",
                  "inputschema": {
                    "properties": {
                      "connectionId": {
                        "description": "ID of the SSH connection to delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "connectionId"
                    ],
                    "type": "object"
                  },
                  "name": "delete_ssh_connection"
                },
                {
                  "description": "Get the current working directory",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_current_directory"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Spathodea-Network": {
      "mcpproviderid": "Spathodea-Network",
      "self": "#/mcpproviders/Spathodea-Network",
      "xid": "/mcpproviders/Spathodea-Network",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:37.175430395Z",
      "modifiedat": "2025-05-12T08:17:37.175430395Z",

      "serversurl": "#/mcpproviders/Spathodea-Network/servers",
      "servers": {
        "opencti-mcp": {
          "serverid": "opencti-mcp",
          "self": "#/mcpproviders/Spathodea-Network/servers/opencti-mcp",
          "xid": "/mcpproviders/Spathodea-Network/servers/opencti-mcp",

          "metaurl": "#/mcpproviders/Spathodea-Network/servers/opencti-mcp/meta",
          "meta": {
            "serverid": "opencti-mcp",
            "self": "#/mcpproviders/Spathodea-Network/servers/opencti-mcp/meta",
            "xid": "/mcpproviders/Spathodea-Network/servers/opencti-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:37.175430395Z",
            "modifiedat": "2025-05-12T08:17:37.175430395Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Spathodea-Network/servers/opencti-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Spathodea-Network/servers/opencti-mcp/versions",
          "versions": {
            "1": {
              "serverid": "opencti-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/Spathodea-Network/servers/opencti-mcp/versions/1",
              "xid": "/mcpproviders/Spathodea-Network/servers/opencti-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.Spathodea-Network/opencti-mcp",
              "isdefault": true,
              "description": "OpenCTI MCP Server is a Model Context Protocol (MCP) server that provides seamless integration with OpenCTI (Open Cyber Threat Intelligence) platform. It enables querying and retrieving threat intelligence data through a standardized interface.",
              "createdat": "2025-05-12T08:17:37.175430395Z",
              "modifiedat": "2025-05-12T08:17:37.175430395Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your OpenCTI instance URL",
                        "name": "OPENCTI_URL",
                        "required": true
                      },
                      {
                        "description": "Your OpenCTI API token",
                        "name": "OPENCTI_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "path/to/opencti-server/build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "opencti-server"
                }
              ],
              "remotes": [],
              "repo_ref": "Spathodea-Network/opencti-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "獲取最新的OpenCTI報告",
                  "inputschema": {
                    "properties": {
                      "first": {
                        "default": 10,
                        "description": "返回結果數量限制",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_latest_reports"
                },
                {
                  "description": "根據ID獲取OpenCTI報告",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "報告ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "get_report_by_id"
                },
                {
                  "description": "搜尋OpenCTI中的指標",
                  "inputschema": {
                    "properties": {
                      "first": {
                        "default": 10,
                        "description": "返回結果數量限制",
                        "type": "number"
                      },
                      "query": {
                        "description": "搜尋關鍵字",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_indicators"
                },
                {
                  "description": "搜尋OpenCTI中的惡意程式",
                  "inputschema": {
                    "properties": {
                      "first": {
                        "default": 10,
                        "description": "返回結果數量限制",
                        "type": "number"
                      },
                      "query": {
                        "description": "搜尋關鍵字",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_malware"
                },
                {
                  "description": "搜尋OpenCTI中的威脅行為者",
                  "inputschema": {
                    "properties": {
                      "first": {
                        "default": 10,
                        "description": "返回結果數量限制",
                        "type": "number"
                      },
                      "query": {
                        "description": "搜尋關鍵字",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_threat_actors"
                },
                {
                  "description": "根據ID獲取使用者資訊",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "使用者ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "get_user_by_id"
                },
                {
                  "description": "列出所有使用者",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_users"
                },
                {
                  "description": "列出所有群組",
                  "inputschema": {
                    "properties": {
                      "first": {
                        "default": 10,
                        "description": "返回結果數量限制",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_groups"
                },
                {
                  "description": "列出所有攻擊模式",
                  "inputschema": {
                    "properties": {
                      "first": {
                        "default": 10,
                        "description": "返回結果數量限制",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_attack_patterns"
                },
                {
                  "description": "根據名稱獲取行動資訊",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "行動名稱",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "get_campaign_by_name"
                },
                {
                  "description": "列出所有連接器",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_connectors"
                },
                {
                  "description": "列出所有狀態模板",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_status_templates"
                },
                {
                  "description": "根據ID獲取檔案資訊",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "檔案ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "get_file_by_id"
                },
                {
                  "description": "列出所有檔案",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_files"
                },
                {
                  "description": "列出所有標記定義",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_marking_definitions"
                },
                {
                  "description": "列出所有標籤",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_labels"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "StarRocks": {
      "mcpproviderid": "StarRocks",
      "self": "#/mcpproviders/StarRocks",
      "xid": "/mcpproviders/StarRocks",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:23.798896961Z",
      "modifiedat": "2025-05-12T08:19:23.798896961Z",

      "serversurl": "#/mcpproviders/StarRocks/servers",
      "servers": {
        "mcp-server-starrocks": {
          "serverid": "mcp-server-starrocks",
          "self": "#/mcpproviders/StarRocks/servers/mcp-server-starrocks",
          "xid": "/mcpproviders/StarRocks/servers/mcp-server-starrocks",

          "metaurl": "#/mcpproviders/StarRocks/servers/mcp-server-starrocks/meta",
          "meta": {
            "serverid": "mcp-server-starrocks",
            "self": "#/mcpproviders/StarRocks/servers/mcp-server-starrocks/meta",
            "xid": "/mcpproviders/StarRocks/servers/mcp-server-starrocks/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:23.798896961Z",
            "modifiedat": "2025-05-12T08:19:23.798896961Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/StarRocks/servers/mcp-server-starrocks/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/StarRocks/servers/mcp-server-starrocks/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-starrocks",
              "versionid": "1",
              "self": "#/mcpproviders/StarRocks/servers/mcp-server-starrocks/versions/1",
              "xid": "/mcpproviders/StarRocks/servers/mcp-server-starrocks/versions/1",
              "epoch": 1,
              "name": "io.github.StarRocks/mcp-server-starrocks",
              "isdefault": true,
              "description": "The StarRocks MCP Server acts as a bridge between AI assistants and StarRocks databases. It allows for direct SQL execution, database exploration, data visualization via charts, and retrieving detailed schema/data overviews without requiring complex client-side setup.",
              "createdat": "2025-05-12T08:19:23.798896961Z",
              "modifiedat": "2025-05-12T08:19:23.798896961Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Hostname or IP address of the StarRocks FE service.",
                        "name": "STARROCKS_HOST",
                        "required": false
                      },
                      {
                        "description": "MySQL protocol port of the StarRocks FE service.",
                        "name": "STARROCKS_PORT",
                        "required": false
                      },
                      {
                        "description": "StarRocks username.",
                        "name": "STARROCKS_USER",
                        "required": false
                      },
                      {
                        "description": "StarRocks password.",
                        "name": "STARROCKS_PASSWORD",
                        "required": false
                      },
                      {
                        "description": "Default database to use if not specified in tool arguments or resource URIs.",
                        "name": "STARROCKS_DB",
                        "required": false
                      },
                      {
                        "description": "Approximate character limit for the total text generated by overview tools when fetching data to populate the cache.",
                        "name": "STARROCKS_OVERVIEW_LIMIT",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "run",
                      "--with",
                      "mcp-server-starrocks",
                      "mcp-server-starrocks"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-server-starrocks"
                }
              ],
              "remotes": [],
              "repo_ref": "StarRocks/mcp-server-starrocks",
              "resources": [
                {
                  "description": "List all databases in StarRocks",
                  "mimetype": "text/plain",
                  "name": "All Databases",
                  "uritemplate": "starrocks:///databases"
                },
                {
                  "description": "Get the schema of a table using SHOW CREATE TABLE",
                  "mimetype": "text/plain",
                  "name": "Table Schema",
                  "uritemplate": "starrocks:///{db}/{table}/schema"
                },
                {
                  "description": "List all tables in a specific database",
                  "mimetype": "text/plain",
                  "name": "Database Tables",
                  "uritemplate": "starrocks:///{db}/tables"
                },
                {
                  "description": "Internal information exposed by StarRocks similar to linux /proc, following are some common paths:\n\n'/frontends' Shows the information of FE nodes.\n'/backends' Shows the information of BE nodes if this SR is non cloud native deployment.\n'/compute_nodes' Shows the information of CN nodes if this SR is cloud native deployment.\n'/dbs' Shows the information of databases.\n'/dbs/\u003cDB_ID\u003e' Shows the information of a database by database ID.\n'/dbs/\u003cDB_ID\u003e/\u003cTABLE_ID\u003e' Shows the information of tables by database ID.\n'/dbs/\u003cDB_ID\u003e/\u003cTABLE_ID\u003e/partitions' Shows the information of partitions by database ID and table ID.\n'/transactions' Shows the information of transactions by database.\n'/transactions/\u003cDB_ID\u003e' Show the information of transactions by database ID.\n'/transactions/\u003cDB_ID\u003e/running' Show the information of running transactions by database ID.\n'/transactions/\u003cDB_ID\u003e/finished' Show the information of finished transactions by database ID.\n'/jobs' Shows the information of jobs.\n'/statistic' Shows the statistics of each database.\n'/tasks' Shows the total number of all generic tasks and the failed tasks.\n'/cluster_balance' Shows the load balance information.\n'/routine_loads' Shows the information of Routine Load.\n'/colocation_group' Shows the information of Colocate Join groups.\n'/catalog' Shows the information of catalogs.",
                  "mimetype": "text/plain",
                  "name": "System internal information",
                  "uritemplate": "proc:///{+path}"
                }
              ],
              "tools": [
                {
                  "description": "Execute a SELECT query or commands that return a ResultSet",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "read_query"
                },
                {
                  "description": "Execute an DDL/DML or other StarRocks command that do not have a ResultSet",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "SQL to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "write_query"
                },
                {
                  "description": "using sql `query` to extract data from database, then using python `plotly_expr` to generate a chart for UI to display",
                  "inputschema": {
                    "properties": {
                      "plotly_expr": {
                        "description": "a one function call expression, with 2 vars binded: `px` as `import plotly.express as px`, and `df` as dataframe generated by query `plotly_expr` example: `px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\", marginal_y=\"violin\", marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")`",
                        "type": "string"
                      },
                      "query": {
                        "description": "SQL query to execute",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "query_and_plotly_chart"
                },
                {
                  "description": "Get an overview of a specific table: columns, sample rows (up to 5), and total row count. Uses cache unless refresh=true.",
                  "inputschema": {
                    "properties": {
                      "refresh": {
                        "default": false,
                        "description": "Optional: Set to true to force refresh the overview, ignoring the cache. Defaults to false.",
                        "type": "boolean"
                      },
                      "table": {
                        "description": "Database name. Optional: uses the default database 'root' if `db` part is omitted.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "table"
                    ],
                    "type": "object"
                  },
                  "name": "table_overview"
                },
                {
                  "description": "Get an overview (columns, sample rows, row count) for ALL tables in a database. Uses cache unless refresh=True.",
                  "inputschema": {
                    "properties": {
                      "db": {
                        "description": "Database name. Optional: uses the default database 'root' if not provided.",
                        "type": "string"
                      },
                      "refresh": {
                        "default": false,
                        "description": "Optional: Set to true to force refresh the overview, ignoring the cache. Defaults to false.",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "db_overview"
                }
              ],
              "version_detail": {
                "version": "0.1.2"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "StevenStavrakis": {
      "mcpproviderid": "StevenStavrakis",
      "self": "#/mcpproviders/StevenStavrakis",
      "xid": "/mcpproviders/StevenStavrakis",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:48.76047347Z",
      "modifiedat": "2025-05-12T08:17:48.76047347Z",

      "serversurl": "#/mcpproviders/StevenStavrakis/servers",
      "servers": {
        "obsidian-mcp": {
          "serverid": "obsidian-mcp",
          "self": "#/mcpproviders/StevenStavrakis/servers/obsidian-mcp",
          "xid": "/mcpproviders/StevenStavrakis/servers/obsidian-mcp",

          "metaurl": "#/mcpproviders/StevenStavrakis/servers/obsidian-mcp/meta",
          "meta": {
            "serverid": "obsidian-mcp",
            "self": "#/mcpproviders/StevenStavrakis/servers/obsidian-mcp/meta",
            "xid": "/mcpproviders/StevenStavrakis/servers/obsidian-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:48.76047347Z",
            "modifiedat": "2025-05-12T08:17:48.76047347Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/StevenStavrakis/servers/obsidian-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/StevenStavrakis/servers/obsidian-mcp/versions",
          "versions": {
            "1": {
              "serverid": "obsidian-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/StevenStavrakis/servers/obsidian-mcp/versions/1",
              "xid": "/mcpproviders/StevenStavrakis/servers/obsidian-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.StevenStavrakis/obsidian-mcp",
              "isdefault": true,
              "description": "An MCP (Model Context Protocol) server that enables AI assistants to interact with Obsidian vaults, providing tools for reading, creating, editing and managing notes and tags.",
              "createdat": "2025-05-12T08:17:48.76047347Z",
              "modifiedat": "2025-05-12T08:17:48.76047347Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "obsidian-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "StevenStavrakis/obsidian-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Read the contents of a note",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "read-note"
                },
                {
                  "description": "Create a new note",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create-note"
                },
                {
                  "description": "Edit an existing note",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "edit-note"
                },
                {
                  "description": "Delete a note",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete-note"
                },
                {
                  "description": "Move a note to a different location",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "move-note"
                },
                {
                  "description": "Create a new directory",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create-directory"
                },
                {
                  "description": "Search notes in the vault",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search-vault"
                },
                {
                  "description": "Add tags to a note",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "add-tags"
                },
                {
                  "description": "Remove tags from a note",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "remove-tags"
                },
                {
                  "description": "Rename a tag across all notes",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "rename-tag"
                },
                {
                  "description": "List and organize tags",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "manage-tags"
                },
                {
                  "description": "List all available vaults (helps with multi-vault setups)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-available-vaults"
                }
              ],
              "version_detail": {
                "version": "1.0.6"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "TencentEdgeOne": {
      "mcpproviderid": "TencentEdgeOne",
      "self": "#/mcpproviders/TencentEdgeOne",
      "xid": "/mcpproviders/TencentEdgeOne",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:40.428710015Z",
      "modifiedat": "2025-05-12T08:17:40.428710015Z",

      "serversurl": "#/mcpproviders/TencentEdgeOne/servers",
      "servers": {
        "edgeone-pages-mcp": {
          "serverid": "edgeone-pages-mcp",
          "self": "#/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp",
          "xid": "/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp",

          "metaurl": "#/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp/meta",
          "meta": {
            "serverid": "edgeone-pages-mcp",
            "self": "#/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp/meta",
            "xid": "/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:40.428710015Z",
            "modifiedat": "2025-05-12T08:17:40.428710015Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp/versions",
          "versions": {
            "1": {
              "serverid": "edgeone-pages-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp/versions/1",
              "xid": "/mcpproviders/TencentEdgeOne/servers/edgeone-pages-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.TencentEdgeOne/edgeone-pages-mcp",
              "isdefault": true,
              "description": "An MCP service for deploying HTML content to EdgeOne Pages and obtaining a publicly accessible URL.",
              "createdat": "2025-05-12T08:17:40.428710015Z",
              "modifiedat": "2025-05-12T08:17:40.428710015Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "edgeone-pages-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "edgeone-pages-mcp"
                }
              ],
              "remotes": [
                {
                  "transporttype": "https",
                  "url": "https://mcp-on-edge.edgeone.site/mcp-server"
                }
              ],
              "repo_ref": "TencentEdgeOne/edgeone-pages-mcp",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "TermiX-official": {
      "mcpproviderid": "TermiX-official",
      "self": "#/mcpproviders/TermiX-official",
      "xid": "/mcpproviders/TermiX-official",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:25.681377502Z",
      "modifiedat": "2025-05-12T08:20:25.681377502Z",

      "serversurl": "#/mcpproviders/TermiX-official/servers",
      "servers": {
        "bsc-mcp": {
          "serverid": "bsc-mcp",
          "self": "#/mcpproviders/TermiX-official/servers/bsc-mcp",
          "xid": "/mcpproviders/TermiX-official/servers/bsc-mcp",

          "metaurl": "#/mcpproviders/TermiX-official/servers/bsc-mcp/meta",
          "meta": {
            "serverid": "bsc-mcp",
            "self": "#/mcpproviders/TermiX-official/servers/bsc-mcp/meta",
            "xid": "/mcpproviders/TermiX-official/servers/bsc-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:25.681377502Z",
            "modifiedat": "2025-05-12T08:20:25.681377502Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/TermiX-official/servers/bsc-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/TermiX-official/servers/bsc-mcp/versions",
          "versions": {
            "1": {
              "serverid": "bsc-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/TermiX-official/servers/bsc-mcp/versions/1",
              "xid": "/mcpproviders/TermiX-official/servers/bsc-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.TermiX-official/bsc-mcp",
              "isdefault": true,
              "description": "A plug-and-play MCP tool server to send BNB, transfer BEP-20 tokens, deploy tokens, and interact with smart contracts on the Binance Smart Chain (BSC) — built for Claude Desktop, AI agents, and developers.",
              "createdat": "2025-05-12T08:20:25.681377502Z",
              "modifiedat": "2025-05-12T08:20:25.681377502Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "BSC Wallet Private Key",
                        "name": "BSC_WALLET_PRIVATE_KEY",
                        "required": true
                      },
                      {
                        "description": "Wallet Password (6 characters)",
                        "name": "WALLET_PASSWORD",
                        "required": true
                      },
                      {
                        "description": "Custom RPC URL",
                        "name": "CUSTOM_RPC_URL",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "--init"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "bnbchain-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "TermiX-official/bsc-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Send BNB to a wallet",
                  "name": "transferNativeToken"
                },
                {
                  "description": "Transfer BEP-20 token via symbol/address",
                  "name": "transferBEP20Token"
                },
                {
                  "description": "Swap tokens via PancakeSwap",
                  "name": "pancakeSwap"
                },
                {
                  "description": "Create meme token on Four.Meme",
                  "name": "createFourMeme"
                },
                {
                  "description": "Deploy a BEP-20 contract",
                  "name": "createBEP20Token"
                },
                {
                  "description": "Get token + native balance",
                  "name": "getBalance"
                },
                {
                  "description": "Custom contract calls via ABI",
                  "name": "callContractFunction"
                },
                {
                  "description": "Get wallet info for an address",
                  "name": "getWalletInfo"
                },
                {
                  "description": "Check token security of BSC tokens",
                  "name": "securityCheck"
                },
                {
                  "description": "Add liquidity to PancakeSwap",
                  "name": "pancakeAddLiquidity"
                },
                {
                  "description": "View your PancakeSwap positions",
                  "name": "pancakeMyPosition"
                },
                {
                  "description": "Remove liquidity from PancakeSwap",
                  "name": "pancakeRemovePosition"
                },
                {
                  "description": "Sell meme token on Four.Meme",
                  "name": "sellMemeToken"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "VectorInstitute": {
      "mcpproviderid": "VectorInstitute",
      "self": "#/mcpproviders/VectorInstitute",
      "xid": "/mcpproviders/VectorInstitute",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:37.01252198Z",
      "modifiedat": "2025-05-12T08:17:37.01252198Z",

      "serversurl": "#/mcpproviders/VectorInstitute/servers",
      "servers": {
        "mcp-goodnews": {
          "serverid": "mcp-goodnews",
          "self": "#/mcpproviders/VectorInstitute/servers/mcp-goodnews",
          "xid": "/mcpproviders/VectorInstitute/servers/mcp-goodnews",

          "metaurl": "#/mcpproviders/VectorInstitute/servers/mcp-goodnews/meta",
          "meta": {
            "serverid": "mcp-goodnews",
            "self": "#/mcpproviders/VectorInstitute/servers/mcp-goodnews/meta",
            "xid": "/mcpproviders/VectorInstitute/servers/mcp-goodnews/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:37.01252198Z",
            "modifiedat": "2025-05-12T08:17:37.01252198Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/VectorInstitute/servers/mcp-goodnews/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/VectorInstitute/servers/mcp-goodnews/versions",
          "versions": {
            "1": {
              "serverid": "mcp-goodnews",
              "versionid": "1",
              "self": "#/mcpproviders/VectorInstitute/servers/mcp-goodnews/versions/1",
              "xid": "/mcpproviders/VectorInstitute/servers/mcp-goodnews/versions/1",
              "epoch": 1,
              "name": "io.github.VectorInstitute/mcp-goodnews",
              "isdefault": true,
              "description": "A simple Model Context Protocol (MCP) application that features a server for getting good, positive, and uplifting news. It fetches news articles from NewsAPI and uses a Cohere LLM to rank and return the top news articles based on positive sentiment.",
              "createdat": "2025-05-12T08:17:37.01252198Z",
              "modifiedat": "2025-05-12T08:17:37.01252198Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "NEWS_API_KEY",
                        "required": true
                      },
                      {
                        "name": "COHERE_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "\u003cabsolute-path-to-cloned-repo\u003e/mcp-goodnews/src/mcp_goodnews",
                      "run",
                      "server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "uv"
                }
              ],
              "remotes": [],
              "repo_ref": "VectorInstitute/mcp-goodnews",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Verodat": {
      "mcpproviderid": "Verodat",
      "self": "#/mcpproviders/Verodat",
      "xid": "/mcpproviders/Verodat",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:46.301584509Z",
      "modifiedat": "2025-05-12T08:17:46.301584509Z",

      "serversurl": "#/mcpproviders/Verodat/servers",
      "servers": {
        "verodat-mcp-server": {
          "serverid": "verodat-mcp-server",
          "self": "#/mcpproviders/Verodat/servers/verodat-mcp-server",
          "xid": "/mcpproviders/Verodat/servers/verodat-mcp-server",

          "metaurl": "#/mcpproviders/Verodat/servers/verodat-mcp-server/meta",
          "meta": {
            "serverid": "verodat-mcp-server",
            "self": "#/mcpproviders/Verodat/servers/verodat-mcp-server/meta",
            "xid": "/mcpproviders/Verodat/servers/verodat-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:46.301584509Z",
            "modifiedat": "2025-05-12T08:17:46.301584509Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Verodat/servers/verodat-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Verodat/servers/verodat-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "verodat-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/Verodat/servers/verodat-mcp-server/versions/1",
              "xid": "/mcpproviders/Verodat/servers/verodat-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.Verodat/verodat-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation for Verodat, allowing AI models to interact with Verodat's data management capabilities through well-defined tools.",
              "createdat": "2025-05-12T08:17:46.301584509Z",
              "modifiedat": "2025-05-12T08:17:46.301584509Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for authentication",
                        "name": "VERODAT_AI_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Base URL for Verodat API",
                        "name": "VERODAT_API_BASE_URL",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "path/to/verodat-mcp-server/build/src/consume.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@Verodat/verodat-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "Verodat/verodat-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve available accounts",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-accounts"
                },
                {
                  "description": "List workspaces within an account",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-workspaces"
                },
                {
                  "description": "List datasets in a workspace",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-datasets"
                },
                {
                  "description": "Retrieve actual data from a dataset",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-dataset-output"
                },
                {
                  "description": "Retrieve field definitions for a dataset",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-dataset-targetfields"
                },
                {
                  "description": "Retrieve existing AI queries",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-queries"
                },
                {
                  "description": "Get workspace context and data structure",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-ai-context"
                },
                {
                  "description": "Execute AI-powered queries on datasets",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "execute-ai-query"
                },
                {
                  "description": "Create a new dataset with defined schema",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "create-dataset"
                },
                {
                  "description": "Upload data rows to existing datasets",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "upload-dataset-rows"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "VeyraX": {
      "mcpproviderid": "VeyraX",
      "self": "#/mcpproviders/VeyraX",
      "xid": "/mcpproviders/VeyraX",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:23.785206505Z",
      "modifiedat": "2025-05-12T08:18:23.785206505Z",

      "serversurl": "#/mcpproviders/VeyraX/servers",
      "servers": {
        "veyrax-mcp": {
          "serverid": "veyrax-mcp",
          "self": "#/mcpproviders/VeyraX/servers/veyrax-mcp",
          "xid": "/mcpproviders/VeyraX/servers/veyrax-mcp",

          "metaurl": "#/mcpproviders/VeyraX/servers/veyrax-mcp/meta",
          "meta": {
            "serverid": "veyrax-mcp",
            "self": "#/mcpproviders/VeyraX/servers/veyrax-mcp/meta",
            "xid": "/mcpproviders/VeyraX/servers/veyrax-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:23.785206505Z",
            "modifiedat": "2025-05-12T08:18:23.785206505Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/VeyraX/servers/veyrax-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/VeyraX/servers/veyrax-mcp/versions",
          "versions": {
            "1": {
              "serverid": "veyrax-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/VeyraX/servers/veyrax-mcp/versions/1",
              "xid": "/mcpproviders/VeyraX/servers/veyrax-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.VeyraX/veyrax-mcp",
              "isdefault": true,
              "description": "VeyraX MCP is an MCP server providing a unified connection to access all your tools in any MCP-compatible environment.",
              "createdat": "2025-05-12T08:18:23.785206505Z",
              "modifiedat": "2025-05-12T08:18:23.785206505Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "VeyraX/veyrax-mcp",
              "resources": [],
              "tools": [
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "GetToolsTool"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "ToolCallTool"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "GetFlowTool"
                }
              ],
              "version_detail": {
                "version": "0.0.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "Vortiago": {
      "mcpproviderid": "Vortiago",
      "self": "#/mcpproviders/Vortiago",
      "xid": "/mcpproviders/Vortiago",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:55.383270455Z",
      "modifiedat": "2025-05-12T08:21:55.383270455Z",

      "serversurl": "#/mcpproviders/Vortiago/servers",
      "servers": {
        "mcp-azure-devops": {
          "serverid": "mcp-azure-devops",
          "self": "#/mcpproviders/Vortiago/servers/mcp-azure-devops",
          "xid": "/mcpproviders/Vortiago/servers/mcp-azure-devops",

          "metaurl": "#/mcpproviders/Vortiago/servers/mcp-azure-devops/meta",
          "meta": {
            "serverid": "mcp-azure-devops",
            "self": "#/mcpproviders/Vortiago/servers/mcp-azure-devops/meta",
            "xid": "/mcpproviders/Vortiago/servers/mcp-azure-devops/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:55.383270455Z",
            "modifiedat": "2025-05-12T08:21:55.383270455Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/Vortiago/servers/mcp-azure-devops/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/Vortiago/servers/mcp-azure-devops/versions",
          "versions": {
            "1": {
              "serverid": "mcp-azure-devops",
              "versionid": "1",
              "self": "#/mcpproviders/Vortiago/servers/mcp-azure-devops/versions/1",
              "xid": "/mcpproviders/Vortiago/servers/mcp-azure-devops/versions/1",
              "epoch": 1,
              "name": "io.github.Vortiago/mcp-azure-devops",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server enabling AI assistants to interact with Azure DevOps services. This server provides a bridge between natural language interactions and the Azure DevOps REST API, supporting work item management, project management, and team management features.",
              "createdat": "2025-05-12T08:21:55.383270455Z",
              "modifiedat": "2025-05-12T08:21:55.383270455Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Personal Access Token for Azure DevOps API access",
                        "name": "AZURE_DEVOPS_PAT",
                        "required": true
                      },
                      {
                        "description": "Full URL to the Azure DevOps organization",
                        "name": "AZURE_DEVOPS_ORGANIZATION_URL",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp-azure-devops"
                }
              ],
              "remotes": [],
              "repo_ref": "Vortiago/mcp-azure-devops",
              "resources": [
                {
                  "description": "Work item resources accessible by ID.",
                  "mimetype": "application/json",
                  "name": "work_items",
                  "uritemplate": "/workitems/{id}"
                },
                {
                  "description": "List of accessible projects in the organization.",
                  "mimetype": "application/json",
                  "name": "projects",
                  "uritemplate": "/projects"
                },
                {
                  "description": "List of teams within the organization.",
                  "mimetype": "application/json",
                  "name": "teams",
                  "uritemplate": "/teams"
                }
              ],
              "tools": [
                {
                  "description": "Searches for work items using Work Item Query Language (WIQL). Use this tool to find work items matching specific criteria, search across projects, create dynamic reports, or identify work items assigned to specific team members.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The WIQL query string (e.g., \"SELECT * FROM workitems WHERE [System.State] = 'Active'\")",
                        "type": "string"
                      },
                      "top": {
                        "description": "Maximum number of results to return (default: 30)",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "query_work_items"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "XGenerationLab": {
      "mcpproviderid": "XGenerationLab",
      "self": "#/mcpproviders/XGenerationLab",
      "xid": "/mcpproviders/XGenerationLab",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:47.698335239Z",
      "modifiedat": "2025-05-12T08:20:47.698335239Z",

      "serversurl": "#/mcpproviders/XGenerationLab/servers",
      "servers": {
        "xiyan_mcp_server": {
          "serverid": "xiyan_mcp_server",
          "self": "#/mcpproviders/XGenerationLab/servers/xiyan_mcp_server",
          "xid": "/mcpproviders/XGenerationLab/servers/xiyan_mcp_server",

          "metaurl": "#/mcpproviders/XGenerationLab/servers/xiyan_mcp_server/meta",
          "meta": {
            "serverid": "xiyan_mcp_server",
            "self": "#/mcpproviders/XGenerationLab/servers/xiyan_mcp_server/meta",
            "xid": "/mcpproviders/XGenerationLab/servers/xiyan_mcp_server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:47.698335239Z",
            "modifiedat": "2025-05-12T08:20:47.698335239Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/XGenerationLab/servers/xiyan_mcp_server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/XGenerationLab/servers/xiyan_mcp_server/versions",
          "versions": {
            "1": {
              "serverid": "xiyan_mcp_server",
              "versionid": "1",
              "self": "#/mcpproviders/XGenerationLab/servers/xiyan_mcp_server/versions/1",
              "xid": "/mcpproviders/XGenerationLab/servers/xiyan_mcp_server/versions/1",
              "epoch": 1,
              "name": "io.github.XGenerationLab/xiyan_mcp_server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables natural language queries to databases powered by XiYan-SQL, SOTA of text-to-sql on open benchmarks",
              "createdat": "2025-05-12T08:20:47.698335239Z",
              "modifiedat": "2025-05-12T08:20:47.698335239Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "xiyan-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "XGenerationLab/xiyan_mcp_server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "XeroAPI": {
      "mcpproviderid": "XeroAPI",
      "self": "#/mcpproviders/XeroAPI",
      "xid": "/mcpproviders/XeroAPI",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:41.534899439Z",
      "modifiedat": "2025-05-12T08:17:41.534899439Z",

      "serversurl": "#/mcpproviders/XeroAPI/servers",
      "servers": {
        "xero-mcp-server": {
          "serverid": "xero-mcp-server",
          "self": "#/mcpproviders/XeroAPI/servers/xero-mcp-server",
          "xid": "/mcpproviders/XeroAPI/servers/xero-mcp-server",

          "metaurl": "#/mcpproviders/XeroAPI/servers/xero-mcp-server/meta",
          "meta": {
            "serverid": "xero-mcp-server",
            "self": "#/mcpproviders/XeroAPI/servers/xero-mcp-server/meta",
            "xid": "/mcpproviders/XeroAPI/servers/xero-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:41.534899439Z",
            "modifiedat": "2025-05-12T08:17:41.534899439Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/XeroAPI/servers/xero-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/XeroAPI/servers/xero-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "xero-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/XeroAPI/servers/xero-mcp-server/versions/1",
              "xid": "/mcpproviders/XeroAPI/servers/xero-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.XeroAPI/xero-mcp-server",
              "isdefault": true,
              "description": "This is a Model Context Protocol (MCP) server implementation for Xero. It provides a bridge between the MCP protocol and Xero's API, allowing for standardized access to Xero's accounting and business features.",
              "createdat": "2025-05-12T08:17:41.534899439Z",
              "modifiedat": "2025-05-12T08:17:41.534899439Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Client ID for Xero OAuth2 authentication",
                        "name": "XERO_CLIENT_ID",
                        "required": false
                      },
                      {
                        "description": "Client secret for Xero OAuth2 authentication",
                        "name": "XERO_CLIENT_SECRET",
                        "required": false
                      },
                      {
                        "description": "Bearer token for authentication, takes precedence over client ID/secret",
                        "name": "XERO_CLIENT_BEARER_TOKEN",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@xeroapi/xero-mcp-server@latest"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@xeroapi/xero-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "XeroAPI/xero-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "YanxingLiu": {
      "mcpproviderid": "YanxingLiu",
      "self": "#/mcpproviders/YanxingLiu",
      "xid": "/mcpproviders/YanxingLiu",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:44.773815089Z",
      "modifiedat": "2025-05-12T08:17:44.773815089Z",

      "serversurl": "#/mcpproviders/YanxingLiu/servers",
      "servers": {
        "dify-mcp-server": {
          "serverid": "dify-mcp-server",
          "self": "#/mcpproviders/YanxingLiu/servers/dify-mcp-server",
          "xid": "/mcpproviders/YanxingLiu/servers/dify-mcp-server",

          "metaurl": "#/mcpproviders/YanxingLiu/servers/dify-mcp-server/meta",
          "meta": {
            "serverid": "dify-mcp-server",
            "self": "#/mcpproviders/YanxingLiu/servers/dify-mcp-server/meta",
            "xid": "/mcpproviders/YanxingLiu/servers/dify-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:44.773815089Z",
            "modifiedat": "2025-05-12T08:17:44.773815089Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/YanxingLiu/servers/dify-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/YanxingLiu/servers/dify-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "dify-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/YanxingLiu/servers/dify-mcp-server/versions/1",
              "xid": "/mcpproviders/YanxingLiu/servers/dify-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.YanxingLiu/dify-mcp-server",
              "isdefault": true,
              "description": "A simple implementation of an MCP server for using dify workflows. It achieves the invocation of the Dify workflow by calling the tools of MCP.",
              "createdat": "2025-05-12T08:17:44.773815089Z",
              "modifiedat": "2025-05-12T08:17:44.773815089Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "The base URL for your Dify API.",
                        "name": "DIFY_BASE_URL",
                        "required": false
                      },
                      {
                        "description": "Comma-separated list of your Dify App Secret Keys (SKs).",
                        "name": "DIFY_APP_SKS",
                        "required": false
                      },
                      {
                        "description": "Path to config.yaml file.",
                        "name": "CONFIG_PATH",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "--from",
                      "git+https://github.com/YanxingLiu/dify-mcp-server",
                      "dify_mcp_server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uvx",
                  "package_name": "dify-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "YanxingLiu/dify-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "YuChenSSR": {
      "mcpproviderid": "YuChenSSR",
      "self": "#/mcpproviders/YuChenSSR",
      "xid": "/mcpproviders/YuChenSSR",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:05.065345231Z",
      "modifiedat": "2025-05-12T08:18:05.065345231Z",

      "serversurl": "#/mcpproviders/YuChenSSR/servers",
      "servers": {
        "mindmap-mcp-server": {
          "serverid": "mindmap-mcp-server",
          "self": "#/mcpproviders/YuChenSSR/servers/mindmap-mcp-server",
          "xid": "/mcpproviders/YuChenSSR/servers/mindmap-mcp-server",

          "metaurl": "#/mcpproviders/YuChenSSR/servers/mindmap-mcp-server/meta",
          "meta": {
            "serverid": "mindmap-mcp-server",
            "self": "#/mcpproviders/YuChenSSR/servers/mindmap-mcp-server/meta",
            "xid": "/mcpproviders/YuChenSSR/servers/mindmap-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:05.065345231Z",
            "modifiedat": "2025-05-12T08:18:05.065345231Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/YuChenSSR/servers/mindmap-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/YuChenSSR/servers/mindmap-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "mindmap-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/YuChenSSR/servers/mindmap-mcp-server/versions/1",
              "xid": "/mcpproviders/YuChenSSR/servers/mindmap-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.YuChenSSR/mindmap-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for converting Markdown content to interactive mindmaps.",
              "createdat": "2025-05-12T08:18:05.065345231Z",
              "modifiedat": "2025-05-12T08:18:05.065345231Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "run",
                      "--rm",
                      "-i",
                      "-v",
                      "/path/to/output/folder:/output",
                      "ychen94/mindmap-converter-mcp:latest"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "ychen94/mindmap-converter-mcp"
                },
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "mindmap-mcp-server",
                      "--return-type",
                      "filePath"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mindmap-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "YuChenSSR/mindmap-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ZubeidHendricks": {
      "mcpproviderid": "ZubeidHendricks",
      "self": "#/mcpproviders/ZubeidHendricks",
      "xid": "/mcpproviders/ZubeidHendricks",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:51.062649765Z",
      "modifiedat": "2025-05-12T08:21:51.062649765Z",

      "serversurl": "#/mcpproviders/ZubeidHendricks/servers",
      "servers": {
        "youtube-mcp-server": {
          "serverid": "youtube-mcp-server",
          "self": "#/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server",
          "xid": "/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server",

          "metaurl": "#/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server/meta",
          "meta": {
            "serverid": "youtube-mcp-server",
            "self": "#/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server/meta",
            "xid": "/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:51.062649765Z",
            "modifiedat": "2025-05-12T08:21:51.062649765Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "youtube-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server/versions/1",
              "xid": "/mcpproviders/ZubeidHendricks/servers/youtube-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.ZubeidHendricks/youtube-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation for YouTube, enabling AI language models to interact with YouTube content through a standardized interface.",
              "createdat": "2025-05-12T08:21:51.062649765Z",
              "modifiedat": "2025-05-12T08:21:51.062649765Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your YouTube Data API key",
                        "name": "YOUTUBE_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Default language for transcripts (optional, defaults to 'en')",
                        "name": "YOUTUBE_TRANSCRIPT_LANG",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@modelcontextprotocol/server-youtube"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/server-youtube"
                }
              ],
              "remotes": [],
              "repo_ref": "ZubeidHendricks/youtube-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "aarora79": {
      "mcpproviderid": "aarora79",
      "self": "#/mcpproviders/aarora79",
      "xid": "/mcpproviders/aarora79",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:57.586173065Z",
      "modifiedat": "2025-05-12T08:21:57.586173065Z",

      "serversurl": "#/mcpproviders/aarora79/servers",
      "servers": {
        "aws-cost-explorer-mcp-server": {
          "serverid": "aws-cost-explorer-mcp-server",
          "self": "#/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server",
          "xid": "/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server",

          "metaurl": "#/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server/meta",
          "meta": {
            "serverid": "aws-cost-explorer-mcp-server",
            "self": "#/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server/meta",
            "xid": "/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:57.586173065Z",
            "modifiedat": "2025-05-12T08:21:57.586173065Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "aws-cost-explorer-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server/versions/1",
              "xid": "/mcpproviders/aarora79/servers/aws-cost-explorer-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.aarora79/aws-cost-explorer-mcp-server",
              "isdefault": true,
              "description": "An MCP server for getting AWS spend data via Cost Explorer and Amazon Bedrock usage data via Model invocation logs in Amazon Cloud Watch through Anthropic's MCP (Model Control Protocol). It exposes AWS Cost Explorer API functionality to Claude Desktop, allowing natural language queries about AWS spend.",
              "createdat": "2025-05-12T08:21:57.586173065Z",
              "modifiedat": "2025-05-12T08:21:57.586173065Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "AWS credentials with Cost Explorer access",
                        "name": "AWS_CREDENTIALS",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "venv",
                      "--python",
                      "3.12",
                      "\u0026\u0026",
                      "source",
                      ".venv/bin/activate",
                      "\u0026\u0026",
                      "uv",
                      "pip",
                      "install",
                      "--requirement",
                      "pyproject.toml"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "aws-cost-explorer-mcp"
                }
              ],
              "remotes": [
                {
                  "transporttype": "https",
                  "url": "https://\u003cyour-mcp-server-host\u003e"
                }
              ],
              "repo_ref": "aarora79/aws-cost-explorer-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "abel9851": {
      "mcpproviderid": "abel9851",
      "self": "#/mcpproviders/abel9851",
      "xid": "/mcpproviders/abel9851",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:55.585583695Z",
      "modifiedat": "2025-05-12T08:17:55.585583695Z",

      "serversurl": "#/mcpproviders/abel9851/servers",
      "servers": {
        "mcp-server-mariadb": {
          "serverid": "mcp-server-mariadb",
          "self": "#/mcpproviders/abel9851/servers/mcp-server-mariadb",
          "xid": "/mcpproviders/abel9851/servers/mcp-server-mariadb",

          "metaurl": "#/mcpproviders/abel9851/servers/mcp-server-mariadb/meta",
          "meta": {
            "serverid": "mcp-server-mariadb",
            "self": "#/mcpproviders/abel9851/servers/mcp-server-mariadb/meta",
            "xid": "/mcpproviders/abel9851/servers/mcp-server-mariadb/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:55.585583695Z",
            "modifiedat": "2025-05-12T08:17:55.585583695Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/abel9851/servers/mcp-server-mariadb/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/abel9851/servers/mcp-server-mariadb/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-mariadb",
              "versionid": "1",
              "self": "#/mcpproviders/abel9851/servers/mcp-server-mariadb/versions/1",
              "xid": "/mcpproviders/abel9851/servers/mcp-server-mariadb/versions/1",
              "epoch": 1,
              "name": "io.github.abel9851/mcp-server-mariadb",
              "isdefault": true,
              "description": "An MCP server implementation for retrieving data from mariadb",
              "createdat": "2025-05-12T08:17:55.585583695Z",
              "modifiedat": "2025-05-12T08:17:55.585583695Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "MARIADB_HOST"
                      },
                      {
                        "name": "MARIADB_USER"
                      },
                      {
                        "name": "MARIADB_PASSWORD"
                      },
                      {
                        "name": "MARIADB_DATABASE"
                      },
                      {
                        "name": "MARIADB_PORT"
                      }
                    ],
                    "positional_arguments": [
                      "--host",
                      "${DB_HOST}",
                      "--port",
                      "${DB_PORT}",
                      "--user",
                      "${DB_USER}",
                      "--password",
                      "${DB_PASSWORD}",
                      "--database",
                      "${DB_NAME}"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "",
                  "package_name": ""
                }
              ],
              "remotes": [],
              "repo_ref": "abel9851/mcp-server-mariadb",
              "resources": [
                {
                  "description": "Expose schema list in database",
                  "name": "schema list"
                }
              ],
              "tools": [
                {
                  "description": "Execute read-only operations against MariDB",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "query_database"
                }
              ]
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "abhiz123": {
      "mcpproviderid": "abhiz123",
      "self": "#/mcpproviders/abhiz123",
      "xid": "/mcpproviders/abhiz123",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:06.011073941Z",
      "modifiedat": "2025-05-12T08:21:06.011073941Z",

      "serversurl": "#/mcpproviders/abhiz123/servers",
      "servers": {
        "todoist-mcp-server": {
          "serverid": "todoist-mcp-server",
          "self": "#/mcpproviders/abhiz123/servers/todoist-mcp-server",
          "xid": "/mcpproviders/abhiz123/servers/todoist-mcp-server",

          "metaurl": "#/mcpproviders/abhiz123/servers/todoist-mcp-server/meta",
          "meta": {
            "serverid": "todoist-mcp-server",
            "self": "#/mcpproviders/abhiz123/servers/todoist-mcp-server/meta",
            "xid": "/mcpproviders/abhiz123/servers/todoist-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:06.011073941Z",
            "modifiedat": "2025-05-12T08:21:06.011073941Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/abhiz123/servers/todoist-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/abhiz123/servers/todoist-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "todoist-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/abhiz123/servers/todoist-mcp-server/versions/1",
              "xid": "/mcpproviders/abhiz123/servers/todoist-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.abhiz123/todoist-mcp-server",
              "isdefault": true,
              "description": "An MCP (Model Context Protocol) server implementation that integrates Claude with Todoist, enabling natural language task management. This server allows Claude to interact with your Todoist tasks using everyday language.",
              "createdat": "2025-05-12T08:21:06.011073941Z",
              "modifiedat": "2025-05-12T08:21:06.011073941Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Todoist API token for authentication",
                        "name": "TODOIST_API_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@abhiz123/todoist-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@abhiz123/todoist-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "abhiz123/todoist-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Create a new task in Todoist with optional description, due date, and priority",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "The content/title of the task",
                        "type": "string"
                      },
                      "description": {
                        "description": "Detailed description of the task (optional)",
                        "type": "string"
                      },
                      "due_string": {
                        "description": "Natural language due date like 'tomorrow', 'next Monday', 'Jan 23' (optional)",
                        "type": "string"
                      },
                      "priority": {
                        "description": "Task priority from 1 (normal) to 4 (urgent) (optional)",
                        "enum": [
                          1,
                          2,
                          3,
                          4
                        ],
                        "type": "number"
                      }
                    },
                    "required": [
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "todoist_create_task"
                },
                {
                  "description": "Get a list of tasks from Todoist with various filters",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "description": "Natural language filter like 'today', 'tomorrow', 'next week', 'priority 1', 'overdue' (optional)",
                        "type": "string"
                      },
                      "limit": {
                        "default": 10,
                        "description": "Maximum number of tasks to return (optional)",
                        "type": "number"
                      },
                      "priority": {
                        "description": "Filter by priority level (1-4) (optional)",
                        "enum": [
                          1,
                          2,
                          3,
                          4
                        ],
                        "type": "number"
                      },
                      "project_id": {
                        "description": "Filter tasks by project ID (optional)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "todoist_get_tasks"
                },
                {
                  "description": "Update an existing task in Todoist by searching for it by name and then updating it",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "New content/title for the task (optional)",
                        "type": "string"
                      },
                      "description": {
                        "description": "New description for the task (optional)",
                        "type": "string"
                      },
                      "due_string": {
                        "description": "New due date in natural language like 'tomorrow', 'next Monday' (optional)",
                        "type": "string"
                      },
                      "priority": {
                        "description": "New priority level from 1 (normal) to 4 (urgent) (optional)",
                        "enum": [
                          1,
                          2,
                          3,
                          4
                        ],
                        "type": "number"
                      },
                      "task_name": {
                        "description": "Name/content of the task to search for and update",
                        "type": "string"
                      }
                    },
                    "required": [
                      "task_name"
                    ],
                    "type": "object"
                  },
                  "name": "todoist_update_task"
                },
                {
                  "description": "Delete a task from Todoist by searching for it by name",
                  "inputschema": {
                    "properties": {
                      "task_name": {
                        "description": "Name/content of the task to search for and delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "task_name"
                    ],
                    "type": "object"
                  },
                  "name": "todoist_delete_task"
                },
                {
                  "description": "Mark a task as complete by searching for it by name",
                  "inputschema": {
                    "properties": {
                      "task_name": {
                        "description": "Name/content of the task to search for and complete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "task_name"
                    ],
                    "type": "object"
                  },
                  "name": "todoist_complete_task"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "adenot": {
      "mcpproviderid": "adenot",
      "self": "#/mcpproviders/adenot",
      "xid": "/mcpproviders/adenot",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:05.22709028Z",
      "modifiedat": "2025-05-12T08:20:05.22709028Z",

      "serversurl": "#/mcpproviders/adenot/servers",
      "servers": {
        "mcp-google-search": {
          "serverid": "mcp-google-search",
          "self": "#/mcpproviders/adenot/servers/mcp-google-search",
          "xid": "/mcpproviders/adenot/servers/mcp-google-search",

          "metaurl": "#/mcpproviders/adenot/servers/mcp-google-search/meta",
          "meta": {
            "serverid": "mcp-google-search",
            "self": "#/mcpproviders/adenot/servers/mcp-google-search/meta",
            "xid": "/mcpproviders/adenot/servers/mcp-google-search/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:05.22709028Z",
            "modifiedat": "2025-05-12T08:20:05.22709028Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/adenot/servers/mcp-google-search/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/adenot/servers/mcp-google-search/versions",
          "versions": {
            "1": {
              "serverid": "mcp-google-search",
              "versionid": "1",
              "self": "#/mcpproviders/adenot/servers/mcp-google-search/versions/1",
              "xid": "/mcpproviders/adenot/servers/mcp-google-search/versions/1",
              "epoch": 1,
              "name": "io.github.adenot/mcp-google-search",
              "isdefault": true,
              "description": "A Model Context Protocol server that provides web search capabilities using Google Custom Search API and webpage content extraction functionality.",
              "createdat": "2025-05-12T08:20:05.22709028Z",
              "modifiedat": "2025-05-12T08:20:05.22709028Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Google API Key for Custom Search",
                        "name": "GOOGLE_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Google Custom Search Engine ID",
                        "name": "GOOGLE_SEARCH_ENGINE_ID",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@adenot/mcp-google-search"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@adenot/mcp-google-search"
                }
              ],
              "remotes": [],
              "repo_ref": "adenot/mcp-google-search",
              "resources": [],
              "tools": [
                {
                  "description": "Perform a web search query",
                  "inputschema": {
                    "properties": {
                      "num": {
                        "description": "Number of results (1-10)",
                        "maximum": 10,
                        "minimum": 1,
                        "type": "number"
                      },
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search"
                },
                {
                  "description": "Fetch and extract text content from a webpage",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "description": "URL of the webpage to read",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "read_webpage"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "adityak74": {
      "mcpproviderid": "adityak74",
      "self": "#/mcpproviders/adityak74",
      "xid": "/mcpproviders/adityak74",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:38.105610202Z",
      "modifiedat": "2025-05-12T08:17:38.105610202Z",

      "serversurl": "#/mcpproviders/adityak74/servers",
      "servers": {
        "mcp-scholarly": {
          "serverid": "mcp-scholarly",
          "self": "#/mcpproviders/adityak74/servers/mcp-scholarly",
          "xid": "/mcpproviders/adityak74/servers/mcp-scholarly",

          "metaurl": "#/mcpproviders/adityak74/servers/mcp-scholarly/meta",
          "meta": {
            "serverid": "mcp-scholarly",
            "self": "#/mcpproviders/adityak74/servers/mcp-scholarly/meta",
            "xid": "/mcpproviders/adityak74/servers/mcp-scholarly/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:38.105610202Z",
            "modifiedat": "2025-05-12T08:17:38.105610202Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/adityak74/servers/mcp-scholarly/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/adityak74/servers/mcp-scholarly/versions",
          "versions": {
            "1": {
              "serverid": "mcp-scholarly",
              "versionid": "1",
              "self": "#/mcpproviders/adityak74/servers/mcp-scholarly/versions/1",
              "xid": "/mcpproviders/adityak74/servers/mcp-scholarly/versions/1",
              "epoch": 1,
              "name": "io.github.adityak74/mcp-scholarly",
              "isdefault": true,
              "description": "A MCP server to search for accurate academic articles. More scholarly vendors will be added soon.",
              "createdat": "2025-05-12T08:17:38.105610202Z",
              "modifiedat": "2025-05-12T08:17:38.105610202Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--directory",
                      "/Users/adityakarnam/PycharmProjects/mcp-scholarly/mcp-scholarly",
                      "run",
                      "mcp-scholarly"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "mcp-scholarly"
                }
              ],
              "remotes": [],
              "repo_ref": "adityak74/mcp-scholarly",
              "resources": [],
              "tools": [
                {
                  "description": "Search arxiv for articles related to the given keyword.",
                  "inputschema": {
                    "properties": {
                      "keyword": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "keyword"
                    ],
                    "type": "object"
                  },
                  "name": "search-arxiv"
                },
                {
                  "description": "Search google scholar for articles related to the given keyword.",
                  "inputschema": {
                    "properties": {
                      "keyword": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "keyword"
                    ],
                    "type": "object"
                  },
                  "name": "search-google-scholar"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "agentrpc": {
      "mcpproviderid": "agentrpc",
      "self": "#/mcpproviders/agentrpc",
      "xid": "/mcpproviders/agentrpc",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:42.383541814Z",
      "modifiedat": "2025-05-12T08:17:42.383541814Z",

      "serversurl": "#/mcpproviders/agentrpc/servers",
      "servers": {
        "agentrpc": {
          "serverid": "agentrpc",
          "self": "#/mcpproviders/agentrpc/servers/agentrpc",
          "xid": "/mcpproviders/agentrpc/servers/agentrpc",

          "metaurl": "#/mcpproviders/agentrpc/servers/agentrpc/meta",
          "meta": {
            "serverid": "agentrpc",
            "self": "#/mcpproviders/agentrpc/servers/agentrpc/meta",
            "xid": "/mcpproviders/agentrpc/servers/agentrpc/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:42.383541814Z",
            "modifiedat": "2025-05-12T08:17:42.383541814Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/agentrpc/servers/agentrpc/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/agentrpc/servers/agentrpc/versions",
          "versions": {
            "1": {
              "serverid": "agentrpc",
              "versionid": "1",
              "self": "#/mcpproviders/agentrpc/servers/agentrpc/versions/1",
              "xid": "/mcpproviders/agentrpc/servers/agentrpc/versions/1",
              "epoch": 1,
              "name": "io.github.agentrpc/agentrpc",
              "isdefault": true,
              "description": "Universal RPC layer for AI agents across network boundaries and languages, supporting Model Context Protocol (MCP) and OpenAI-compatible tool definitions.",
              "createdat": "2025-05-12T08:17:42.383541814Z",
              "modifiedat": "2025-05-12T08:17:42.383541814Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API secret for authentication",
                        "name": "AGENTRPC_API_SECRET",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "agentrpc",
                      "mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "agentrpc"
                }
              ],
              "remotes": [],
              "repo_ref": "agentrpc/agentrpc",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ahnlabio": {
      "mcpproviderid": "ahnlabio",
      "self": "#/mcpproviders/ahnlabio",
      "xid": "/mcpproviders/ahnlabio",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:08.366983603Z",
      "modifiedat": "2025-05-12T08:18:08.366983603Z",

      "serversurl": "#/mcpproviders/ahnlabio/servers",
      "servers": {
        "bicscan-mcp": {
          "serverid": "bicscan-mcp",
          "self": "#/mcpproviders/ahnlabio/servers/bicscan-mcp",
          "xid": "/mcpproviders/ahnlabio/servers/bicscan-mcp",

          "metaurl": "#/mcpproviders/ahnlabio/servers/bicscan-mcp/meta",
          "meta": {
            "serverid": "bicscan-mcp",
            "self": "#/mcpproviders/ahnlabio/servers/bicscan-mcp/meta",
            "xid": "/mcpproviders/ahnlabio/servers/bicscan-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:08.366983603Z",
            "modifiedat": "2025-05-12T08:18:08.366983603Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ahnlabio/servers/bicscan-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ahnlabio/servers/bicscan-mcp/versions",
          "versions": {
            "1": {
              "serverid": "bicscan-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ahnlabio/servers/bicscan-mcp/versions/1",
              "xid": "/mcpproviders/ahnlabio/servers/bicscan-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ahnlabio/bicscan-mcp",
              "isdefault": true,
              "description": "A powerful and efficient Blockchain address risk scoring API MCP Server, leveraging the BICScan API to provide comprehensive risk assessments and asset information for blockchain addresses, domains, and decentralized applications (dApps).",
              "createdat": "2025-05-12T08:18:08.366983603Z",
              "modifiedat": "2025-05-12T08:18:08.366983603Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for BICScan",
                        "name": "BICSCAN_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "run",
                      "--rm",
                      "--interactive",
                      "--env",
                      "BICSCAN_API_KEY=YOUR_BICSCAN_API_KEY_HERE"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "bicscan-mcp"
                },
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for BICScan",
                        "name": "BICSCAN_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "YOUR_BICSCAN_REPO_DIR_HERE",
                      "run",
                      "bicscan-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "bicscan-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "ahnlabio/bicscan-mcp",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ahujasid": {
      "mcpproviderid": "ahujasid",
      "self": "#/mcpproviders/ahujasid",
      "xid": "/mcpproviders/ahujasid",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:30.938268639Z",
      "modifiedat": "2025-05-12T08:18:30.938268639Z",

      "serversurl": "#/mcpproviders/ahujasid/servers",
      "servers": {
        "blender-mcp": {
          "serverid": "blender-mcp",
          "self": "#/mcpproviders/ahujasid/servers/blender-mcp",
          "xid": "/mcpproviders/ahujasid/servers/blender-mcp",

          "metaurl": "#/mcpproviders/ahujasid/servers/blender-mcp/meta",
          "meta": {
            "serverid": "blender-mcp",
            "self": "#/mcpproviders/ahujasid/servers/blender-mcp/meta",
            "xid": "/mcpproviders/ahujasid/servers/blender-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:30.938268639Z",
            "modifiedat": "2025-05-12T08:18:30.938268639Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ahujasid/servers/blender-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ahujasid/servers/blender-mcp/versions",
          "versions": {
            "1": {
              "serverid": "blender-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ahujasid/servers/blender-mcp/versions/1",
              "xid": "/mcpproviders/ahujasid/servers/blender-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ahujasid/blender-mcp",
              "isdefault": true,
              "description": "BlenderMCP connects Blender to Claude AI through the Model Context Protocol (MCP), allowing Claude to directly interact with and control Blender. This integration enables prompt assisted 3D modeling, scene creation, and manipulation.",
              "createdat": "2025-05-12T08:18:30.938268639Z",
              "modifiedat": "2025-05-12T08:18:30.938268639Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "blender-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "blender-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "ahujasid/blender-mcp",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "1.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "alexarevalo9": {
      "mcpproviderid": "alexarevalo9",
      "self": "#/mcpproviders/alexarevalo9",
      "xid": "/mcpproviders/alexarevalo9",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:11.253905091Z",
      "modifiedat": "2025-05-12T08:19:11.253905091Z",

      "serversurl": "#/mcpproviders/alexarevalo9/servers",
      "servers": {
        "ticktick-mcp-server": {
          "serverid": "ticktick-mcp-server",
          "self": "#/mcpproviders/alexarevalo9/servers/ticktick-mcp-server",
          "xid": "/mcpproviders/alexarevalo9/servers/ticktick-mcp-server",

          "metaurl": "#/mcpproviders/alexarevalo9/servers/ticktick-mcp-server/meta",
          "meta": {
            "serverid": "ticktick-mcp-server",
            "self": "#/mcpproviders/alexarevalo9/servers/ticktick-mcp-server/meta",
            "xid": "/mcpproviders/alexarevalo9/servers/ticktick-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:11.253905091Z",
            "modifiedat": "2025-05-12T08:19:11.253905091Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/alexarevalo9/servers/ticktick-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/alexarevalo9/servers/ticktick-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "ticktick-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/alexarevalo9/servers/ticktick-mcp-server/versions/1",
              "xid": "/mcpproviders/alexarevalo9/servers/ticktick-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.alexarevalo9/ticktick-mcp-server",
              "isdefault": true,
              "description": "MCP Server for the TickTick API, enabling task management, project organization, habit tracking, and more.",
              "createdat": "2025-05-12T08:19:11.253905091Z",
              "modifiedat": "2025-05-12T08:19:11.253905091Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Path to dotenv config file",
                        "name": "DOTENV_CONFIG_PATH",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@alexarevalo9/ticktick-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "alexarevalo9/ticktick-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Get all user projects",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_user_projects"
                },
                {
                  "description": "Get a project by ID",
                  "inputschema": {
                    "properties": {
                      "projectId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "get_project_by_id"
                },
                {
                  "description": "Get a project with its tasks and columns",
                  "inputschema": {
                    "properties": {
                      "projectId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "get_project_with_data"
                },
                {
                  "description": "Create a new project",
                  "inputschema": {
                    "properties": {
                      "color": {
                        "type": "string"
                      },
                      "favorite": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "create_project"
                },
                {
                  "description": "Update an existing project",
                  "inputschema": {
                    "properties": {
                      "color": {
                        "type": "string"
                      },
                      "favorite": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      },
                      "projectId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "update_project"
                },
                {
                  "description": "Delete a project",
                  "inputschema": {
                    "properties": {
                      "projectId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "delete_project"
                },
                {
                  "description": "Get a task by ProjectId and TaskId",
                  "inputschema": {
                    "properties": {
                      "projectId": {
                        "type": "string"
                      },
                      "taskId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "projectId",
                      "taskId"
                    ],
                    "type": "object"
                  },
                  "name": "get_task_by_ids"
                },
                {
                  "description": "Create a new task",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "desc": {
                        "type": "string"
                      },
                      "dueDate": {
                        "type": "string"
                      },
                      "isAllDay": {
                        "type": "boolean"
                      },
                      "items": {
                        "items": {
                          "properties": {
                            "completedTime": {
                              "type": "string"
                            },
                            "isAllDay": {
                              "type": "boolean"
                            },
                            "sortOrder": {
                              "type": "number"
                            },
                            "startDate": {
                              "type": "string"
                            },
                            "status": {
                              "type": "number"
                            },
                            "timeZone": {
                              "type": "string"
                            },
                            "title": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "title"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "priority": {
                        "type": "number"
                      },
                      "projectId": {
                        "type": "string"
                      },
                      "reminders": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "repeatFlag": {
                        "type": "string"
                      },
                      "sortOrder": {
                        "type": "string"
                      },
                      "startDate": {
                        "type": "string"
                      },
                      "timeZone": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "title",
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "create_task"
                },
                {
                  "description": "Update an existing task",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "desc": {
                        "type": "string"
                      },
                      "dueDate": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "isAllDay": {
                        "type": "boolean"
                      },
                      "items": {
                        "items": {
                          "properties": {
                            "completedTime": {
                              "type": "string"
                            },
                            "isAllDay": {
                              "type": "boolean"
                            },
                            "sortOrder": {
                              "type": "number"
                            },
                            "startDate": {
                              "type": "string"
                            },
                            "status": {
                              "type": "number"
                            },
                            "timeZone": {
                              "type": "string"
                            },
                            "title": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "title"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "priority": {
                        "type": "number"
                      },
                      "projectId": {
                        "type": "string"
                      },
                      "reminders": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "repeatFlag": {
                        "type": "string"
                      },
                      "sortOrder": {
                        "type": "string"
                      },
                      "startDate": {
                        "type": "string"
                      },
                      "taskId": {
                        "type": "string"
                      },
                      "timeZone": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "taskId",
                      "id",
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "update_task"
                },
                {
                  "description": "Complete a task",
                  "inputschema": {
                    "properties": {
                      "projectId": {
                        "type": "string"
                      },
                      "taskId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "taskId",
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "complete_task"
                },
                {
                  "description": "Delete a task",
                  "inputschema": {
                    "properties": {
                      "projectId": {
                        "type": "string"
                      },
                      "taskId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "taskId",
                      "projectId"
                    ],
                    "type": "object"
                  },
                  "name": "delete_task"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "alibaba": {
      "mcpproviderid": "alibaba",
      "self": "#/mcpproviders/alibaba",
      "xid": "/mcpproviders/alibaba",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:05.522451229Z",
      "modifiedat": "2025-05-12T08:18:05.522451229Z",

      "serversurl": "#/mcpproviders/alibaba/servers",
      "servers": {
        "higress": {
          "serverid": "higress",
          "self": "#/mcpproviders/alibaba/servers/higress",
          "xid": "/mcpproviders/alibaba/servers/higress",

          "metaurl": "#/mcpproviders/alibaba/servers/higress/meta",
          "meta": {
            "serverid": "higress",
            "self": "#/mcpproviders/alibaba/servers/higress/meta",
            "xid": "/mcpproviders/alibaba/servers/higress/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:05.522451229Z",
            "modifiedat": "2025-05-12T08:18:05.522451229Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/alibaba/servers/higress/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/alibaba/servers/higress/versions",
          "versions": {
            "1": {
              "serverid": "higress",
              "versionid": "1",
              "self": "#/mcpproviders/alibaba/servers/higress/versions/1",
              "xid": "/mcpproviders/alibaba/servers/higress/versions/1",
              "epoch": 1,
              "name": "io.github.alibaba/higress",
              "isdefault": true,
              "description": "Higress is a cloud-native API gateway based on Istio and Envoy, which supports hosting MCP (Model Context Protocol) Servers through its plugin mechanism, enabling AI Agents to easily call various tools and services.",
              "createdat": "2025-05-12T08:18:05.522451229Z",
              "modifiedat": "2025-05-12T08:18:05.522451229Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/all-in-one:latest"
                }
              ],
              "remotes": [],
              "repo_ref": "alibaba/higress",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "aliyun": {
      "mcpproviderid": "aliyun",
      "self": "#/mcpproviders/aliyun",
      "xid": "/mcpproviders/aliyun",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:35.534676363Z",
      "modifiedat": "2025-05-12T08:18:35.534676363Z",

      "serversurl": "#/mcpproviders/aliyun/servers",
      "servers": {
        "alibabacloud-hologres-mcp-server": {
          "serverid": "alibabacloud-hologres-mcp-server",
          "self": "#/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server",
          "xid": "/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server",

          "metaurl": "#/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server/meta",
          "meta": {
            "serverid": "alibabacloud-hologres-mcp-server",
            "self": "#/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server/meta",
            "xid": "/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:35.534676363Z",
            "modifiedat": "2025-05-12T08:18:35.534676363Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "alibabacloud-hologres-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server/versions/1",
              "xid": "/mcpproviders/aliyun/servers/alibabacloud-hologres-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.aliyun/alibabacloud-hologres-mcp-server",
              "isdefault": true,
              "description": "Hologres MCP Server serves as a universal interface between AI Agents and Hologres databases. It enables seamless communication between AI Agents and Hologres, helping AI Agents retrieve Hologres database metadata and execute SQL operations.",
              "createdat": "2025-05-12T08:18:35.534676363Z",
              "modifiedat": "2025-05-12T08:18:35.534676363Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Host of the Hologres database",
                        "name": "HOLOGRES_HOST",
                        "required": true
                      },
                      {
                        "description": "Port of the Hologres database",
                        "name": "HOLOGRES_PORT",
                        "required": true
                      },
                      {
                        "description": "Access ID for Hologres",
                        "name": "HOLOGRES_USER",
                        "required": true
                      },
                      {
                        "description": "Access key for Hologres",
                        "name": "HOLOGRES_PASSWORD",
                        "required": true
                      },
                      {
                        "description": "Database name in Hologres",
                        "name": "HOLOGRES_DATABASE",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "run",
                      "--with",
                      "hologres-mcp-server",
                      "hologres-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "hologres-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "aliyun/alibabacloud-hologres-mcp-server",
              "resources": [
                {
                  "description": "Hologres is a PostgreSQL-compatible OLAP product. List all schemas in Hologres database",
                  "mimetype": "text/plain",
                  "name": "All Schemas",
                  "uritemplate": "hologres:///schemas"
                },
                {
                  "description": "List all tables in a specific schema",
                  "mimetype": "text/plain",
                  "name": "Schema Tables",
                  "uritemplate": "hologres:///{schema}/tables"
                },
                {
                  "description": "Get the DDL script of a table in a specific schema",
                  "mimetype": "text/plain",
                  "name": "Table DDL",
                  "uritemplate": "hologres:///{schema}/{table}/ddl"
                },
                {
                  "description": "Get statistics information of a table",
                  "mimetype": "text/plain",
                  "name": "Table Statistics",
                  "uritemplate": "hologres:///{schema}/{table}/statistic"
                },
                {
                  "description": "List all partitions of a partitioned table",
                  "mimetype": "text/plain",
                  "name": "Table Statistics",
                  "uritemplate": "hologres:///{schema}/{table}/partitions"
                },
                {
                  "description": "System information in Hologres, following are some common system_paths:\n\n'missing_stats_tables'    Shows the tables that are missing statistics.\n'stat_activity'    Shows the information of current running queries.\n'query_log/latest/\u003crow_limits\u003e'    Get recent query log history with specified number of rows.\n'query_log/user/\u003cuser_name\u003e/\u003crow_limits\u003e'    Get query log history for a specific user with row limits.\n'query_log/application/\u003capplication_name\u003e/\u003crow_limits\u003e'    Get query log history for a specific application with row limits.\n'query_log/failed/\u003cinterval\u003e/\u003crow_limits\u003e' - Get failed query log history with interval and specified number of rows.\n",
                  "mimetype": "text/plain",
                  "name": "System internal Information",
                  "uritemplate": "system:///{+system_path}"
                }
              ],
              "tools": [
                {
                  "description": "Execute SELECT SQL to query data from Hologres database.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The (SELECT) SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_select_sql"
                },
                {
                  "description": "Execute (INSERT, UPDATE, DELETE) SQL to insert, update, and delete data in Hologres databse.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The DML SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_dml_sql"
                },
                {
                  "description": "Execute (CREATE, ALTER, DROP) SQL statements to CREATE, ALTER, or DROP tables, views, procedures, GUCs etc. in Hologres databse.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The DDL SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_ddl_sql"
                },
                {
                  "description": "Execute the ANALYZE TABLE command to have Hologres collect table statistics, enabling QO to generate better query plans",
                  "inputschema": {
                    "properties": {
                      "schema": {
                        "description": "Schema name",
                        "type": "string"
                      },
                      "table": {
                        "description": "Table name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "schema",
                      "table"
                    ],
                    "type": "object"
                  },
                  "name": "gather_table_statistics"
                },
                {
                  "description": "Get query plan for a SQL query",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SQL query to analyze",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "get_query_plan"
                },
                {
                  "description": "Get actual execution plan with runtime statistics for a SQL query",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SQL query to analyze",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "get_execution_plan"
                }
              ],
              "version_detail": {
                "version": "0.1.7"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "amornpan": {
      "mcpproviderid": "amornpan",
      "self": "#/mcpproviders/amornpan",
      "xid": "/mcpproviders/amornpan",
      "epoch": 2,
      "createdat": "2025-05-12T08:17:45.694795111Z",
      "modifiedat": "2025-05-12T08:17:45.887885243Z",

      "serversurl": "#/mcpproviders/amornpan/servers",
      "servers": {
        "py-mcp-line": {
          "serverid": "py-mcp-line",
          "self": "#/mcpproviders/amornpan/servers/py-mcp-line",
          "xid": "/mcpproviders/amornpan/servers/py-mcp-line",

          "metaurl": "#/mcpproviders/amornpan/servers/py-mcp-line/meta",
          "meta": {
            "serverid": "py-mcp-line",
            "self": "#/mcpproviders/amornpan/servers/py-mcp-line/meta",
            "xid": "/mcpproviders/amornpan/servers/py-mcp-line/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:45.887885243Z",
            "modifiedat": "2025-05-12T08:17:45.887885243Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/amornpan/servers/py-mcp-line/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/amornpan/servers/py-mcp-line/versions",
          "versions": {
            "1": {
              "serverid": "py-mcp-line",
              "versionid": "1",
              "self": "#/mcpproviders/amornpan/servers/py-mcp-line/versions/1",
              "xid": "/mcpproviders/amornpan/servers/py-mcp-line/versions/1",
              "epoch": 1,
              "name": "io.github.amornpan/py-mcp-line",
              "isdefault": true,
              "description": "A Model Context Protocol server implementation in Python that provides access to LINE Bot messages. This server enables Language Models to read and analyze LINE conversations through a standardized interface.",
              "createdat": "2025-05-12T08:17:45.887885243Z",
              "modifiedat": "2025-05-12T08:17:45.887885243Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "LINE_CHANNEL_SECRET",
                        "required": true
                      },
                      {
                        "name": "LINE_ACCESS_TOKEN",
                        "required": true
                      },
                      {
                        "name": "SERVER_PORT",
                        "required": true
                      },
                      {
                        "name": "MESSAGES_FILE",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "uvicorn",
                      "src.line.server:app",
                      "--host",
                      "0.0.0.0",
                      "--port",
                      "8000"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "python:3.8-slim"
                },
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "LINE_CHANNEL_SECRET",
                        "required": true
                      },
                      {
                        "name": "LINE_ACCESS_TOKEN",
                        "required": true
                      },
                      {
                        "name": "SERVER_PORT",
                        "required": true
                      },
                      {
                        "name": "MESSAGES_FILE",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "src/line/server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "py-mcp-line"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:8000"
                }
              ],
              "repo_ref": "amornpan/py-mcp-line",
              "resources": [
                {
                  "description": "Lists available message types from the LINE Bot and provides access to messages such as text, sticker, and image messages in JSON format.",
                  "mimetype": "application/json",
                  "name": "LINE Bot messages",
                  "uritemplate": "line://{message_type}/data"
                }
              ],
              "tools": [],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "py-mcp-mssql": {
          "serverid": "py-mcp-mssql",
          "self": "#/mcpproviders/amornpan/servers/py-mcp-mssql",
          "xid": "/mcpproviders/amornpan/servers/py-mcp-mssql",

          "metaurl": "#/mcpproviders/amornpan/servers/py-mcp-mssql/meta",
          "meta": {
            "serverid": "py-mcp-mssql",
            "self": "#/mcpproviders/amornpan/servers/py-mcp-mssql/meta",
            "xid": "/mcpproviders/amornpan/servers/py-mcp-mssql/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:45.694795111Z",
            "modifiedat": "2025-05-12T08:17:45.694795111Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/amornpan/servers/py-mcp-mssql/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/amornpan/servers/py-mcp-mssql/versions",
          "versions": {
            "1": {
              "serverid": "py-mcp-mssql",
              "versionid": "1",
              "self": "#/mcpproviders/amornpan/servers/py-mcp-mssql/versions/1",
              "xid": "/mcpproviders/amornpan/servers/py-mcp-mssql/versions/1",
              "epoch": 1,
              "name": "io.github.amornpan/py-mcp-mssql",
              "isdefault": true,
              "description": "A Model Context Protocol server implementation in Python that provides access to Microsoft SQL Server databases. This server enables Language Models to inspect table schemas and execute SQL queries through a standardized interface.",
              "createdat": "2025-05-12T08:17:45.694795111Z",
              "modifiedat": "2025-05-12T08:17:45.694795111Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "SQL Server hostname or IP",
                        "name": "MSSQL_SERVER",
                        "required": true
                      },
                      {
                        "description": "Database name",
                        "name": "MSSQL_DATABASE",
                        "required": true
                      },
                      {
                        "description": "Username for authentication",
                        "name": "MSSQL_USER",
                        "required": true
                      },
                      {
                        "description": "Password for authentication",
                        "name": "MSSQL_PASSWORD",
                        "required": true
                      },
                      {
                        "description": "ODBC Driver 17 for SQL Server",
                        "name": "MSSQL_DRIVER",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "py-mcp-mssql"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:8000"
                }
              ],
              "repo_ref": "amornpan/py-mcp-mssql",
              "resources": [
                {
                  "description": "Lists all available tables in the database with URIs in the format mssql://\u003ctable_name\u003e/data; includes table descriptions and MIME types.",
                  "mimetype": "text/csv",
                  "name": "tables",
                  "uritemplate": "mssql://{table_name}/data"
                }
              ],
              "tools": [
                {
                  "description": "Executes SQL queries; supports both SELECT and modification queries; returns results in CSV format for SELECT queries and affected row count for modification queries.",
                  "inputschema": {
                    "properties": {
                      "arguments": {
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "call_tool"
                }
              ],
              "version_detail": {
                "version": "1.0.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "anshumax": {
      "mcpproviderid": "anshumax",
      "self": "#/mcpproviders/anshumax",
      "xid": "/mcpproviders/anshumax",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:40.625451589Z",
      "modifiedat": "2025-05-12T08:17:40.625451589Z",

      "serversurl": "#/mcpproviders/anshumax/servers",
      "servers": {
        "world_bank_mcp_server": {
          "serverid": "world_bank_mcp_server",
          "self": "#/mcpproviders/anshumax/servers/world_bank_mcp_server",
          "xid": "/mcpproviders/anshumax/servers/world_bank_mcp_server",

          "metaurl": "#/mcpproviders/anshumax/servers/world_bank_mcp_server/meta",
          "meta": {
            "serverid": "world_bank_mcp_server",
            "self": "#/mcpproviders/anshumax/servers/world_bank_mcp_server/meta",
            "xid": "/mcpproviders/anshumax/servers/world_bank_mcp_server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:40.625451589Z",
            "modifiedat": "2025-05-12T08:17:40.625451589Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/anshumax/servers/world_bank_mcp_server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/anshumax/servers/world_bank_mcp_server/versions",
          "versions": {
            "1": {
              "serverid": "world_bank_mcp_server",
              "versionid": "1",
              "self": "#/mcpproviders/anshumax/servers/world_bank_mcp_server/versions/1",
              "xid": "/mcpproviders/anshumax/servers/world_bank_mcp_server/versions/1",
              "epoch": 1,
              "name": "io.github.anshumax/world_bank_mcp_server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables interaction with the open World Bank data API. This server allows AI assistants to list indicators and analyse those indicators for the countries that are available with the World Bank.",
              "createdat": "2025-05-12T08:17:40.625451589Z",
              "modifiedat": "2025-05-12T08:17:40.625451589Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--directory",
                      "path/to/world_bank_mcp_server",
                      "run",
                      "world_bank_mcp_server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@anshumax/world_bank_mcp_server"
                }
              ],
              "remotes": [],
              "repo_ref": "anshumax/world_bank_mcp_server",
              "resources": [
                {
                  "description": "List of countries in the World Bank database",
                  "mimetype": "application/json",
                  "name": "Countries list",
                  "uritemplate": "https://api.worldbank.org/v2/country?format=json\u0026per_page=1000"
                },
                {
                  "description": "List of indicators in the World Bank database",
                  "mimetype": "application/json",
                  "name": "Indicators list",
                  "uritemplate": "https://api.worldbank.org/v2/indicator?format=json\u0026per_page=50000"
                }
              ],
              "tools": [
                {
                  "description": "Get values for an indicator for a specific country from the World Bank API",
                  "inputschema": {
                    "properties": {
                      "country_id": {
                        "description": "The ID of the country for which the indicator is to be queried",
                        "type": "string"
                      },
                      "indicator_id": {
                        "description": "The ID of the indicator to be queried",
                        "type": "string"
                      }
                    },
                    "required": [
                      "country_id",
                      "indicator_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_indicator_for_country"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "apache": {
      "mcpproviderid": "apache",
      "self": "#/mcpproviders/apache",
      "xid": "/mcpproviders/apache",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:07.917036507Z",
      "modifiedat": "2025-05-12T08:21:07.917036507Z",

      "serversurl": "#/mcpproviders/apache/servers",
      "servers": {
        "iotdb-mcp-server": {
          "serverid": "iotdb-mcp-server",
          "self": "#/mcpproviders/apache/servers/iotdb-mcp-server",
          "xid": "/mcpproviders/apache/servers/iotdb-mcp-server",

          "metaurl": "#/mcpproviders/apache/servers/iotdb-mcp-server/meta",
          "meta": {
            "serverid": "iotdb-mcp-server",
            "self": "#/mcpproviders/apache/servers/iotdb-mcp-server/meta",
            "xid": "/mcpproviders/apache/servers/iotdb-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:07.917036507Z",
            "modifiedat": "2025-05-12T08:21:07.917036507Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/apache/servers/iotdb-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/apache/servers/iotdb-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "iotdb-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/apache/servers/iotdb-mcp-server/versions/1",
              "xid": "/mcpproviders/apache/servers/iotdb-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.apache/iotdb-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation that provides database interaction and business intelligence capabilities through IoTDB. This server enables running SQL queries.",
              "createdat": "2025-05-12T08:21:07.917036507Z",
              "modifiedat": "2025-05-12T08:21:07.917036507Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Host address of the IoTDB server",
                        "name": "IOTDB_HOST",
                        "required": true
                      },
                      {
                        "description": "Port number of the IoTDB server",
                        "name": "IOTDB_PORT",
                        "required": true
                      },
                      {
                        "description": "Username for IoTDB authentication",
                        "name": "IOTDB_USER",
                        "required": true
                      },
                      {
                        "description": "Password for IoTDB authentication",
                        "name": "IOTDB_PASSWORD",
                        "required": true
                      },
                      {
                        "description": "Database name to connect to",
                        "name": "IOTDB_DATABASE",
                        "required": true
                      },
                      {
                        "description": "SQL dialect to use: 'tree' or 'table'",
                        "name": "IOTDB_SQL_DIALECT",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "YOUR_REPO_PATH/src/iotdb_mcp_server",
                      "run",
                      "server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python-uv",
                  "package_name": "iotdb-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "apache/iotdb-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Execute SHOW/COUNT queries to read metadata from the database",
                  "inputschema": {
                    "properties": {
                      "query_sql": {
                        "description": "The SHOW/COUNT SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query_sql"
                    ],
                    "type": "object"
                  },
                  "name": "metadata_query"
                },
                {
                  "description": "Execute SELECT queries to read data from the database",
                  "inputschema": {
                    "properties": {
                      "query_sql": {
                        "description": "The SELECT SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query_sql"
                    ],
                    "type": "object"
                  },
                  "name": "select_query"
                },
                {
                  "description": "Execute SELECT queries to read data from the database",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SELECT SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "read_query"
                },
                {
                  "description": "Get a list of all tables in the database",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_tables"
                },
                {
                  "description": "View schema information for a specific table",
                  "inputschema": {
                    "properties": {
                      "table_name": {
                        "description": "Name of table to describe",
                        "type": "string"
                      }
                    },
                    "required": [
                      "table_name"
                    ],
                    "type": "object"
                  },
                  "name": "describe-table"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "apeyroux": {
      "mcpproviderid": "apeyroux",
      "self": "#/mcpproviders/apeyroux",
      "xid": "/mcpproviders/apeyroux",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:34.62129782Z",
      "modifiedat": "2025-05-12T08:22:34.62129782Z",

      "serversurl": "#/mcpproviders/apeyroux/servers",
      "servers": {
        "mcp-xmind": {
          "serverid": "mcp-xmind",
          "self": "#/mcpproviders/apeyroux/servers/mcp-xmind",
          "xid": "/mcpproviders/apeyroux/servers/mcp-xmind",

          "metaurl": "#/mcpproviders/apeyroux/servers/mcp-xmind/meta",
          "meta": {
            "serverid": "mcp-xmind",
            "self": "#/mcpproviders/apeyroux/servers/mcp-xmind/meta",
            "xid": "/mcpproviders/apeyroux/servers/mcp-xmind/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:34.62129782Z",
            "modifiedat": "2025-05-12T08:22:34.62129782Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/apeyroux/servers/mcp-xmind/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/apeyroux/servers/mcp-xmind/versions",
          "versions": {
            "1": {
              "serverid": "mcp-xmind",
              "versionid": "1",
              "self": "#/mcpproviders/apeyroux/servers/mcp-xmind/versions/1",
              "xid": "/mcpproviders/apeyroux/servers/mcp-xmind/versions/1",
              "epoch": 1,
              "name": "io.github.apeyroux/mcp-xmind",
              "isdefault": true,
              "description": "A Model Context Protocol server for analyzing and querying XMind mind maps. This tool provides powerful capabilities for searching, extracting, and analyzing content from XMind files.",
              "createdat": "2025-05-12T08:22:34.62129782Z",
              "modifiedat": "2025-05-12T08:22:34.62129782Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "dist/index.js",
                      "\u003callowed-directory\u003e"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@41px/mcp-xmind"
                }
              ],
              "remotes": [],
              "repo_ref": "apeyroux/mcp-xmind",
              "resources": [],
              "tools": [
                {
                  "description": "Parse and analyze XMind files\nExtract complete mind map structure",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "read_xmind"
                },
                {
                  "description": "Extract and analyze TODO tasks\nInclude task context and hierarchy",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_todo_tasks"
                },
                {
                  "description": "Recursively scan for XMind files\nFilter and organize results",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_xmind_directory"
                },
                {
                  "description": "Process multiple files simultaneously\nCompare and analyze across files",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "read_multiple_xmind_files"
                },
                {
                  "description": "Search files by name patterns\nRecursive directory scanning",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_xmind_files"
                },
                {
                  "description": "Smart fuzzy path matching\nRanked search results\nComplete subtree extraction",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "extract_node"
                },
                {
                  "description": "Direct node access by ID\nFast and precise retrieval",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "extract_node_by_id"
                },
                {
                  "description": "Multi-criteria content search\nConfigurable search fields",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_nodes"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "apify": {
      "mcpproviderid": "apify",
      "self": "#/mcpproviders/apify",
      "xid": "/mcpproviders/apify",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:28.038313048Z",
      "modifiedat": "2025-05-12T08:21:28.038313048Z",

      "serversurl": "#/mcpproviders/apify/servers",
      "servers": {
        "actors-mcp-server": {
          "serverid": "actors-mcp-server",
          "self": "#/mcpproviders/apify/servers/actors-mcp-server",
          "xid": "/mcpproviders/apify/servers/actors-mcp-server",

          "metaurl": "#/mcpproviders/apify/servers/actors-mcp-server/meta",
          "meta": {
            "serverid": "actors-mcp-server",
            "self": "#/mcpproviders/apify/servers/actors-mcp-server/meta",
            "xid": "/mcpproviders/apify/servers/actors-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:28.038313048Z",
            "modifiedat": "2025-05-12T08:21:28.038313048Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/apify/servers/actors-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/apify/servers/actors-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "actors-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/apify/servers/actors-mcp-server/versions/1",
              "xid": "/mcpproviders/apify/servers/actors-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.apify/actors-mcp-server",
              "isdefault": true,
              "description": "Implementation of an MCP server for all Apify Actors enabling interaction with one or more Apify Actors defined in the MCP Server configuration. Allows AI assistants to use Apify Actors as tools for various scraping and data extraction tasks.",
              "createdat": "2025-05-12T08:21:28.038313048Z",
              "modifiedat": "2025-05-12T08:21:28.038313048Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API token for Apify platform",
                        "name": "APIFY_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--actors",
                      "apify/rag-web-browser,lukaskrivka/google-maps-with-contact-details"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "apify/actors-mcp-server:latest"
                },
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API token for Apify platform",
                        "name": "APIFY_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "dist/stdio.js",
                      "--actors",
                      "apify/rag-web-browser,lukaskrivka/google-maps-with-contact-details"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@apify/actors-mcp-server"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:3001"
                }
              ],
              "repo_ref": "apify/actors-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Tool wrapping the Apify RAG Web Browser Actor for web search and scraping.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "apify-slash-rag-web-browser"
                },
                {
                  "description": "Tool wrapping the Facebook Posts Scraper Actor to extract data from Facebook posts.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "apify-slash-facebook-posts-scraper"
                },
                {
                  "description": "Tool wrapping the Google Maps Email Extractor Actor to extract contact details.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "apify-slash-google-maps-with-contact-details"
                },
                {
                  "description": "Tool wrapping the Google Search Results Scraper Actor to scrape SERPs.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "apify-slash-google-search-scraper"
                },
                {
                  "description": "Tool wrapping the Instagram Scraper Actor to scrape Instagram data.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "apify-slash-instagram-scraper"
                },
                {
                  "description": "Add a tool, Actor or MCP-Server to available tools by Actor ID or tool full name. Does not execute the tool, only adds it.",
                  "inputschema": {
                    "properties": {
                      "actorName": {
                        "description": "Add a tool, Actor or MCP-Server to available tools by Actor ID or tool full name. Tool name is always composed from `username/name`",
                        "type": "string"
                      }
                    },
                    "required": [
                      "actorName"
                    ],
                    "type": "object"
                  },
                  "name": "add-tool"
                },
                {
                  "description": "Remove a tool, an Actor or MCP-Server by name from available tools.",
                  "inputschema": {
                    "properties": {
                      "toolName": {
                        "description": "Tool name to remove from available tools.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "toolName"
                    ],
                    "type": "object"
                  },
                  "name": "remove-tool"
                },
                {
                  "description": "Helper tool for searching Actors.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search-actor"
                },
                {
                  "description": "Helper tool for getting tool details.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-tool-details"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "apimatic": {
      "mcpproviderid": "apimatic",
      "self": "#/mcpproviders/apimatic",
      "xid": "/mcpproviders/apimatic",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:18.083848946Z",
      "modifiedat": "2025-05-12T08:22:18.083848946Z",

      "serversurl": "#/mcpproviders/apimatic/servers",
      "servers": {
        "apimatic-validator-mcp": {
          "serverid": "apimatic-validator-mcp",
          "self": "#/mcpproviders/apimatic/servers/apimatic-validator-mcp",
          "xid": "/mcpproviders/apimatic/servers/apimatic-validator-mcp",

          "metaurl": "#/mcpproviders/apimatic/servers/apimatic-validator-mcp/meta",
          "meta": {
            "serverid": "apimatic-validator-mcp",
            "self": "#/mcpproviders/apimatic/servers/apimatic-validator-mcp/meta",
            "xid": "/mcpproviders/apimatic/servers/apimatic-validator-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:18.083848946Z",
            "modifiedat": "2025-05-12T08:22:18.083848946Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/apimatic/servers/apimatic-validator-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/apimatic/servers/apimatic-validator-mcp/versions",
          "versions": {
            "1": {
              "serverid": "apimatic-validator-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/apimatic/servers/apimatic-validator-mcp/versions/1",
              "xid": "/mcpproviders/apimatic/servers/apimatic-validator-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.apimatic/apimatic-validator-mcp",
              "isdefault": true,
              "description": "This repository provides a Model Context Protocol (MCP) Server for validating OpenAPI specifications using APIMatic. The server processes OpenAPI files and returns validation summaries by leveraging APIMatic’s API.",
              "createdat": "2025-05-12T08:22:18.083848946Z",
              "modifiedat": "2025-05-12T08:22:18.083848946Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for APIMatic validation",
                        "name": "APIMATIC_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "apimatic-validator-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "apimatic/apimatic-validator-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Get validation summary for your OpenAPI spec using APIMatic",
                  "inputschema": {
                    "properties": {
                      "isYaml": {
                        "description": "Whether the OpenAPI file is in YAML format",
                        "type": "boolean"
                      },
                      "openApiFile": {
                        "description": "The OpenAPI file content as a string",
                        "type": "string"
                      }
                    },
                    "required": [
                      "openApiFile",
                      "isYaml"
                    ],
                    "type": "object"
                  },
                  "name": "validate-openapi-using-apimatic"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "asusevski": {
      "mcpproviderid": "asusevski",
      "self": "#/mcpproviders/asusevski",
      "xid": "/mcpproviders/asusevski",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:31.661458284Z",
      "modifiedat": "2025-05-12T08:18:31.661458284Z",

      "serversurl": "#/mcpproviders/asusevski/servers",
      "servers": {
        "opendota-mcp-server": {
          "serverid": "opendota-mcp-server",
          "self": "#/mcpproviders/asusevski/servers/opendota-mcp-server",
          "xid": "/mcpproviders/asusevski/servers/opendota-mcp-server",

          "metaurl": "#/mcpproviders/asusevski/servers/opendota-mcp-server/meta",
          "meta": {
            "serverid": "opendota-mcp-server",
            "self": "#/mcpproviders/asusevski/servers/opendota-mcp-server/meta",
            "xid": "/mcpproviders/asusevski/servers/opendota-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:31.661458284Z",
            "modifiedat": "2025-05-12T08:18:31.661458284Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/asusevski/servers/opendota-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/asusevski/servers/opendota-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "opendota-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/asusevski/servers/opendota-mcp-server/versions/1",
              "xid": "/mcpproviders/asusevski/servers/opendota-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.asusevski/opendota-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation for accessing OpenDota API data. This server enables LLMs and AI assistants to retrieve real-time Dota 2 statistics, match data, player information, and more through a standard interface.",
              "createdat": "2025-05-12T08:18:31.661458284Z",
              "modifiedat": "2025-05-12T08:18:31.661458284Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "OpenDota API key",
                        "name": "OPENDOTA_API_KEY",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-m",
                      "src.opendota_server.server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "opendota-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "asusevski/opendota-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve player information by account ID",
                  "name": "get_player_by_id"
                },
                {
                  "description": "Get recent matches for a player",
                  "name": "get_player_recent_matches"
                },
                {
                  "description": "Get detailed data for a specific match",
                  "name": "get_match_data"
                },
                {
                  "description": "Get win/loss statistics for a player",
                  "name": "get_player_win_loss"
                },
                {
                  "description": "Get a player's most played heroes",
                  "name": "get_player_heroes"
                },
                {
                  "description": "Get statistics for heroes",
                  "name": "get_hero_stats"
                },
                {
                  "description": "Search for players by name",
                  "name": "search_player"
                },
                {
                  "description": "Get list of professional players",
                  "name": "get_pro_players"
                },
                {
                  "description": "Get recent professional matches",
                  "name": "get_pro_matches"
                },
                {
                  "description": "Get players who have played with a specified player",
                  "name": "get_player_peers"
                },
                {
                  "description": "Get list of all Dota 2 heroes",
                  "name": "get_heroes"
                },
                {
                  "description": "Get player's overall stats totals",
                  "name": "get_player_totals"
                },
                {
                  "description": "Get player hero rankings",
                  "name": "get_player_rankings"
                },
                {
                  "description": "Get most common words used by player in chat",
                  "name": "get_player_wordcloud"
                },
                {
                  "description": "Get information about a team",
                  "name": "get_team_info"
                },
                {
                  "description": "Get recent public matches",
                  "name": "get_public_matches"
                },
                {
                  "description": "Get heroes played in a specific match",
                  "name": "get_match_heroes"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "atharvagupta2003": {
      "mcpproviderid": "atharvagupta2003",
      "self": "#/mcpproviders/atharvagupta2003",
      "xid": "/mcpproviders/atharvagupta2003",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:40.006967539Z",
      "modifiedat": "2025-05-12T08:17:40.006967539Z",

      "serversurl": "#/mcpproviders/atharvagupta2003/servers",
      "servers": {
        "mcp-stripe": {
          "serverid": "mcp-stripe",
          "self": "#/mcpproviders/atharvagupta2003/servers/mcp-stripe",
          "xid": "/mcpproviders/atharvagupta2003/servers/mcp-stripe",

          "metaurl": "#/mcpproviders/atharvagupta2003/servers/mcp-stripe/meta",
          "meta": {
            "serverid": "mcp-stripe",
            "self": "#/mcpproviders/atharvagupta2003/servers/mcp-stripe/meta",
            "xid": "/mcpproviders/atharvagupta2003/servers/mcp-stripe/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:40.006967539Z",
            "modifiedat": "2025-05-12T08:17:40.006967539Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/atharvagupta2003/servers/mcp-stripe/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/atharvagupta2003/servers/mcp-stripe/versions",
          "versions": {
            "1": {
              "serverid": "mcp-stripe",
              "versionid": "1",
              "self": "#/mcpproviders/atharvagupta2003/servers/mcp-stripe/versions/1",
              "xid": "/mcpproviders/atharvagupta2003/servers/mcp-stripe/versions/1",
              "epoch": 1,
              "name": "io.github.atharvagupta2003/mcp-stripe",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation that integrates with Stripe for handling payments, customers, and refunds. This server provides a structured API to manage financial transactions securely.",
              "createdat": "2025-05-12T08:17:40.006967539Z",
              "modifiedat": "2025-05-12T08:17:40.006967539Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Stripe secret API key",
                        "name": "STRIPE_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "/ABSOLUTE/PATH/TO/PARENT/FOLDER/src",
                      "run",
                      "server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "@atharvagupta2003/mcp-stripe"
                }
              ],
              "remotes": [],
              "repo_ref": "atharvagupta2003/mcp-stripe",
              "resources": [
                {
                  "description": "Stores audit logs of customer, payment, and refund operations; supports structured logging for better traceability; uses MCP resource endpoints to retrieve audit data",
                  "name": "audit_logs",
                  "uritemplate": "/audit/logs"
                }
              ],
              "tools": [
                {
                  "description": "Create a new customer",
                  "inputschema": {
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "email",
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "customer_create"
                },
                {
                  "description": "Retrieve a customer's details",
                  "inputschema": {
                    "properties": {
                      "customer_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "customer_id"
                    ],
                    "type": "object"
                  },
                  "name": "customer_retrieve"
                },
                {
                  "description": "Update customer information",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "customer_update"
                },
                {
                  "description": "Create a payment intent for processing payments",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "type": "integer"
                      },
                      "currency": {
                        "type": "string"
                      },
                      "customer": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "currency",
                      "customer"
                    ],
                    "type": "object"
                  },
                  "name": "payment_intent_create"
                },
                {
                  "description": "List recent charges",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "charge_list"
                },
                {
                  "description": "Create a refund for a charge",
                  "inputschema": {
                    "properties": {
                      "charge_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "charge_id"
                    ],
                    "type": "object"
                  },
                  "name": "refund_create"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "atlanhq": {
      "mcpproviderid": "atlanhq",
      "self": "#/mcpproviders/atlanhq",
      "xid": "/mcpproviders/atlanhq",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:50.440396005Z",
      "modifiedat": "2025-05-12T08:17:50.440396005Z",

      "serversurl": "#/mcpproviders/atlanhq/servers",
      "servers": {
        "agent-toolkit": {
          "serverid": "agent-toolkit",
          "self": "#/mcpproviders/atlanhq/servers/agent-toolkit",
          "xid": "/mcpproviders/atlanhq/servers/agent-toolkit",

          "metaurl": "#/mcpproviders/atlanhq/servers/agent-toolkit/meta",
          "meta": {
            "serverid": "agent-toolkit",
            "self": "#/mcpproviders/atlanhq/servers/agent-toolkit/meta",
            "xid": "/mcpproviders/atlanhq/servers/agent-toolkit/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:50.440396005Z",
            "modifiedat": "2025-05-12T08:17:50.440396005Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/atlanhq/servers/agent-toolkit/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/atlanhq/servers/agent-toolkit/versions",
          "versions": {
            "1": {
              "serverid": "agent-toolkit",
              "versionid": "1",
              "self": "#/mcpproviders/atlanhq/servers/agent-toolkit/versions/1",
              "xid": "/mcpproviders/atlanhq/servers/agent-toolkit/versions/1",
              "epoch": 1,
              "name": "io.github.atlanhq/agent-toolkit",
              "isdefault": true,
              "description": "A protocol server that enables interaction with Atlan services through function calling. Provides tools for asset search, and retrieval using pyatlan.",
              "createdat": "2025-05-12T08:17:50.440396005Z",
              "modifiedat": "2025-05-12T08:17:50.440396005Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "atlan-agent-toolkit"
                }
              ],
              "remotes": [],
              "repo_ref": "atlanhq/agent-toolkit",
              "resources": [],
              "tools": [
                {
                  "description": "Advanced asset search using FluentSearch with flexible conditions.",
                  "inputschema": {
                    "properties": {
                      "asset_type": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "object"
                          }
                        ]
                      },
                      "conditions": {
                        "oneOf": [
                          {
                            "type": "object"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "connection_qualified_name": {
                        "type": "string"
                      },
                      "date_range": {
                        "type": "object"
                      },
                      "directly_tagged": {
                        "type": "boolean"
                      },
                      "domain_guids": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "include_archived": {
                        "type": "boolean"
                      },
                      "include_attributes": {
                        "items": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "min_somes": {
                        "type": "integer"
                      },
                      "negative_conditions": {
                        "type": "object"
                      },
                      "offset": {
                        "type": "integer"
                      },
                      "some_conditions": {
                        "type": "object"
                      },
                      "sort_by": {
                        "type": "string"
                      },
                      "sort_order": {
                        "type": "string"
                      },
                      "tags": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "name": "search_assets_tool"
                },
                {
                  "description": "Execute the search with the given query",
                  "inputschema": {
                    "properties": {
                      "dsl_query": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "required": [
                      "dsl_query"
                    ],
                    "type": "object"
                  },
                  "name": "get_assets_by_dsl_tool"
                },
                {
                  "description": "Traverse asset lineage in specified direction.",
                  "inputschema": {
                    "properties": {
                      "depth": {
                        "type": "integer"
                      },
                      "direction": {
                        "enum": [
                          "UPSTREAM",
                          "DOWNSTREAM"
                        ],
                        "type": "string"
                      },
                      "guid": {
                        "type": "string"
                      },
                      "immediate_neighbors": {
                        "type": "boolean"
                      },
                      "size": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "guid",
                      "direction"
                    ],
                    "type": "object"
                  },
                  "name": "traverse_lineage_tool"
                },
                {
                  "description": "Update one or multiple assets with different values for the same attribute.",
                  "inputschema": {
                    "properties": {
                      "assets": {
                        "oneOf": [
                          {
                            "type": "object"
                          },
                          {
                            "items": {
                              "type": "object"
                            },
                            "type": "array"
                          }
                        ]
                      },
                      "attribute_name": {
                        "type": "string"
                      },
                      "attribute_values": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "assets",
                      "attribute_name",
                      "attribute_values"
                    ],
                    "type": "object"
                  },
                  "name": "update_assets_tool"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "aws-samples": {
      "mcpproviderid": "aws-samples",
      "self": "#/mcpproviders/aws-samples",
      "xid": "/mcpproviders/aws-samples",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:37.637822435Z",
      "modifiedat": "2025-05-12T08:19:37.637822435Z",

      "serversurl": "#/mcpproviders/aws-samples/servers",
      "servers": {
        "sample-mcp-server-s3": {
          "serverid": "sample-mcp-server-s3",
          "self": "#/mcpproviders/aws-samples/servers/sample-mcp-server-s3",
          "xid": "/mcpproviders/aws-samples/servers/sample-mcp-server-s3",

          "metaurl": "#/mcpproviders/aws-samples/servers/sample-mcp-server-s3/meta",
          "meta": {
            "serverid": "sample-mcp-server-s3",
            "self": "#/mcpproviders/aws-samples/servers/sample-mcp-server-s3/meta",
            "xid": "/mcpproviders/aws-samples/servers/sample-mcp-server-s3/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:37.637822435Z",
            "modifiedat": "2025-05-12T08:19:37.637822435Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/aws-samples/servers/sample-mcp-server-s3/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/aws-samples/servers/sample-mcp-server-s3/versions",
          "versions": {
            "1": {
              "serverid": "sample-mcp-server-s3",
              "versionid": "1",
              "self": "#/mcpproviders/aws-samples/servers/sample-mcp-server-s3/versions/1",
              "xid": "/mcpproviders/aws-samples/servers/sample-mcp-server-s3/versions/1",
              "epoch": 1,
              "name": "io.github.aws-samples/sample-mcp-server-s3",
              "isdefault": true,
              "description": "An MCP server implementation for retrieving data such as PDF's from S3.",
              "createdat": "2025-05-12T08:19:37.637822435Z",
              "modifiedat": "2025-05-12T08:19:37.637822435Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--directory",
                      "/Users/user/generative_ai/model_context_protocol/s3-mcp-server",
                      "run",
                      "s3-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "s3-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "aws-samples/sample-mcp-server-s3",
              "resources": [
                {
                  "description": "Expose AWS S3 Data through Resources. Currently only PDF documents supported and limited to 1000 objects.",
                  "mimetype": "application/pdf",
                  "name": "PDF Documents",
                  "uritemplate": "s3://{bucket}/{object_key}"
                }
              ],
              "tools": [
                {
                  "description": "Returns a list of all buckets owned by the authenticated sender of the request. To grant IAM permission to use this operation, you must add the s3:ListAllMyBuckets policy action.",
                  "inputschema": {
                    "properties": {
                      "ContinuationToken": {
                        "description": "ContinuationToken indicates to Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key. You can use this ContinuationToken for pagination of the list results. Length Constraints: Minimum length of 0. Maximum length of 1024.",
                        "type": "string"
                      },
                      "MaxBuckets": {
                        "description": "Maximum number of buckets to be returned in response. When the number is more than the count of buckets that are owned by an AWS account, return all the buckets in response. Valid Range: Minimum value of 1. Maximum value of 10000.",
                        "type": "integer"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "ListBuckets"
                },
                {
                  "description": "Returns some or all (up to 1,000) of the objects in a bucket with each request. You can use the request parameters as selection criteria to return a subset of the objects in a bucket. To get a list of your buckets, see ListBuckets.",
                  "inputschema": {
                    "properties": {
                      "Bucket": {
                        "description": "When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format bucket_base_name--az-id--x-s3 (for example, DOC-EXAMPLE-BUCKET--usw2-az1--x-s3).",
                        "type": "string"
                      },
                      "ContinuationToken": {
                        "description": "ContinuationToken indicates to Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key. You can use this ContinuationToken for pagination of the list results.",
                        "type": "string"
                      },
                      "EncodingType": {
                        "description": "Encoding type used by Amazon S3 to encode the object keys in the response. Responses are encoded only in UTF-8. An object key can contain any Unicode character. However, the XML 1.0 parser can't parse certain characters, such as characters with an ASCII value from 0 to 10. For characters that aren't supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.",
                        "type": "string"
                      },
                      "FetchOwner": {
                        "description": "The owner field is not present in ListObjectsV2 by default. If you want to return the owner field with each key in the result, then set the FetchOwner field to true.",
                        "type": "boolean"
                      },
                      "MaxKeys": {
                        "description": "Sets the maximum number of keys returned in the response. By default, the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more.",
                        "type": "integer"
                      },
                      "Prefix": {
                        "description": "Limits the response to keys that begin with the specified prefix.",
                        "type": "string"
                      },
                      "StartAfter": {
                        "description": "StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "Bucket"
                    ],
                    "type": "object"
                  },
                  "name": "ListObjectsV2"
                },
                {
                  "description": "Retrieves an object from Amazon S3. In the GetObject request, specify the full key name for the object. General purpose buckets - Both the virtual-hosted-style requests and the path-style requests are supported. For a virtual hosted-style request example, if you have the object photos/2006/February/sample.jpg, specify the object key name as /photos/2006/February/sample.jpg. For a path-style request example, if you have the object photos/2006/February/sample.jpg in the bucket named examplebucket, specify the object key name as /examplebucket/photos/2006/February/sample.jpg. Directory buckets - Only virtual-hosted-style requests are supported. For a virtual hosted-style request example, if you have the object photos/2006/February/sample.jpg in the bucket named examplebucket--use1-az5--x-s3, specify the object key name as /photos/2006/February/sample.jpg. Also, when you make requests to this API operation, your requests are sent to the Zonal endpoint. These endpoints support virtual-hosted-style requests in the format https://bucket_name.s3express-az_id.region.amazonaws.com/key-name . Path-style requests are not supported.",
                  "inputschema": {
                    "properties": {
                      "Bucket": {
                        "description": "Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format bucket_base_name--az-id--x-s3 (for example, DOC-EXAMPLE-BUCKET--usw2-az1--x-s3).",
                        "type": "string"
                      },
                      "Key": {
                        "description": "Key of the object to get. Length Constraints: Minimum length of 1.",
                        "type": "string"
                      },
                      "PartNumber": {
                        "description": "Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.",
                        "type": "integer"
                      },
                      "Range": {
                        "description": "Downloads the specified byte range of an object.",
                        "type": "string"
                      },
                      "VersionId": {
                        "description": "Version ID used to reference a specific version of the object. By default, the GetObject operation returns the current version of an object. To return a different version, use the versionId subresource.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "Bucket",
                      "Key"
                    ],
                    "type": "object"
                  },
                  "name": "GetObject"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "awslabs": {
      "mcpproviderid": "awslabs",
      "self": "#/mcpproviders/awslabs",
      "xid": "/mcpproviders/awslabs",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:45.117483401Z",
      "modifiedat": "2025-05-12T08:17:45.117483401Z",

      "serversurl": "#/mcpproviders/awslabs/servers",
      "servers": {
        "mcp": {
          "serverid": "mcp",
          "self": "#/mcpproviders/awslabs/servers/mcp",
          "xid": "/mcpproviders/awslabs/servers/mcp",

          "metaurl": "#/mcpproviders/awslabs/servers/mcp/meta",
          "meta": {
            "serverid": "mcp",
            "self": "#/mcpproviders/awslabs/servers/mcp/meta",
            "xid": "/mcpproviders/awslabs/servers/mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:45.117483401Z",
            "modifiedat": "2025-05-12T08:17:45.117483401Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/awslabs/servers/mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/awslabs/servers/mcp/versions",
          "versions": {
            "1": {
              "serverid": "mcp",
              "versionid": "1",
              "self": "#/mcpproviders/awslabs/servers/mcp/versions/1",
              "xid": "/mcpproviders/awslabs/servers/mcp/versions/1",
              "epoch": 1,
              "name": "io.github.awslabs/mcp",
              "isdefault": true,
              "description": "A suite of specialized MCP servers that help you get the most out of AWS, wherever you use MCP.",
              "createdat": "2025-05-12T08:17:45.117483401Z",
              "modifiedat": "2025-05-12T08:17:45.117483401Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "awslabs/mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "awslabs/mcp",
              "resources": [
                {
                  "description": "List all available Amazon Bedrock Knowledge Bases and their data sources.",
                  "mimetype": "application/json",
                  "name": "KnowledgeBases",
                  "uritemplate": "resource://knowledgebases"
                },
                {
                  "description": "Get all CDK Nag rules for a given rule pack.",
                  "mimetype": "application/json",
                  "name": "CDK Nag Rules",
                  "uritemplate": "cdk-nag://rules/{rule_pack}"
                },
                {
                  "description": "Get CDK Nag warnings for a given rule pack.",
                  "mimetype": "application/json",
                  "name": "CDK Nag Warnings",
                  "uritemplate": "cdk-nag://warnings/{rule_pack}"
                },
                {
                  "description": "Get CDK Nag errors for a given rule pack.",
                  "mimetype": "application/json",
                  "name": "CDK Nag Errors",
                  "uritemplate": "cdk-nag://errors/{rule_pack}"
                },
                {
                  "description": "Get Lambda Powertools guidance for a specific topic.",
                  "mimetype": "application/json",
                  "name": "Lambda Powertools Topic",
                  "uritemplate": "lambda-powertools://{topic}"
                },
                {
                  "description": "Get Lambda Powertools index.",
                  "mimetype": "application/json",
                  "name": "Lambda Powertools Index",
                  "uritemplate": "lambda-powertools://"
                },
                {
                  "description": "Get AWS Solutions Construct pattern resource.",
                  "mimetype": "application/json",
                  "name": "AWS Solutions Constructs Pattern",
                  "uritemplate": "aws-solutions-constructs://{pattern_name}"
                },
                {
                  "description": "Get a section of a GenAI CDK construct.",
                  "mimetype": "application/json",
                  "name": "GenAI CDK Construct Section",
                  "uritemplate": "genai-cdk-constructs://{construct_type}/{construct_name}/{section}"
                },
                {
                  "description": "Get a nested section of a GenAI CDK construct.",
                  "mimetype": "application/json",
                  "name": "GenAI CDK Construct Nested Section",
                  "uritemplate": "genai-cdk-constructs://{construct_type}/{construct_name}/{parent}/{child}"
                },
                {
                  "description": "Get available sections of a GenAI CDK construct.",
                  "mimetype": "application/json",
                  "name": "GenAI CDK Construct Available Sections",
                  "uritemplate": "genai-cdk-constructs://{construct_type}/{construct_name}/sections"
                },
                {
                  "description": "Get a GenAI CDK construct.",
                  "mimetype": "application/json",
                  "name": "GenAI CDK Construct",
                  "uritemplate": "genai-cdk-constructs://{construct_type}/{construct_name}"
                },
                {
                  "description": "Get overview of GenAI CDK constructs.",
                  "mimetype": "application/json",
                  "name": "GenAI CDK Construct Overview",
                  "uritemplate": "genai-cdk-constructs://{construct_type}"
                },
                {
                  "description": "Terraform Development Workflow Guide with integrated validation and security scanning",
                  "mimetype": "text/markdown",
                  "name": "terraform_development_workflow",
                  "uritemplate": "terraform://development_workflow"
                },
                {
                  "description": "Comprehensive listing of AWS provider resources and data sources by service category",
                  "mimetype": "text/markdown",
                  "name": "terraform_aws_provider_resources_listing",
                  "uritemplate": "terraform://aws_provider_resources_listing"
                },
                {
                  "description": "Comprehensive listing of AWSCC provider resources and data sources by service category",
                  "mimetype": "text/markdown",
                  "name": "terraform_awscc_provider_resources_listing",
                  "uritemplate": "terraform://awscc_provider_resources_listing"
                },
                {
                  "description": "AWS Terraform Provider Best Practices from AWS Prescriptive Guidance",
                  "mimetype": "text/markdown",
                  "name": "terraform_aws_best_practices",
                  "uritemplate": "terraform://aws_best_practices"
                }
              ],
              "tools": [
                {
                  "description": "Generate a diagram from Python code using the diagrams package.",
                  "inputschema": {
                    "properties": {
                      "code": {
                        "description": "Python code using the diagrams package DSL. The runtime already imports everything needed so you can start immediately using `with Diagram(`",
                        "type": "string"
                      },
                      "filename": {
                        "description": "The filename to save the diagram to. If not provided, a random name will be generated.",
                        "type": "string"
                      },
                      "timeout": {
                        "description": "The timeout for diagram generation in seconds. Default is 90 seconds.",
                        "type": "integer"
                      },
                      "workspace_dir": {
                        "description": "The user's current workspace directory. CRITICAL: Client must always send the current workspace directory when calling this tool! If provided, diagrams will be saved to a 'generated-diagrams' subdirectory.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "code"
                    ],
                    "type": "object"
                  },
                  "name": "generate_diagram"
                },
                {
                  "description": "Get example code for different types of diagrams.",
                  "inputschema": {
                    "properties": {
                      "diagram_type": {
                        "description": "Type of diagram example to return. Options: aws, sequence, flow, class, k8s, onprem, custom, all",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_diagram_examples"
                },
                {
                  "description": "List all available icons from the diagrams package.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_icons"
                },
                {
                  "description": "Fetch and convert an AWS documentation page to markdown format.",
                  "inputschema": {
                    "properties": {
                      "max_length": {
                        "description": "Maximum number of characters to return.",
                        "type": "integer"
                      },
                      "start_index": {
                        "description": "On return output starting at this character index, useful if a previous fetch was truncated and more content is required.",
                        "type": "integer"
                      },
                      "url": {
                        "description": "URL of the AWS documentation page to read",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "read_documentation"
                },
                {
                  "description": "Search AWS documentation using the official AWS Documentation Search API.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of results to return",
                        "type": "integer"
                      },
                      "search_phrase": {
                        "description": "Search phrase to use",
                        "type": "string"
                      }
                    },
                    "required": [
                      "search_phrase"
                    ],
                    "type": "object"
                  },
                  "name": "search_documentation"
                },
                {
                  "description": "Get content recommendations for an AWS documentation page.",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "description": "URL of the AWS documentation page to get recommendations for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "recommend"
                },
                {
                  "description": "Query an Amazon Bedrock Knowledge Base using natural language.",
                  "inputschema": {
                    "properties": {
                      "data_source_ids": {
                        "description": "The data source IDs to filter the knowledge base by. It must be a list of valid data source IDs from the resource://knowledgebases MCP resource",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "knowledge_base_id": {
                        "description": "The knowledge base ID to query. It must be a valid ID from the resource://knowledgebases MCP resource",
                        "type": "string"
                      },
                      "number_of_results": {
                        "description": "The number of results to return. Use smaller values for focused results and larger values for broader coverage.",
                        "type": "integer"
                      },
                      "query": {
                        "description": "A natural language query to search the knowledge base with",
                        "type": "string"
                      },
                      "reranking": {
                        "description": "Whether to rerank the results. Useful for improving relevance and sorting.",
                        "type": "boolean"
                      },
                      "reranking_model_name": {
                        "description": "The name of the reranking model to use. Options: 'COHERE', 'AMAZON'",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query",
                      "knowledge_base_id"
                    ],
                    "type": "object"
                  },
                  "name": "QueryKnowledgeBases"
                },
                {
                  "description": "General guidance for AWS CDK usage.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "CDKGeneralGuidance"
                },
                {
                  "description": "Explain a CDK Nag rule.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "ExplainCDKNagRule"
                },
                {
                  "description": "Check CDK Nag suppressions.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "CheckCDKNagSuppressions"
                },
                {
                  "description": "Generate Bedrock Agent schema from file.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "GenerateBedrockAgentSchema"
                },
                {
                  "description": "Get AWS Solutions Construct pattern.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "GetAwsSolutionsConstructPattern"
                },
                {
                  "description": "Search GenAI CDK constructs.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "SearchGenAICDKConstructs"
                },
                {
                  "description": "Provide documentation for Lambda layers.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "LambdaLayerDocumentationProvider"
                },
                {
                  "description": "Analyze a CDK project to identify AWS services used. This tool dynamically extracts service information from CDK constructs without relying on hardcoded service mappings.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "The path to the CDK project",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "analyze_cdk_project"
                },
                {
                  "description": "Get pricing information from AWS pricing webpage. Service codes typically use lowercase with hyphens format (e.g., \"opensearch-service\" for both OpenSearch and OpenSearch Serverless, \"api-gateway\", \"lambda\"). Note that some services like OpenSearch Serverless are part of broader service codes (use \"opensearch-service\" not \"opensearch-serverless\"). Important: Web service codes differ from API service codes (e.g., use \"opensearch-service\" for web but \"AmazonES\" for API). When retrieving foundation model pricing, always use the latest models for comparison rather than specific named ones that may become outdated.",
                  "inputschema": {
                    "properties": {
                      "service_code": {
                        "description": "The service code (e.g., 'opensearch-service' for both OpenSearch and OpenSearch Serverless)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "service_code"
                    ],
                    "type": "object"
                  },
                  "name": "get_pricing_from_web"
                },
                {
                  "description": "Get pricing information from AWS Price List API. Service codes for API often differ from web URLs. (e.g., use \"AmazonES\" for OpenSearch, not \"AmazonOpenSearchService\"). IMPORTANT GUIDELINES: - When retrieving foundation model pricing, always use the latest models for comparison - For database compatibility with services, only include confirmed supported databases - Providing less information is better than giving incorrect information",
                  "inputschema": {
                    "properties": {
                      "region": {
                        "description": "AWS region (e.g., 'us-west-2')",
                        "type": "string"
                      },
                      "service_code": {
                        "description": "The service code (e.g., 'AmazonES' for OpenSearch, 'AmazonS3' for S3)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "service_code",
                      "region"
                    ],
                    "type": "object"
                  },
                  "name": "get_pricing_from_api"
                },
                {
                  "description": "Get architecture patterns for Amazon Bedrock applications, including component relationships and cost considerations",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_bedrock_patterns"
                },
                {
                  "description": "Generate a detailed cost analysis report based on pricing data for one or more AWS services.",
                  "inputschema": {
                    "properties": {
                      "assumptions": {
                        "description": "List of assumptions made for the cost analysis",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "detailed_cost_data": {
                        "description": "Dictionary containing detailed cost information for complex scenarios",
                        "type": "object"
                      },
                      "exclusions": {
                        "description": "List of items excluded from the cost analysis",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "format": {
                        "description": "Output format for the cost analysis report",
                        "type": "string"
                      },
                      "output_file": {
                        "description": "Path to save the report to a file",
                        "type": "string"
                      },
                      "pricing_data": {
                        "description": "Raw pricing data from AWS pricing tools (required)",
                        "type": "object"
                      },
                      "pricing_model": {
                        "description": "The pricing model used (default: \"ON DEMAND\")",
                        "type": "string"
                      },
                      "recommendations": {
                        "description": "Optional dictionary containing recommendations or guidance for generation",
                        "type": "object"
                      },
                      "related_services": {
                        "description": "List of related services to include in the analysis",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "service_name": {
                        "description": "Name of the primary service (required)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "pricing_data",
                      "service_name"
                    ],
                    "type": "object"
                  },
                  "name": "generate_cost_report"
                },
                {
                  "description": "Tool that invokes an AWS Lambda function with a JSON payload.",
                  "inputschema": {
                    "properties": {
                      "function_name": {
                        "description": "Name of the AWS Lambda function to invoke",
                        "type": "string"
                      },
                      "parameters": {
                        "description": "JSON payload parameters to pass to the Lambda function",
                        "type": "object"
                      }
                    },
                    "required": [
                      "function_name",
                      "parameters"
                    ],
                    "type": "object"
                  },
                  "name": "invoke_lambda_function_impl"
                },
                {
                  "description": "Generate an image using Amazon Nova Canvas with text prompt.",
                  "inputschema": {
                    "properties": {
                      "cfg_scale": {
                        "description": "How strongly the image adheres to the prompt (1.1-10.0)",
                        "type": "number"
                      },
                      "filename": {
                        "description": "The name of the file to save the image to (without extension)",
                        "type": "string"
                      },
                      "height": {
                        "description": "The height of the generated image (320-4096, divisible by 16)",
                        "type": "integer"
                      },
                      "negative_prompt": {
                        "description": "Text to define what not to include in the image (1-1024 characters)",
                        "type": "string"
                      },
                      "number_of_images": {
                        "description": "The number of images to generate (1-5)",
                        "type": "integer"
                      },
                      "prompt": {
                        "description": "The text description of the image to generate (1-1024 characters)",
                        "type": "string"
                      },
                      "quality": {
                        "description": "The quality of the generated image (\"standard\" or \"premium\")",
                        "type": "string"
                      },
                      "seed": {
                        "description": "Seed for generation (0-858,993,459)",
                        "type": "integer"
                      },
                      "width": {
                        "description": "The width of the generated image (320-4096, divisible by 16)",
                        "type": "integer"
                      },
                      "workspace_dir": {
                        "description": "The current workspace directory where the image should be saved.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "generate_image"
                },
                {
                  "description": "Generate an image using Amazon Nova Canvas with color guidance.",
                  "inputschema": {
                    "properties": {
                      "cfg_scale": {
                        "description": "How strongly the image adheres to the prompt (1.1-10.0)",
                        "type": "number"
                      },
                      "colors": {
                        "description": "List of up to 10 hexadecimal color values (e.g., \"#FF9800\")",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "filename": {
                        "description": "The name of the file to save the image to (without extension)",
                        "type": "string"
                      },
                      "height": {
                        "description": "The height of the generated image (320-4096, divisible by 16)",
                        "type": "integer"
                      },
                      "negative_prompt": {
                        "description": "Text to define what not to include in the image (1-1024 characters)",
                        "type": "string"
                      },
                      "number_of_images": {
                        "description": "The number of images to generate (1-5)",
                        "type": "integer"
                      },
                      "prompt": {
                        "description": "The text description of the image to generate (1-1024 characters)",
                        "type": "string"
                      },
                      "quality": {
                        "description": "The quality of the generated image (\"standard\" or \"premium\")",
                        "type": "string"
                      },
                      "seed": {
                        "description": "Seed for generation (0-858,993,459)",
                        "type": "integer"
                      },
                      "width": {
                        "description": "The width of the generated image (320-4096, divisible by 16)",
                        "type": "integer"
                      },
                      "workspace_dir": {
                        "description": "The current workspace directory where the image should be saved.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt",
                      "colors"
                    ],
                    "type": "object"
                  },
                  "name": "generate_image_with_colors"
                },
                {
                  "description": "Execute Terraform workflow commands against an AWS account.",
                  "inputschema": {
                    "properties": {
                      "aws_region": {
                        "description": "AWS region to use",
                        "type": "string"
                      },
                      "command": {
                        "description": "Terraform command to execute",
                        "type": "string"
                      },
                      "strip_ansi": {
                        "description": "Whether to strip ANSI color codes from output",
                        "type": "boolean"
                      },
                      "variables": {
                        "description": "Terraform variables to pass",
                        "type": "object"
                      },
                      "working_directory": {
                        "description": "Directory containing Terraform files",
                        "type": "string"
                      }
                    },
                    "required": [
                      "command",
                      "working_directory"
                    ],
                    "type": "object"
                  },
                  "name": "ExecuteTerraformCommand"
                },
                {
                  "description": "Search AWS provider documentation for resources and attributes.",
                  "inputschema": {
                    "properties": {
                      "asset_name": {
                        "description": "Name of the AWS service (asset) to look for (e.g., \"aws_s3_bucket\", \"aws_lambda_function\")",
                        "type": "string"
                      },
                      "asset_type": {
                        "description": "Type of documentation to search - 'resource' (default), 'data_source', or 'both'",
                        "type": "string"
                      }
                    },
                    "required": [
                      "asset_name"
                    ],
                    "type": "object"
                  },
                  "name": "SearchAwsProviderDocs"
                },
                {
                  "description": "Search AWSCC provider documentation for resources and attributes.",
                  "inputschema": {
                    "properties": {
                      "asset_name": {
                        "description": "Name of the AWSCC service (asset) to look for (e.g., awscc_s3_bucket, awscc_lambda_function)",
                        "type": "string"
                      },
                      "asset_type": {
                        "description": "Type of documentation to search - 'resource' (default), 'data_source', or 'both'",
                        "type": "string"
                      }
                    },
                    "required": [
                      "asset_name"
                    ],
                    "type": "object"
                  },
                  "name": "SearchAwsccProviderDocs"
                },
                {
                  "description": "Search for specific AWS-IA Terraform modules.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "Optional search term to filter modules (empty returns all four modules)",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "SearchSpecificAwsIaModules"
                },
                {
                  "description": "Run Checkov security scan on Terraform code.",
                  "inputschema": {
                    "properties": {
                      "check_ids": {
                        "description": "Specific check IDs to run",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "framework": {
                        "description": "Framework to scan (terraform, cloudformation, etc.)",
                        "type": "string"
                      },
                      "output_format": {
                        "description": "Output format (json, cli, etc.)",
                        "type": "string"
                      },
                      "skip_check_ids": {
                        "description": "Check IDs to skip",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "working_directory": {
                        "description": "Directory containing Terraform files",
                        "type": "string"
                      }
                    },
                    "required": [
                      "working_directory"
                    ],
                    "type": "object"
                  },
                  "name": "RunCheckovScan"
                },
                {
                  "description": "Search for a user-provided Terraform registry module and understand its inputs, outputs, and usage.",
                  "inputschema": {
                    "properties": {
                      "module_url": {
                        "description": "URL or identifier of the Terraform module (e.g., \"hashicorp/consul/aws\")",
                        "type": "string"
                      },
                      "variables": {
                        "description": "Variables to use when analyzing the module",
                        "type": "object"
                      },
                      "version": {
                        "description": "Specific version of the module to analyze",
                        "type": "string"
                      }
                    },
                    "required": [
                      "module_url"
                    ],
                    "type": "object"
                  },
                  "name": "SearchUserProvidedModule"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "axiomhq": {
      "mcpproviderid": "axiomhq",
      "self": "#/mcpproviders/axiomhq",
      "xid": "/mcpproviders/axiomhq",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:58.54322952Z",
      "modifiedat": "2025-05-12T08:20:58.54322952Z",

      "serversurl": "#/mcpproviders/axiomhq/servers",
      "servers": {
        "mcp-server-axiom": {
          "serverid": "mcp-server-axiom",
          "self": "#/mcpproviders/axiomhq/servers/mcp-server-axiom",
          "xid": "/mcpproviders/axiomhq/servers/mcp-server-axiom",

          "metaurl": "#/mcpproviders/axiomhq/servers/mcp-server-axiom/meta",
          "meta": {
            "serverid": "mcp-server-axiom",
            "self": "#/mcpproviders/axiomhq/servers/mcp-server-axiom/meta",
            "xid": "/mcpproviders/axiomhq/servers/mcp-server-axiom/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:58.54322952Z",
            "modifiedat": "2025-05-12T08:20:58.54322952Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/axiomhq/servers/mcp-server-axiom/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/axiomhq/servers/mcp-server-axiom/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-axiom",
              "versionid": "1",
              "self": "#/mcpproviders/axiomhq/servers/mcp-server-axiom/versions/1",
              "xid": "/mcpproviders/axiomhq/servers/mcp-server-axiom/versions/1",
              "epoch": 1,
              "name": "io.github.axiomhq/mcp-server-axiom",
              "isdefault": true,
              "description": "A Model Context Protocol server implementation for Axiom that enables AI agents to query your data using Axiom Processing Language (APL). Works with Claude desktop app. Implements two MCP tools: queryApl and listDatasets. No support for MCP resources or prompts yet.",
              "createdat": "2025-05-12T08:20:58.54322952Z",
              "modifiedat": "2025-05-12T08:20:58.54322952Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "AXIOM_TOKEN"
                      },
                      {
                        "name": "AXIOM_URL"
                      },
                      {
                        "name": "AXIOM_ORG_ID"
                      },
                      {
                        "name": "AXIOM_QUERY_RATE"
                      },
                      {
                        "name": "AXIOM_QUERY_BURST"
                      },
                      {
                        "name": "AXIOM_DATASETS_RATE"
                      },
                      {
                        "name": "AXIOM_DATASETS_BURST"
                      }
                    ],
                    "positional_arguments": [
                      "--config",
                      "/path/to/your/config.txt"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "cli",
                  "package_name": "github.com/axiomhq/axiom-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "axiomhq/mcp-server-axiom",
              "resources": [],
              "tools": [
                {
                  "description": "Execute APL queries against Axiom datasets",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "queryApl"
                },
                {
                  "description": "List available Axiom datasets",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "listDatasets"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "baidubce": {
      "mcpproviderid": "baidubce",
      "self": "#/mcpproviders/baidubce",
      "xid": "/mcpproviders/baidubce",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:38.27006752Z",
      "modifiedat": "2025-05-12T08:17:38.27006752Z",

      "serversurl": "#/mcpproviders/baidubce/servers",
      "servers": {
        "app-builder": {
          "serverid": "app-builder",
          "self": "#/mcpproviders/baidubce/servers/app-builder",
          "xid": "/mcpproviders/baidubce/servers/app-builder",

          "metaurl": "#/mcpproviders/baidubce/servers/app-builder/meta",
          "meta": {
            "serverid": "app-builder",
            "self": "#/mcpproviders/baidubce/servers/app-builder/meta",
            "xid": "/mcpproviders/baidubce/servers/app-builder/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:38.27006752Z",
            "modifiedat": "2025-05-12T08:17:38.27006752Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/baidubce/servers/app-builder/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/baidubce/servers/app-builder/versions",
          "versions": {
            "1": {
              "serverid": "app-builder",
              "versionid": "1",
              "self": "#/mcpproviders/baidubce/servers/app-builder/versions/1",
              "xid": "/mcpproviders/baidubce/servers/app-builder/versions/1",
              "epoch": 1,
              "name": "io.github.baidubce/app-builder",
              "isdefault": true,
              "description": "This server provides MCP (Model Context Protocol) tools for interacting with Baidu AppBuilder applications. It supports both stdio and SSE (Server-Sent Events) protocols.",
              "createdat": "2025-05-12T08:17:38.27006752Z",
              "modifiedat": "2025-05-12T08:17:38.27006752Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "AppBuilder API token for authentication",
                        "name": "APPBUILDER_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "appbuilder-sdk"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://appbuilder.baidu.com/v2/ai_search/mcp/sse"
                }
              ],
              "repo_ref": "baidubce/app-builder",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve a list of all available AppBuilder applications.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_apps"
                },
                {
                  "description": "Create a new conversation session for a specific AppBuilder application.",
                  "inputschema": {
                    "properties": {
                      "app_id": {
                        "description": "The unique identifier of the target application",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app_id"
                    ],
                    "type": "object"
                  },
                  "name": "create_conversation"
                },
                {
                  "description": "Execute a conversation query with a specific AppBuilder application.",
                  "inputschema": {
                    "properties": {
                      "app_id": {
                        "description": "The unique identifier of the target application",
                        "type": "string"
                      },
                      "conversation_id": {
                        "description": "The conversation session identifier",
                        "type": "string"
                      },
                      "query": {
                        "description": "The input text/query to send to the application",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app_id",
                      "conversation_id",
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "run"
                }
              ],
              "version_detail": {
                "version": "1.0.5"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "baryhuang": {
      "mcpproviderid": "baryhuang",
      "self": "#/mcpproviders/baryhuang",
      "xid": "/mcpproviders/baryhuang",
      "epoch": 2,
      "createdat": "2025-05-12T08:17:58.399937619Z",
      "modifiedat": "2025-05-12T08:17:58.767778243Z",

      "serversurl": "#/mcpproviders/baryhuang/servers",
      "servers": {
        "mcp-headless-gmail": {
          "serverid": "mcp-headless-gmail",
          "self": "#/mcpproviders/baryhuang/servers/mcp-headless-gmail",
          "xid": "/mcpproviders/baryhuang/servers/mcp-headless-gmail",

          "metaurl": "#/mcpproviders/baryhuang/servers/mcp-headless-gmail/meta",
          "meta": {
            "serverid": "mcp-headless-gmail",
            "self": "#/mcpproviders/baryhuang/servers/mcp-headless-gmail/meta",
            "xid": "/mcpproviders/baryhuang/servers/mcp-headless-gmail/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:58.399937619Z",
            "modifiedat": "2025-05-12T08:17:58.399937619Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/baryhuang/servers/mcp-headless-gmail/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/baryhuang/servers/mcp-headless-gmail/versions",
          "versions": {
            "1": {
              "serverid": "mcp-headless-gmail",
              "versionid": "1",
              "self": "#/mcpproviders/baryhuang/servers/mcp-headless-gmail/versions/1",
              "xid": "/mcpproviders/baryhuang/servers/mcp-headless-gmail/versions/1",
              "epoch": 1,
              "name": "io.github.baryhuang/mcp-headless-gmail",
              "isdefault": true,
              "description": "A MCP (Model Context Protocol) server that provides get, send Gmails without local credential or token setup.",
              "createdat": "2025-05-12T08:17:58.399937619Z",
              "modifiedat": "2025-05-12T08:17:58.399937619Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-i",
                      "--rm",
                      "buryhuang/mcp-headless-gmail:latest"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "buryhuang/mcp-headless-gmail"
                }
              ],
              "remotes": [],
              "repo_ref": "baryhuang/mcp-headless-gmail",
              "resources": [],
              "tools": [
                {
                  "description": "Get most recent emails from Gmail with the first 1k characters of the body",
                  "inputschema": {
                    "properties": {
                      "access_token": {
                        "type": "string"
                      },
                      "client_id": {
                        "type": "string"
                      },
                      "client_secret": {
                        "type": "string"
                      },
                      "offset": {
                        "type": "integer"
                      },
                      "refresh_token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "access_token",
                      "refresh_token",
                      "client_id",
                      "client_secret"
                    ],
                    "type": "object"
                  },
                  "name": "gmail_get_emails"
                },
                {
                  "description": "Send emails through Gmail",
                  "inputschema": {
                    "properties": {
                      "access_token": {
                        "type": "string"
                      },
                      "client_id": {
                        "type": "string"
                      },
                      "client_secret": {
                        "type": "string"
                      },
                      "email_body": {
                        "type": "string"
                      },
                      "email_recipients": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "email_subject": {
                        "type": "string"
                      },
                      "refresh_token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "access_token",
                      "refresh_token",
                      "client_id",
                      "client_secret",
                      "email_body",
                      "email_subject",
                      "email_recipients"
                    ],
                    "type": "object"
                  },
                  "name": "gmail_send_email"
                },
                {
                  "description": "Refresh access tokens separately with automatic refresh token handling",
                  "inputschema": {
                    "properties": {
                      "client_id": {
                        "type": "string"
                      },
                      "client_secret": {
                        "type": "string"
                      },
                      "refresh_token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "refresh_token",
                      "client_id",
                      "client_secret"
                    ],
                    "type": "object"
                  },
                  "name": "gmail_refresh_token"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-server-aws-resources-python": {
          "serverid": "mcp-server-aws-resources-python",
          "self": "#/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python",
          "xid": "/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python",

          "metaurl": "#/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python/meta",
          "meta": {
            "serverid": "mcp-server-aws-resources-python",
            "self": "#/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python/meta",
            "xid": "/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:58.767778243Z",
            "modifiedat": "2025-05-12T08:17:58.767778243Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-aws-resources-python",
              "versionid": "1",
              "self": "#/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python/versions/1",
              "xid": "/mcpproviders/baryhuang/servers/mcp-server-aws-resources-python/versions/1",
              "epoch": 1,
              "name": "io.github.baryhuang/mcp-server-aws-resources-python",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation that provides running generated python code to query any AWS resources through boto3.",
              "createdat": "2025-05-12T08:17:58.767778243Z",
              "modifiedat": "2025-05-12T08:17:58.767778243Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "buryhuang/mcp-server-aws-resources"
                }
              ],
              "remotes": [],
              "repo_ref": "baryhuang/mcp-server-aws-resources-python",
              "resources": [
                {
                  "description": "A dynamic resource that provides access to AWS resources through boto3 queries",
                  "name": "aws://query_resources"
                }
              ],
              "tools": [
                {
                  "description": "Execute a boto3 code snippet to query or modify AWS resources",
                  "inputschema": {
                    "properties": {
                      "code_snippet": {
                        "description": "Python code using boto3 to query AWS resources",
                        "type": "string"
                      }
                    },
                    "required": [
                      "code_snippet"
                    ],
                    "type": "object"
                  },
                  "name": "aws_resources_query_or_modify"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "basicmachines-co": {
      "mcpproviderid": "basicmachines-co",
      "self": "#/mcpproviders/basicmachines-co",
      "xid": "/mcpproviders/basicmachines-co",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:55.751984686Z",
      "modifiedat": "2025-05-12T08:18:55.751984686Z",

      "serversurl": "#/mcpproviders/basicmachines-co/servers",
      "servers": {
        "basic-memory": {
          "serverid": "basic-memory",
          "self": "#/mcpproviders/basicmachines-co/servers/basic-memory",
          "xid": "/mcpproviders/basicmachines-co/servers/basic-memory",

          "metaurl": "#/mcpproviders/basicmachines-co/servers/basic-memory/meta",
          "meta": {
            "serverid": "basic-memory",
            "self": "#/mcpproviders/basicmachines-co/servers/basic-memory/meta",
            "xid": "/mcpproviders/basicmachines-co/servers/basic-memory/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:55.751984686Z",
            "modifiedat": "2025-05-12T08:18:55.751984686Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/basicmachines-co/servers/basic-memory/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/basicmachines-co/servers/basic-memory/versions",
          "versions": {
            "1": {
              "serverid": "basic-memory",
              "versionid": "1",
              "self": "#/mcpproviders/basicmachines-co/servers/basic-memory/versions/1",
              "xid": "/mcpproviders/basicmachines-co/servers/basic-memory/versions/1",
              "epoch": 1,
              "name": "io.github.basicmachines-co/basic-memory",
              "isdefault": true,
              "description": "Basic Memory lets you build persistent knowledge through natural conversations with Large Language Models (LLMs) like Claude, while keeping everything in simple Markdown files on your computer. It uses the Model Context Protocol (MCP) to enable any compatible LLM to read and write to your local knowledge base.",
              "createdat": "2025-05-12T08:18:55.751984686Z",
              "modifiedat": "2025-05-12T08:18:55.751984686Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "basic-memory"
                }
              ],
              "remotes": [],
              "repo_ref": "basicmachines-co/basic-memory",
              "resources": [],
              "tools": [
                {
                  "description": "Get recent activity from across the knowledge base.\n\nTimeframe supports natural language formats like:\n- \"2 days ago\"  \n- \"last week\"\n- \"yesterday\" \n- \"today\"\n- \"3 weeks ago\"\nOr standard formats like \"7d\"",
                  "inputschema": {
                    "properties": {
                      "depth": {
                        "type": "integer"
                      },
                      "max_related": {
                        "type": "integer"
                      },
                      "page": {
                        "type": "integer"
                      },
                      "page_size": {
                        "type": "integer"
                      },
                      "timeframe": {
                        "type": "string"
                      },
                      "type": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "recent_activity"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "bazinga012": {
      "mcpproviderid": "bazinga012",
      "self": "#/mcpproviders/bazinga012",
      "xid": "/mcpproviders/bazinga012",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:25.016071112Z",
      "modifiedat": "2025-05-12T08:19:25.016071112Z",

      "serversurl": "#/mcpproviders/bazinga012/servers",
      "servers": {
        "mcp_code_executor": {
          "serverid": "mcp_code_executor",
          "self": "#/mcpproviders/bazinga012/servers/mcp_code_executor",
          "xid": "/mcpproviders/bazinga012/servers/mcp_code_executor",

          "metaurl": "#/mcpproviders/bazinga012/servers/mcp_code_executor/meta",
          "meta": {
            "serverid": "mcp_code_executor",
            "self": "#/mcpproviders/bazinga012/servers/mcp_code_executor/meta",
            "xid": "/mcpproviders/bazinga012/servers/mcp_code_executor/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:25.016071112Z",
            "modifiedat": "2025-05-12T08:19:25.016071112Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/bazinga012/servers/mcp_code_executor/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/bazinga012/servers/mcp_code_executor/versions",
          "versions": {
            "1": {
              "serverid": "mcp_code_executor",
              "versionid": "1",
              "self": "#/mcpproviders/bazinga012/servers/mcp_code_executor/versions/1",
              "xid": "/mcpproviders/bazinga012/servers/mcp_code_executor/versions/1",
              "epoch": 1,
              "name": "io.github.bazinga012/mcp_code_executor",
              "isdefault": true,
              "description": "The MCP Code Executor is an MCP server that allows LLMs to execute Python code within a specified Conda environment. This enables LLMs to run code with access to libraries and dependencies defined in the Conda environment.",
              "createdat": "2025-05-12T08:19:25.016071112Z",
              "modifiedat": "2025-05-12T08:19:25.016071112Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Directory where generated code is stored",
                        "name": "CODE_STORAGE_DIR",
                        "required": true
                      },
                      {
                        "description": "Name of the Conda environment to run code in",
                        "name": "CONDA_ENV_NAME",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "/path/to/mcp_code_executor/build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp_code_executor"
                }
              ],
              "remotes": [],
              "repo_ref": "bazinga012/mcp_code_executor",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "benborla": {
      "mcpproviderid": "benborla",
      "self": "#/mcpproviders/benborla",
      "xid": "/mcpproviders/benborla",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:53.629576939Z",
      "modifiedat": "2025-05-12T08:17:53.629576939Z",

      "serversurl": "#/mcpproviders/benborla/servers",
      "servers": {
        "mcp-server-mysql": {
          "serverid": "mcp-server-mysql",
          "self": "#/mcpproviders/benborla/servers/mcp-server-mysql",
          "xid": "/mcpproviders/benborla/servers/mcp-server-mysql",

          "metaurl": "#/mcpproviders/benborla/servers/mcp-server-mysql/meta",
          "meta": {
            "serverid": "mcp-server-mysql",
            "self": "#/mcpproviders/benborla/servers/mcp-server-mysql/meta",
            "xid": "/mcpproviders/benborla/servers/mcp-server-mysql/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:53.629576939Z",
            "modifiedat": "2025-05-12T08:17:53.629576939Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/benborla/servers/mcp-server-mysql/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/benborla/servers/mcp-server-mysql/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-mysql",
              "versionid": "1",
              "self": "#/mcpproviders/benborla/servers/mcp-server-mysql/versions/1",
              "xid": "/mcpproviders/benborla/servers/mcp-server-mysql/versions/1",
              "epoch": 1,
              "name": "io.github.benborla/mcp-server-mysql",
              "isdefault": true,
              "description": "A Model Context Protocol server that provides access to MySQL databases. This server enables LLMs to inspect database schemas and execute SQL queries.",
              "createdat": "2025-05-12T08:17:53.629576939Z",
              "modifiedat": "2025-05-12T08:17:53.629576939Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "MySQL host address",
                        "name": "MYSQL_HOST",
                        "required": true
                      },
                      {
                        "description": "MySQL port number",
                        "name": "MYSQL_PORT",
                        "required": true
                      },
                      {
                        "description": "MySQL username",
                        "name": "MYSQL_USER",
                        "required": true
                      },
                      {
                        "description": "MySQL password",
                        "name": "MYSQL_PASS",
                        "required": true
                      },
                      {
                        "description": "MySQL database name (optional for multi-DB mode)",
                        "name": "MYSQL_DB",
                        "required": false
                      },
                      {
                        "description": "Allow INSERT SQL operations",
                        "name": "ALLOW_INSERT_OPERATION",
                        "required": false
                      },
                      {
                        "description": "Allow UPDATE SQL operations",
                        "name": "ALLOW_UPDATE_OPERATION",
                        "required": false
                      },
                      {
                        "description": "Allow DELETE SQL operations",
                        "name": "ALLOW_DELETE_OPERATION",
                        "required": false
                      },
                      {
                        "description": "Allow DDL SQL operations",
                        "name": "ALLOW_DDL_OPERATION",
                        "required": false
                      },
                      {
                        "description": "Schema-specific permissions for INSERT operations",
                        "name": "SCHEMA_INSERT_PERMISSIONS",
                        "required": false
                      },
                      {
                        "description": "Schema-specific permissions for UPDATE operations",
                        "name": "SCHEMA_UPDATE_PERMISSIONS",
                        "required": false
                      },
                      {
                        "description": "Schema-specific permissions for DELETE operations",
                        "name": "SCHEMA_DELETE_PERMISSIONS",
                        "required": false
                      },
                      {
                        "description": "Schema-specific permissions for DDL operations",
                        "name": "SCHEMA_DDL_PERMISSIONS",
                        "required": false
                      },
                      {
                        "description": "Enable write mode in multi-DB mode",
                        "name": "MULTI_DB_WRITE_MODE",
                        "required": false
                      },
                      {
                        "description": "Enable SSL for MySQL connection",
                        "name": "MYSQL_SSL",
                        "required": false
                      },
                      {
                        "description": "Reject unauthorized SSL certificates",
                        "name": "MYSQL_SSL_REJECT_UNAUTHORIZED",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@benborla29/mcp-server-mysql"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@benborla29/mcp-server-mysql"
                }
              ],
              "remotes": [],
              "repo_ref": "benborla/mcp-server-mysql",
              "resources": [
                {
                  "description": "Database and table name with schema suffix",
                  "mimetype": "application/json",
                  "name": "database schema",
                  "uritemplate": "{database}/{table}/schema"
                }
              ],
              "tools": [
                {
                  "description": "Run SQL queries against MySQL database (Multi-DB mode enabled) with support for: INSERT, UPDATE, DELETE, DDL and READ operations (Schema-specific permissions enabled)",
                  "inputschema": {
                    "properties": {
                      "sql": {
                        "description": "The SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sql"
                    ],
                    "type": "object"
                  },
                  "name": "mysql_query"
                }
              ],
              "version_detail": {
                "version": "0.1.18"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "bharathvaj-ganesan": {
      "mcpproviderid": "bharathvaj-ganesan",
      "self": "#/mcpproviders/bharathvaj-ganesan",
      "xid": "/mcpproviders/bharathvaj-ganesan",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:53.325688272Z",
      "modifiedat": "2025-05-12T08:17:53.325688272Z",

      "serversurl": "#/mcpproviders/bharathvaj-ganesan/servers",
      "servers": {
        "whois-mcp": {
          "serverid": "whois-mcp",
          "self": "#/mcpproviders/bharathvaj-ganesan/servers/whois-mcp",
          "xid": "/mcpproviders/bharathvaj-ganesan/servers/whois-mcp",

          "metaurl": "#/mcpproviders/bharathvaj-ganesan/servers/whois-mcp/meta",
          "meta": {
            "serverid": "whois-mcp",
            "self": "#/mcpproviders/bharathvaj-ganesan/servers/whois-mcp/meta",
            "xid": "/mcpproviders/bharathvaj-ganesan/servers/whois-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:53.325688272Z",
            "modifiedat": "2025-05-12T08:17:53.325688272Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/bharathvaj-ganesan/servers/whois-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/bharathvaj-ganesan/servers/whois-mcp/versions",
          "versions": {
            "1": {
              "serverid": "whois-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/bharathvaj-ganesan/servers/whois-mcp/versions/1",
              "xid": "/mcpproviders/bharathvaj-ganesan/servers/whois-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.bharathvaj-ganesan/whois-mcp",
              "isdefault": true,
              "description": "Model Context Protocol server for whois lookups allowing AI agents to perform WHOIS lookups and retrieve domain details.",
              "createdat": "2025-05-12T08:17:53.325688272Z",
              "modifiedat": "2025-05-12T08:17:53.325688272Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@bharathvaj/whois-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "bharathvaj-ganesan/whois-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Looksup whois information about the domain",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "whois_domain"
                },
                {
                  "description": "Looksup whois information about the Top Level Domain (TLD)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "whois_tld"
                },
                {
                  "description": "Looksup whois information about the IP",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "whois_ip"
                },
                {
                  "description": "Looksup whois information about the Autonomous System Number (ASN)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "whois_as"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "bigcodegen": {
      "mcpproviderid": "bigcodegen",
      "self": "#/mcpproviders/bigcodegen",
      "xid": "/mcpproviders/bigcodegen",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:35.070106703Z",
      "modifiedat": "2025-05-12T08:19:35.070106703Z",

      "serversurl": "#/mcpproviders/bigcodegen/servers",
      "servers": {
        "mcp-neovim-server": {
          "serverid": "mcp-neovim-server",
          "self": "#/mcpproviders/bigcodegen/servers/mcp-neovim-server",
          "xid": "/mcpproviders/bigcodegen/servers/mcp-neovim-server",

          "metaurl": "#/mcpproviders/bigcodegen/servers/mcp-neovim-server/meta",
          "meta": {
            "serverid": "mcp-neovim-server",
            "self": "#/mcpproviders/bigcodegen/servers/mcp-neovim-server/meta",
            "xid": "/mcpproviders/bigcodegen/servers/mcp-neovim-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:35.070106703Z",
            "modifiedat": "2025-05-12T08:19:35.070106703Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/bigcodegen/servers/mcp-neovim-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/bigcodegen/servers/mcp-neovim-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-neovim-server",
              "versionid": "1",
              "self": "#/mcpproviders/bigcodegen/servers/mcp-neovim-server/versions/1",
              "xid": "/mcpproviders/bigcodegen/servers/mcp-neovim-server/versions/1",
              "epoch": 1,
              "name": "io.github.bigcodegen/mcp-neovim-server",
              "isdefault": true,
              "description": "A proof of concept integration between Claude Desktop (or any client) and Neovim using Model Context Protocol (MCP) and the official neovim/node-client JavaScript library. This server leverages Vim's native text editing commands and workflows, which Claude already understands, to create a lightweight code or general purpose AI text assistance layer.",
              "createdat": "2025-05-12T08:19:35.070106703Z",
              "modifiedat": "2025-05-12T08:19:35.070106703Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [],
                  "description": "Empty prompt list since no prompts are supported",
                  "name": "empty"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Set to 'true' to enable shell command execution (e.g. !ls). Defaults to false for security.",
                        "name": "ALLOW_SHELL_COMMANDS",
                        "required": false
                      },
                      {
                        "description": "Set to the path of your Neovim socket. Defaults to '/tmp/nvim' if not specified.",
                        "name": "NVIM_SOCKET_PATH",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "mcp-neovim-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-neovim-server"
                }
              ],
              "remotes": [],
              "repo_ref": "bigcodegen/mcp-neovim-server",
              "resources": [
                {
                  "description": "Current neovim text editor session",
                  "mimetype": "text/plain",
                  "name": "Current neovim text editor session",
                  "uritemplate": "nvim://session"
                },
                {
                  "description": "List of all open buffers in the current Neovim session",
                  "mimetype": "application/json",
                  "name": "Open Neovim buffers",
                  "uritemplate": "nvim://buffers"
                }
              ],
              "tools": [
                {
                  "description": "Current VIM text editor buffer with line numbers shown",
                  "inputschema": {
                    "properties": {
                      "filename": {
                        "description": "Optional file name to view a specific buffer",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "vim_buffer"
                },
                {
                  "description": "Send a command to VIM for navigation, spot editing, and line deletion",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "description": "Vim command to execute (use ! prefix for shell commands if enabled)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "command"
                    ],
                    "type": "object"
                  },
                  "name": "vim_command"
                },
                {
                  "description": "Get the status of the VIM editor",
                  "inputschema": {
                    "properties": {
                      "filename": {
                        "description": "Optional file name to get status for a specific buffer",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "vim_status"
                },
                {
                  "description": "Edit lines using insert, replace, or replaceAll in the VIM editor",
                  "inputschema": {
                    "properties": {
                      "lines": {
                        "description": "The text content to insert or use as replacement",
                        "type": "string"
                      },
                      "mode": {
                        "description": "Whether to insert new content, replace existing content, or replace entire buffer",
                        "enum": [
                          "insert",
                          "replace",
                          "replaceAll"
                        ],
                        "type": "string"
                      },
                      "startLine": {
                        "description": "The line number where editing should begin (1-indexed)",
                        "type": "number"
                      }
                    },
                    "required": [
                      "startLine",
                      "mode",
                      "lines"
                    ],
                    "type": "object"
                  },
                  "name": "vim_edit"
                },
                {
                  "description": "Manipulate Neovim windows (split, vsplit, close, navigate)",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "description": "Window manipulation command: split or vsplit to create new window, only to keep just current window, close to close current window, or wincmd with h/j/k/l to navigate between windows",
                        "enum": [
                          "split",
                          "vsplit",
                          "only",
                          "close",
                          "wincmd h",
                          "wincmd j",
                          "wincmd k",
                          "wincmd l"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "command"
                    ],
                    "type": "object"
                  },
                  "name": "vim_window"
                },
                {
                  "description": "Set a mark at a specific position",
                  "inputschema": {
                    "properties": {
                      "column": {
                        "description": "The column number where the mark should be placed (0-indexed)",
                        "type": "number"
                      },
                      "line": {
                        "description": "The line number where the mark should be placed (1-indexed)",
                        "type": "number"
                      },
                      "mark": {
                        "description": "Single lowercase letter [a-z] to use as the mark name",
                        "pattern": "^[a-z]$",
                        "type": "string"
                      }
                    },
                    "required": [
                      "mark",
                      "line",
                      "column"
                    ],
                    "type": "object"
                  },
                  "name": "vim_mark"
                },
                {
                  "description": "Set content of a register",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "The text content to store in the specified register",
                        "type": "string"
                      },
                      "register": {
                        "description": "Register name - a lowercase letter [a-z] or double-quote [\"] for the unnamed register",
                        "pattern": "^[a-z\"]$",
                        "type": "string"
                      }
                    },
                    "required": [
                      "register",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "vim_register"
                },
                {
                  "description": "Make a visual selection",
                  "inputschema": {
                    "properties": {
                      "endColumn": {
                        "description": "The ending column number for visual selection (0-indexed)",
                        "type": "number"
                      },
                      "endLine": {
                        "description": "The ending line number for visual selection (1-indexed)",
                        "type": "number"
                      },
                      "startColumn": {
                        "description": "The starting column number for visual selection (0-indexed)",
                        "type": "number"
                      },
                      "startLine": {
                        "description": "The starting line number for visual selection (1-indexed)",
                        "type": "number"
                      }
                    },
                    "required": [
                      "startLine",
                      "startColumn",
                      "endLine",
                      "endColumn"
                    ],
                    "type": "object"
                  },
                  "name": "vim_visual"
                }
              ],
              "version_detail": {
                "version": "0.4.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "bitrise-io": {
      "mcpproviderid": "bitrise-io",
      "self": "#/mcpproviders/bitrise-io",
      "xid": "/mcpproviders/bitrise-io",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:49.474070603Z",
      "modifiedat": "2025-05-12T08:17:49.474070603Z",

      "serversurl": "#/mcpproviders/bitrise-io/servers",
      "servers": {
        "bitrise-mcp": {
          "serverid": "bitrise-mcp",
          "self": "#/mcpproviders/bitrise-io/servers/bitrise-mcp",
          "xid": "/mcpproviders/bitrise-io/servers/bitrise-mcp",

          "metaurl": "#/mcpproviders/bitrise-io/servers/bitrise-mcp/meta",
          "meta": {
            "serverid": "bitrise-mcp",
            "self": "#/mcpproviders/bitrise-io/servers/bitrise-mcp/meta",
            "xid": "/mcpproviders/bitrise-io/servers/bitrise-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:49.474070603Z",
            "modifiedat": "2025-05-12T08:17:49.474070603Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/bitrise-io/servers/bitrise-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/bitrise-io/servers/bitrise-mcp/versions",
          "versions": {
            "1": {
              "serverid": "bitrise-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/bitrise-io/servers/bitrise-mcp/versions/1",
              "xid": "/mcpproviders/bitrise-io/servers/bitrise-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.bitrise-io/bitrise-mcp",
              "isdefault": true,
              "description": "MCP Server for the Bitrise API, enabling app management, build operations, artifact management and more.",
              "createdat": "2025-05-12T08:17:49.474070603Z",
              "modifiedat": "2025-05-12T08:17:49.474070603Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Bitrise API token for authentication",
                        "name": "BITRISE_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--from",
                      "git+https://github.com/bitrise-io/bitrise-mcp@v1.1.0",
                      "bitrise-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "bitrise-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "bitrise-io/bitrise-mcp",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "box-community": {
      "mcpproviderid": "box-community",
      "self": "#/mcpproviders/box-community",
      "xid": "/mcpproviders/box-community",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:33.906802798Z",
      "modifiedat": "2025-05-12T08:18:33.906802798Z",

      "serversurl": "#/mcpproviders/box-community/servers",
      "servers": {
        "mcp-server-box": {
          "serverid": "mcp-server-box",
          "self": "#/mcpproviders/box-community/servers/mcp-server-box",
          "xid": "/mcpproviders/box-community/servers/mcp-server-box",

          "metaurl": "#/mcpproviders/box-community/servers/mcp-server-box/meta",
          "meta": {
            "serverid": "mcp-server-box",
            "self": "#/mcpproviders/box-community/servers/mcp-server-box/meta",
            "xid": "/mcpproviders/box-community/servers/mcp-server-box/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:33.906802798Z",
            "modifiedat": "2025-05-12T08:18:33.906802798Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/box-community/servers/mcp-server-box/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/box-community/servers/mcp-server-box/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-box",
              "versionid": "1",
              "self": "#/mcpproviders/box-community/servers/mcp-server-box/versions/1",
              "xid": "/mcpproviders/box-community/servers/mcp-server-box/versions/1",
              "epoch": 1,
              "name": "io.github.box-community/mcp-server-box",
              "isdefault": true,
              "description": "MCP Server Box is a Python project that integrates with the Box API to perform various operations such as file search, text extraction, AI-based querying, and data extraction. It leverages the box-sdk-gen library and provides a set of tools to interact with Box files and folders. The Model Context Protocol (MCP) is used to facilitate seamless integration with the Box API, enabling efficient and scalable operations on Box files and folders.",
              "createdat": "2025-05-12T08:18:33.906802798Z",
              "modifiedat": "2025-05-12T08:18:33.906802798Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp-server-box"
                }
              ],
              "remotes": [],
              "repo_ref": "box-community/mcp-server-box",
              "resources": [],
              "tools": [
                {
                  "description": "Get your current user information and check connection status.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "box_who_am_i"
                },
                {
                  "description": "Start the Box application authorization process.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "box_authorize_app_tool"
                },
                {
                  "description": "Search for files in Box.",
                  "inputschema": {
                    "properties": {
                      "ancestor_folder_ids": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "file_extensions": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "query": {
                        "type": "string"
                      },
                      "where_to_look_for_query": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "box_search_tool"
                },
                {
                  "description": "Read the text content of a Box file.",
                  "inputschema": {
                    "properties": {
                      "file_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "file_id"
                    ],
                    "type": "object"
                  },
                  "name": "box_read_tool"
                },
                {
                  "description": "Ask Box AI about a file.",
                  "inputschema": {
                    "properties": {
                      "file_id": {
                        "type": "string"
                      },
                      "prompt": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "file_id",
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "box_ask_ai_tool"
                },
                {
                  "description": "Locate a folder by name.",
                  "inputschema": {
                    "properties": {
                      "folder_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "folder_name"
                    ],
                    "type": "object"
                  },
                  "name": "box_search_folder_by_name"
                },
                {
                  "description": "Extract data from a file using AI.",
                  "inputschema": {
                    "properties": {
                      "fields": {
                        "type": "string"
                      },
                      "file_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "file_id",
                      "fields"
                    ],
                    "type": "object"
                  },
                  "name": "box_ai_extract_data"
                },
                {
                  "description": "List folder contents.",
                  "inputschema": {
                    "properties": {
                      "folder_id": {
                        "type": "string"
                      },
                      "is_recursive": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "folder_id",
                      "is_recursive"
                    ],
                    "type": "object"
                  },
                  "name": "box_list_folder_content_by_folder_id"
                },
                {
                  "description": "Create, update, or delete folders in Box.",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "type": "string"
                      },
                      "description": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "folder_id": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "name": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "parent_id": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "recursive": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "box_manage_folder_tool"
                },
                {
                  "description": "Upload content as a file to Box.",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "file_name": {
                        "type": "string"
                      },
                      "folder_id": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "content",
                      "file_name"
                    ],
                    "type": "object"
                  },
                  "name": "box_upload_file_tool"
                },
                {
                  "description": "Download a file from Box and return its content.",
                  "inputschema": {
                    "properties": {
                      "file_id": {
                        "type": "string"
                      },
                      "save_file": {
                        "type": "boolean"
                      },
                      "save_path": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "file_id"
                    ],
                    "type": "object"
                  },
                  "name": "box_download_file_tool"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "browserbase": {
      "mcpproviderid": "browserbase",
      "self": "#/mcpproviders/browserbase",
      "xid": "/mcpproviders/browserbase",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:16.852248733Z",
      "modifiedat": "2025-05-12T08:19:16.852248733Z",

      "serversurl": "#/mcpproviders/browserbase/servers",
      "servers": {
        "mcp-server-browserbase": {
          "serverid": "mcp-server-browserbase",
          "self": "#/mcpproviders/browserbase/servers/mcp-server-browserbase",
          "xid": "/mcpproviders/browserbase/servers/mcp-server-browserbase",

          "metaurl": "#/mcpproviders/browserbase/servers/mcp-server-browserbase/meta",
          "meta": {
            "serverid": "mcp-server-browserbase",
            "self": "#/mcpproviders/browserbase/servers/mcp-server-browserbase/meta",
            "xid": "/mcpproviders/browserbase/servers/mcp-server-browserbase/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:16.852248733Z",
            "modifiedat": "2025-05-12T08:19:16.852248733Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/browserbase/servers/mcp-server-browserbase/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/browserbase/servers/mcp-server-browserbase/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-browserbase",
              "versionid": "1",
              "self": "#/mcpproviders/browserbase/servers/mcp-server-browserbase/versions/1",
              "xid": "/mcpproviders/browserbase/servers/mcp-server-browserbase/versions/1",
              "epoch": 1,
              "name": "io.github.browserbase/mcp-server-browserbase",
              "isdefault": true,
              "description": "This server provides cloud browser automation capabilities using Browserbase, Puppeteer, and Stagehand. It enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a cloud browser environment.",
              "createdat": "2025-05-12T08:19:16.852248733Z",
              "modifiedat": "2025-05-12T08:19:16.852248733Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Browserbase",
                        "name": "BROWSERBASE_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Project ID for Browserbase",
                        "name": "BROWSERBASE_PROJECT_ID",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "server.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@browserbasehq/mcp-browserbase"
                }
              ],
              "remotes": [],
              "repo_ref": "browserbase/mcp-server-browserbase",
              "resources": [
                {
                  "description": "Screenshot resources identified by name",
                  "mimetype": "image/png",
                  "name": "Screenshot",
                  "uritemplate": "screenshot://{name}"
                }
              ],
              "tools": [
                {
                  "description": "Create a new cloud browser session using Browserbase",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "browserbase_create_session"
                },
                {
                  "description": "Navigate to a URL",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "browserbase_navigate"
                },
                {
                  "description": "Takes a screenshot of the current page. Use this tool to learn where you are on the page when controlling the browser with Stagehand. Only use this tool when the other tools are not sufficient to get the information you need.",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "browserbase_screenshot"
                },
                {
                  "description": "Click an element on the page",
                  "inputschema": {
                    "properties": {
                      "selector": {
                        "description": "CSS selector for element to click",
                        "type": "string"
                      }
                    },
                    "required": [
                      "selector"
                    ],
                    "type": "object"
                  },
                  "name": "browserbase_click"
                },
                {
                  "description": "Fill out an input field",
                  "inputschema": {
                    "properties": {
                      "selector": {
                        "description": "CSS selector for input field",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value to fill",
                        "type": "string"
                      }
                    },
                    "required": [
                      "selector",
                      "value"
                    ],
                    "type": "object"
                  },
                  "name": "browserbase_fill"
                },
                {
                  "description": "Extract all text content from the current page",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "browserbase_get_text"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "burningion": {
      "mcpproviderid": "burningion",
      "self": "#/mcpproviders/burningion",
      "xid": "/mcpproviders/burningion",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:53.85326923Z",
      "modifiedat": "2025-05-12T08:18:53.85326923Z",

      "serversurl": "#/mcpproviders/burningion/servers",
      "servers": {
        "video-editing-mcp": {
          "serverid": "video-editing-mcp",
          "self": "#/mcpproviders/burningion/servers/video-editing-mcp",
          "xid": "/mcpproviders/burningion/servers/video-editing-mcp",

          "metaurl": "#/mcpproviders/burningion/servers/video-editing-mcp/meta",
          "meta": {
            "serverid": "video-editing-mcp",
            "self": "#/mcpproviders/burningion/servers/video-editing-mcp/meta",
            "xid": "/mcpproviders/burningion/servers/video-editing-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:53.85326923Z",
            "modifiedat": "2025-05-12T08:18:53.85326923Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/burningion/servers/video-editing-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/burningion/servers/video-editing-mcp/versions",
          "versions": {
            "1": {
              "serverid": "video-editing-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/burningion/servers/video-editing-mcp/versions/1",
              "xid": "/mcpproviders/burningion/servers/video-editing-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.burningion/video-editing-mcp",
              "isdefault": true,
              "description": "Server to upload, edit, search, and generate videos using Video Jungle and LLM integration with custom vj:// URI scheme and video editing tools.",
              "createdat": "2025-05-12T08:18:53.85326923Z",
              "modifiedat": "2025-05-12T08:18:53.85326923Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Enable searching local Photos app videos on MacOS",
                        "name": "LOAD_PHOTOS_DB",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "YOURAPIKEY"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uvicorn",
                  "package_name": "video-editor-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "burningion/video-editing-mcp",
              "resources": [
                {
                  "description": "Access individual videos and projects via custom vj:// URI scheme.",
                  "name": "videos",
                  "uritemplate": "vj://{video_or_project_id}"
                }
              ],
              "tools": [
                {
                  "description": "Add a video from a URL and returns a vj:// URI to reference the video file.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "add-video"
                },
                {
                  "description": "Search videos using embeddings and keywords, returning video matches.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search-videos"
                },
                {
                  "description": "Generate a rendered video edit from a set of video files.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "generate-edit-from-videos"
                },
                {
                  "description": "Generate an edit from a single input video file.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "generate-edit-from-single-video"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "bytebase": {
      "mcpproviderid": "bytebase",
      "self": "#/mcpproviders/bytebase",
      "xid": "/mcpproviders/bytebase",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:44.762370802Z",
      "modifiedat": "2025-05-12T08:18:44.762370802Z",

      "serversurl": "#/mcpproviders/bytebase/servers",
      "servers": {
        "dbhub": {
          "serverid": "dbhub",
          "self": "#/mcpproviders/bytebase/servers/dbhub",
          "xid": "/mcpproviders/bytebase/servers/dbhub",

          "metaurl": "#/mcpproviders/bytebase/servers/dbhub/meta",
          "meta": {
            "serverid": "dbhub",
            "self": "#/mcpproviders/bytebase/servers/dbhub/meta",
            "xid": "/mcpproviders/bytebase/servers/dbhub/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:44.762370802Z",
            "modifiedat": "2025-05-12T08:18:44.762370802Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/bytebase/servers/dbhub/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/bytebase/servers/dbhub/versions",
          "versions": {
            "1": {
              "serverid": "dbhub",
              "versionid": "1",
              "self": "#/mcpproviders/bytebase/servers/dbhub/versions/1",
              "xid": "/mcpproviders/bytebase/servers/dbhub/versions/1",
              "epoch": 1,
              "name": "io.github.bytebase/dbhub",
              "isdefault": true,
              "description": "DBHub is a universal database gateway implementing the Model Context Protocol (MCP) server interface. This gateway allows MCP-compatible clients to connect to and explore different databases.",
              "createdat": "2025-05-12T08:18:44.762370802Z",
              "modifiedat": "2025-05-12T08:18:44.762370802Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [],
                  "description": "Generate SQL statements for the database",
                  "name": "generate_sql"
                },
                {
                  "arguments": [],
                  "description": "Explain database elements",
                  "name": "explain_db"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--transport",
                      "sse",
                      "--port",
                      "8080",
                      "--dsn",
                      "postgres://user:password@localhost:5432/dbname?sslmode=disable"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "bytebase/dbhub"
                }
              ],
              "remotes": [],
              "repo_ref": "bytebase/dbhub",
              "resources": [
                {
                  "description": "Database schemas resource",
                  "mimetype": "application/json",
                  "name": "schemas",
                  "uritemplate": "db://schemas"
                },
                {
                  "description": "Tables in a given schema",
                  "mimetype": "application/json",
                  "name": "tables_in_schema",
                  "uritemplate": "db://schemas/{schemaName}/tables"
                },
                {
                  "description": "Structure of a table in a schema",
                  "mimetype": "application/json",
                  "name": "table_structure_in_schema",
                  "uritemplate": "db://schemas/{schemaName}/tables/{tableName}"
                },
                {
                  "description": "Indexes in a table",
                  "mimetype": "application/json",
                  "name": "indexes_in_table",
                  "uritemplate": "db://schemas/{schemaName}/tables/{tableName}/indexes"
                },
                {
                  "description": "Stored procedures in a schema",
                  "mimetype": "application/json",
                  "name": "procedures_in_schema",
                  "uritemplate": "db://schemas/{schemaName}/procedures"
                },
                {
                  "description": "Details of a stored procedure",
                  "mimetype": "application/json",
                  "name": "procedure_details_in_schema",
                  "uritemplate": "db://schemas/{schemaName}/procedures/{procedureName}"
                }
              ],
              "tools": [
                {
                  "description": "Execute SQL command on the database",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "execute_sql"
                },
                {
                  "description": "List available database connectors",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_connectors"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "calvernaz": {
      "mcpproviderid": "calvernaz",
      "self": "#/mcpproviders/calvernaz",
      "xid": "/mcpproviders/calvernaz",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:25.11207692Z",
      "modifiedat": "2025-05-12T08:18:25.11207692Z",

      "serversurl": "#/mcpproviders/calvernaz/servers",
      "servers": {
        "alphavantage": {
          "serverid": "alphavantage",
          "self": "#/mcpproviders/calvernaz/servers/alphavantage",
          "xid": "/mcpproviders/calvernaz/servers/alphavantage",

          "metaurl": "#/mcpproviders/calvernaz/servers/alphavantage/meta",
          "meta": {
            "serverid": "alphavantage",
            "self": "#/mcpproviders/calvernaz/servers/alphavantage/meta",
            "xid": "/mcpproviders/calvernaz/servers/alphavantage/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:25.11207692Z",
            "modifiedat": "2025-05-12T08:18:25.11207692Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/calvernaz/servers/alphavantage/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/calvernaz/servers/alphavantage/versions",
          "versions": {
            "1": {
              "serverid": "alphavantage",
              "versionid": "1",
              "self": "#/mcpproviders/calvernaz/servers/alphavantage/versions/1",
              "xid": "/mcpproviders/calvernaz/servers/alphavantage/versions/1",
              "epoch": 1,
              "name": "io.github.calvernaz/alphavantage",
              "isdefault": true,
              "description": "A MCP server for the stock market data API, Alphavantage API.",
              "createdat": "2025-05-12T08:18:25.11207692Z",
              "modifiedat": "2025-05-12T08:18:25.11207692Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "ALPHAVANTAGE_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "\u003cDIRECTORY-OF-CLONED-PROJECT\u003e/alphavantage",
                      "run",
                      "alphavantage"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "\u003cunknown\u003e"
                }
              ],
              "remotes": [],
              "repo_ref": "calvernaz/alphavantage",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "carterlasalle": {
      "mcpproviderid": "carterlasalle",
      "self": "#/mcpproviders/carterlasalle",
      "xid": "/mcpproviders/carterlasalle",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:49.961244176Z",
      "modifiedat": "2025-05-12T08:17:49.961244176Z",

      "serversurl": "#/mcpproviders/carterlasalle/servers",
      "servers": {
        "mac_messages_mcp": {
          "serverid": "mac_messages_mcp",
          "self": "#/mcpproviders/carterlasalle/servers/mac_messages_mcp",
          "xid": "/mcpproviders/carterlasalle/servers/mac_messages_mcp",

          "metaurl": "#/mcpproviders/carterlasalle/servers/mac_messages_mcp/meta",
          "meta": {
            "serverid": "mac_messages_mcp",
            "self": "#/mcpproviders/carterlasalle/servers/mac_messages_mcp/meta",
            "xid": "/mcpproviders/carterlasalle/servers/mac_messages_mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:49.961244176Z",
            "modifiedat": "2025-05-12T08:17:49.961244176Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/carterlasalle/servers/mac_messages_mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/carterlasalle/servers/mac_messages_mcp/versions",
          "versions": {
            "1": {
              "serverid": "mac_messages_mcp",
              "versionid": "1",
              "self": "#/mcpproviders/carterlasalle/servers/mac_messages_mcp/versions/1",
              "xid": "/mcpproviders/carterlasalle/servers/mac_messages_mcp/versions/1",
              "epoch": 1,
              "name": "io.github.carterlasalle/mac_messages_mcp",
              "isdefault": true,
              "description": "A Python bridge for interacting with the macOS Messages app using MCP (Multiple Context Protocol).",
              "createdat": "2025-05-12T08:17:49.961244176Z",
              "modifiedat": "2025-05-12T08:17:49.961244176Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "mac-messages-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "mac-messages-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "carterlasalle/mac_messages_mcp",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "chaindead": {
      "mcpproviderid": "chaindead",
      "self": "#/mcpproviders/chaindead",
      "xid": "/mcpproviders/chaindead",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:21.212858502Z",
      "modifiedat": "2025-05-12T08:18:21.212858502Z",

      "serversurl": "#/mcpproviders/chaindead/servers",
      "servers": {
        "telegram-mcp": {
          "serverid": "telegram-mcp",
          "self": "#/mcpproviders/chaindead/servers/telegram-mcp",
          "xid": "/mcpproviders/chaindead/servers/telegram-mcp",

          "metaurl": "#/mcpproviders/chaindead/servers/telegram-mcp/meta",
          "meta": {
            "serverid": "telegram-mcp",
            "self": "#/mcpproviders/chaindead/servers/telegram-mcp/meta",
            "xid": "/mcpproviders/chaindead/servers/telegram-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:21.212858502Z",
            "modifiedat": "2025-05-12T08:18:21.212858502Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/chaindead/servers/telegram-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/chaindead/servers/telegram-mcp/versions",
          "versions": {
            "1": {
              "serverid": "telegram-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/chaindead/servers/telegram-mcp/versions/1",
              "xid": "/mcpproviders/chaindead/servers/telegram-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.chaindead/telegram-mcp",
              "isdefault": true,
              "description": "The server is a bridge between the Telegram API and the AI assistants and is based on the Model Context Protocol. It provides capabilities such as getting current account information, listing dialogs, marking dialogs as read, retrieving messages, and sending draft messages.",
              "createdat": "2025-05-12T08:18:21.212858502Z",
              "modifiedat": "2025-05-12T08:18:21.212858502Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [],
                  "description": "Prompts for managing messages such as checking unread messages, summarizing, analyzing, and preparing draft responses.",
                  "name": "Message Management"
                },
                {
                  "arguments": [],
                  "description": "Prompts for analyzing dialogs and suggesting folder structures or categorization.",
                  "name": "Organization"
                },
                {
                  "arguments": [],
                  "description": "Prompts for monitoring chats, drafting responses, and checking unanswered questions.",
                  "name": "Communication"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Telegram API ID",
                        "name": "TG_APP_ID",
                        "required": true
                      },
                      {
                        "description": "Telegram API hash",
                        "name": "TG_API_HASH",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@chaindead/telegram-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@chaindead/telegram-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "chaindead/telegram-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Get current account information",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "tg_me"
                },
                {
                  "description": "List dialogs with optional unread filter",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "tg_dialogs"
                },
                {
                  "description": "Mark dialog as read",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "tg_read"
                },
                {
                  "description": "Retrieve messages from specific dialog",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "tg_dialog"
                },
                {
                  "description": "Send draft messages to any dialog",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "tg_send"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "chargebee": {
      "mcpproviderid": "chargebee",
      "self": "#/mcpproviders/chargebee",
      "xid": "/mcpproviders/chargebee",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:16.865333273Z",
      "modifiedat": "2025-05-12T08:18:16.865333273Z",

      "serversurl": "#/mcpproviders/chargebee/servers",
      "servers": {
        "agentkit": {
          "serverid": "agentkit",
          "self": "#/mcpproviders/chargebee/servers/agentkit",
          "xid": "/mcpproviders/chargebee/servers/agentkit",

          "metaurl": "#/mcpproviders/chargebee/servers/agentkit/meta",
          "meta": {
            "serverid": "agentkit",
            "self": "#/mcpproviders/chargebee/servers/agentkit/meta",
            "xid": "/mcpproviders/chargebee/servers/agentkit/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:16.865333273Z",
            "modifiedat": "2025-05-12T08:18:16.865333273Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/chargebee/servers/agentkit/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/chargebee/servers/agentkit/versions",
          "versions": {
            "1": {
              "serverid": "agentkit",
              "versionid": "1",
              "self": "#/mcpproviders/chargebee/servers/agentkit/versions/1",
              "xid": "/mcpproviders/chargebee/servers/agentkit/versions/1",
              "epoch": 1,
              "name": "io.github.chargebee/agentkit",
              "isdefault": true,
              "description": "MCP server for interacting with Chargebee",
              "createdat": "2025-05-12T08:18:16.865333273Z",
              "modifiedat": "2025-05-12T08:18:16.865333273Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "chargebee-agentkit"
                }
              ],
              "remotes": [],
              "repo_ref": "chargebee/agentkit",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "chatmcp": {
      "mcpproviderid": "chatmcp",
      "self": "#/mcpproviders/chatmcp",
      "xid": "/mcpproviders/chatmcp",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:12.396136064Z",
      "modifiedat": "2025-05-12T08:19:12.396136064Z",

      "serversurl": "#/mcpproviders/chatmcp/servers",
      "servers": {
        "mcp-server-chatsum": {
          "serverid": "mcp-server-chatsum",
          "self": "#/mcpproviders/chatmcp/servers/mcp-server-chatsum",
          "xid": "/mcpproviders/chatmcp/servers/mcp-server-chatsum",

          "metaurl": "#/mcpproviders/chatmcp/servers/mcp-server-chatsum/meta",
          "meta": {
            "serverid": "mcp-server-chatsum",
            "self": "#/mcpproviders/chatmcp/servers/mcp-server-chatsum/meta",
            "xid": "/mcpproviders/chatmcp/servers/mcp-server-chatsum/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:12.396136064Z",
            "modifiedat": "2025-05-12T08:19:12.396136064Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/chatmcp/servers/mcp-server-chatsum/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/chatmcp/servers/mcp-server-chatsum/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-chatsum",
              "versionid": "1",
              "self": "#/mcpproviders/chatmcp/servers/mcp-server-chatsum/versions/1",
              "xid": "/mcpproviders/chatmcp/servers/mcp-server-chatsum/versions/1",
              "epoch": 1,
              "name": "io.github.chatmcp/mcp-server-chatsum",
              "isdefault": true,
              "description": "This MCP Server is used to summarize your chat messages.",
              "createdat": "2025-05-12T08:19:12.396136064Z",
              "modifiedat": "2025-05-12T08:19:12.396136064Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "CHAT_DB_PATH"
                      }
                    ],
                    "positional_arguments": [
                      "build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "chatmcp/mcp-server-chatsum",
              "resources": [],
              "tools": [
                {
                  "description": "Query chat messages with given parameters and summarize chat messages based on the query prompt.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "query_chat_messages"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "chigwell": {
      "mcpproviderid": "chigwell",
      "self": "#/mcpproviders/chigwell",
      "xid": "/mcpproviders/chigwell",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:39.363947625Z",
      "modifiedat": "2025-05-12T08:17:39.363947625Z",

      "serversurl": "#/mcpproviders/chigwell/servers",
      "servers": {
        "telegram-mcp": {
          "serverid": "telegram-mcp",
          "self": "#/mcpproviders/chigwell/servers/telegram-mcp",
          "xid": "/mcpproviders/chigwell/servers/telegram-mcp",

          "metaurl": "#/mcpproviders/chigwell/servers/telegram-mcp/meta",
          "meta": {
            "serverid": "telegram-mcp",
            "self": "#/mcpproviders/chigwell/servers/telegram-mcp/meta",
            "xid": "/mcpproviders/chigwell/servers/telegram-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:39.363947625Z",
            "modifiedat": "2025-05-12T08:17:39.363947625Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/chigwell/servers/telegram-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/chigwell/servers/telegram-mcp/versions",
          "versions": {
            "1": {
              "serverid": "telegram-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/chigwell/servers/telegram-mcp/versions/1",
              "xid": "/mcpproviders/chigwell/servers/telegram-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.chigwell/telegram-mcp",
              "isdefault": true,
              "description": "A full-featured Telegram integration for Claude, Cursor, and any MCP-compatible client, powered by Telethon and the Model Context Protocol (MCP). This project lets you interact with your Telegram account programmatically, automating everything from messaging to group management.",
              "createdat": "2025-05-12T08:17:39.363947625Z",
              "modifiedat": "2025-05-12T08:17:39.363947625Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "unknown"
                },
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "unknown",
                  "package_name": "unknown"
                }
              ],
              "remotes": [],
              "repo_ref": "chigwell/telegram-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Paginated list of chats",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_chats"
                },
                {
                  "description": "List chats with metadata and filtering",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_chats"
                },
                {
                  "description": "Detailed info about a chat",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_chat"
                },
                {
                  "description": "Create a new group",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_group"
                },
                {
                  "description": "Create a channel or supergroup",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_channel"
                },
                {
                  "description": "Change chat/group/channel title",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "edit_chat_title"
                },
                {
                  "description": "Remove chat/group/channel photo",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_chat_photo"
                },
                {
                  "description": "Leave a group or channel",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "leave_chat"
                },
                {
                  "description": "List all participants",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_participants"
                },
                {
                  "description": "List all admins",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_admins"
                },
                {
                  "description": "List all banned users",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_banned_users"
                },
                {
                  "description": "Promote user to admin",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "promote_admin"
                },
                {
                  "description": "Demote admin to user",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "demote_admin"
                },
                {
                  "description": "Ban user",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "ban_user"
                },
                {
                  "description": "Unban user",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "unban_user"
                },
                {
                  "description": "Get invite link",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_invite_link"
                },
                {
                  "description": "Export invite link",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "export_chat_invite"
                },
                {
                  "description": "Join chat by invite hash",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "import_chat_invite"
                },
                {
                  "description": "Join chat by invite link",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "join_chat_by_link"
                },
                {
                  "description": "Paginated messages",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_messages"
                },
                {
                  "description": "Filtered messages",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_messages"
                },
                {
                  "description": "Send a message",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "send_message"
                },
                {
                  "description": "Reply to a message",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "reply_to_message"
                },
                {
                  "description": "Edit your message",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "edit_message"
                },
                {
                  "description": "Delete a message",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_message"
                },
                {
                  "description": "Forward a message",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "forward_message"
                },
                {
                  "description": "Pin a message",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "pin_message"
                },
                {
                  "description": "Unpin a message",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "unpin_message"
                },
                {
                  "description": "Mark all as read",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "mark_as_read"
                },
                {
                  "description": "Context around a message",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_message_context"
                },
                {
                  "description": "Full chat history",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_history"
                },
                {
                  "description": "List pinned messages",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_pinned_messages"
                },
                {
                  "description": "Most recent message with a contact",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_last_interaction"
                },
                {
                  "description": "List all contacts",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_contacts"
                },
                {
                  "description": "Search contacts",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_contacts"
                },
                {
                  "description": "Add a contact",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "add_contact"
                },
                {
                  "description": "Delete a contact",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_contact"
                },
                {
                  "description": "Block a user",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "block_user"
                },
                {
                  "description": "Unblock a user",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "unblock_user"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "chroma-core": {
      "mcpproviderid": "chroma-core",
      "self": "#/mcpproviders/chroma-core",
      "xid": "/mcpproviders/chroma-core",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:00.23712639Z",
      "modifiedat": "2025-05-12T08:18:00.23712639Z",

      "serversurl": "#/mcpproviders/chroma-core/servers",
      "servers": {
        "chroma-mcp": {
          "serverid": "chroma-mcp",
          "self": "#/mcpproviders/chroma-core/servers/chroma-mcp",
          "xid": "/mcpproviders/chroma-core/servers/chroma-mcp",

          "metaurl": "#/mcpproviders/chroma-core/servers/chroma-mcp/meta",
          "meta": {
            "serverid": "chroma-mcp",
            "self": "#/mcpproviders/chroma-core/servers/chroma-mcp/meta",
            "xid": "/mcpproviders/chroma-core/servers/chroma-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:00.23712639Z",
            "modifiedat": "2025-05-12T08:18:00.23712639Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/chroma-core/servers/chroma-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/chroma-core/servers/chroma-mcp/versions",
          "versions": {
            "1": {
              "serverid": "chroma-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/chroma-core/servers/chroma-mcp/versions/1",
              "xid": "/mcpproviders/chroma-core/servers/chroma-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.chroma-core/chroma-mcp",
              "isdefault": true,
              "description": "This server provides data retrieval capabilities powered by Chroma, enabling AI models to create collections over generated data and user inputs, and retrieve that data using vector search, full text search, metadata filtering, and more.",
              "createdat": "2025-05-12T08:18:00.23712639Z",
              "modifiedat": "2025-05-12T08:18:00.23712639Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Type of Chroma client to use (ephemeral, persistent, http, cloud)",
                        "name": "CHROMA_CLIENT_TYPE",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "--client-type",
                      "ephemeral"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@chroma-core/chroma-mcp"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:8000"
                }
              ],
              "repo_ref": "chroma-core/chroma-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "List all collections with pagination support",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "offset": {
                        "type": [
                          "integer",
                          "null"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "name": "chroma_list_collections"
                },
                {
                  "description": "Create a new collection with optional HNSW configuration",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "ef_construction": {
                        "type": "integer"
                      },
                      "ef_search": {
                        "type": "integer"
                      },
                      "max_neighbors": {
                        "type": "integer"
                      },
                      "space": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_create_collection"
                },
                {
                  "description": "View a sample of documents in a collection",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_peek_collection"
                },
                {
                  "description": "Get detailed information about a collection",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_get_collection_info"
                },
                {
                  "description": "Get the number of documents in a collection",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_get_collection_count"
                },
                {
                  "description": "Update a collection's name or metadata",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "new_metadata": {
                        "type": "object"
                      },
                      "new_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_modify_collection"
                },
                {
                  "description": "Delete a collection",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_delete_collection"
                },
                {
                  "description": "Add documents with optional metadata and custom IDs",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "documents": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "ids": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "metadatas": {
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "collection_name",
                      "documents"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_add_documents"
                },
                {
                  "description": "Query documents using semantic search with advanced filtering",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "include": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "n_results": {
                        "type": "integer"
                      },
                      "query_texts": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "where": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection_name",
                      "query_texts"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_query_documents"
                },
                {
                  "description": "Retrieve documents by IDs or filters with pagination",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "ids": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "include": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "offset": {
                        "type": "integer"
                      },
                      "where": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_get_documents"
                },
                {
                  "description": "Update existing documents' content, metadata, or embeddings",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "documents": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "embeddings": {
                        "items": {
                          "items": {
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "type": "array"
                      },
                      "ids": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "metadatas": {
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "collection_name",
                      "ids"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_update_documents"
                },
                {
                  "description": "Delete specific documents from a collection",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "ids": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "collection_name",
                      "ids"
                    ],
                    "type": "object"
                  },
                  "name": "chroma_delete_documents"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ckreiling": {
      "mcpproviderid": "ckreiling",
      "self": "#/mcpproviders/ckreiling",
      "xid": "/mcpproviders/ckreiling",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:38.737785554Z",
      "modifiedat": "2025-05-12T08:17:38.737785554Z",

      "serversurl": "#/mcpproviders/ckreiling/servers",
      "servers": {
        "mcp-server-docker": {
          "serverid": "mcp-server-docker",
          "self": "#/mcpproviders/ckreiling/servers/mcp-server-docker",
          "xid": "/mcpproviders/ckreiling/servers/mcp-server-docker",

          "metaurl": "#/mcpproviders/ckreiling/servers/mcp-server-docker/meta",
          "meta": {
            "serverid": "mcp-server-docker",
            "self": "#/mcpproviders/ckreiling/servers/mcp-server-docker/meta",
            "xid": "/mcpproviders/ckreiling/servers/mcp-server-docker/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:38.737785554Z",
            "modifiedat": "2025-05-12T08:17:38.737785554Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ckreiling/servers/mcp-server-docker/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ckreiling/servers/mcp-server-docker/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-docker",
              "versionid": "1",
              "self": "#/mcpproviders/ckreiling/servers/mcp-server-docker/versions/1",
              "xid": "/mcpproviders/ckreiling/servers/mcp-server-docker/versions/1",
              "epoch": 1,
              "name": "io.github.ckreiling/mcp-server-docker",
              "isdefault": true,
              "description": "An MCP server for managing Docker with natural language! Compose containers, introspect and debug running containers, and manage persistent data with Docker volumes.",
              "createdat": "2025-05-12T08:17:38.737785554Z",
              "modifiedat": "2025-05-12T08:17:38.737785554Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Unique name of the project",
                      "name": "name",
                      "required": true
                    },
                    {
                      "description": "Describe containers you want",
                      "name": "containers",
                      "required": true
                    }
                  ],
                  "description": "Treat the LLM like a Docker Compose manager",
                  "name": "docker_compose"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "run",
                      "-i",
                      "--rm",
                      "-v",
                      "/var/run/docker.sock:/var/run/docker.sock",
                      "mcp-server-docker:latest"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "mcp-server-docker:latest"
                },
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "unknown",
                  "package_name": "unknown"
                }
              ],
              "remotes": [],
              "repo_ref": "ckreiling/mcp-server-docker",
              "resources": [
                {
                  "description": "Live logs for container {container.name}",
                  "mimetype": "text/plain",
                  "name": "Logs for container",
                  "uritemplate": "docker://containers/{id}/logs"
                },
                {
                  "description": "Live resource usage stats for container {container.name}",
                  "mimetype": "application/json",
                  "name": "Stats for container",
                  "uritemplate": "docker://containers/{id}/stats"
                }
              ],
              "tools": [
                {
                  "description": "List all Docker containers",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_containers"
                },
                {
                  "description": "Create a new Docker container",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_container"
                },
                {
                  "description": "Run an image in a new Docker container (preferred over `create_container` + `start_container`)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "run_container"
                },
                {
                  "description": "Stop and remove a container, then run a new container. Fails if the container does not exist.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "recreate_container"
                },
                {
                  "description": "Start a Docker container",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "start_container"
                },
                {
                  "description": "Fetch logs for a Docker container",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "fetch_container_logs"
                },
                {
                  "description": "Stop a Docker container",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "stop_container"
                },
                {
                  "description": "Remove a Docker container",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "remove_container"
                },
                {
                  "description": "List Docker images",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_images"
                },
                {
                  "description": "Pull a Docker image",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "pull_image"
                },
                {
                  "description": "Push a Docker image",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "push_image"
                },
                {
                  "description": "Build a Docker image from a Dockerfile",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "build_image"
                },
                {
                  "description": "Remove a Docker image",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "remove_image"
                },
                {
                  "description": "List Docker networks",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_networks"
                },
                {
                  "description": "Create a Docker network",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_network"
                },
                {
                  "description": "Remove a Docker network",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "remove_network"
                },
                {
                  "description": "List Docker volumes",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_volumes"
                },
                {
                  "description": "Create a Docker volume",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_volume"
                },
                {
                  "description": "Remove a Docker volume",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "remove_volume"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "clemensv": {
      "mcpproviderid": "clemensv",
      "self": "#/mcpproviders/clemensv",
      "xid": "/mcpproviders/clemensv",
      "epoch": 3,
      "createdat": "2025-05-12T08:20:16.051231221Z",
      "modifiedat": "2025-05-12T08:20:19.161397894Z",

      "serversurl": "#/mcpproviders/clemensv/servers",
      "servers": {
        "gh1": {
          "serverid": "gh1",
          "self": "#/mcpproviders/clemensv/servers/gh1",
          "xid": "/mcpproviders/clemensv/servers/gh1",

          "metaurl": "#/mcpproviders/clemensv/servers/gh1/meta",
          "meta": {
            "serverid": "gh1",
            "self": "#/mcpproviders/clemensv/servers/gh1/meta",
            "xid": "/mcpproviders/clemensv/servers/gh1/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:16.051231221Z",
            "modifiedat": "2025-05-12T08:20:16.051231221Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/clemensv/servers/gh1/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/clemensv/servers/gh1/versions",
          "versions": {
            "1": {
              "serverid": "gh1",
              "versionid": "1",
              "self": "#/mcpproviders/clemensv/servers/gh1/versions/1",
              "xid": "/mcpproviders/clemensv/servers/gh1/versions/1",
              "epoch": 1,
              "name": "io.github.clemensv/mcp-servers",
              "isdefault": true,
              "description": "GitHub integration MCP server providing tooling and resource discovery via GitHub APIs",
              "createdat": "2025-05-12T08:20:16.051231221Z",
              "modifiedat": "2025-05-12T08:20:16.051231221Z",
              "ancestor": "1",
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Port to run the server on",
                        "name": "PORT",
                        "required": false
                      },
                      {
                        "description": "Personal access token or GitHub App token for API access",
                        "name": "GITHUB_TOKEN",
                        "required": true
                      }
                    ],
                    "sub_commands": [
                      {
                        "description": "Start the GitHub MCP server",
                        "name": "start"
                      }
                    ]
                  },
                  "license": "MIT",
                  "name": "npm",
                  "package_name": "mcp-github-server"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "https://api.github.com"
                }
              ],
              "version_detail": {
                "version": "1.0.2"
              }
            }
          },
          "versionscount": 1
        },
        "google-maps": {
          "serverid": "google-maps",
          "self": "#/mcpproviders/clemensv/servers/google-maps",
          "xid": "/mcpproviders/clemensv/servers/google-maps",

          "metaurl": "#/mcpproviders/clemensv/servers/google-maps/meta",
          "meta": {
            "serverid": "google-maps",
            "self": "#/mcpproviders/clemensv/servers/google-maps/meta",
            "xid": "/mcpproviders/clemensv/servers/google-maps/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:19.161397894Z",
            "modifiedat": "2025-05-12T08:20:19.161397894Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/clemensv/servers/google-maps/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/clemensv/servers/google-maps/versions",
          "versions": {
            "1": {
              "serverid": "google-maps",
              "versionid": "1",
              "self": "#/mcpproviders/clemensv/servers/google-maps/versions/1",
              "xid": "/mcpproviders/clemensv/servers/google-maps/versions/1",
              "epoch": 1,
              "name": "io.github.clemensv/mcp-servers/google-maps",
              "isdefault": true,
              "description": "Google Maps integration MCP server providing geospatial tooling and data access using the Google Maps Platform APIs",
              "createdat": "2025-05-12T08:20:19.161397894Z",
              "modifiedat": "2025-05-12T08:20:19.161397894Z",
              "ancestor": "1",
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Port to run the server on",
                        "name": "PORT",
                        "required": false
                      },
                      {
                        "description": "API key for accessing Google Maps Platform services",
                        "name": "GOOGLE_MAPS_API_KEY",
                        "required": true
                      }
                    ],
                    "sub_commands": [
                      {
                        "description": "Start the Google Maps MCP server",
                        "name": "start"
                      }
                    ]
                  },
                  "license": "MIT",
                  "name": "npm",
                  "package_name": "mcp-google-maps-server"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "https://maps.googleapis.com"
                }
              ],
              "version_detail": {
                "version": "1.0.2"
              }
            }
          },
          "versionscount": 1
        },
        "postgres": {
          "serverid": "postgres",
          "self": "#/mcpproviders/clemensv/servers/postgres",
          "xid": "/mcpproviders/clemensv/servers/postgres",

          "metaurl": "#/mcpproviders/clemensv/servers/postgres/meta",
          "meta": {
            "serverid": "postgres",
            "self": "#/mcpproviders/clemensv/servers/postgres/meta",
            "xid": "/mcpproviders/clemensv/servers/postgres/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:17.597394866Z",
            "modifiedat": "2025-05-12T08:20:17.597394866Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/clemensv/servers/postgres/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/clemensv/servers/postgres/versions",
          "versions": {
            "1": {
              "serverid": "postgres",
              "versionid": "1",
              "self": "#/mcpproviders/clemensv/servers/postgres/versions/1",
              "xid": "/mcpproviders/clemensv/servers/postgres/versions/1",
              "epoch": 1,
              "name": "io.github.clemensv/mcp-servers/postgres",
              "isdefault": true,
              "description": "MCP server for resource discovery and metadata publication from PostgreSQL databases",
              "createdat": "2025-05-12T08:20:17.597394866Z",
              "modifiedat": "2025-05-12T08:20:17.597394866Z",
              "ancestor": "1",
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "PostgreSQL server hostname or IP",
                        "name": "PGHOST",
                        "required": true
                      },
                      {
                        "description": "PostgreSQL server port",
                        "name": "PGPORT",
                        "required": false
                      },
                      {
                        "description": "Username for PostgreSQL authentication",
                        "name": "PGUSER",
                        "required": true
                      },
                      {
                        "description": "Password for PostgreSQL authentication",
                        "name": "PGPASSWORD",
                        "required": true
                      },
                      {
                        "description": "Target PostgreSQL database",
                        "name": "PGDATABASE",
                        "required": true
                      }
                    ],
                    "sub_commands": [
                      {
                        "description": "Start the PostgreSQL MCP server",
                        "name": "start"
                      }
                    ]
                  },
                  "license": "MIT",
                  "name": "npm",
                  "package_name": "mcp-postgres-server"
                }
              ],
              "remotes": [
                {
                  "transporttype": "postgres",
                  "url": "postgresql://${PGHOST}:${PGPORT}/${PGDATABASE}"
                }
              ],
              "version_detail": {
                "version": "1.0.2"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 3
    },
    "cloudflare": {
      "mcpproviderid": "cloudflare",
      "self": "#/mcpproviders/cloudflare",
      "xid": "/mcpproviders/cloudflare",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:08.77838476Z",
      "modifiedat": "2025-05-12T08:22:08.77838476Z",

      "serversurl": "#/mcpproviders/cloudflare/servers",
      "servers": {
        "mcp-server-cloudflare": {
          "serverid": "mcp-server-cloudflare",
          "self": "#/mcpproviders/cloudflare/servers/mcp-server-cloudflare",
          "xid": "/mcpproviders/cloudflare/servers/mcp-server-cloudflare",

          "metaurl": "#/mcpproviders/cloudflare/servers/mcp-server-cloudflare/meta",
          "meta": {
            "serverid": "mcp-server-cloudflare",
            "self": "#/mcpproviders/cloudflare/servers/mcp-server-cloudflare/meta",
            "xid": "/mcpproviders/cloudflare/servers/mcp-server-cloudflare/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:08.77838476Z",
            "modifiedat": "2025-05-12T08:22:08.77838476Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/cloudflare/servers/mcp-server-cloudflare/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/cloudflare/servers/mcp-server-cloudflare/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-cloudflare",
              "versionid": "1",
              "self": "#/mcpproviders/cloudflare/servers/mcp-server-cloudflare/versions/1",
              "xid": "/mcpproviders/cloudflare/servers/mcp-server-cloudflare/versions/1",
              "epoch": 1,
              "name": "io.github.cloudflare/mcp-server-cloudflare",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) server for Cloudflare's API enabling natural language interaction with Cloudflare account resources such as Workers, KV namespaces, R2 buckets, and D1 databases.",
              "createdat": "2025-05-12T08:22:08.77838476Z",
              "modifiedat": "2025-05-12T08:22:08.77838476Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Name of the MCP server",
                        "name": "MCP_SERVER_NAME",
                        "required": false
                      },
                      {
                        "description": "Version of the MCP server",
                        "name": "MCP_SERVER_VERSION",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "mcp-remote",
                      "https://observability.mcp.cloudflare.com/sse"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@cloudflare/mcp-server-cloudflare"
                }
              ],
              "remotes": [
                {
                  "transporttype": "https",
                  "url": "https://observability.mcp.cloudflare.com/sse"
                }
              ],
              "repo_ref": "cloudflare/mcp-server-cloudflare",
              "resources": [],
              "tools": [
                {
                  "description": "List all Workers in your account",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "worker_list"
                },
                {
                  "description": "Get a Worker's script content",
                  "inputschema": {
                    "properties": {
                      "scriptName": {
                        "description": "The name of the worker script to retrieve",
                        "type": "string"
                      }
                    },
                    "required": [
                      "scriptName"
                    ],
                    "type": "object"
                  },
                  "name": "worker_get_worker"
                },
                {
                  "description": "Analyze recent logs for a Cloudflare Worker by worker name",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "worker_logs_by_worker_name"
                },
                {
                  "description": "Analyze recent logs across all workers for a specific request by Cloudflare Ray ID",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "worker_logs_by_ray_id"
                },
                {
                  "description": "Get available telemetry keys for a Cloudflare Worker",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "worker_logs_keys"
                },
                {
                  "description": "List all accounts in your Cloudflare account",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "accounts_list"
                },
                {
                  "description": "Set active account to be used for tool calls that require accountId",
                  "inputschema": {
                    "properties": {
                      "activeAccountIdParam": {
                        "description": "The accountId present in the users Cloudflare account, that should be the active accountId.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "activeAccountIdParam"
                    ],
                    "type": "object"
                  },
                  "name": "set_active_account"
                },
                {
                  "description": "List all of the D1 databases in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "Optional database name filter",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "page": {
                        "type": "number"
                      },
                      "per_page": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "page",
                      "per_page"
                    ],
                    "type": "object"
                  },
                  "name": "d1_databases_list"
                },
                {
                  "description": "Create a new D1 database in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "primary_location_hint": {
                        "description": "Optional primary location hint",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "d1_database_create"
                },
                {
                  "description": "Delete a d1 database in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "database_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "database_id"
                    ],
                    "type": "object"
                  },
                  "name": "d1_database_delete"
                },
                {
                  "description": "Get a D1 database in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "database_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "database_id"
                    ],
                    "type": "object"
                  },
                  "name": "d1_database_get"
                },
                {
                  "description": "Query a D1 database in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "database_id": {
                        "type": "string"
                      },
                      "params": {
                        "type": [
                          "object",
                          "null"
                        ]
                      },
                      "sql": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "database_id",
                      "sql"
                    ],
                    "type": "object"
                  },
                  "name": "d1_database_query"
                },
                {
                  "description": "List all of the kv namespaces in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "params": {
                        "optional": true,
                        "type": "object"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "kv_namespaces_list"
                },
                {
                  "description": "Create a new kv namespace in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "title"
                    ],
                    "type": "object"
                  },
                  "name": "kv_namespace_create"
                },
                {
                  "description": "Delete a kv namespace in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "namespace_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "namespace_id"
                    ],
                    "type": "object"
                  },
                  "name": "kv_namespace_delete"
                },
                {
                  "description": "Get details of a kv namespace in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "namespace_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "namespace_id"
                    ],
                    "type": "object"
                  },
                  "name": "kv_namespace_get"
                },
                {
                  "description": "Update the title of a kv namespace in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "namespace_id": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "namespace_id",
                      "title"
                    ],
                    "type": "object"
                  },
                  "name": "kv_namespace_update"
                },
                {
                  "description": "List r2 buckets in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "cursor": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "direction": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "name_contains": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "per_page": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "start_after": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "r2_buckets_list"
                },
                {
                  "description": "Create a new r2 bucket in your Cloudflare account",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "r2_bucket_create"
                },
                {
                  "description": "Get details about a specific R2 bucket",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "r2_bucket_get"
                },
                {
                  "description": "Delete an R2 bucket",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "r2_bucket_delete"
                },
                {
                  "description": "Start or reset the container",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "container_initialize"
                },
                {
                  "description": "Ping the container for liveliness",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "container_ping"
                },
                {
                  "description": "Run a command in a container and return the results from stdout",
                  "inputschema": {
                    "properties": {
                      "args": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "args"
                    ],
                    "type": "object"
                  },
                  "name": "container_exec"
                },
                {
                  "description": "Delete file and its contents",
                  "inputschema": {
                    "properties": {
                      "args": {
                        "properties": {
                          "path": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "args"
                    ],
                    "type": "object"
                  },
                  "name": "container_file_delete"
                },
                {
                  "description": "Create a new file with the provided contents, overwriting the file if it already exists",
                  "inputschema": {
                    "properties": {
                      "args": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "args"
                    ],
                    "type": "object"
                  },
                  "name": "container_file_write"
                },
                {
                  "description": "List working directory file tree",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "container_files_list"
                },
                {
                  "description": "Read a specific file or directory",
                  "inputschema": {
                    "properties": {
                      "args": {
                        "properties": {
                          "path": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "args"
                    ],
                    "type": "object"
                  },
                  "name": "container_file_read"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "co-browser": {
      "mcpproviderid": "co-browser",
      "self": "#/mcpproviders/co-browser",
      "xid": "/mcpproviders/co-browser",
      "epoch": 2,
      "createdat": "2025-05-12T08:18:59.715250288Z",
      "modifiedat": "2025-05-12T08:19:00.700624369Z",

      "serversurl": "#/mcpproviders/co-browser/servers",
      "servers": {
        "attestable-mcp-server": {
          "serverid": "attestable-mcp-server",
          "self": "#/mcpproviders/co-browser/servers/attestable-mcp-server",
          "xid": "/mcpproviders/co-browser/servers/attestable-mcp-server",

          "metaurl": "#/mcpproviders/co-browser/servers/attestable-mcp-server/meta",
          "meta": {
            "serverid": "attestable-mcp-server",
            "self": "#/mcpproviders/co-browser/servers/attestable-mcp-server/meta",
            "xid": "/mcpproviders/co-browser/servers/attestable-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:00.700624369Z",
            "modifiedat": "2025-05-12T08:19:00.700624369Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/co-browser/servers/attestable-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/co-browser/servers/attestable-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "attestable-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/co-browser/servers/attestable-mcp-server/versions/1",
              "xid": "/mcpproviders/co-browser/servers/attestable-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.co-browser/attestable-mcp-server",
              "isdefault": true,
              "description": "remotely attestable MCP server that uses a trusted execution environment and RA-TLS for remote attestation between MCP clients and servers.",
              "createdat": "2025-05-12T08:19:00.700624369Z",
              "modifiedat": "2025-05-12T08:19:00.700624369Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "gsc-attestable-mcp-server"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://0.0.0.0:8000"
                }
              ],
              "repo_ref": "co-browser/attestable-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Fetches a website and returns its content",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "description": "URL to fetch",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "fetch"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "browser-use-mcp-server": {
          "serverid": "browser-use-mcp-server",
          "self": "#/mcpproviders/co-browser/servers/browser-use-mcp-server",
          "xid": "/mcpproviders/co-browser/servers/browser-use-mcp-server",

          "metaurl": "#/mcpproviders/co-browser/servers/browser-use-mcp-server/meta",
          "meta": {
            "serverid": "browser-use-mcp-server",
            "self": "#/mcpproviders/co-browser/servers/browser-use-mcp-server/meta",
            "xid": "/mcpproviders/co-browser/servers/browser-use-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:59.715250288Z",
            "modifiedat": "2025-05-12T08:18:59.715250288Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/co-browser/servers/browser-use-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/co-browser/servers/browser-use-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "browser-use-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/co-browser/servers/browser-use-mcp-server/versions/1",
              "xid": "/mcpproviders/co-browser/servers/browser-use-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.co-browser/browser-use-mcp-server",
              "isdefault": true,
              "description": "An MCP server that enables AI agents to control web browsers using browser-use.",
              "createdat": "2025-05-12T08:18:59.715250288Z",
              "modifiedat": "2025-05-12T08:18:59.715250288Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for OpenAI",
                        "name": "OPENAI_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "run",
                      "server",
                      "--port",
                      "8000",
                      "--stdio",
                      "--proxy-port",
                      "9000"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "browser-use-mcp-server"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:8000/sse"
                }
              ],
              "repo_ref": "co-browser/browser-use-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "codacy": {
      "mcpproviderid": "codacy",
      "self": "#/mcpproviders/codacy",
      "xid": "/mcpproviders/codacy",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:21.404070879Z",
      "modifiedat": "2025-05-12T08:19:21.404070879Z",

      "serversurl": "#/mcpproviders/codacy/servers",
      "servers": {
        "codacy-mcp-server": {
          "serverid": "codacy-mcp-server",
          "self": "#/mcpproviders/codacy/servers/codacy-mcp-server",
          "xid": "/mcpproviders/codacy/servers/codacy-mcp-server",

          "metaurl": "#/mcpproviders/codacy/servers/codacy-mcp-server/meta",
          "meta": {
            "serverid": "codacy-mcp-server",
            "self": "#/mcpproviders/codacy/servers/codacy-mcp-server/meta",
            "xid": "/mcpproviders/codacy/servers/codacy-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:21.404070879Z",
            "modifiedat": "2025-05-12T08:19:21.404070879Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/codacy/servers/codacy-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/codacy/servers/codacy-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "codacy-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/codacy/servers/codacy-mcp-server/versions/1",
              "xid": "/mcpproviders/codacy/servers/codacy-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.codacy/codacy-mcp-server",
              "isdefault": true,
              "description": "MCP Server for the Codacy API, enabling access to repositories, files, quality, coverage, security and more.",
              "createdat": "2025-05-12T08:19:21.404070879Z",
              "modifiedat": "2025-05-12T08:19:21.404070879Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Codacy Account API Token",
                        "name": "CODACY_ACCOUNT_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@codacy/codacy-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "codacy/codacy-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "List repositories in an organization with pagination support.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_organization_repositories"
                },
                {
                  "description": "Primary tool to list security items/issues/vulnerabilities/findings related to organization security and risk management (SRM).",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_search_organization_srm_items"
                },
                {
                  "description": "Tool to search security items in a repository.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_search_repository_srm_items"
                },
                {
                  "description": "Lists and filters code quality issues in a repository.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_repository_issues"
                },
                {
                  "description": "List pull requests from a repository that the user has access to.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_repository_pull_requests"
                },
                {
                  "description": "List files in a repository with pagination support.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_files"
                },
                {
                  "description": "Get the issue list for a file in a repository.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_file_issues"
                },
                {
                  "description": "Get coverage information for a file in the head commit of a repository branch.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_file_coverage"
                },
                {
                  "description": "Get diff coverage information for all files in a pull request.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_pull_request_files_coverage"
                },
                {
                  "description": "Returns the human-readable Git diff of a pull request.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_pull_request_git_diff"
                },
                {
                  "description": "Returns a list of issues found in a pull request.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_pull_request_issues"
                },
                {
                  "description": "Get repository with analysis data.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_repository_with_analysis"
                },
                {
                  "description": "Get file with analysis data.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_file_with_analysis"
                },
                {
                  "description": "Get the list of duplication clones for a file in a repository.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_file_clones"
                },
                {
                  "description": "Get repository pull request details.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_repository_pull_request"
                },
                {
                  "description": "Get details of a specific issue.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_issue"
                },
                {
                  "description": "Get pattern details.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_get_pattern"
                },
                {
                  "description": "List patterns for repository tools.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_repository_tool_patterns"
                },
                {
                  "description": "List available tools.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_tools"
                },
                {
                  "description": "List tools for a repository.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_repository_tools"
                },
                {
                  "description": "List organizations.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_list_organizations"
                },
                {
                  "description": "Uses Codacy's command-line tool to analyze code.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "codacy_cli_analyze"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "comet-ml": {
      "mcpproviderid": "comet-ml",
      "self": "#/mcpproviders/comet-ml",
      "xid": "/mcpproviders/comet-ml",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:55.161909699Z",
      "modifiedat": "2025-05-12T08:19:55.161909699Z",

      "serversurl": "#/mcpproviders/comet-ml/servers",
      "servers": {
        "opik-mcp": {
          "serverid": "opik-mcp",
          "self": "#/mcpproviders/comet-ml/servers/opik-mcp",
          "xid": "/mcpproviders/comet-ml/servers/opik-mcp",

          "metaurl": "#/mcpproviders/comet-ml/servers/opik-mcp/meta",
          "meta": {
            "serverid": "opik-mcp",
            "self": "#/mcpproviders/comet-ml/servers/opik-mcp/meta",
            "xid": "/mcpproviders/comet-ml/servers/opik-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:55.161909699Z",
            "modifiedat": "2025-05-12T08:19:55.161909699Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/comet-ml/servers/opik-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/comet-ml/servers/opik-mcp/versions",
          "versions": {
            "1": {
              "serverid": "opik-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/comet-ml/servers/opik-mcp/versions/1",
              "xid": "/mcpproviders/comet-ml/servers/opik-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.comet-ml/opik-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) implementation for the Opik platform. It provides a unified interface for interacting with Opik's capabilities, supporting multiple transport mechanisms for flexible integration into various environments.",
              "createdat": "2025-05-12T08:19:55.161909699Z",
              "modifiedat": "2025-05-12T08:19:55.161909699Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Environment variables from .env file",
                        "name": ".env",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "build/index.js",
                      "--debug",
                      "true"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@comet-ml/opik-mcp"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:3001"
                }
              ],
              "repo_ref": "comet-ml/opik-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Get information about the Opik server configuration",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "random_string": {
                        "description": "Dummy parameter for no-parameter tools",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_server_info"
                },
                {
                  "description": "Get information about the Opik server configuration",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "random_string": {
                        "description": "Dummy parameter for no-parameter tools",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "mcp__get_server_info"
                }
              ],
              "version_detail": {
                "version": "0.0.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "cr7258": {
      "mcpproviderid": "cr7258",
      "self": "#/mcpproviders/cr7258",
      "xid": "/mcpproviders/cr7258",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:19.926492617Z",
      "modifiedat": "2025-05-12T08:18:19.926492617Z",

      "serversurl": "#/mcpproviders/cr7258/servers",
      "servers": {
        "elasticsearch-mcp-server": {
          "serverid": "elasticsearch-mcp-server",
          "self": "#/mcpproviders/cr7258/servers/elasticsearch-mcp-server",
          "xid": "/mcpproviders/cr7258/servers/elasticsearch-mcp-server",

          "metaurl": "#/mcpproviders/cr7258/servers/elasticsearch-mcp-server/meta",
          "meta": {
            "serverid": "elasticsearch-mcp-server",
            "self": "#/mcpproviders/cr7258/servers/elasticsearch-mcp-server/meta",
            "xid": "/mcpproviders/cr7258/servers/elasticsearch-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:19.926492617Z",
            "modifiedat": "2025-05-12T08:18:19.926492617Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/cr7258/servers/elasticsearch-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/cr7258/servers/elasticsearch-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "elasticsearch-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/cr7258/servers/elasticsearch-mcp-server/versions/1",
              "xid": "/mcpproviders/cr7258/servers/elasticsearch-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.cr7258/elasticsearch-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation that provides Elasticsearch and OpenSearch interaction. This server enables searching documents, analyzing indices, and managing cluster through a set of tools.",
              "createdat": "2025-05-12T08:18:19.926492617Z",
              "modifiedat": "2025-05-12T08:18:19.926492617Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Elasticsearch hosts URL",
                        "name": "ELASTICSEARCH_HOSTS",
                        "required": true
                      },
                      {
                        "description": "Elasticsearch username",
                        "name": "ELASTICSEARCH_USERNAME",
                        "required": true
                      },
                      {
                        "description": "Elasticsearch password",
                        "name": "ELASTICSEARCH_PASSWORD",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "@smithery/cli",
                      "install",
                      "elasticsearch-mcp-server",
                      "--client",
                      "claude"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "elasticsearch-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "cr7258/elasticsearch-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Perform a general HTTP API request. Use this tool for any Elasticsearch/OpenSearch API that does not have a dedicated tool.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "general_api_request"
                },
                {
                  "description": "List all indices.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_indices"
                },
                {
                  "description": "Returns information (mappings, settings, aliases) about one or more indices.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_index"
                },
                {
                  "description": "Create a new index.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_index"
                },
                {
                  "description": "Delete an index.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_index"
                },
                {
                  "description": "Search for documents.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_documents"
                },
                {
                  "description": "Creates or updates a document in the index.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "index_document"
                },
                {
                  "description": "Get a document by ID.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_document"
                },
                {
                  "description": "Delete a document by ID.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_document"
                },
                {
                  "description": "Deletes documents matching the provided query.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_by_query"
                },
                {
                  "description": "Returns basic information about the health of the cluster.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_cluster_health"
                },
                {
                  "description": "Returns high-level overview of cluster statistics.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_cluster_stats"
                },
                {
                  "description": "List all aliases.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_aliases"
                },
                {
                  "description": "Get alias information for a specific index.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_alias"
                },
                {
                  "description": "Create or update an alias for a specific index.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "put_alias"
                },
                {
                  "description": "Delete an alias for a specific index.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_alias"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "cyberchitta": {
      "mcpproviderid": "cyberchitta",
      "self": "#/mcpproviders/cyberchitta",
      "xid": "/mcpproviders/cyberchitta",
      "epoch": 2,
      "createdat": "2025-05-12T08:17:48.313545519Z",
      "modifiedat": "2025-05-12T08:17:48.531735539Z",

      "serversurl": "#/mcpproviders/cyberchitta/servers",
      "servers": {
        "llm-context.py": {
          "serverid": "llm-context.py",
          "self": "#/mcpproviders/cyberchitta/servers/llm-context.py",
          "xid": "/mcpproviders/cyberchitta/servers/llm-context.py",

          "metaurl": "#/mcpproviders/cyberchitta/servers/llm-context.py/meta",
          "meta": {
            "serverid": "llm-context.py",
            "self": "#/mcpproviders/cyberchitta/servers/llm-context.py/meta",
            "xid": "/mcpproviders/cyberchitta/servers/llm-context.py/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:48.313545519Z",
            "modifiedat": "2025-05-12T08:17:48.313545519Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/cyberchitta/servers/llm-context.py/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/cyberchitta/servers/llm-context.py/versions",
          "versions": {
            "1": {
              "serverid": "llm-context.py",
              "versionid": "1",
              "self": "#/mcpproviders/cyberchitta/servers/llm-context.py/versions/1",
              "xid": "/mcpproviders/cyberchitta/servers/llm-context.py/versions/1",
              "epoch": 1,
              "name": "io.github.cyberchitta/llm-context",
              "isdefault": true,
              "description": "A tool that helps developers quickly inject relevant content from code/text projects into Large Language Model chat interfaces, providing direct LLM integration through the Model Context Protocol (MCP).",
              "createdat": "2025-05-12T08:17:48.313545519Z",
              "modifiedat": "2025-05-12T08:17:48.313545519Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--from",
                      "llm-context",
                      "lc-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "unspecified",
                  "package_name": "llm-context"
                }
              ],
              "remotes": [],
              "repo_ref": "cyberchitta/llm-context.py",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "scrapling-fetch-mcp": {
          "serverid": "scrapling-fetch-mcp",
          "self": "#/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp",
          "xid": "/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp",

          "metaurl": "#/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp/meta",
          "meta": {
            "serverid": "scrapling-fetch-mcp",
            "self": "#/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp/meta",
            "xid": "/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:48.531735539Z",
            "modifiedat": "2025-05-12T08:17:48.531735539Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp/versions",
          "versions": {
            "1": {
              "serverid": "scrapling-fetch-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp/versions/1",
              "xid": "/mcpproviders/cyberchitta/servers/scrapling-fetch-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.cyberchitta/scrapling-fetch-mcp",
              "isdefault": true,
              "description": "An MCP server that helps AI assistants access text content from websites that implement bot detection, bridging the gap between what you can see in your browser and what the AI can access.",
              "createdat": "2025-05-12T08:17:48.531735539Z",
              "modifiedat": "2025-05-12T08:17:48.531735539Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "scrapling-fetch-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "scrapling-fetch-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "cyberchitta/scrapling-fetch-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves complete web pages with pagination support",
                  "inputschema": {
                    "properties": {
                      "max_length": {
                        "type": "integer"
                      },
                      "mode": {
                        "type": "string"
                      },
                      "start_index": {
                        "type": "integer"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url",
                      "mode"
                    ],
                    "type": "object"
                  },
                  "name": "s-fetch-page"
                },
                {
                  "description": "Extracts content matching regex patterns with surrounding context",
                  "inputschema": {
                    "properties": {
                      "context_chars": {
                        "type": "integer"
                      },
                      "mode": {
                        "type": "string"
                      },
                      "search_pattern": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url",
                      "mode",
                      "search_pattern",
                      "context_chars"
                    ],
                    "type": "object"
                  },
                  "name": "s-fetch-pattern"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "da-okazaki": {
      "mcpproviderid": "da-okazaki",
      "self": "#/mcpproviders/da-okazaki",
      "xid": "/mcpproviders/da-okazaki",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:10.167686196Z",
      "modifiedat": "2025-05-12T08:19:10.167686196Z",

      "serversurl": "#/mcpproviders/da-okazaki/servers",
      "servers": {
        "mcp-neo4j-server": {
          "serverid": "mcp-neo4j-server",
          "self": "#/mcpproviders/da-okazaki/servers/mcp-neo4j-server",
          "xid": "/mcpproviders/da-okazaki/servers/mcp-neo4j-server",

          "metaurl": "#/mcpproviders/da-okazaki/servers/mcp-neo4j-server/meta",
          "meta": {
            "serverid": "mcp-neo4j-server",
            "self": "#/mcpproviders/da-okazaki/servers/mcp-neo4j-server/meta",
            "xid": "/mcpproviders/da-okazaki/servers/mcp-neo4j-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:10.167686196Z",
            "modifiedat": "2025-05-12T08:19:10.167686196Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/da-okazaki/servers/mcp-neo4j-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/da-okazaki/servers/mcp-neo4j-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-neo4j-server",
              "versionid": "1",
              "self": "#/mcpproviders/da-okazaki/servers/mcp-neo4j-server/versions/1",
              "xid": "/mcpproviders/da-okazaki/servers/mcp-neo4j-server/versions/1",
              "epoch": 1,
              "name": "io.github.da-okazaki/mcp-neo4j-server",
              "isdefault": true,
              "description": "An MCP server that provides integration between Neo4j graph database and Claude Desktop, enabling graph database operations through natural language interactions.",
              "createdat": "2025-05-12T08:19:10.167686196Z",
              "modifiedat": "2025-05-12T08:19:10.167686196Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Neo4j database URI (default: bolt://localhost:7687)",
                        "name": "NEO4J_URI",
                        "required": false
                      },
                      {
                        "description": "Neo4j username (default: neo4j)",
                        "name": "NEO4J_USERNAME",
                        "required": false
                      },
                      {
                        "description": "Neo4j password (required)",
                        "name": "NEO4J_PASSWORD",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "@alanse/mcp-neo4j-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@alanse/mcp-neo4j-server"
                }
              ],
              "remotes": [],
              "repo_ref": "da-okazaki/mcp-neo4j-server",
              "resources": [],
              "tools": [
                {
                  "description": "Execute a Cypher query on Neo4j database",
                  "inputschema": {
                    "properties": {
                      "params": {
                        "additionalProperties": true,
                        "description": "Query parameters",
                        "type": "object"
                      },
                      "query": {
                        "description": "Cypher query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_query"
                },
                {
                  "description": "Create a new node in Neo4j",
                  "inputschema": {
                    "properties": {
                      "label": {
                        "description": "Node label",
                        "type": "string"
                      },
                      "properties": {
                        "additionalProperties": true,
                        "description": "Node properties",
                        "type": "object"
                      }
                    },
                    "required": [
                      "label",
                      "properties"
                    ],
                    "type": "object"
                  },
                  "name": "create_node"
                },
                {
                  "description": "Create a relationship between two nodes",
                  "inputschema": {
                    "properties": {
                      "fromNodeId": {
                        "description": "ID of the source node",
                        "type": "number"
                      },
                      "properties": {
                        "additionalProperties": true,
                        "description": "Relationship properties",
                        "type": "object"
                      },
                      "toNodeId": {
                        "description": "ID of the target node",
                        "type": "number"
                      },
                      "type": {
                        "description": "Relationship type",
                        "type": "string"
                      }
                    },
                    "required": [
                      "fromNodeId",
                      "toNodeId",
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "create_relationship"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "daobataotie": {
      "mcpproviderid": "daobataotie",
      "self": "#/mcpproviders/daobataotie",
      "xid": "/mcpproviders/daobataotie",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:44.593346841Z",
      "modifiedat": "2025-05-12T08:21:44.593346841Z",

      "serversurl": "#/mcpproviders/daobataotie/servers",
      "servers": {
        "mssql-mcp": {
          "serverid": "mssql-mcp",
          "self": "#/mcpproviders/daobataotie/servers/mssql-mcp",
          "xid": "/mcpproviders/daobataotie/servers/mssql-mcp",

          "metaurl": "#/mcpproviders/daobataotie/servers/mssql-mcp/meta",
          "meta": {
            "serverid": "mssql-mcp",
            "self": "#/mcpproviders/daobataotie/servers/mssql-mcp/meta",
            "xid": "/mcpproviders/daobataotie/servers/mssql-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:44.593346841Z",
            "modifiedat": "2025-05-12T08:21:44.593346841Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/daobataotie/servers/mssql-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/daobataotie/servers/mssql-mcp/versions",
          "versions": {
            "1": {
              "serverid": "mssql-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/daobataotie/servers/mssql-mcp/versions/1",
              "xid": "/mcpproviders/daobataotie/servers/mssql-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.daobataotie/mssql-mcp",
              "isdefault": true,
              "description": "MSSQL MCP Server provides database interaction and business intelligence capabilities, enabling running SQL queries, analyzing business data, and automatically generating business insight memos.",
              "createdat": "2025-05-12T08:21:44.593346841Z",
              "modifiedat": "2025-05-12T08:21:44.593346841Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "用于生成初始数据的主题",
                      "name": "topic",
                      "required": true
                    }
                  ],
                  "description": "一个用于在 MSSQL 数据库中创建初始数据并演示 MSSQL MCP 服务器功能的提示",
                  "name": "mcp-demo"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "src/server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "daobataotie/mssql-mcp",
              "resources": [
                {
                  "description": "一个实时更新的业务洞察文档",
                  "mimetype": "text/plain",
                  "name": "业务洞察备忘录",
                  "uritemplate": "memo://insights"
                }
              ],
              "tools": [
                {
                  "description": "在 MSSQL 数据库上执行 SELECT 查询",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "要执行的 SELECT SQL 查询",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "read_query"
                },
                {
                  "description": "在 MSSQL 数据库上执行 INSERT、UPDATE 或 DELETE 查询",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "要执行的 SQL 查询",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "write_query"
                },
                {
                  "description": "在 MSSQL 数据库中创建新表",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "CREATE TABLE SQL 语句",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "create_table"
                },
                {
                  "description": "列出 MSSQL 数据库中的所有表",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_tables"
                },
                {
                  "description": "获取特定表的架构信息",
                  "inputschema": {
                    "properties": {
                      "table_name": {
                        "description": "要描述的表名",
                        "type": "string"
                      }
                    },
                    "required": [
                      "table_name"
                    ],
                    "type": "object"
                  },
                  "name": "describe_table"
                },
                {
                  "description": "向备忘录添加业务洞察",
                  "inputschema": {
                    "properties": {
                      "insight": {
                        "description": "从数据分析中发现的业务洞察",
                        "type": "string"
                      }
                    },
                    "required": [
                      "insight"
                    ],
                    "type": "object"
                  },
                  "name": "append_insight"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "datastax": {
      "mcpproviderid": "datastax",
      "self": "#/mcpproviders/datastax",
      "xid": "/mcpproviders/datastax",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:06.973764592Z",
      "modifiedat": "2025-05-12T08:19:06.973764592Z",

      "serversurl": "#/mcpproviders/datastax/servers",
      "servers": {
        "astra-db-mcp": {
          "serverid": "astra-db-mcp",
          "self": "#/mcpproviders/datastax/servers/astra-db-mcp",
          "xid": "/mcpproviders/datastax/servers/astra-db-mcp",

          "metaurl": "#/mcpproviders/datastax/servers/astra-db-mcp/meta",
          "meta": {
            "serverid": "astra-db-mcp",
            "self": "#/mcpproviders/datastax/servers/astra-db-mcp/meta",
            "xid": "/mcpproviders/datastax/servers/astra-db-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:06.973764592Z",
            "modifiedat": "2025-05-12T08:19:06.973764592Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/datastax/servers/astra-db-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/datastax/servers/astra-db-mcp/versions",
          "versions": {
            "1": {
              "serverid": "astra-db-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/datastax/servers/astra-db-mcp/versions/1",
              "xid": "/mcpproviders/datastax/servers/astra-db-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.datastax/astra-db-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for interacting with Astra DB. MCP extends the capabilities of Large Language Models (LLMs) by allowing them to interact with external systems as agents.",
              "createdat": "2025-05-12T08:19:06.973764592Z",
              "modifiedat": "2025-05-12T08:19:06.973764592Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Astra DB Application Token",
                        "name": "ASTRA_DB_APPLICATION_TOKEN",
                        "required": true
                      },
                      {
                        "description": "Astra DB API Endpoint",
                        "name": "ASTRA_DB_API_ENDPOINT",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@datastax/astra-db-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@datastax/astra-db-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "datastax/astra-db-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Get all collections in the database",
                  "name": "GetCollections"
                },
                {
                  "description": "Create a new collection in the database",
                  "name": "CreateCollection"
                },
                {
                  "description": "Update an existing collection in the database",
                  "name": "UpdateCollection"
                },
                {
                  "description": "Delete a collection from the database",
                  "name": "DeleteCollection"
                },
                {
                  "description": "List records from a collection in the database",
                  "name": "ListRecords"
                },
                {
                  "description": "Get a specific record from a collection by ID",
                  "name": "GetRecord"
                },
                {
                  "description": "Create a new record in a collection",
                  "name": "CreateRecord"
                },
                {
                  "description": "Update an existing record in a collection",
                  "name": "UpdateRecord"
                },
                {
                  "description": "Delete a record from a collection",
                  "name": "DeleteRecord"
                },
                {
                  "description": "Find records in a collection by field value",
                  "name": "FindRecord"
                },
                {
                  "description": "Create multiple records in a collection at once",
                  "name": "BulkCreateRecords"
                },
                {
                  "description": "Update multiple records in a collection at once",
                  "name": "BulkUpdateRecords"
                },
                {
                  "description": "Delete multiple records from a collection at once",
                  "name": "BulkDeleteRecords"
                },
                {
                  "description": "Open a web browser for authentication and setup",
                  "name": "OpenBrowser"
                },
                {
                  "description": "Get assistance with adding Astra DB client to your MCP client",
                  "name": "HelpAddToClient"
                },
                {
                  "description": "Get estimate of the number of documents in a collection",
                  "name": "EstimateDocumentCount"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "deepfates": {
      "mcpproviderid": "deepfates",
      "self": "#/mcpproviders/deepfates",
      "xid": "/mcpproviders/deepfates",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:42.23721399Z",
      "modifiedat": "2025-05-12T08:18:42.23721399Z",

      "serversurl": "#/mcpproviders/deepfates/servers",
      "servers": {
        "mcp-replicate": {
          "serverid": "mcp-replicate",
          "self": "#/mcpproviders/deepfates/servers/mcp-replicate",
          "xid": "/mcpproviders/deepfates/servers/mcp-replicate",

          "metaurl": "#/mcpproviders/deepfates/servers/mcp-replicate/meta",
          "meta": {
            "serverid": "mcp-replicate",
            "self": "#/mcpproviders/deepfates/servers/mcp-replicate/meta",
            "xid": "/mcpproviders/deepfates/servers/mcp-replicate/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:42.23721399Z",
            "modifiedat": "2025-05-12T08:18:42.23721399Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/deepfates/servers/mcp-replicate/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/deepfates/servers/mcp-replicate/versions",
          "versions": {
            "1": {
              "serverid": "mcp-replicate",
              "versionid": "1",
              "self": "#/mcpproviders/deepfates/servers/mcp-replicate/versions/1",
              "xid": "/mcpproviders/deepfates/servers/mcp-replicate/versions/1",
              "epoch": 1,
              "name": "io.github.deepfates/mcp-replicate",
              "isdefault": true,
              "description": "A Model Context Protocol server implementation for Replicate. Run Replicate models through a simple tool-based interface.",
              "createdat": "2025-05-12T08:18:42.23721399Z",
              "modifiedat": "2025-05-12T08:18:42.23721399Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Replicate API token for authentication",
                        "name": "REPLICATE_API_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-replicate"
                }
              ],
              "remotes": [],
              "repo_ref": "deepfates/mcp-replicate",
              "resources": [],
              "tools": [
                {
                  "description": "Find models using semantic search",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_models"
                },
                {
                  "description": "Browse available models",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_models"
                },
                {
                  "description": "Get details about a specific model",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_model"
                },
                {
                  "description": "Browse model collections",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_collections"
                },
                {
                  "description": "Get details about a specific collection",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_collection"
                },
                {
                  "description": "Run a model with your inputs",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_prediction"
                },
                {
                  "description": "Check a prediction's status",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_prediction"
                },
                {
                  "description": "Stop a running prediction",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "cancel_prediction"
                },
                {
                  "description": "See your recent predictions",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_predictions"
                },
                {
                  "description": "Open an image in your browser",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "view_image"
                },
                {
                  "description": "Clean up cached images",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "clear_image_cache"
                },
                {
                  "description": "Check cache usage",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_image_cache_stats"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "delorenj": {
      "mcpproviderid": "delorenj",
      "self": "#/mcpproviders/delorenj",
      "xid": "/mcpproviders/delorenj",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:37.137129595Z",
      "modifiedat": "2025-05-12T08:18:37.137129595Z",

      "serversurl": "#/mcpproviders/delorenj/servers",
      "servers": {
        "mcp-server-ticketmaster": {
          "serverid": "mcp-server-ticketmaster",
          "self": "#/mcpproviders/delorenj/servers/mcp-server-ticketmaster",
          "xid": "/mcpproviders/delorenj/servers/mcp-server-ticketmaster",

          "metaurl": "#/mcpproviders/delorenj/servers/mcp-server-ticketmaster/meta",
          "meta": {
            "serverid": "mcp-server-ticketmaster",
            "self": "#/mcpproviders/delorenj/servers/mcp-server-ticketmaster/meta",
            "xid": "/mcpproviders/delorenj/servers/mcp-server-ticketmaster/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:37.137129595Z",
            "modifiedat": "2025-05-12T08:18:37.137129595Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/delorenj/servers/mcp-server-ticketmaster/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/delorenj/servers/mcp-server-ticketmaster/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-ticketmaster",
              "versionid": "1",
              "self": "#/mcpproviders/delorenj/servers/mcp-server-ticketmaster/versions/1",
              "xid": "/mcpproviders/delorenj/servers/mcp-server-ticketmaster/versions/1",
              "epoch": 1,
              "name": "io.github.delorenj/mcp-server-ticketmaster",
              "isdefault": true,
              "description": "A Model Context Protocol server that provides tools for discovering events, venues, and attractions through the Ticketmaster Discovery API.",
              "createdat": "2025-05-12T08:18:37.137129595Z",
              "modifiedat": "2025-05-12T08:18:37.137129595Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Ticketmaster API key environment variable",
                        "name": "TICKETMASTER_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@delorenj/mcp-server-ticketmaster"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@delorenj/mcp-server-ticketmaster"
                }
              ],
              "remotes": [],
              "repo_ref": "delorenj/mcp-server-ticketmaster",
              "resources": [],
              "tools": [
                {
                  "description": "Search for events, venues, or attractions on Ticketmaster",
                  "inputschema": {
                    "properties": {
                      "attractionId": {
                        "description": "Specific attraction ID to search",
                        "type": "string"
                      },
                      "city": {
                        "description": "City name",
                        "type": "string"
                      },
                      "classificationName": {
                        "description": "Event classification/category (e.g., \"Sports\", \"Music\")",
                        "type": "string"
                      },
                      "countryCode": {
                        "description": "Country code (e.g., US, CA)",
                        "type": "string"
                      },
                      "endDate": {
                        "description": "End date in YYYY-MM-DD format",
                        "type": "string"
                      },
                      "format": {
                        "default": "json",
                        "description": "Output format (defaults to json)",
                        "enum": [
                          "json",
                          "text"
                        ],
                        "type": "string"
                      },
                      "keyword": {
                        "description": "Search keyword or term",
                        "type": "string"
                      },
                      "startDate": {
                        "description": "Start date in YYYY-MM-DD format",
                        "type": "string"
                      },
                      "stateCode": {
                        "description": "State code (e.g., NY, CA)",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of search to perform",
                        "enum": [
                          "event",
                          "venue",
                          "attraction"
                        ],
                        "type": "string"
                      },
                      "venueId": {
                        "description": "Specific venue ID to search",
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "search_ticketmaster"
                }
              ],
              "version_detail": {
                "version": "0.2.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "descope-sample-apps": {
      "mcpproviderid": "descope-sample-apps",
      "self": "#/mcpproviders/descope-sample-apps",
      "xid": "/mcpproviders/descope-sample-apps",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:37.521804655Z",
      "modifiedat": "2025-05-12T08:17:37.521804655Z",

      "serversurl": "#/mcpproviders/descope-sample-apps/servers",
      "servers": {
        "descope-mcp-server-stdio": {
          "serverid": "descope-mcp-server-stdio",
          "self": "#/mcpproviders/descope-sample-apps/servers/descope-mcp-server-stdio",
          "xid": "/mcpproviders/descope-sample-apps/servers/descope-mcp-server-stdio",

          "metaurl": "#/mcpproviders/descope-sample-apps/servers/descope-mcp-server-stdio/meta",
          "meta": {
            "serverid": "descope-mcp-server-stdio",
            "self": "#/mcpproviders/descope-sample-apps/servers/descope-mcp-server-stdio/meta",
            "xid": "/mcpproviders/descope-sample-apps/servers/descope-mcp-server-stdio/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:37.521804655Z",
            "modifiedat": "2025-05-12T08:17:37.521804655Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/descope-sample-apps/servers/descope-mcp-server-stdio/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/descope-sample-apps/servers/descope-mcp-server-stdio/versions",
          "versions": {
            "1": {
              "serverid": "descope-mcp-server-stdio",
              "versionid": "1",
              "self": "#/mcpproviders/descope-sample-apps/servers/descope-mcp-server-stdio/versions/1",
              "xid": "/mcpproviders/descope-sample-apps/servers/descope-mcp-server-stdio/versions/1",
              "epoch": 1,
              "name": "io.github.descope-sample-apps/descope-mcp-server-stdio",
              "isdefault": true,
              "description": "The Descope Model Context Protocol (MCP) server provides an interface to interact with Descope's Management APIs, enabling the search and retrieval of project-related information.",
              "createdat": "2025-05-12T08:17:37.521804655Z",
              "modifiedat": "2025-05-12T08:17:37.521804655Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your Descope Project ID",
                        "name": "DESCOPE_PROJECT_ID",
                        "required": true
                      },
                      {
                        "description": "Your Descope Management Key",
                        "name": "DESCOPE_MANAGEMENT_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "/path/to/descope-mcp-server/build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@descope-sample-apps/descope-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "descope-sample-apps/descope-mcp-server-stdio",
              "resources": [],
              "tools": [
                {
                  "description": "Search Descope project audit logs",
                  "inputschema": {
                    "properties": {
                      "actions": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "excludedActions": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "geos": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "hoursBack": {
                        "default": 24,
                        "maximum": 720,
                        "minimum": 1,
                        "type": "number"
                      },
                      "limit": {
                        "default": 5,
                        "maximum": 10,
                        "minimum": 1,
                        "type": "number"
                      },
                      "loginIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "methods": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "noTenants": {
                        "type": "boolean"
                      },
                      "tenants": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "search-audits"
                },
                {
                  "description": "Search for users in Descope project",
                  "inputschema": {
                    "properties": {
                      "emails": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "limit": {
                        "default": 10,
                        "maximum": 100,
                        "minimum": 1,
                        "type": "number"
                      },
                      "loginIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "page": {
                        "minimum": 0,
                        "type": "number"
                      },
                      "phones": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "roles": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "ssoAppIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "statuses": {
                        "items": {
                          "enum": [
                            "enabled",
                            "disabled",
                            "invited"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "tenantIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "testUsersOnly": {
                        "type": "boolean"
                      },
                      "text": {
                        "type": "string"
                      },
                      "withTestUser": {
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "search-users"
                },
                {
                  "description": "Create a new user in Descope project",
                  "inputschema": {
                    "properties": {
                      "additionalLoginIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "customAttributes": {
                        "additionalProperties": {},
                        "type": "object"
                      },
                      "displayName": {
                        "type": "string"
                      },
                      "email": {
                        "format": "email",
                        "type": "string"
                      },
                      "familyName": {
                        "type": "string"
                      },
                      "givenName": {
                        "type": "string"
                      },
                      "loginId": {
                        "type": "string"
                      },
                      "middleName": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "picture": {
                        "format": "uri",
                        "type": "string"
                      },
                      "roles": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "ssoAppIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "userTenants": {
                        "items": {
                          "properties": {
                            "roleNames": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "tenantId": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "tenantId",
                            "roleNames"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "verifiedEmail": {
                        "type": "boolean"
                      },
                      "verifiedPhone": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "loginId"
                    ],
                    "type": "object"
                  },
                  "name": "create-user"
                },
                {
                  "description": "Create and invite a new user to the Descope project",
                  "inputschema": {
                    "properties": {
                      "additionalLoginIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "customAttributes": {
                        "additionalProperties": {},
                        "type": "object"
                      },
                      "displayName": {
                        "type": "string"
                      },
                      "email": {
                        "format": "email",
                        "type": "string"
                      },
                      "familyName": {
                        "type": "string"
                      },
                      "givenName": {
                        "type": "string"
                      },
                      "inviteUrl": {
                        "format": "uri",
                        "type": "string"
                      },
                      "loginId": {
                        "type": "string"
                      },
                      "middleName": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "picture": {
                        "format": "uri",
                        "type": "string"
                      },
                      "roles": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "sendMail": {
                        "type": "boolean"
                      },
                      "sendSMS": {
                        "type": "boolean"
                      },
                      "ssoAppIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "templateId": {
                        "type": "string"
                      },
                      "templateOptions": {
                        "properties": {
                          "appUrl": {
                            "format": "uri",
                            "type": "string"
                          },
                          "customClaims": {
                            "type": "string"
                          },
                          "redirectUrl": {
                            "format": "uri",
                            "type": "string"
                          }
                        },
                        "required": [],
                        "type": "object"
                      },
                      "userTenants": {
                        "items": {
                          "properties": {
                            "roleNames": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "tenantId": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "tenantId",
                            "roleNames"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "verifiedEmail": {
                        "type": "boolean"
                      },
                      "verifiedPhone": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "loginId"
                    ],
                    "type": "object"
                  },
                  "name": "invite-user"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "designcomputer": {
      "mcpproviderid": "designcomputer",
      "self": "#/mcpproviders/designcomputer",
      "xid": "/mcpproviders/designcomputer",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:42.244116025Z",
      "modifiedat": "2025-05-12T08:17:42.244116025Z",

      "serversurl": "#/mcpproviders/designcomputer/servers",
      "servers": {
        "mysql_mcp_server": {
          "serverid": "mysql_mcp_server",
          "self": "#/mcpproviders/designcomputer/servers/mysql_mcp_server",
          "xid": "/mcpproviders/designcomputer/servers/mysql_mcp_server",

          "metaurl": "#/mcpproviders/designcomputer/servers/mysql_mcp_server/meta",
          "meta": {
            "serverid": "mysql_mcp_server",
            "self": "#/mcpproviders/designcomputer/servers/mysql_mcp_server/meta",
            "xid": "/mcpproviders/designcomputer/servers/mysql_mcp_server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:42.244116025Z",
            "modifiedat": "2025-05-12T08:17:42.244116025Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/designcomputer/servers/mysql_mcp_server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/designcomputer/servers/mysql_mcp_server/versions",
          "versions": {
            "1": {
              "serverid": "mysql_mcp_server",
              "versionid": "1",
              "self": "#/mcpproviders/designcomputer/servers/mysql_mcp_server/versions/1",
              "xid": "/mcpproviders/designcomputer/servers/mysql_mcp_server/versions/1",
              "epoch": 1,
              "name": "io.github.designcomputer/mysql_mcp_server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) implementation that enables secure interaction with MySQL databases. This server component facilitates communication between AI applications (hosts/clients) and MySQL databases, making database exploration and analysis safer and more structured through a controlled interface.",
              "createdat": "2025-05-12T08:17:42.244116025Z",
              "modifiedat": "2025-05-12T08:17:42.244116025Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Database host",
                        "name": "MYSQL_HOST",
                        "required": true
                      },
                      {
                        "description": "Database port",
                        "name": "MYSQL_PORT",
                        "required": false
                      },
                      {
                        "description": "Database user",
                        "name": "MYSQL_USER",
                        "required": true
                      },
                      {
                        "description": "Database password",
                        "name": "MYSQL_PASSWORD",
                        "required": true
                      },
                      {
                        "description": "Database name",
                        "name": "MYSQL_DATABASE",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "path/to/mysql_mcp_server",
                      "run",
                      "mysql_mcp_server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mysql-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "designcomputer/mysql_mcp_server",
              "resources": [
                {
                  "description": "Data in table: {table}",
                  "mimetype": "text/plain",
                  "name": "Table",
                  "uritemplate": "mysql://{table}/data"
                }
              ],
              "tools": [
                {
                  "description": "Execute an SQL query on the MySQL server",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_sql"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "devhub": {
      "mcpproviderid": "devhub",
      "self": "#/mcpproviders/devhub",
      "xid": "/mcpproviders/devhub",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:40.733359092Z",
      "modifiedat": "2025-05-12T08:17:40.733359092Z",

      "serversurl": "#/mcpproviders/devhub/servers",
      "servers": {
        "devhub-cms-mcp": {
          "serverid": "devhub-cms-mcp",
          "self": "#/mcpproviders/devhub/servers/devhub-cms-mcp",
          "xid": "/mcpproviders/devhub/servers/devhub-cms-mcp",

          "metaurl": "#/mcpproviders/devhub/servers/devhub-cms-mcp/meta",
          "meta": {
            "serverid": "devhub-cms-mcp",
            "self": "#/mcpproviders/devhub/servers/devhub-cms-mcp/meta",
            "xid": "/mcpproviders/devhub/servers/devhub-cms-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:40.733359092Z",
            "modifiedat": "2025-05-12T08:17:40.733359092Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/devhub/servers/devhub-cms-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/devhub/servers/devhub-cms-mcp/versions",
          "versions": {
            "1": {
              "serverid": "devhub-cms-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/devhub/servers/devhub-cms-mcp/versions/1",
              "xid": "/mcpproviders/devhub/servers/devhub-cms-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.devhub/devhub-cms-mcp",
              "isdefault": true,
              "description": "Integration with DevHub CMS to manage content",
              "createdat": "2025-05-12T08:17:40.733359092Z",
              "modifiedat": "2025-05-12T08:17:40.733359092Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "DEVHUB_API_KEY",
                        "required": true
                      },
                      {
                        "name": "DEVHUB_API_SECRET",
                        "required": true
                      },
                      {
                        "name": "DEVHUB_BASE_URL",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "devhub-cms-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "devhub-cms-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "devhub/devhub-cms-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Get the hours of operation for a DevHub location",
                  "name": "get_hours_of_operation"
                },
                {
                  "description": "Get all businesses within the DevHub account",
                  "name": "get_businesses"
                },
                {
                  "description": "Get all locations for a business",
                  "name": "get_locations"
                },
                {
                  "description": "Update the hours of operation for a DevHub location",
                  "name": "update_hours"
                },
                {
                  "description": "Get the DevHub site ID from a URL.",
                  "name": "site_from_url"
                },
                {
                  "description": "Upload an image to the DevHub media gallery",
                  "name": "upload_image"
                },
                {
                  "description": "Get a single blog post",
                  "name": "get_blog_post"
                },
                {
                  "description": "Create a new blog post",
                  "name": "create_blog_post"
                },
                {
                  "description": "Update a single blog post",
                  "name": "update_blog_post"
                },
                {
                  "description": "Get the nearest DevHub location",
                  "name": "get_nearest_location"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "dinghuazhou": {
      "mcpproviderid": "dinghuazhou",
      "self": "#/mcpproviders/dinghuazhou",
      "xid": "/mcpproviders/dinghuazhou",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:39.761436935Z",
      "modifiedat": "2025-05-12T08:17:39.761436935Z",

      "serversurl": "#/mcpproviders/dinghuazhou/servers",
      "servers": {
        "sample-mcp-server-tos": {
          "serverid": "sample-mcp-server-tos",
          "self": "#/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos",
          "xid": "/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos",

          "metaurl": "#/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos/meta",
          "meta": {
            "serverid": "sample-mcp-server-tos",
            "self": "#/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos/meta",
            "xid": "/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:39.761436935Z",
            "modifiedat": "2025-05-12T08:17:39.761436935Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos/versions",
          "versions": {
            "1": {
              "serverid": "sample-mcp-server-tos",
              "versionid": "1",
              "self": "#/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos/versions/1",
              "xid": "/mcpproviders/dinghuazhou/servers/sample-mcp-server-tos/versions/1",
              "epoch": 1,
              "name": "io.github.dinghuazhou/sample-mcp-server-tos",
              "isdefault": true,
              "description": "An MCP server implementation for retrieving data from TOS.",
              "createdat": "2025-05-12T08:17:39.761436935Z",
              "modifiedat": "2025-05-12T08:17:39.761436935Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "The access key for the VolcEngine.",
                        "name": "VOLC_ACCESSKEY",
                        "required": true
                      },
                      {
                        "description": "The secret key for the VolcEngine.",
                        "name": "VOLC_SECRETKEY",
                        "required": true
                      },
                      {
                        "description": "The region for the TOS service.",
                        "name": "REGION",
                        "required": true
                      },
                      {
                        "description": "The endpoint for the TOS service.",
                        "name": "TOS_ENDPOINT",
                        "required": true
                      },
                      {
                        "description": "The security token for the credential.",
                        "name": "SECURITY_TOKEN",
                        "required": false
                      },
                      {
                        "description": "If you want to use a specific bucket, you need to set this.",
                        "name": "TOS_BUCKETS",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "unspecified"
                }
              ],
              "remotes": [],
              "repo_ref": "dinghuazhou/sample-mcp-server-tos",
              "resources": [
                {
                  "description": "Buckets resource for TOS",
                  "name": "bucket",
                  "uritemplate": "/buckets/{bucket}"
                },
                {
                  "description": "Objects resource for TOS",
                  "name": "object",
                  "uritemplate": "/buckets/{bucket}/objects/{key}"
                }
              ],
              "tools": [
                {
                  "description": "Returns a list of all buckets owned by the authenticated sender of the request",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_buckets"
                },
                {
                  "description": "Returns some or all (up to 1,000) of the objects in a bucket with each request",
                  "inputschema": {
                    "properties": {
                      "bucket": {
                        "type": "string"
                      },
                      "continuation_token": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "prefix": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "start_after": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "bucket"
                    ],
                    "type": "object"
                  },
                  "name": "list_objects"
                },
                {
                  "description": "Retrieves an object from volcengine TOS. In the GetObject request, specify the full key name for the object.",
                  "inputschema": {
                    "properties": {
                      "bucket": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "bucket",
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "get_object"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "dmayboroda": {
      "mcpproviderid": "dmayboroda",
      "self": "#/mcpproviders/dmayboroda",
      "xid": "/mcpproviders/dmayboroda",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:03.864015113Z",
      "modifiedat": "2025-05-12T08:19:03.864015113Z",

      "serversurl": "#/mcpproviders/dmayboroda/servers",
      "servers": {
        "minima": {
          "serverid": "minima",
          "self": "#/mcpproviders/dmayboroda/servers/minima",
          "xid": "/mcpproviders/dmayboroda/servers/minima",

          "metaurl": "#/mcpproviders/dmayboroda/servers/minima/meta",
          "meta": {
            "serverid": "minima",
            "self": "#/mcpproviders/dmayboroda/servers/minima/meta",
            "xid": "/mcpproviders/dmayboroda/servers/minima/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:03.864015113Z",
            "modifiedat": "2025-05-12T08:19:03.864015113Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/dmayboroda/servers/minima/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/dmayboroda/servers/minima/versions",
          "versions": {
            "1": {
              "serverid": "minima",
              "versionid": "1",
              "self": "#/mcpproviders/dmayboroda/servers/minima/versions/1",
              "xid": "/mcpproviders/dmayboroda/servers/minima/versions/1",
              "epoch": 1,
              "name": "io.github.dmayboroda/minima",
              "isdefault": true,
              "description": "Minima is an open source RAG on-premises containers, with ability to integrate with ChatGPT and MCP. Minima can also be used as a fully local RAG.",
              "createdat": "2025-05-12T08:19:03.864015113Z",
              "modifiedat": "2025-05-12T08:19:03.864015113Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Context to search",
                      "name": "context",
                      "required": true
                    }
                  ],
                  "description": "Find a context in a local files",
                  "name": "query"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Specify the root folder for indexing (on your cloud or local pc).",
                        "name": "LOCAL_FILES_PATH",
                        "required": true
                      },
                      {
                        "description": "Specify the embedding model to use.",
                        "name": "EMBEDDING_MODEL_ID",
                        "required": true
                      },
                      {
                        "description": "Define the embedding dimension provided by the model.",
                        "name": "EMBEDDING_SIZE",
                        "required": true
                      },
                      {
                        "description": "Set up the Ollama model.",
                        "name": "OLLAMA_MODEL",
                        "required": true
                      },
                      {
                        "description": "Specify the reranker model.",
                        "name": "RERANKER_MODEL",
                        "required": true
                      },
                      {
                        "description": "Required for ChatGPT integration, just use your email.",
                        "name": "USER_ID",
                        "required": false
                      },
                      {
                        "description": "Required for ChatGPT integration, just use any password.",
                        "name": "PASSWORD",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "/path_to_cloned_minima_project/mcp-server",
                      "run",
                      "minima"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "minima"
                }
              ],
              "remotes": [],
              "repo_ref": "dmayboroda/minima",
              "resources": [],
              "tools": [
                {
                  "description": "Find a context in local files (PDF, CSV, DOCX, MD, TXT)",
                  "inputschema": {
                    "properties": {
                      "text": {
                        "description": "context to find",
                        "type": "string"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "query"
                }
              ],
              "version_detail": {
                "version": "0.0.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "dogukanakkaya": {
      "mcpproviderid": "dogukanakkaya",
      "self": "#/mcpproviders/dogukanakkaya",
      "xid": "/mcpproviders/dogukanakkaya",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:39.175424827Z",
      "modifiedat": "2025-05-12T08:17:39.175424827Z",

      "serversurl": "#/mcpproviders/dogukanakkaya/servers",
      "servers": {
        "pulumi-mcp-server": {
          "serverid": "pulumi-mcp-server",
          "self": "#/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server",
          "xid": "/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server",

          "metaurl": "#/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server/meta",
          "meta": {
            "serverid": "pulumi-mcp-server",
            "self": "#/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server/meta",
            "xid": "/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:39.175424827Z",
            "modifiedat": "2025-05-12T08:17:39.175424827Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "pulumi-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server/versions/1",
              "xid": "/mcpproviders/dogukanakkaya/servers/pulumi-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.dogukanakkaya/pulumi-mcp-server",
              "isdefault": true,
              "description": "MCP server exposing Pulumi stacks and tooling via Model Context Protocol",
              "createdat": "2025-05-12T08:17:39.175424827Z",
              "modifiedat": "2025-05-12T08:17:39.175424827Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Pulumi access token environment variable",
                        "name": "PULUMI_ACCESS_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "dogukanakkaya/pulumi-mcp-server",
              "resources": [
                {
                  "name": "Pulumi Stacks",
                  "uritemplate": "pulumi://{organization}"
                }
              ],
              "tools": [
                {
                  "description": "Create a new Pulumi stack",
                  "inputschema": {
                    "properties": {
                      "organization": {
                        "description": "Organization name to create the stack in",
                        "type": "string"
                      },
                      "project": {
                        "description": "Project name",
                        "type": "string"
                      },
                      "stackName": {
                        "description": "Stack name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "organization",
                      "project",
                      "stackName"
                    ],
                    "type": "object"
                  },
                  "name": "create_pulumi_stack"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "domdomegg": {
      "mcpproviderid": "domdomegg",
      "self": "#/mcpproviders/domdomegg",
      "xid": "/mcpproviders/domdomegg",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:59.411037979Z",
      "modifiedat": "2025-05-12T08:19:59.411037979Z",

      "serversurl": "#/mcpproviders/domdomegg/servers",
      "servers": {
        "airtable-mcp-server": {
          "serverid": "airtable-mcp-server",
          "self": "#/mcpproviders/domdomegg/servers/airtable-mcp-server",
          "xid": "/mcpproviders/domdomegg/servers/airtable-mcp-server",

          "metaurl": "#/mcpproviders/domdomegg/servers/airtable-mcp-server/meta",
          "meta": {
            "serverid": "airtable-mcp-server",
            "self": "#/mcpproviders/domdomegg/servers/airtable-mcp-server/meta",
            "xid": "/mcpproviders/domdomegg/servers/airtable-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:59.411037979Z",
            "modifiedat": "2025-05-12T08:19:59.411037979Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/domdomegg/servers/airtable-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/domdomegg/servers/airtable-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "airtable-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/domdomegg/servers/airtable-mcp-server/versions/1",
              "xid": "/mcpproviders/domdomegg/servers/airtable-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.domdomegg/airtable-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol server that provides read and write access to Airtable databases. This server enables LLMs to inspect database schemas, then read and write records.",
              "createdat": "2025-05-12T08:19:59.411037979Z",
              "modifiedat": "2025-05-12T08:19:59.411037979Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Airtable personal access token",
                        "name": "AIRTABLE_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "airtable-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "airtable-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "domdomegg/airtable-mcp-server",
              "resources": [
                {
                  "description": "Schema of a specific table in an Airtable base",
                  "mimetype": "application/json",
                  "name": "Airtable Table Schema",
                  "uritemplate": "airtable://{baseId}/{tableId}/schema"
                }
              ],
              "tools": [
                {
                  "description": "List records from a table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_records"
                },
                {
                  "description": "Search for records containing specific text",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_records"
                },
                {
                  "description": "List all accessible Airtable bases",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_bases"
                },
                {
                  "description": "List all tables in a specific base",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_tables"
                },
                {
                  "description": "Get detailed information about a specific table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "describe_table"
                },
                {
                  "description": "Get a specific record by ID",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_record"
                },
                {
                  "description": "Create a new record in a table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_record"
                },
                {
                  "description": "Update up to 10 records in a table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_records"
                },
                {
                  "description": "Delete records from a table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_records"
                },
                {
                  "description": "Create a new table in a base",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_table"
                },
                {
                  "description": "Update a table's name or description",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_table"
                },
                {
                  "description": "Create a new field in a table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_field"
                },
                {
                  "description": "Update a field's name or description",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_field"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "donghyun-chae": {
      "mcpproviderid": "donghyun-chae",
      "self": "#/mcpproviders/donghyun-chae",
      "xid": "/mcpproviders/donghyun-chae",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:30.216484305Z",
      "modifiedat": "2025-05-12T08:18:30.216484305Z",

      "serversurl": "#/mcpproviders/donghyun-chae/servers",
      "servers": {
        "mcp-amadeus": {
          "serverid": "mcp-amadeus",
          "self": "#/mcpproviders/donghyun-chae/servers/mcp-amadeus",
          "xid": "/mcpproviders/donghyun-chae/servers/mcp-amadeus",

          "metaurl": "#/mcpproviders/donghyun-chae/servers/mcp-amadeus/meta",
          "meta": {
            "serverid": "mcp-amadeus",
            "self": "#/mcpproviders/donghyun-chae/servers/mcp-amadeus/meta",
            "xid": "/mcpproviders/donghyun-chae/servers/mcp-amadeus/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:30.216484305Z",
            "modifiedat": "2025-05-12T08:18:30.216484305Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/donghyun-chae/servers/mcp-amadeus/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/donghyun-chae/servers/mcp-amadeus/versions",
          "versions": {
            "1": {
              "serverid": "mcp-amadeus",
              "versionid": "1",
              "self": "#/mcpproviders/donghyun-chae/servers/mcp-amadeus/versions/1",
              "xid": "/mcpproviders/donghyun-chae/servers/mcp-amadeus/versions/1",
              "epoch": 1,
              "name": "io.github.donghyun-chae/mcp-amadeus",
              "isdefault": true,
              "description": "MCP-Amadeus is a community-developed Model Context Protocol (MCP) server that integrates with the Amadeus Flight Offers Search API to provide flight search capabilities through natural language interfaces. Built for use with MCP-compatible clients (e.g., Claude Desktop).",
              "createdat": "2025-05-12T08:18:30.216484305Z",
              "modifiedat": "2025-05-12T08:18:30.216484305Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Amadeus API Client ID",
                        "name": "AMADEUS_CLIENT_ID",
                        "required": true
                      },
                      {
                        "description": "Amadeus API Client Secret",
                        "name": "AMADEUS_CLIENT_SECRET",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "./src/",
                      "run",
                      "--env-file",
                      ".env",
                      "server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "@donghyun-chae/mcp-amadeus"
                }
              ],
              "remotes": [],
              "repo_ref": "donghyun-chae/mcp-amadeus",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves flight offers from the Amadeus Flight Offers Search API.",
                  "inputschema": {
                    "properties": {
                      "departure_date": {
                        "type": "string"
                      },
                      "destination": {
                        "type": "string"
                      },
                      "origin": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "origin",
                      "destination",
                      "departure_date"
                    ],
                    "type": "object"
                  },
                  "name": "get_flight_offers"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "dschuler36": {
      "mcpproviderid": "dschuler36",
      "self": "#/mcpproviders/dschuler36",
      "xid": "/mcpproviders/dschuler36",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:52.314225614Z",
      "modifiedat": "2025-05-12T08:17:52.314225614Z",

      "serversurl": "#/mcpproviders/dschuler36/servers",
      "servers": {
        "reaper-mcp-server": {
          "serverid": "reaper-mcp-server",
          "self": "#/mcpproviders/dschuler36/servers/reaper-mcp-server",
          "xid": "/mcpproviders/dschuler36/servers/reaper-mcp-server",

          "metaurl": "#/mcpproviders/dschuler36/servers/reaper-mcp-server/meta",
          "meta": {
            "serverid": "reaper-mcp-server",
            "self": "#/mcpproviders/dschuler36/servers/reaper-mcp-server/meta",
            "xid": "/mcpproviders/dschuler36/servers/reaper-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:52.314225614Z",
            "modifiedat": "2025-05-12T08:17:52.314225614Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/dschuler36/servers/reaper-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/dschuler36/servers/reaper-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "reaper-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/dschuler36/servers/reaper-mcp-server/versions/1",
              "xid": "/mcpproviders/dschuler36/servers/reaper-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.dschuler36/reaper-mcp-server",
              "isdefault": true,
              "description": "A simple MCP server that connects a Reaper project to an MCP client like Claude Desktop and enables you to ask questions about the project.",
              "createdat": "2025-05-12T08:17:52.314225614Z",
              "modifiedat": "2025-05-12T08:17:52.314225614Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "pip",
                      "install",
                      "."
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "unspecified"
                }
              ],
              "remotes": [],
              "repo_ref": "dschuler36/reaper-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Finds all Reaper projects in the directory you specified in the config.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "find_reaper_projects"
                },
                {
                  "description": "Parses a Reaper project and returns a JSON object.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "parse_reaper_project"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "dvcrn": {
      "mcpproviderid": "dvcrn",
      "self": "#/mcpproviders/dvcrn",
      "xid": "/mcpproviders/dvcrn",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:49.714399453Z",
      "modifiedat": "2025-05-12T08:17:49.714399453Z",

      "serversurl": "#/mcpproviders/dvcrn/servers",
      "servers": {
        "mcp-server-siri-shortcuts": {
          "serverid": "mcp-server-siri-shortcuts",
          "self": "#/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts",
          "xid": "/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts",

          "metaurl": "#/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts/meta",
          "meta": {
            "serverid": "mcp-server-siri-shortcuts",
            "self": "#/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts/meta",
            "xid": "/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:49.714399453Z",
            "modifiedat": "2025-05-12T08:17:49.714399453Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-siri-shortcuts",
              "versionid": "1",
              "self": "#/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts/versions/1",
              "xid": "/mcpproviders/dvcrn/servers/mcp-server-siri-shortcuts/versions/1",
              "epoch": 1,
              "name": "io.github.dvcrn/mcp-server-siri-shortcuts",
              "isdefault": true,
              "description": "This MCP server provides access to Siri shortcuts functionality via the Model Context Protocol (MCP). It allows listing, opening, and running shortcuts from the macOS Shortcuts app.",
              "createdat": "2025-05-12T08:17:49.714399453Z",
              "modifiedat": "2025-05-12T08:17:49.714399453Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "mcp-server-siri-shortcuts"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-server-siri-shortcuts"
                }
              ],
              "remotes": [],
              "repo_ref": "dvcrn/mcp-server-siri-shortcuts",
              "resources": [],
              "tools": [
                {
                  "description": "Lists all available Siri shortcuts on the system",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_shortcuts"
                },
                {
                  "description": "Opens a shortcut in the Shortcuts app",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "open_shortcut"
                },
                {
                  "description": "Runs a shortcut with optional input",
                  "inputschema": {
                    "properties": {
                      "input": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "run_shortcut"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "e2b-dev": {
      "mcpproviderid": "e2b-dev",
      "self": "#/mcpproviders/e2b-dev",
      "xid": "/mcpproviders/e2b-dev",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:37.731000443Z",
      "modifiedat": "2025-05-12T08:17:37.731000443Z",

      "serversurl": "#/mcpproviders/e2b-dev/servers",
      "servers": {
        "mcp-server": {
          "serverid": "mcp-server",
          "self": "#/mcpproviders/e2b-dev/servers/mcp-server",
          "xid": "/mcpproviders/e2b-dev/servers/mcp-server",

          "metaurl": "#/mcpproviders/e2b-dev/servers/mcp-server/meta",
          "meta": {
            "serverid": "mcp-server",
            "self": "#/mcpproviders/e2b-dev/servers/mcp-server/meta",
            "xid": "/mcpproviders/e2b-dev/servers/mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:37.731000443Z",
            "modifiedat": "2025-05-12T08:17:37.731000443Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/e2b-dev/servers/mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/e2b-dev/servers/mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/e2b-dev/servers/mcp-server/versions/1",
              "xid": "/mcpproviders/e2b-dev/servers/mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.e2b-dev/mcp-server",
              "isdefault": true,
              "description": "The E2B MCP server allows you to add code interpreting capabilities to your Claude Desktop app via the E2B Sandbox.",
              "createdat": "2025-05-12T08:17:37.731000443Z",
              "modifiedat": "2025-05-12T08:17:37.731000443Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@smithery/e2b-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "e2b-dev/mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Run python code in a secure sandbox by E2B. Using the Jupyter Notebook syntax.",
                  "inputschema": {
                    "properties": {
                      "code": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "code"
                    ],
                    "type": "object"
                  },
                  "name": "run_code"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "elastic": {
      "mcpproviderid": "elastic",
      "self": "#/mcpproviders/elastic",
      "xid": "/mcpproviders/elastic",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:42.10832241Z",
      "modifiedat": "2025-05-12T08:17:42.10832241Z",

      "serversurl": "#/mcpproviders/elastic/servers",
      "servers": {
        "mcp-server-elasticsearch": {
          "serverid": "mcp-server-elasticsearch",
          "self": "#/mcpproviders/elastic/servers/mcp-server-elasticsearch",
          "xid": "/mcpproviders/elastic/servers/mcp-server-elasticsearch",

          "metaurl": "#/mcpproviders/elastic/servers/mcp-server-elasticsearch/meta",
          "meta": {
            "serverid": "mcp-server-elasticsearch",
            "self": "#/mcpproviders/elastic/servers/mcp-server-elasticsearch/meta",
            "xid": "/mcpproviders/elastic/servers/mcp-server-elasticsearch/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:42.10832241Z",
            "modifiedat": "2025-05-12T08:17:42.10832241Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/elastic/servers/mcp-server-elasticsearch/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/elastic/servers/mcp-server-elasticsearch/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-elasticsearch",
              "versionid": "1",
              "self": "#/mcpproviders/elastic/servers/mcp-server-elasticsearch/versions/1",
              "xid": "/mcpproviders/elastic/servers/mcp-server-elasticsearch/versions/1",
              "epoch": 1,
              "name": "io.github.elastic/mcp-server-elasticsearch",
              "isdefault": true,
              "description": "This server connects agents to your Elasticsearch data using the Model Context Protocol. It allows you to interact with your Elasticsearch indices through natural language conversations.",
              "createdat": "2025-05-12T08:17:42.10832241Z",
              "modifiedat": "2025-05-12T08:17:42.10832241Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your Elasticsearch instance URL",
                        "name": "ES_URL",
                        "required": true
                      },
                      {
                        "description": "Elasticsearch API key for authentication",
                        "name": "ES_API_KEY",
                        "required": false
                      },
                      {
                        "description": "Elasticsearch username for basic authentication",
                        "name": "ES_USERNAME",
                        "required": false
                      },
                      {
                        "description": "Elasticsearch password for basic authentication",
                        "name": "ES_PASSWORD",
                        "required": false
                      },
                      {
                        "description": "Path to custom CA certificate for Elasticsearch SSL/TLS",
                        "name": "ES_CA_CERT",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@elastic/mcp-server-elasticsearch"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@elastic/mcp-server-elasticsearch"
                }
              ],
              "remotes": [],
              "repo_ref": "elastic/mcp-server-elasticsearch",
              "resources": [],
              "tools": [
                {
                  "description": "List all available Elasticsearch indices",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_indices"
                },
                {
                  "description": "Get field mappings for a specific Elasticsearch index",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_mappings"
                },
                {
                  "description": "Perform an Elasticsearch search with the provided query DSL",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search"
                },
                {
                  "description": "Get shard information for all or specific indices",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_shards"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "elie222": {
      "mcpproviderid": "elie222",
      "self": "#/mcpproviders/elie222",
      "xid": "/mcpproviders/elie222",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:59.77619274Z",
      "modifiedat": "2025-05-12T08:21:59.77619274Z",

      "serversurl": "#/mcpproviders/elie222/servers",
      "servers": {
        "inbox-zero": {
          "serverid": "inbox-zero",
          "self": "#/mcpproviders/elie222/servers/inbox-zero",
          "xid": "/mcpproviders/elie222/servers/inbox-zero",

          "metaurl": "#/mcpproviders/elie222/servers/inbox-zero/meta",
          "meta": {
            "serverid": "inbox-zero",
            "self": "#/mcpproviders/elie222/servers/inbox-zero/meta",
            "xid": "/mcpproviders/elie222/servers/inbox-zero/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:59.77619274Z",
            "modifiedat": "2025-05-12T08:21:59.77619274Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/elie222/servers/inbox-zero/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/elie222/servers/inbox-zero/versions",
          "versions": {
            "1": {
              "serverid": "inbox-zero",
              "versionid": "1",
              "self": "#/mcpproviders/elie222/servers/inbox-zero/versions/1",
              "xid": "/mcpproviders/elie222/servers/inbox-zero/versions/1",
              "epoch": 1,
              "name": "io.github.elie222/inbox-zero",
              "isdefault": true,
              "description": "AI email assistant MCP server providing email management tools such as reply tracking and follow-up reminders.",
              "createdat": "2025-05-12T08:21:59.77619274Z",
              "modifiedat": "2025-05-12T08:21:59.77619274Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Base URL for Inbox Zero API",
                        "name": "API_BASE",
                        "required": false
                      },
                      {
                        "description": "API key for Inbox Zero API",
                        "name": "API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "server.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "elie222/inbox-zero",
              "resources": [],
              "tools": [
                {
                  "description": "Get emails needing reply",
                  "inputschema": {
                    "properties": {
                      "olderThan": {
                        "description": "Time range to look back",
                        "enum": [
                          "3d",
                          "1w",
                          "2w",
                          "1m"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "olderThan"
                    ],
                    "type": "object"
                  },
                  "name": "get-emails-needing-reply"
                },
                {
                  "description": "Get emails needing follow-up",
                  "inputschema": {
                    "properties": {
                      "olderThan": {
                        "description": "Time range to look back",
                        "enum": [
                          "3d",
                          "1w",
                          "2w",
                          "1m"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "olderThan"
                    ],
                    "type": "object"
                  },
                  "name": "get-emails-needing-follow-up"
                }
              ],
              "version_detail": {
                "version": "0.0.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ergut": {
      "mcpproviderid": "ergut",
      "self": "#/mcpproviders/ergut",
      "xid": "/mcpproviders/ergut",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:21.852781004Z",
      "modifiedat": "2025-05-12T08:18:21.852781004Z",

      "serversurl": "#/mcpproviders/ergut/servers",
      "servers": {
        "mcp-bigquery-server": {
          "serverid": "mcp-bigquery-server",
          "self": "#/mcpproviders/ergut/servers/mcp-bigquery-server",
          "xid": "/mcpproviders/ergut/servers/mcp-bigquery-server",

          "metaurl": "#/mcpproviders/ergut/servers/mcp-bigquery-server/meta",
          "meta": {
            "serverid": "mcp-bigquery-server",
            "self": "#/mcpproviders/ergut/servers/mcp-bigquery-server/meta",
            "xid": "/mcpproviders/ergut/servers/mcp-bigquery-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:21.852781004Z",
            "modifiedat": "2025-05-12T08:18:21.852781004Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ergut/servers/mcp-bigquery-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ergut/servers/mcp-bigquery-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-bigquery-server",
              "versionid": "1",
              "self": "#/mcpproviders/ergut/servers/mcp-bigquery-server/versions/1",
              "xid": "/mcpproviders/ergut/servers/mcp-bigquery-server/versions/1",
              "epoch": 1,
              "name": "io.github.ergut/mcp-bigquery-server",
              "isdefault": true,
              "description": "This is a server that lets your LLMs (like Claude) talk directly to your BigQuery data! Think of it as a friendly translator that sits between your AI assistant and your database, making sure they can chat securely and efficiently.",
              "createdat": "2025-05-12T08:18:21.852781004Z",
              "modifiedat": "2025-05-12T08:18:21.852781004Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-y",
                      "@ergut/mcp-bigquery-server",
                      "--project-id",
                      "your-project-id",
                      "--location",
                      "us-central1"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@ergut/mcp-bigquery-server"
                }
              ],
              "remotes": [],
              "repo_ref": "ergut/mcp-bigquery-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "esignaturescom": {
      "mcpproviderid": "esignaturescom",
      "self": "#/mcpproviders/esignaturescom",
      "xid": "/mcpproviders/esignaturescom",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:44.007530828Z",
      "modifiedat": "2025-05-12T08:17:44.007530828Z",

      "serversurl": "#/mcpproviders/esignaturescom/servers",
      "servers": {
        "mcp-server-esignatures": {
          "serverid": "mcp-server-esignatures",
          "self": "#/mcpproviders/esignaturescom/servers/mcp-server-esignatures",
          "xid": "/mcpproviders/esignaturescom/servers/mcp-server-esignatures",

          "metaurl": "#/mcpproviders/esignaturescom/servers/mcp-server-esignatures/meta",
          "meta": {
            "serverid": "mcp-server-esignatures",
            "self": "#/mcpproviders/esignaturescom/servers/mcp-server-esignatures/meta",
            "xid": "/mcpproviders/esignaturescom/servers/mcp-server-esignatures/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:44.007530828Z",
            "modifiedat": "2025-05-12T08:17:44.007530828Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/esignaturescom/servers/mcp-server-esignatures/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/esignaturescom/servers/mcp-server-esignatures/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-esignatures",
              "versionid": "1",
              "self": "#/mcpproviders/esignaturescom/servers/mcp-server-esignatures/versions/1",
              "xid": "/mcpproviders/esignaturescom/servers/mcp-server-esignatures/versions/1",
              "epoch": 1,
              "name": "io.github.esignaturescom/mcp-server-esignatures",
              "isdefault": true,
              "description": "MCP server for eSignatures (https://esignatures.com)",
              "createdat": "2025-05-12T08:17:44.007530828Z",
              "modifiedat": "2025-05-12T08:17:44.007530828Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your eSignatures API secret token",
                        "name": "ESIGNATURES_SECRET_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "mcp-server-esignatures"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-server-esignatures"
                }
              ],
              "remotes": [],
              "repo_ref": "esignaturescom/mcp-server-esignatures",
              "resources": [],
              "tools": [
                {
                  "description": "Creates a new contract. The contract can be a draft which the user can customize/send, or the contract can be sent instantly. So called 'signature fields' like Name/Date/signature-line must be left out, they are all handled automatically. Contract owners can customize the content by replacing {{placeholder fields}} inside the content, and the signers can fill in Signer fields when they sign the contract.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_contract"
                },
                {
                  "description": "Responds with the contract details, contract_id, status, final PDF url if present, title, labels, metadata, expiry time if present, and signer details with all signer events (signer events are included only for recent contracts, with rate limiting).",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "query_contract"
                },
                {
                  "description": "Withdraws a sent contract.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "withdraw_contract"
                },
                {
                  "description": "Deletes a contract. The contract can only be deleted if it's a test contract or a draft contract.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_contract"
                },
                {
                  "description": "Returns the the details of the latest 100 contracts.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_recent_contracts"
                },
                {
                  "description": "Creates a reusable contract template for contracts to be based on.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_template"
                },
                {
                  "description": "Updates the title, labels or the content of a contract template.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_template"
                },
                {
                  "description": "Responds with the template details, template_id, title, labels, created_at, list of the Placeholder fields in the template, list of Signer fields int he template, and the full content inside document_elements",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "query_template"
                },
                {
                  "description": "Deletes a contract template.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_template"
                },
                {
                  "description": "Lists the templates.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_templates"
                },
                {
                  "description": "Creates a HTTPS link for editing a contract template; sends an invitation email if an email is provided..",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "add_template_collaborator"
                },
                {
                  "description": "Removes the template collaborator",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "remove_template_collaborator"
                },
                {
                  "description": "Returns the list of template collaborators, including their GUID, name, email, and the HTTPS link for editing the template",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_template_collaborators"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "evalstate": {
      "mcpproviderid": "evalstate",
      "self": "#/mcpproviders/evalstate",
      "xid": "/mcpproviders/evalstate",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:50.962980443Z",
      "modifiedat": "2025-05-12T08:17:50.962980443Z",

      "serversurl": "#/mcpproviders/evalstate/servers",
      "servers": {
        "mcp-hfspace": {
          "serverid": "mcp-hfspace",
          "self": "#/mcpproviders/evalstate/servers/mcp-hfspace",
          "xid": "/mcpproviders/evalstate/servers/mcp-hfspace",

          "metaurl": "#/mcpproviders/evalstate/servers/mcp-hfspace/meta",
          "meta": {
            "serverid": "mcp-hfspace",
            "self": "#/mcpproviders/evalstate/servers/mcp-hfspace/meta",
            "xid": "/mcpproviders/evalstate/servers/mcp-hfspace/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:50.962980443Z",
            "modifiedat": "2025-05-12T08:17:50.962980443Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/evalstate/servers/mcp-hfspace/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/evalstate/servers/mcp-hfspace/versions",
          "versions": {
            "1": {
              "serverid": "mcp-hfspace",
              "versionid": "1",
              "self": "#/mcpproviders/evalstate/servers/mcp-hfspace/versions/1",
              "xid": "/mcpproviders/evalstate/servers/mcp-hfspace/versions/1",
              "epoch": 1,
              "name": "io.github.evalstate/mcp-hfspace",
              "isdefault": true,
              "description": "Connect to Hugging Face Spaces with minimal setup needed - simply add your spaces and go! Provides Image Generation capabilities to Claude Desktop.",
              "createdat": "2025-05-12T08:17:50.962980443Z",
              "modifiedat": "2025-05-12T08:17:50.962980443Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [],
                  "description": "List of available resources.",
                  "name": "Available Resources"
                },
                {
                  "arguments": [],
                  "description": "Prompt template from endpoint FLUX.1-schnell",
                  "name": "FLUX.1-schnell"
                },
                {
                  "arguments": [],
                  "description": "Prompt template from endpoint shuttleai/shuttle-jaguar",
                  "name": "shuttleai/shuttle-jaguar"
                },
                {
                  "arguments": [],
                  "description": "Prompt template from endpoint styletts2/styletts2",
                  "name": "styletts2/styletts2"
                },
                {
                  "arguments": [],
                  "description": "Prompt template from endpoint Qwen/QVQ-72B-preview",
                  "name": "Qwen/QVQ-72B-preview"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Working directory for file upload/download",
                        "name": "MCP_HF_WORK_DIR",
                        "required": false
                      },
                      {
                        "description": "Hugging Face Token for private spaces",
                        "name": "HF_TOKEN",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@llmindset/mcp-hfspace"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@llmindset/mcp-hfspace"
                }
              ],
              "remotes": [],
              "repo_ref": "evalstate/mcp-hfspace",
              "resources": [
                {
                  "description": "List of available files and resources in the working directory.",
                  "mimetype": "text/markdown",
                  "name": "available-files",
                  "uritemplate": "resource://mcp-hfspace/available-files"
                }
              ],
              "tools": [
                {
                  "description": "A list of available file and resources. If the User requests things like 'most recent image' or 'the audio' use this tool to identify the intended resource. This tool returns 'resource uri', 'name', 'size', 'last modified'  and 'mime type' in a markdown table",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "available-files"
                },
                {
                  "description": "Use semantic search to find an endpoint on the `Hugging Face Spaces` service. The search term will usually be 3-7 words describing a task or activity the Person is trying to accomplish. The results are returned in a markdown table. Present all results to the Person. Await specific guidance from the Person before making further Tool calls.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The semantic search term to use.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "search-spaces"
                },
                {
                  "description": "Endpoint tool loaded from Hugging Face Space",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "FLUX.1-schnell"
                },
                {
                  "description": "Endpoint tool loaded from Hugging Face Space",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "shuttleai/shuttle-jaguar"
                },
                {
                  "description": "Endpoint tool loaded from Hugging Face Space",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "styletts2/styletts2"
                },
                {
                  "description": "Endpoint tool loaded from Hugging Face Space",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "Qwen/QVQ-72B-preview"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "exa-labs": {
      "mcpproviderid": "exa-labs",
      "self": "#/mcpproviders/exa-labs",
      "xid": "/mcpproviders/exa-labs",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:40.730384823Z",
      "modifiedat": "2025-05-12T08:20:40.730384823Z",

      "serversurl": "#/mcpproviders/exa-labs/servers",
      "servers": {
        "exa-mcp-server": {
          "serverid": "exa-mcp-server",
          "self": "#/mcpproviders/exa-labs/servers/exa-mcp-server",
          "xid": "/mcpproviders/exa-labs/servers/exa-mcp-server",

          "metaurl": "#/mcpproviders/exa-labs/servers/exa-mcp-server/meta",
          "meta": {
            "serverid": "exa-mcp-server",
            "self": "#/mcpproviders/exa-labs/servers/exa-mcp-server/meta",
            "xid": "/mcpproviders/exa-labs/servers/exa-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:40.730384823Z",
            "modifiedat": "2025-05-12T08:20:40.730384823Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/exa-labs/servers/exa-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/exa-labs/servers/exa-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "exa-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/exa-labs/servers/exa-mcp-server/versions/1",
              "xid": "/mcpproviders/exa-labs/servers/exa-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.exa-labs/exa-mcp-server",
              "isdefault": true,
              "description": "The Exa MCP server enables AI assistants to perform real-time web searches using Exa's powerful search API, providing structured search results including titles, URLs, and content snippets, caching recent searches as resources, handling rate limiting and errors gracefully, and supporting real-time web crawling for fresh content.",
              "createdat": "2025-05-12T08:20:40.730384823Z",
              "modifiedat": "2025-05-12T08:20:40.730384823Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Exa search API",
                        "name": "EXA_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "/path/to/exa-mcp-server/build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "exa-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "exa-labs/exa-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Performs real-time web searches with optimized results and content extraction",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "web_search"
                },
                {
                  "description": "Specialized search focused on academic papers and research content",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "research_paper_search"
                },
                {
                  "description": "Dedicated Twitter/X.com search that finds tweets, profiles, and conversations",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "twitter_search"
                },
                {
                  "description": "Comprehensive company research tool that crawls company websites to gather detailed information about businesses",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "company_research"
                },
                {
                  "description": "Extracts content from specific URLs, useful for reading articles, PDFs, or any web page when you have the exact URL",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "crawling"
                }
              ],
              "version_detail": {
                "version": "0.3.6"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "executeautomation": {
      "mcpproviderid": "executeautomation",
      "self": "#/mcpproviders/executeautomation",
      "xid": "/mcpproviders/executeautomation",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:32.492826365Z",
      "modifiedat": "2025-05-12T08:19:32.492826365Z",

      "serversurl": "#/mcpproviders/executeautomation/servers",
      "servers": {
        "mcp-playwright": {
          "serverid": "mcp-playwright",
          "self": "#/mcpproviders/executeautomation/servers/mcp-playwright",
          "xid": "/mcpproviders/executeautomation/servers/mcp-playwright",

          "metaurl": "#/mcpproviders/executeautomation/servers/mcp-playwright/meta",
          "meta": {
            "serverid": "mcp-playwright",
            "self": "#/mcpproviders/executeautomation/servers/mcp-playwright/meta",
            "xid": "/mcpproviders/executeautomation/servers/mcp-playwright/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:32.492826365Z",
            "modifiedat": "2025-05-12T08:19:32.492826365Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/executeautomation/servers/mcp-playwright/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/executeautomation/servers/mcp-playwright/versions",
          "versions": {
            "1": {
              "serverid": "mcp-playwright",
              "versionid": "1",
              "self": "#/mcpproviders/executeautomation/servers/mcp-playwright/versions/1",
              "xid": "/mcpproviders/executeautomation/servers/mcp-playwright/versions/1",
              "epoch": 1,
              "name": "io.github.executeautomation/mcp-playwright",
              "isdefault": true,
              "description": "A Model Context Protocol server that provides browser automation capabilities using Playwright. This server enables LLMs to interact with web pages, take screenshots, generate test code, web scraps the page and execute JavaScript in a real browser environment.",
              "documentation": "https://executeautomation.github.io/mcp-playwright/",
              "createdat": "2025-05-12T08:19:32.492826365Z",
              "modifiedat": "2025-05-12T08:19:32.492826365Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-y",
                      "@executeautomation/playwright-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@executeautomation/playwright-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "executeautomation/mcp-playwright",
              "resources": [
                {
                  "description": "Browser console logs resource",
                  "mimetype": "text/plain",
                  "name": "Browser console logs",
                  "uritemplate": "console://logs"
                },
                {
                  "description": "Screenshots of the browser pages",
                  "mimetype": "image/png",
                  "name": "Screenshot resource",
                  "uritemplate": "screenshot://{name}"
                }
              ],
              "tools": [
                {
                  "description": "Browser automation tools for interaction, screenshots, test code generation, web scraping, and JS execution",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "(from createToolDefinitions)"
                },
                {
                  "name": "(detailed tool definitions not fully extracted)"
                }
              ],
              "version_detail": {
                "version": "1.0.3"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "fatwang2": {
      "mcpproviderid": "fatwang2",
      "self": "#/mcpproviders/fatwang2",
      "xid": "/mcpproviders/fatwang2",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:17.442063072Z",
      "modifiedat": "2025-05-12T08:18:17.442063072Z",

      "serversurl": "#/mcpproviders/fatwang2/servers",
      "servers": {
        "search1api-mcp": {
          "serverid": "search1api-mcp",
          "self": "#/mcpproviders/fatwang2/servers/search1api-mcp",
          "xid": "/mcpproviders/fatwang2/servers/search1api-mcp",

          "metaurl": "#/mcpproviders/fatwang2/servers/search1api-mcp/meta",
          "meta": {
            "serverid": "search1api-mcp",
            "self": "#/mcpproviders/fatwang2/servers/search1api-mcp/meta",
            "xid": "/mcpproviders/fatwang2/servers/search1api-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:17.442063072Z",
            "modifiedat": "2025-05-12T08:18:17.442063072Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/fatwang2/servers/search1api-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/fatwang2/servers/search1api-mcp/versions",
          "versions": {
            "1": {
              "serverid": "search1api-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/fatwang2/servers/search1api-mcp/versions/1",
              "xid": "/mcpproviders/fatwang2/servers/search1api-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.fatwang2/search1api-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that provides search and crawl functionality using Search1API.",
              "createdat": "2025-05-12T08:18:17.442063072Z",
              "modifiedat": "2025-05-12T08:18:17.442063072Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Search1API",
                        "name": "SEARCH1API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "start"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "search1api-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "fatwang2/search1api-mcp",
              "resources": [
                {
                  "description": "Basic information about Search1API capabilities",
                  "mimetype": "application/json",
                  "name": "Search1API Information",
                  "uritemplate": "search1api://info"
                }
              ],
              "tools": [],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "felores": {
      "mcpproviderid": "felores",
      "self": "#/mcpproviders/felores",
      "xid": "/mcpproviders/felores",
      "epoch": 2,
      "createdat": "2025-05-12T08:17:47.797522294Z",
      "modifiedat": "2025-05-12T08:17:48.099609891Z",

      "serversurl": "#/mcpproviders/felores/servers",
      "servers": {
        "airtable-mcp": {
          "serverid": "airtable-mcp",
          "self": "#/mcpproviders/felores/servers/airtable-mcp",
          "xid": "/mcpproviders/felores/servers/airtable-mcp",

          "metaurl": "#/mcpproviders/felores/servers/airtable-mcp/meta",
          "meta": {
            "serverid": "airtable-mcp",
            "self": "#/mcpproviders/felores/servers/airtable-mcp/meta",
            "xid": "/mcpproviders/felores/servers/airtable-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:47.797522294Z",
            "modifiedat": "2025-05-12T08:17:47.797522294Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/felores/servers/airtable-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/felores/servers/airtable-mcp/versions",
          "versions": {
            "1": {
              "serverid": "airtable-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/felores/servers/airtable-mcp/versions/1",
              "xid": "/mcpproviders/felores/servers/airtable-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.felores/airtable-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol server that provides tools for interacting with Airtable's API. This server enables programmatic management of Airtable bases, tables, fields, and records through Claude Desktop or other MCP clients.",
              "createdat": "2025-05-12T08:17:47.797522294Z",
              "modifiedat": "2025-05-12T08:17:47.797522294Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Airtable API key for authentication",
                        "name": "AIRTABLE_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "@felores/airtable-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@felores/airtable-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "felores/airtable-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "List all accessible Airtable bases",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_bases"
                },
                {
                  "description": "List all tables in a base",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id"
                    ],
                    "type": "object"
                  },
                  "name": "list_tables"
                },
                {
                  "description": "Create a new table in a base",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "description": {
                        "description": "Description of the table",
                        "type": "string"
                      },
                      "fields": {
                        "description": "Initial fields for the table",
                        "items": {
                          "properties": {
                            "description": {
                              "description": "Description of the field",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the field",
                              "type": "string"
                            },
                            "options": {
                              "description": "Field-specific options",
                              "type": "object"
                            },
                            "type": {
                              "description": "Type of the field (e.g., singleLineText, multilineText, number, etc.)",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "table_name": {
                        "description": "Name of the new table",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_name"
                    ],
                    "type": "object"
                  },
                  "name": "create_table"
                },
                {
                  "description": "Update a table's schema",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "description": {
                        "description": "New description for the table",
                        "type": "string"
                      },
                      "name": {
                        "description": "New name for the table",
                        "type": "string"
                      },
                      "table_id": {
                        "description": "ID of the table to update",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_id"
                    ],
                    "type": "object"
                  },
                  "name": "update_table"
                },
                {
                  "description": "Create a new field in a table",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "field": {
                        "properties": {
                          "description": {
                            "description": "Description of the field",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the field",
                            "type": "string"
                          },
                          "options": {
                            "description": "Field-specific options",
                            "type": "object"
                          },
                          "type": {
                            "description": "Type of the field",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ],
                        "type": "object"
                      },
                      "table_id": {
                        "description": "ID of the table",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_id",
                      "field"
                    ],
                    "type": "object"
                  },
                  "name": "create_field"
                },
                {
                  "description": "Update a field in a table",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "field_id": {
                        "description": "ID of the field to update",
                        "type": "string"
                      },
                      "table_id": {
                        "description": "ID of the table",
                        "type": "string"
                      },
                      "updates": {
                        "properties": {
                          "description": {
                            "description": "New description for the field",
                            "type": "string"
                          },
                          "name": {
                            "description": "New name for the field",
                            "type": "string"
                          },
                          "options": {
                            "description": "New field-specific options",
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_id",
                      "field_id",
                      "updates"
                    ],
                    "type": "object"
                  },
                  "name": "update_field"
                },
                {
                  "description": "List records in a table",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "max_records": {
                        "description": "Maximum number of records to return",
                        "type": "number"
                      },
                      "table_name": {
                        "description": "Name of the table",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_name"
                    ],
                    "type": "object"
                  },
                  "name": "list_records"
                },
                {
                  "description": "Create a new record in a table",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "fields": {
                        "description": "Record fields as key-value pairs",
                        "type": "object"
                      },
                      "table_name": {
                        "description": "Name of the table",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_name",
                      "fields"
                    ],
                    "type": "object"
                  },
                  "name": "create_record"
                },
                {
                  "description": "Update an existing record in a table",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "fields": {
                        "description": "Record fields to update as key-value pairs",
                        "type": "object"
                      },
                      "record_id": {
                        "description": "ID of the record to update",
                        "type": "string"
                      },
                      "table_name": {
                        "description": "Name of the table",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_name",
                      "record_id",
                      "fields"
                    ],
                    "type": "object"
                  },
                  "name": "update_record"
                },
                {
                  "description": "Delete a record from a table",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "record_id": {
                        "description": "ID of the record to delete",
                        "type": "string"
                      },
                      "table_name": {
                        "description": "Name of the table",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_name",
                      "record_id"
                    ],
                    "type": "object"
                  },
                  "name": "delete_record"
                },
                {
                  "description": "Search for records in a table",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "field_name": {
                        "description": "Name of the field to search in",
                        "type": "string"
                      },
                      "table_name": {
                        "description": "Name of the table",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value to search for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_name",
                      "field_name",
                      "value"
                    ],
                    "type": "object"
                  },
                  "name": "search_records"
                },
                {
                  "description": "Get a single record by its ID",
                  "inputschema": {
                    "properties": {
                      "base_id": {
                        "description": "ID of the base",
                        "type": "string"
                      },
                      "record_id": {
                        "description": "ID of the record to retrieve",
                        "type": "string"
                      },
                      "table_name": {
                        "description": "Name of the table",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base_id",
                      "table_name",
                      "record_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_record"
                }
              ],
              "version_detail": {
                "version": "0.2.0"
              }
            }
          },
          "versionscount": 1
        },
        "placid-mcp-server": {
          "serverid": "placid-mcp-server",
          "self": "#/mcpproviders/felores/servers/placid-mcp-server",
          "xid": "/mcpproviders/felores/servers/placid-mcp-server",

          "metaurl": "#/mcpproviders/felores/servers/placid-mcp-server/meta",
          "meta": {
            "serverid": "placid-mcp-server",
            "self": "#/mcpproviders/felores/servers/placid-mcp-server/meta",
            "xid": "/mcpproviders/felores/servers/placid-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:48.099609891Z",
            "modifiedat": "2025-05-12T08:17:48.099609891Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/felores/servers/placid-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/felores/servers/placid-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "placid-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/felores/servers/placid-mcp-server/versions/1",
              "xid": "/mcpproviders/felores/servers/placid-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.felores/placid-mcp-server",
              "isdefault": true,
              "description": "An MCP server implementation for integrating with Placid.app's API. This server provides tools for listing templates and generating images and videos through the Model Context Protocol.",
              "createdat": "2025-05-12T08:17:48.099609891Z",
              "modifiedat": "2025-05-12T08:17:48.099609891Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API token for Placid.app",
                        "name": "PLACID_API_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "@felores/placid-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@felores/placid-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "felores/placid-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Lists available Placid templates with filtering options. Each template includes its title, ID, preview image URL, available layers, and tags.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "placid_list_templates"
                },
                {
                  "description": "Generate videos by combining Placid templates with dynamic content like videos, images, and text.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "placid_generate_video"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "ferrislucas": {
      "mcpproviderid": "ferrislucas",
      "self": "#/mcpproviders/ferrislucas",
      "xid": "/mcpproviders/ferrislucas",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:37.793434586Z",
      "modifiedat": "2025-05-12T08:17:37.793434586Z",

      "serversurl": "#/mcpproviders/ferrislucas/servers",
      "servers": {
        "iterm-mcp": {
          "serverid": "iterm-mcp",
          "self": "#/mcpproviders/ferrislucas/servers/iterm-mcp",
          "xid": "/mcpproviders/ferrislucas/servers/iterm-mcp",

          "metaurl": "#/mcpproviders/ferrislucas/servers/iterm-mcp/meta",
          "meta": {
            "serverid": "iterm-mcp",
            "self": "#/mcpproviders/ferrislucas/servers/iterm-mcp/meta",
            "xid": "/mcpproviders/ferrislucas/servers/iterm-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:37.793434586Z",
            "modifiedat": "2025-05-12T08:17:37.793434586Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ferrislucas/servers/iterm-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ferrislucas/servers/iterm-mcp/versions",
          "versions": {
            "1": {
              "serverid": "iterm-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ferrislucas/servers/iterm-mcp/versions/1",
              "xid": "/mcpproviders/ferrislucas/servers/iterm-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ferrislucas/iterm-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol server that provides access to your iTerm session.",
              "createdat": "2025-05-12T08:17:37.793434586Z",
              "modifiedat": "2025-05-12T08:17:37.793434586Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-y",
                      "iterm-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "iterm-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "ferrislucas/iterm-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Writes text to the active iTerm terminal - often used to run a command in the terminal",
                  "inputschema": {
                    "properties": {
                      "command": {
                        "description": "The command to run or text to write to the terminal",
                        "type": "string"
                      }
                    },
                    "required": [
                      "command"
                    ],
                    "type": "object"
                  },
                  "name": "write_to_terminal"
                },
                {
                  "description": "Reads the output from the active iTerm terminal",
                  "inputschema": {
                    "properties": {
                      "linesOfOutput": {
                        "description": "The number of lines of output to read.",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "linesOfOutput"
                    ],
                    "type": "object"
                  },
                  "name": "read_terminal_output"
                },
                {
                  "description": "Sends a control character to the active iTerm terminal (e.g., Control-C, or special sequences like ']' for telnet escape)",
                  "inputschema": {
                    "properties": {
                      "letter": {
                        "description": "The letter corresponding to the control character (e.g., 'C' for Control-C, ']' for telnet escape)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "letter"
                    ],
                    "type": "object"
                  },
                  "name": "send_control_character"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "financial-datasets": {
      "mcpproviderid": "financial-datasets",
      "self": "#/mcpproviders/financial-datasets",
      "xid": "/mcpproviders/financial-datasets",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:29.469317546Z",
      "modifiedat": "2025-05-12T08:18:29.469317546Z",

      "serversurl": "#/mcpproviders/financial-datasets/servers",
      "servers": {
        "mcp-server": {
          "serverid": "mcp-server",
          "self": "#/mcpproviders/financial-datasets/servers/mcp-server",
          "xid": "/mcpproviders/financial-datasets/servers/mcp-server",

          "metaurl": "#/mcpproviders/financial-datasets/servers/mcp-server/meta",
          "meta": {
            "serverid": "mcp-server",
            "self": "#/mcpproviders/financial-datasets/servers/mcp-server/meta",
            "xid": "/mcpproviders/financial-datasets/servers/mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:29.469317546Z",
            "modifiedat": "2025-05-12T08:18:29.469317546Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/financial-datasets/servers/mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/financial-datasets/servers/mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/financial-datasets/servers/mcp-server/versions/1",
              "xid": "/mcpproviders/financial-datasets/servers/mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.financial-datasets/mcp-server",
              "isdefault": true,
              "description": "This is a Model Context Protocol (MCP) server that provides access to stock market data from Financial Datasets. It allows Claude and other AI assistants to retrieve income statements, balance sheets, cash flow statements, stock prices, and market news directly through the MCP interface.",
              "createdat": "2025-05-12T08:18:29.469317546Z",
              "modifiedat": "2025-05-12T08:18:29.469317546Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Financial Datasets API",
                        "name": "FINANCIAL_DATASETS_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "run",
                      "server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "financial-datasets-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "financial-datasets/mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Get income statements for a company.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "integer"
                      },
                      "period": {
                        "type": "string"
                      },
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker"
                    ],
                    "type": "object"
                  },
                  "name": "get_income_statements"
                },
                {
                  "description": "Get balance sheets for a company.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "integer"
                      },
                      "period": {
                        "type": "string"
                      },
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker"
                    ],
                    "type": "object"
                  },
                  "name": "get_balance_sheets"
                },
                {
                  "description": "Get cash flow statements for a company.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "integer"
                      },
                      "period": {
                        "type": "string"
                      },
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker"
                    ],
                    "type": "object"
                  },
                  "name": "get_cash_flow_statements"
                },
                {
                  "description": "Get the current / latest price of a company.",
                  "inputschema": {
                    "properties": {
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker"
                    ],
                    "type": "object"
                  },
                  "name": "get_current_stock_price"
                },
                {
                  "description": "Gets historical stock prices for a company.",
                  "inputschema": {
                    "properties": {
                      "end_date": {
                        "type": "string"
                      },
                      "interval": {
                        "type": "string"
                      },
                      "interval_multiplier": {
                        "type": "integer"
                      },
                      "start_date": {
                        "type": "string"
                      },
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker",
                      "start_date",
                      "end_date"
                    ],
                    "type": "object"
                  },
                  "name": "get_historical_stock_prices"
                },
                {
                  "description": "Get news for a company.",
                  "inputschema": {
                    "properties": {
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker"
                    ],
                    "type": "object"
                  },
                  "name": "get_company_news"
                },
                {
                  "description": "Gets all available crypto tickers.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_available_crypto_tickers"
                },
                {
                  "description": "Gets historical prices for a crypto currency.",
                  "inputschema": {
                    "properties": {
                      "end_date": {
                        "type": "string"
                      },
                      "interval": {
                        "type": "string"
                      },
                      "interval_multiplier": {
                        "type": "integer"
                      },
                      "start_date": {
                        "type": "string"
                      },
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker",
                      "start_date",
                      "end_date"
                    ],
                    "type": "object"
                  },
                  "name": "get_crypto_prices"
                },
                {
                  "description": "Gets historical prices for a crypto currency.",
                  "inputschema": {
                    "properties": {
                      "end_date": {
                        "type": "string"
                      },
                      "interval": {
                        "type": "string"
                      },
                      "interval_multiplier": {
                        "type": "integer"
                      },
                      "start_date": {
                        "type": "string"
                      },
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker",
                      "start_date",
                      "end_date"
                    ],
                    "type": "object"
                  },
                  "name": "get_historical_crypto_prices"
                },
                {
                  "description": "Get the current / latest price of a crypto currency.",
                  "inputschema": {
                    "properties": {
                      "ticker": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ticker"
                    ],
                    "type": "object"
                  },
                  "name": "get_current_crypto_price"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "fireproof-storage": {
      "mcpproviderid": "fireproof-storage",
      "self": "#/mcpproviders/fireproof-storage",
      "xid": "/mcpproviders/fireproof-storage",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:55.905156622Z",
      "modifiedat": "2025-05-12T08:17:55.905156622Z",

      "serversurl": "#/mcpproviders/fireproof-storage/servers",
      "servers": {
        "mcp-database-server": {
          "serverid": "mcp-database-server",
          "self": "#/mcpproviders/fireproof-storage/servers/mcp-database-server",
          "xid": "/mcpproviders/fireproof-storage/servers/mcp-database-server",

          "metaurl": "#/mcpproviders/fireproof-storage/servers/mcp-database-server/meta",
          "meta": {
            "serverid": "mcp-database-server",
            "self": "#/mcpproviders/fireproof-storage/servers/mcp-database-server/meta",
            "xid": "/mcpproviders/fireproof-storage/servers/mcp-database-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:55.905156622Z",
            "modifiedat": "2025-05-12T08:17:55.905156622Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/fireproof-storage/servers/mcp-database-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/fireproof-storage/servers/mcp-database-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-database-server",
              "versionid": "1",
              "self": "#/mcpproviders/fireproof-storage/servers/mcp-database-server/versions/1",
              "xid": "/mcpproviders/fireproof-storage/servers/mcp-database-server/versions/1",
              "epoch": 1,
              "name": "io.github.fireproof-storage/mcp-database-server",
              "isdefault": true,
              "description": "Simple JSON document server with basic CRUD operations using Fireproof database in a Model Context Protocol server.",
              "createdat": "2025-05-12T08:17:55.905156622Z",
              "modifiedat": "2025-05-12T08:17:55.905156622Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "fireproof-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "fireproof-storage/mcp-database-server",
              "resources": [],
              "tools": [
                {
                  "description": "Save a JSON document",
                  "inputschema": {
                    "properties": {
                      "doc": {
                        "description": "JSON document to save",
                        "type": "object"
                      }
                    },
                    "required": [
                      "doc"
                    ],
                    "type": "object"
                  },
                  "name": "save_json_doc"
                },
                {
                  "description": "Load a JSON document by ID",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "ID of document to load",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "load_json_doc"
                },
                {
                  "description": "Delete a JSON document by ID",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "ID of document to delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "delete_json_doc"
                },
                {
                  "description": "Query JSON documents sorted by a field",
                  "inputschema": {
                    "properties": {
                      "sort_field": {
                        "description": "Field to sort results by",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sort_field"
                    ],
                    "type": "object"
                  },
                  "name": "query_json_docs"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "furey": {
      "mcpproviderid": "furey",
      "self": "#/mcpproviders/furey",
      "xid": "/mcpproviders/furey",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:26.195234825Z",
      "modifiedat": "2025-05-12T08:19:26.195234825Z",

      "serversurl": "#/mcpproviders/furey/servers",
      "servers": {
        "mongodb-lens": {
          "serverid": "mongodb-lens",
          "self": "#/mcpproviders/furey/servers/mongodb-lens",
          "xid": "/mcpproviders/furey/servers/mongodb-lens",

          "metaurl": "#/mcpproviders/furey/servers/mongodb-lens/meta",
          "meta": {
            "serverid": "mongodb-lens",
            "self": "#/mcpproviders/furey/servers/mongodb-lens/meta",
            "xid": "/mcpproviders/furey/servers/mongodb-lens/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:26.195234825Z",
            "modifiedat": "2025-05-12T08:19:26.195234825Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/furey/servers/mongodb-lens/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/furey/servers/mongodb-lens/versions",
          "versions": {
            "1": {
              "serverid": "mongodb-lens",
              "versionid": "1",
              "self": "#/mcpproviders/furey/servers/mongodb-lens/versions/1",
              "xid": "/mcpproviders/furey/servers/mongodb-lens/versions/1",
              "epoch": 1,
              "name": "io.github.furey/mongodb-lens",
              "isdefault": true,
              "description": "MongoDB MCP server for natural language database interaction",
              "createdat": "2025-05-12T08:19:26.195234825Z",
              "modifiedat": "2025-05-12T08:19:26.195234825Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/mongodb-lens"
                }
              ],
              "remotes": [],
              "repo_ref": "furey/mongodb-lens",
              "resources": [
                {
                  "description": "List of all accessible MongoDB databases",
                  "name": "databases",
                  "uritemplate": "mongodb://databases"
                },
                {
                  "description": "MongoDB database users and roles",
                  "name": "database-users",
                  "uritemplate": "mongodb://database/users"
                },
                {
                  "description": "Database change streams and event triggers configuration",
                  "name": "database-triggers",
                  "uritemplate": "mongodb://database/triggers"
                },
                {
                  "description": "MongoDB stored JavaScript functions",
                  "name": "stored-functions",
                  "uritemplate": "mongodb://database/functions"
                },
                {
                  "description": "List of collections in the current database",
                  "name": "collections",
                  "uritemplate": "mongodb://collections"
                },
                {
                  "description": "Index information for a MongoDB collection",
                  "name": "collection-indexes",
                  "uritemplate": "mongodb://collection/{name}/indexes"
                },
                {
                  "description": "Schema information for a MongoDB collection",
                  "name": "collection-schema",
                  "uritemplate": "mongodb://collection/{name}/schema"
                },
                {
                  "description": "Performance statistics for a MongoDB collection",
                  "name": "collection-stats",
                  "uritemplate": "mongodb://collection/{name}/stats"
                },
                {
                  "description": "Validation rules for a MongoDB collection",
                  "name": "collection-validation",
                  "uritemplate": "mongodb://collection/{name}/validation"
                },
                {
                  "description": "MongoDB server status information",
                  "name": "server-status",
                  "uritemplate": "mongodb://server/status"
                },
                {
                  "description": "MongoDB replica set status and configuration",
                  "name": "replica-status",
                  "uritemplate": "mongodb://server/replica"
                },
                {
                  "description": "Real-time MongoDB performance metrics and profiling data",
                  "name": "performance-metrics",
                  "uritemplate": "mongodb://server/metrics"
                }
              ],
              "tools": [
                {
                  "description": "Connect to a different MongoDB URI or alias",
                  "inputschema": {
                    "properties": {
                      "uri": {
                        "type": "string"
                      },
                      "validateConnection": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "uri",
                      "validateConnection"
                    ],
                    "type": "object"
                  },
                  "name": "connect-mongodb"
                },
                {
                  "description": "Connect back to the original MongoDB URI used at startup",
                  "inputschema": {
                    "properties": {
                      "validateConnection": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "validateConnection"
                    ],
                    "type": "object"
                  },
                  "name": "connect-original"
                },
                {
                  "description": "Add a new MongoDB connection alias",
                  "inputschema": {
                    "properties": {
                      "alias": {
                        "type": "string"
                      },
                      "uri": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "alias",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "name": "add-connection-alias"
                },
                {
                  "description": "List all configured MongoDB connection aliases",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list-connections"
                },
                {
                  "description": "List all accessible MongoDB databases",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list-databases"
                },
                {
                  "description": "Get the name of the current database",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "current-database"
                },
                {
                  "description": "Create a new MongoDB database with option to switch",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "switch": {
                        "type": "string"
                      },
                      "validateName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "switch",
                      "validateName"
                    ],
                    "type": "object"
                  },
                  "name": "create-database"
                },
                {
                  "description": "Switch to a specific database",
                  "inputschema": {
                    "properties": {
                      "database": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "database"
                    ],
                    "type": "object"
                  },
                  "name": "use-database"
                },
                {
                  "description": "Drop a database (requires confirmation)",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "drop-database"
                },
                {
                  "description": "Create a new database user",
                  "inputschema": {
                    "properties": {
                      "password": {
                        "type": "string"
                      },
                      "roles": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "username",
                      "password",
                      "roles"
                    ],
                    "type": "object"
                  },
                  "name": "create-user"
                },
                {
                  "description": "Drop an existing database user",
                  "inputschema": {
                    "properties": {
                      "token": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "username"
                    ],
                    "type": "object"
                  },
                  "name": "drop-user"
                },
                {
                  "description": "List collections in the current database",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list-collections"
                },
                {
                  "description": "Create a new collection with options",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "options": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "options"
                    ],
                    "type": "object"
                  },
                  "name": "create-collection"
                },
                {
                  "description": "Drop a collection (requires confirmation)",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "drop-collection"
                },
                {
                  "description": "Rename an existing collection",
                  "inputschema": {
                    "properties": {
                      "dropTarget": {
                        "type": "string"
                      },
                      "newName": {
                        "type": "string"
                      },
                      "oldName": {
                        "type": "string"
                      },
                      "token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "oldName",
                      "newName",
                      "dropTarget"
                    ],
                    "type": "object"
                  },
                  "name": "rename-collection"
                },
                {
                  "description": "Run validation on a collection to check for inconsistencies",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "full": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "full"
                    ],
                    "type": "object"
                  },
                  "name": "validate-collection"
                },
                {
                  "description": "Get unique values for a field",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "field": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "field",
                      "filter"
                    ],
                    "type": "object"
                  },
                  "name": "distinct-values"
                },
                {
                  "description": "Run queries with filters and projections",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "projection": {
                        "type": "string"
                      },
                      "skip": {
                        "type": "integer"
                      },
                      "sort": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "filter",
                      "limit",
                      "skip"
                    ],
                    "type": "object"
                  },
                  "name": "find-documents"
                },
                {
                  "description": "Count documents with optional filter",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "filter"
                    ],
                    "type": "object"
                  },
                  "name": "count-documents"
                },
                {
                  "description": "Insert one or multiple documents into a collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "document": {
                        "type": "string"
                      },
                      "options": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "document"
                    ],
                    "type": "object"
                  },
                  "name": "insert-document"
                },
                {
                  "description": "Update specific documents in a collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "options": {
                        "type": "string"
                      },
                      "update": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "filter",
                      "update"
                    ],
                    "type": "object"
                  },
                  "name": "update-document"
                },
                {
                  "description": "Delete document(s) (requires confirmation)",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "many": {
                        "type": "string"
                      },
                      "token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "filter",
                      "many"
                    ],
                    "type": "object"
                  },
                  "name": "delete-document"
                },
                {
                  "description": "Run aggregation pipelines",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "pipeline": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "pipeline",
                      "limit"
                    ],
                    "type": "object"
                  },
                  "name": "aggregate-data"
                },
                {
                  "description": "Create new index on collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "keys": {
                        "type": "string"
                      },
                      "options": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "keys"
                    ],
                    "type": "object"
                  },
                  "name": "create-index"
                },
                {
                  "description": "Drop an existing index from a collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "indexName": {
                        "type": "string"
                      },
                      "token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "indexName"
                    ],
                    "type": "object"
                  },
                  "name": "drop-index"
                },
                {
                  "description": "Get database or collection statistics",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "target": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "target"
                    ],
                    "type": "object"
                  },
                  "name": "get-stats"
                },
                {
                  "description": "Automatically infer schema from collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "sampleSize": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "collection",
                      "sampleSize"
                    ],
                    "type": "object"
                  },
                  "name": "analyze-schema"
                },
                {
                  "description": "Generate a JSON Schema validator for a collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "strictness": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "strictness"
                    ],
                    "type": "object"
                  },
                  "name": "generate-schema-validator"
                },
                {
                  "description": "Compare schemas between two collections",
                  "inputschema": {
                    "properties": {
                      "sampleSize": {
                        "type": "integer"
                      },
                      "sourceCollection": {
                        "type": "string"
                      },
                      "targetCollection": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "sourceCollection",
                      "targetCollection",
                      "sampleSize"
                    ],
                    "type": "object"
                  },
                  "name": "compare-schemas"
                },
                {
                  "description": "Analyze query performance",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "verbosity": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "filter",
                      "verbosity"
                    ],
                    "type": "object"
                  },
                  "name": "explain-query"
                },
                {
                  "description": "Analyze query patterns and suggest optimizations",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "duration": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "collection",
                      "duration"
                    ],
                    "type": "object"
                  },
                  "name": "analyze-query-patterns"
                },
                {
                  "description": "Perform bulk inserts, updates, or deletes",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "operations": {
                        "type": "string"
                      },
                      "ordered": {
                        "type": "string"
                      },
                      "token": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "operations",
                      "ordered"
                    ],
                    "type": "object"
                  },
                  "name": "bulk-operations"
                },
                {
                  "description": "Create a time series collection for temporal data",
                  "inputschema": {
                    "properties": {
                      "expireAfterSeconds": {
                        "type": "integer"
                      },
                      "granularity": {
                        "type": "string"
                      },
                      "metaField": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "timeField": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "timeField",
                      "granularity"
                    ],
                    "type": "object"
                  },
                  "name": "create-timeseries"
                },
                {
                  "description": "Find documents with language-specific collation rules",
                  "inputschema": {
                    "properties": {
                      "caseLevel": {
                        "type": "string"
                      },
                      "collection": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "locale": {
                        "type": "string"
                      },
                      "sort": {
                        "type": "string"
                      },
                      "strength": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "collection",
                      "filter",
                      "locale",
                      "strength",
                      "caseLevel"
                    ],
                    "type": "object"
                  },
                  "name": "collation-query"
                },
                {
                  "description": "Perform full-text search across text-indexed fields",
                  "inputschema": {
                    "properties": {
                      "caseSensitive": {
                        "type": "string"
                      },
                      "collection": {
                        "type": "string"
                      },
                      "diacriticSensitive": {
                        "type": "string"
                      },
                      "language": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "searchText": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "searchText",
                      "limit"
                    ],
                    "type": "object"
                  },
                  "name": "text-search"
                },
                {
                  "description": "Run geospatial queries with various operators",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "field": {
                        "type": "string"
                      },
                      "geometry": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "maxDistance": {
                        "type": "integer"
                      },
                      "operator": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "operator",
                      "field",
                      "geometry",
                      "limit"
                    ],
                    "type": "object"
                  },
                  "name": "geo-query"
                },
                {
                  "description": "Execute multiple operations in a single transaction",
                  "inputschema": {
                    "properties": {
                      "operations": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "operations"
                    ],
                    "type": "object"
                  },
                  "name": "transaction"
                },
                {
                  "description": "Watch for changes in a collection using change streams",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "duration": {
                        "type": "integer"
                      },
                      "fullDocument": {
                        "type": "string"
                      },
                      "operations": {
                        "type": "array"
                      }
                    },
                    "required": [
                      "collection",
                      "operations",
                      "duration",
                      "fullDocument"
                    ],
                    "type": "object"
                  },
                  "name": "watch-changes"
                },
                {
                  "description": "Manage large files with GridFS",
                  "inputschema": {
                    "properties": {
                      "bucket": {
                        "type": "string"
                      },
                      "filename": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "operation": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "operation",
                      "bucket",
                      "limit"
                    ],
                    "type": "object"
                  },
                  "name": "gridfs-operation"
                },
                {
                  "description": "Clear memory caches to ensure fresh data",
                  "inputschema": {
                    "properties": {
                      "target": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "target"
                    ],
                    "type": "object"
                  },
                  "name": "clear-cache"
                },
                {
                  "description": "Get sharding status for database or collections",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "target": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "target"
                    ],
                    "type": "object"
                  },
                  "name": "shard-status"
                },
                {
                  "description": "Export query results to formatted JSON or CSV",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "fields": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "format": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "sort": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "filter",
                      "format",
                      "limit"
                    ],
                    "type": "object"
                  },
                  "name": "export-data"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "gannonh": {
      "mcpproviderid": "gannonh",
      "self": "#/mcpproviders/gannonh",
      "xid": "/mcpproviders/gannonh",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:57.674558092Z",
      "modifiedat": "2025-05-12T08:18:57.674558092Z",

      "serversurl": "#/mcpproviders/gannonh/servers",
      "servers": {
        "firebase-mcp": {
          "serverid": "firebase-mcp",
          "self": "#/mcpproviders/gannonh/servers/firebase-mcp",
          "xid": "/mcpproviders/gannonh/servers/firebase-mcp",

          "metaurl": "#/mcpproviders/gannonh/servers/firebase-mcp/meta",
          "meta": {
            "serverid": "firebase-mcp",
            "self": "#/mcpproviders/gannonh/servers/firebase-mcp/meta",
            "xid": "/mcpproviders/gannonh/servers/firebase-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:57.674558092Z",
            "modifiedat": "2025-05-12T08:18:57.674558092Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/gannonh/servers/firebase-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/gannonh/servers/firebase-mcp/versions",
          "versions": {
            "1": {
              "serverid": "firebase-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/gannonh/servers/firebase-mcp/versions/1",
              "xid": "/mcpproviders/gannonh/servers/firebase-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.gannonh/firebase-mcp",
              "isdefault": true,
              "description": "Firebase MCP enables AI assistants to work directly with Firebase services, including Firestore, Storage, and Authentication, through a standardized Model Context Protocol interface.",
              "createdat": "2025-05-12T08:18:57.674558092Z",
              "modifiedat": "2025-05-12T08:18:57.674558092Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Path to Firebase service account JSON key",
                        "name": "SERVICE_ACCOUNT_KEY_PATH",
                        "required": true
                      },
                      {
                        "description": "Firebase storage bucket name",
                        "name": "FIREBASE_STORAGE_BUCKET",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@gannonh/firebase-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@gannonh/firebase-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "gannonh/firebase-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Add a document to a Firestore collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Collection name",
                        "type": "string"
                      },
                      "data": {
                        "description": "Document data",
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection",
                      "data"
                    ],
                    "type": "object"
                  },
                  "name": "firestore_add_document"
                },
                {
                  "description": "List documents from a Firestore collection with filtering and ordering",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Collection name",
                        "type": "string"
                      },
                      "filters": {
                        "description": "Array of filter conditions",
                        "items": {
                          "properties": {
                            "field": {
                              "description": "Field name to filter",
                              "type": "string"
                            },
                            "operator": {
                              "description": "Comparison operator (==, \u003e, \u003c, \u003e=, \u003c=, array-contains, in, array-contains-any)",
                              "type": "string"
                            },
                            "value": {
                              "description": "Value to compare against (use ISO format for dates)",
                              "type": "string"
                            }
                          },
                          "required": [
                            "field",
                            "operator",
                            "value"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "limit": {
                        "default": 20,
                        "description": "Number of documents to return",
                        "type": "number"
                      },
                      "orderBy": {
                        "description": "Array of fields to order by",
                        "items": {
                          "properties": {
                            "direction": {
                              "default": "asc",
                              "description": "Sort direction (asc or desc)",
                              "enum": [
                                "asc",
                                "desc"
                              ],
                              "type": "string"
                            },
                            "field": {
                              "description": "Field name to order by",
                              "type": "string"
                            }
                          },
                          "required": [
                            "field"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "pageToken": {
                        "description": "Token for pagination to get the next page of results",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection"
                    ],
                    "type": "object"
                  },
                  "name": "firestore_list_documents"
                },
                {
                  "description": "Get a document from a Firestore collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Collection name",
                        "type": "string"
                      },
                      "id": {
                        "description": "Document ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "firestore_get_document"
                },
                {
                  "description": "Update a document in a Firestore collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Collection name",
                        "type": "string"
                      },
                      "data": {
                        "description": "Updated document data",
                        "type": "object"
                      },
                      "id": {
                        "description": "Document ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "id",
                      "data"
                    ],
                    "type": "object"
                  },
                  "name": "firestore_update_document"
                },
                {
                  "description": "Delete a document from a Firestore collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Collection name",
                        "type": "string"
                      },
                      "id": {
                        "description": "Document ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "firestore_delete_document"
                },
                {
                  "description": "Get a user by ID or email from Firebase Authentication",
                  "inputschema": {
                    "properties": {
                      "identifier": {
                        "description": "User ID or email address",
                        "type": "string"
                      }
                    },
                    "required": [
                      "identifier"
                    ],
                    "type": "object"
                  },
                  "name": "auth_get_user"
                },
                {
                  "description": "List files in a given path in Firebase Storage",
                  "inputschema": {
                    "properties": {
                      "directoryPath": {
                        "description": "The optional path to list files from. If not provided, the root is used.",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "storage_list_files"
                },
                {
                  "description": "Get file information including metadata and download URL",
                  "inputschema": {
                    "properties": {
                      "filePath": {
                        "description": "The path of the file to get information for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "filePath"
                    ],
                    "type": "object"
                  },
                  "name": "storage_get_file_info"
                },
                {
                  "description": "Upload a file to Firebase Storage. Supports local file paths (preferred for binary files), base64 data, or plain text.",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "Can be: 1) A local file path (e.g., \"/path/to/file.pdf\") - RECOMMENDED for all file types, especially binary files like PDFs and images, 2) A data URL (e.g., \"data:image/png;base64,...\") - may have issues with large files, or 3) Plain text content. Note: Document references are not directly accessible - always use the actual file path instead.",
                        "type": "string"
                      },
                      "contentType": {
                        "description": "Optional MIME type. If not provided, it will be automatically detected",
                        "type": "string"
                      },
                      "filePath": {
                        "description": "The destination path in Firebase Storage (e.g., \"images/logo.png\"). If necessary, rename files for optimal URL compatibility (e.g., \"my-document.pdf\" rather than \"My Document.pdf\").",
                        "type": "string"
                      },
                      "metadata": {
                        "description": "Optional additional metadata",
                        "type": "object"
                      }
                    },
                    "required": [
                      "filePath",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "storage_upload"
                },
                {
                  "description": "Upload a file to Firebase Storage from an external URL. Perfect for images, documents, or any file accessible via URL.",
                  "inputschema": {
                    "properties": {
                      "contentType": {
                        "description": "Optional MIME type. If not provided, it will be automatically detected from the URL or response headers",
                        "type": "string"
                      },
                      "filePath": {
                        "description": "The destination path in Firebase Storage (e.g., \"images/photo.jpg\"). If necessary, rename files for optimal URL compatibility (e.g., \"my-document.pdf\" rather than \"My Document.pdf\").",
                        "type": "string"
                      },
                      "metadata": {
                        "description": "Optional additional metadata",
                        "type": "object"
                      },
                      "url": {
                        "description": "The source URL to download from (e.g., \"https://example.com/image.jpg\"). For GitHub files, use the raw URL (add ?raw=true)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "filePath",
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "storage_upload_from_url"
                },
                {
                  "description": "List root collections in Firestore",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "firestore_list_collections"
                },
                {
                  "description": "Query documents across all subcollections with the same name (collection group query)",
                  "inputschema": {
                    "properties": {
                      "collectionId": {
                        "description": "The collection ID to query across all documents (without parent path)",
                        "type": "string"
                      },
                      "filters": {
                        "description": "Optional filters to apply to the query",
                        "items": {
                          "properties": {
                            "field": {
                              "description": "Field name to filter",
                              "type": "string"
                            },
                            "operator": {
                              "description": "Comparison operator (==, !=, \u003c, \u003c=, \u003e, \u003e=, array-contains, array-contains-any, in, not-in)",
                              "type": "string"
                            },
                            "value": {
                              "description": "Value to compare against",
                              "type": "string"
                            }
                          },
                          "required": [
                            "field",
                            "operator",
                            "value"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "limit": {
                        "description": "Maximum number of documents to return (default: 20, max: 100)",
                        "type": "number"
                      },
                      "orderBy": {
                        "description": "Optional fields to order results by",
                        "items": {
                          "properties": {
                            "direction": {
                              "default": "asc",
                              "description": "Sort direction (asc or desc)",
                              "enum": [
                                "asc",
                                "desc"
                              ],
                              "type": "string"
                            },
                            "field": {
                              "description": "Field name to order by",
                              "type": "string"
                            }
                          },
                          "required": [
                            "field"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "pageToken": {
                        "description": "Token for pagination (document path to start after)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collectionId"
                    ],
                    "type": "object"
                  },
                  "name": "firestore_query_collection_group"
                }
              ],
              "version_detail": {
                "version": "1.3.3"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "geropl": {
      "mcpproviderid": "geropl",
      "self": "#/mcpproviders/geropl",
      "xid": "/mcpproviders/geropl",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:32.223954064Z",
      "modifiedat": "2025-05-12T08:22:32.223954064Z",

      "serversurl": "#/mcpproviders/geropl/servers",
      "servers": {
        "linear-mcp-go": {
          "serverid": "linear-mcp-go",
          "self": "#/mcpproviders/geropl/servers/linear-mcp-go",
          "xid": "/mcpproviders/geropl/servers/linear-mcp-go",

          "metaurl": "#/mcpproviders/geropl/servers/linear-mcp-go/meta",
          "meta": {
            "serverid": "linear-mcp-go",
            "self": "#/mcpproviders/geropl/servers/linear-mcp-go/meta",
            "xid": "/mcpproviders/geropl/servers/linear-mcp-go/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:32.223954064Z",
            "modifiedat": "2025-05-12T08:22:32.223954064Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/geropl/servers/linear-mcp-go/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/geropl/servers/linear-mcp-go/versions",
          "versions": {
            "1": {
              "serverid": "linear-mcp-go",
              "versionid": "1",
              "self": "#/mcpproviders/geropl/servers/linear-mcp-go/versions/1",
              "xid": "/mcpproviders/geropl/servers/linear-mcp-go/versions/1",
              "epoch": 1,
              "name": "io.github.geropl/linear-mcp-go",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for Linear, written in Go. This server provides tools for interacting with the Linear API through the MCP protocol.",
              "createdat": "2025-05-12T08:22:32.223954064Z",
              "modifiedat": "2025-05-12T08:22:32.223954064Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Linear API key environment variable",
                        "name": "LINEAR_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "serve"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "go",
                  "package_name": "linear-mcp-go"
                }
              ],
              "remotes": [],
              "repo_ref": "geropl/linear-mcp-go",
              "resources": [],
              "tools": [
                {
                  "description": "Creates a new Linear issue with specified details. Supports creating sub-issues and assigning labels.",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "labels": {
                        "type": "string"
                      },
                      "parentIssue": {
                        "type": "string"
                      },
                      "priority": {
                        "type": "integer"
                      },
                      "status": {
                        "type": "string"
                      },
                      "team": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "title",
                      "team"
                    ],
                    "type": "object"
                  },
                  "name": "linear_create_issue"
                },
                {
                  "description": "Updates an existing Linear issue's properties.",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "priority": {
                        "type": "integer"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "linear_update_issue"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "githejie": {
      "mcpproviderid": "githejie",
      "self": "#/mcpproviders/githejie",
      "xid": "/mcpproviders/githejie",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:20.401916384Z",
      "modifiedat": "2025-05-12T08:22:20.401916384Z",

      "serversurl": "#/mcpproviders/githejie/servers",
      "servers": {
        "mcp-server-calculator": {
          "serverid": "mcp-server-calculator",
          "self": "#/mcpproviders/githejie/servers/mcp-server-calculator",
          "xid": "/mcpproviders/githejie/servers/mcp-server-calculator",

          "metaurl": "#/mcpproviders/githejie/servers/mcp-server-calculator/meta",
          "meta": {
            "serverid": "mcp-server-calculator",
            "self": "#/mcpproviders/githejie/servers/mcp-server-calculator/meta",
            "xid": "/mcpproviders/githejie/servers/mcp-server-calculator/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:20.401916384Z",
            "modifiedat": "2025-05-12T08:22:20.401916384Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/githejie/servers/mcp-server-calculator/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/githejie/servers/mcp-server-calculator/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-calculator",
              "versionid": "1",
              "self": "#/mcpproviders/githejie/servers/mcp-server-calculator/versions/1",
              "xid": "/mcpproviders/githejie/servers/mcp-server-calculator/versions/1",
              "epoch": 1,
              "name": "io.github.githejie/mcp-server-calculator",
              "isdefault": true,
              "description": "A Model Context Protocol server for calculating. This server enables LLMs to use calculator for precise numerical calculations.",
              "createdat": "2025-05-12T08:22:20.401916384Z",
              "modifiedat": "2025-05-12T08:22:20.401916384Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uvx",
                  "package_name": "mcp-server-calculator"
                }
              ],
              "remotes": [],
              "repo_ref": "githejie/mcp-server-calculator",
              "resources": [],
              "tools": [
                {
                  "description": "Calculates/evaluates the given expression.",
                  "inputschema": {
                    "properties": {
                      "expression": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "expression"
                    ],
                    "type": "object"
                  },
                  "name": "calculate"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "goat-sdk": {
      "mcpproviderid": "goat-sdk",
      "self": "#/mcpproviders/goat-sdk",
      "xid": "/mcpproviders/goat-sdk",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:38.736334377Z",
      "modifiedat": "2025-05-12T08:18:38.736334377Z",

      "serversurl": "#/mcpproviders/goat-sdk/servers",
      "servers": {
        "goat": {
          "serverid": "goat",
          "self": "#/mcpproviders/goat-sdk/servers/goat",
          "xid": "/mcpproviders/goat-sdk/servers/goat",

          "metaurl": "#/mcpproviders/goat-sdk/servers/goat/meta",
          "meta": {
            "serverid": "goat",
            "self": "#/mcpproviders/goat-sdk/servers/goat/meta",
            "xid": "/mcpproviders/goat-sdk/servers/goat/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:38.736334377Z",
            "modifiedat": "2025-05-12T08:18:38.736334377Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/goat-sdk/servers/goat/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/goat-sdk/servers/goat/versions",
          "versions": {
            "1": {
              "serverid": "goat",
              "versionid": "1",
              "self": "#/mcpproviders/goat-sdk/servers/goat/versions/1",
              "xid": "/mcpproviders/goat-sdk/servers/goat/versions/1",
              "epoch": 1,
              "name": "io.github.goat-sdk/goat",
              "isdefault": true,
              "description": "GOAT MCP Server providing on-chain tools for EVM wallets including ETH transfers and ERC20 tokens like USDC.",
              "createdat": "2025-05-12T08:18:38.736334377Z",
              "modifiedat": "2025-05-12T08:18:38.736334377Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Private key for wallet authentication",
                        "name": "WALLET_PRIVATE_KEY",
                        "required": true
                      },
                      {
                        "description": "RPC URL for blockchain access",
                        "name": "RPC_PROVIDER_URL",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "server.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@goat-sdk/goat"
                }
              ],
              "remotes": [],
              "repo_ref": "goat-sdk/goat",
              "resources": [],
              "tools": [
                {
                  "description": "Tool to send ETH tokens",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "sendETH"
                },
                {
                  "description": "Tool to interact with ERC20 tokens such as USDC",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "erc20"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "google": {
      "mcpproviderid": "google",
      "self": "#/mcpproviders/google",
      "xid": "/mcpproviders/google",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:41.782482388Z",
      "modifiedat": "2025-05-12T08:17:41.782482388Z",

      "serversurl": "#/mcpproviders/google/servers",
      "servers": {
        "maps": {
          "serverid": "maps",
          "self": "#/mcpproviders/google/servers/maps",
          "xid": "/mcpproviders/google/servers/maps",

          "metaurl": "#/mcpproviders/google/servers/maps/meta",
          "meta": {
            "serverid": "maps",
            "self": "#/mcpproviders/google/servers/maps/meta",
            "xid": "/mcpproviders/google/servers/maps/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:41.782482388Z",
            "modifiedat": "2025-05-12T08:17:41.782482388Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/google/servers/maps/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/google/servers/maps/versions",
          "versions": {
            "1": {
              "serverid": "maps",
              "versionid": "1",
              "self": "#/mcpproviders/google/servers/maps/versions/1",
              "xid": "/mcpproviders/google/servers/maps/versions/1",
              "epoch": 1,
              "name": "Google Maps",
              "isdefault": true,
              "description": "Google Maps API integration for geocoding, directions, and more.",
              "documentation": "https://developers.google.com/maps/documentation",
              "createdat": "2025-05-12T08:17:41.782482388Z",
              "modifiedat": "2025-05-12T08:17:41.782482388Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Google Maps API key",
                        "name": "GOOGLE_MAPS_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "run",
                      "-i",
                      "--rm"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "mcp/google-maps"
                },
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Google Maps API key",
                        "name": "GOOGLE_MAPS_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@modelcontextprotocol/server-google-maps"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npx",
                  "package_name": "@modelcontextprotocol/server-google-maps"
                }
              ],
              "remotes": [
                {
                  "transporttype": "https",
                  "url": "https://maps.googleapis.com/maps/api/mcp"
                }
              ],
              "resources": [],
              "tools": [
                {
                  "description": "Convert address to coordinates",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "description": "The address to geocode.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "address"
                    ],
                    "type": "object"
                  },
                  "name": "maps_geocode"
                },
                {
                  "description": "Convert coordinates to address",
                  "inputschema": {
                    "properties": {
                      "latitude": {
                        "description": "The latitude of the location.",
                        "type": "number"
                      },
                      "longitude": {
                        "description": "The longitude of the location.",
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  },
                  "name": "maps_reverse_geocode"
                },
                {
                  "description": "Search for places using text query",
                  "inputschema": {
                    "properties": {
                      "location": {
                        "properties": {
                          "latitude": {
                            "description": "The latitude of the location.",
                            "type": "number"
                          },
                          "longitude": {
                            "description": "The longitude of the location.",
                            "type": "number"
                          }
                        },
                        "required": [
                          "latitude",
                          "longitude"
                        ],
                        "type": "object"
                      },
                      "query": {
                        "type": "string"
                      },
                      "radius": {
                        "description": "The radius (in meters) within which to search for places.",
                        "type": "number"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "maps_search_places"
                },
                {
                  "description": "Get detailed information about a place",
                  "inputschema": {
                    "properties": {
                      "place_id": {
                        "description": "The unique identifier for the place.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "place_id"
                    ],
                    "type": "object"
                  },
                  "name": "maps_place_details"
                },
                {
                  "description": "Calculate distances and times between points",
                  "inputschema": {
                    "properties": {
                      "destinations": {
                        "items": {
                          "description": "The destination locations for the distance matrix.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "mode": {
                        "description": "The mode of transportation to use for the distance calculation.",
                        "enum": [
                          "driving",
                          "walking",
                          "bicycling",
                          "transit"
                        ],
                        "type": "string"
                      },
                      "origins": {
                        "items": {
                          "description": "The origin locations for the distance matrix.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "origins",
                      "destinations"
                    ],
                    "type": "object"
                  },
                  "name": "maps_distance_matrix"
                },
                {
                  "description": "Get elevation data for locations",
                  "inputschema": {
                    "properties": {
                      "locations": {
                        "items": {
                          "properties": {
                            "latitude": {
                              "description": "The latitude of the location.",
                              "type": "number"
                            },
                            "longitude": {
                              "description": "The longitude of the location.",
                              "type": "number"
                            }
                          },
                          "required": [
                            "latitude",
                            "longitude"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "locations"
                    ],
                    "type": "object"
                  },
                  "name": "maps_elevation"
                },
                {
                  "description": "Get directions between points",
                  "inputschema": {
                    "properties": {
                      "destination": {
                        "description": "The endpoint for the directions.",
                        "type": "string"
                      },
                      "mode": {
                        "description": "The mode of transportation to use for the directions.",
                        "enum": [
                          "driving",
                          "walking",
                          "bicycling",
                          "transit"
                        ],
                        "type": "string"
                      },
                      "origin": {
                        "description": "The starting point for the directions.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "origin",
                      "destination"
                    ],
                    "type": "object"
                  },
                  "name": "maps_directions"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "gotohuman": {
      "mcpproviderid": "gotohuman",
      "self": "#/mcpproviders/gotohuman",
      "xid": "/mcpproviders/gotohuman",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:37.655067158Z",
      "modifiedat": "2025-05-12T08:17:37.655067158Z",

      "serversurl": "#/mcpproviders/gotohuman/servers",
      "servers": {
        "gotohuman-mcp-server": {
          "serverid": "gotohuman-mcp-server",
          "self": "#/mcpproviders/gotohuman/servers/gotohuman-mcp-server",
          "xid": "/mcpproviders/gotohuman/servers/gotohuman-mcp-server",

          "metaurl": "#/mcpproviders/gotohuman/servers/gotohuman-mcp-server/meta",
          "meta": {
            "serverid": "gotohuman-mcp-server",
            "self": "#/mcpproviders/gotohuman/servers/gotohuman-mcp-server/meta",
            "xid": "/mcpproviders/gotohuman/servers/gotohuman-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:37.655067158Z",
            "modifiedat": "2025-05-12T08:17:37.655067158Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/gotohuman/servers/gotohuman-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/gotohuman/servers/gotohuman-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "gotohuman-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/gotohuman/servers/gotohuman-mcp-server/versions/1",
              "xid": "/mcpproviders/gotohuman/servers/gotohuman-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.gotohuman/gotohuman-mcp-server",
              "isdefault": true,
              "description": "gotoHuman makes it easy to add human approvals to AI agents and agentic workflows. A fully-managed async human-in-the-loop workflow with a customizable approval UI. Enjoy built-in auth, webhooks, notifications, team features, and an evolving training dataset.",
              "createdat": "2025-05-12T08:17:37.655067158Z",
              "modifiedat": "2025-05-12T08:17:37.655067158Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "GOTOHUMAN_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "/\u003cabsolute-path\u003e/build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@gotohuman/mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "gotohuman/gotohuman-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "List all available review forms. NOTE: You need to fetch the schema for the form fields first using the get-form-schema tool.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list-forms"
                },
                {
                  "description": "Get the schema to use for the 'fields' property when requesting a human review with a form.",
                  "inputschema": {
                    "properties": {
                      "formId": {
                        "description": "The form ID to fetch the schema for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "formId"
                    ],
                    "type": "object"
                  },
                  "name": "get-form-schema"
                },
                {
                  "description": "Request a human review with a form. NOTE: If you don't have a form ID yet, list all available forms using the list-forms tool first. To know what to pass for fieldData, you need to fetch the schema for the form fields using the get-form-schema tool.",
                  "inputschema": {
                    "properties": {
                      "assignToUsers": {
                        "description": "Optional list of user emails to assign the review to",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "fieldData": {
                        "additionalProperties": true,
                        "description": "The field data to include in the review request. Note that this is a dynamic schema that you need to fetch first using the get-form-schema tool.",
                        "type": "object"
                      },
                      "formId": {
                        "description": "The form ID to request a human review for",
                        "type": "string"
                      },
                      "metadata": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Optional additional data that will be incl. in the webhook response after form submission. Incl. everything required to proceed with your workflow.",
                        "type": "object"
                      }
                    },
                    "required": [
                      "formId",
                      "fieldData"
                    ],
                    "type": "object"
                  },
                  "name": "request-human-review-with-form"
                }
              ],
              "version_detail": {
                "version": "0.1.2"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "grafana": {
      "mcpproviderid": "grafana",
      "self": "#/mcpproviders/grafana",
      "xid": "/mcpproviders/grafana",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:22.59062611Z",
      "modifiedat": "2025-05-12T08:19:22.59062611Z",

      "serversurl": "#/mcpproviders/grafana/servers",
      "servers": {
        "mcp-grafana": {
          "serverid": "mcp-grafana",
          "self": "#/mcpproviders/grafana/servers/mcp-grafana",
          "xid": "/mcpproviders/grafana/servers/mcp-grafana",

          "metaurl": "#/mcpproviders/grafana/servers/mcp-grafana/meta",
          "meta": {
            "serverid": "mcp-grafana",
            "self": "#/mcpproviders/grafana/servers/mcp-grafana/meta",
            "xid": "/mcpproviders/grafana/servers/mcp-grafana/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:22.59062611Z",
            "modifiedat": "2025-05-12T08:19:22.59062611Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/grafana/servers/mcp-grafana/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/grafana/servers/mcp-grafana/versions",
          "versions": {
            "1": {
              "serverid": "mcp-grafana",
              "versionid": "1",
              "self": "#/mcpproviders/grafana/servers/mcp-grafana/versions/1",
              "xid": "/mcpproviders/grafana/servers/mcp-grafana/versions/1",
              "epoch": 1,
              "name": "io.github.grafana/mcp-grafana",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for Grafana. This provides access to your Grafana instance and the surrounding ecosystem.",
              "createdat": "2025-05-12T08:19:22.59062611Z",
              "modifiedat": "2025-05-12T08:19:22.59062611Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python-asyncio",
                  "package_name": "grafana-mcp-server"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:8000"
                }
              ],
              "repo_ref": "grafana/mcp-grafana",
              "resources": [],
              "tools": [
                {
                  "description": "Search for dashboards",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "search_dashboards"
                },
                {
                  "description": "Get a dashboard by uid",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_dashboard_by_uid"
                },
                {
                  "description": "List datasources",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_datasources"
                },
                {
                  "description": "Get a datasource by uid",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_datasource_by_uid"
                },
                {
                  "description": "Get a datasource by name",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_datasource_by_name"
                },
                {
                  "description": "Execute a query against a Prometheus datasource",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "query_prometheus"
                },
                {
                  "description": "List metric metadata",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_prometheus_metric_metadata"
                },
                {
                  "description": "List available metric names",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_prometheus_metric_names"
                },
                {
                  "description": "List label names matching a selector",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_prometheus_label_names"
                },
                {
                  "description": "List values for a specific label",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_prometheus_label_values"
                },
                {
                  "description": "List incidents in Grafana Incident",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_incidents"
                },
                {
                  "description": "Create an incident in Grafana Incident",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "create_incident"
                },
                {
                  "description": "Add an activity item to an incident in Grafana Incident",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "add_activity_to_incident"
                },
                {
                  "description": "Resolve an incident in Grafana Incident",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "resolve_incident"
                },
                {
                  "description": "Query and retrieve logs using LogQL (either log or metric queries)",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "query_loki_logs"
                },
                {
                  "description": "List all available label names in logs",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_loki_label_names"
                },
                {
                  "description": "List values for a specific label in Loki logs",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_loki_label_values"
                },
                {
                  "description": "List and fetch alert rule information",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_prometheus_alert_rules"
                },
                {
                  "description": "Get alert rule statuses (firing/normal/error/etc.)",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_alert_rule_statuses"
                },
                {
                  "description": "List contact points",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_contact_points"
                },
                {
                  "description": "List and manage schedules",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_oncall_schedules"
                },
                {
                  "description": "Get shift details",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_shift_details"
                },
                {
                  "description": "Get current on-call users",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_current_oncall_users"
                },
                {
                  "description": "List teams and users",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_teams_and_users"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "graphlit": {
      "mcpproviderid": "graphlit",
      "self": "#/mcpproviders/graphlit",
      "xid": "/mcpproviders/graphlit",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:43.279655282Z",
      "modifiedat": "2025-05-12T08:17:43.279655282Z",

      "serversurl": "#/mcpproviders/graphlit/servers",
      "servers": {
        "graphlit-mcp-server": {
          "serverid": "graphlit-mcp-server",
          "self": "#/mcpproviders/graphlit/servers/graphlit-mcp-server",
          "xid": "/mcpproviders/graphlit/servers/graphlit-mcp-server",

          "metaurl": "#/mcpproviders/graphlit/servers/graphlit-mcp-server/meta",
          "meta": {
            "serverid": "graphlit-mcp-server",
            "self": "#/mcpproviders/graphlit/servers/graphlit-mcp-server/meta",
            "xid": "/mcpproviders/graphlit/servers/graphlit-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:43.279655282Z",
            "modifiedat": "2025-05-12T08:17:43.279655282Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/graphlit/servers/graphlit-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/graphlit/servers/graphlit-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "graphlit-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/graphlit/servers/graphlit-mcp-server/versions/1",
              "xid": "/mcpproviders/graphlit/servers/graphlit-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.graphlit/graphlit-mcp-server",
              "isdefault": true,
              "description": "The Model Context Protocol (MCP) Server enables integration between MCP clients and the Graphlit service. It acts as a searchable, and RAG-ready knowledge base across developer and product management tools, ingesting data from various sources and providing tools for retrieval, RAG, extraction, publishing, ingestion, data connectors, web operations, notifications, and management operations.",
              "documentation": "https://www.graphlit.com/blog/graphlit-mcp-server",
              "createdat": "2025-05-12T08:17:43.279655282Z",
              "modifiedat": "2025-05-12T08:17:43.279655282Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your environment ID.",
                        "name": "GRAPHLIT_ENVIRONMENT_ID",
                        "required": true
                      },
                      {
                        "description": "Your organization ID.",
                        "name": "GRAPHLIT_ORGANIZATION_ID",
                        "required": true
                      },
                      {
                        "description": "Your JWT secret for signing the JWT token.",
                        "name": "GRAPHLIT_JWT_SECRET",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "graphlit-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "graphlit/graphlit-mcp-server",
              "resources": [
                {
                  "description": "Returns list of conversation resources.",
                  "name": "Conversations list",
                  "uritemplate": "conversations://"
                },
                {
                  "description": "Returns LLM conversation messages. Accepts conversation resource URI, i.e. conversations://{id}, where 'id' is a conversation identifier.",
                  "name": "Conversation",
                  "uritemplate": "conversations://{id}"
                },
                {
                  "description": "Returns list of feed resources.",
                  "name": "Feeds",
                  "uritemplate": "feeds://"
                },
                {
                  "description": "Returns feed metadata. Accepts content resource URI, i.e. feeds://{id}, where 'id' is a feed identifier.",
                  "name": "Feed",
                  "uritemplate": "feeds://{id}"
                },
                {
                  "description": "Returns list of collection resources.",
                  "name": "Collections",
                  "uritemplate": "collections://"
                },
                {
                  "description": "Returns collection metadata and list of content resources. Accepts collection resource URI, i.e. collections://{id}, where 'id' is a collection identifier.",
                  "name": "Collection",
                  "uritemplate": "collections://{id}"
                },
                {
                  "description": "Returns list of content resources.",
                  "name": "Contents list",
                  "uritemplate": "contents://"
                },
                {
                  "description": "Returns content metadata and complete Markdown text. Accepts content resource URI, i.e. contents://{id}, where 'id' is a content identifier.",
                  "name": "Content",
                  "uritemplate": "contents://{id}"
                },
                {
                  "description": "Returns list of workflow resources.",
                  "name": "Workflows",
                  "uritemplate": "workflows://"
                },
                {
                  "description": "Returns workflow metadata. Accepts workflow resource URI, i.e. workflows://{id}, where 'id' is a workflow identifier.",
                  "name": "Workflow",
                  "uritemplate": "workflows://{id}"
                },
                {
                  "description": "Returns list of specification resources.",
                  "name": "Specifications",
                  "uritemplate": "specifications://"
                },
                {
                  "description": "Returns specification metadata. Accepts specification resource URI, i.e. specifications://{id}, where 'id' is a specification identifier.",
                  "name": "Specification",
                  "uritemplate": "specifications://{id}"
                },
                {
                  "description": "Returns list of project resources.",
                  "name": "Projects",
                  "uritemplate": "projects://"
                },
                {
                  "description": "Returns project metadata including credits used, available quota, and default content workflow. Accepts project resource URI, i.e. projects://{id}, where 'id' is a project identifier.",
                  "name": "Project",
                  "uritemplate": "projects://{id}"
                }
              ],
              "tools": [
                {
                  "description": "Configures the default content workflow and conversation specification for the Graphlit project. Only needed if user asks to configure the project defaults. To reset the project configuration to 'factory state', assign False or null to all parameters. Optionally accepts whether to configure the default specification for LLM conversations. Defaults to using OpenAI GPT-4o, if not assigned. Optionally accepts whether to enable high-quality document and web page preparation using a vision LLM. Defaults to using Azure AI Document Intelligence for document preparation, if not assigned. Optionally accepts whether to enable entity extraction using LLM into the knowledge graph. Defaults to no entity extraction, if not assigned. Optionally accepts the preferred model provider service type, i.e. Anthropic, OpenAI, Google. Defaults to Anthropic if not provided. Returns the project identifier.",
                  "inputschema": {
                    "properties": {
                      "configureConversationSpecification": {
                        "type": "boolean"
                      },
                      "configureExtractionSpecification": {
                        "type": "boolean"
                      },
                      "configurePreparationSpecification": {
                        "type": "boolean"
                      },
                      "modelServiceType": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "modelServiceType"
                    ],
                    "type": "object"
                  },
                  "name": "configureProject"
                },
                {
                  "description": "Ask questions about using the Graphlit Platform, or specifically about the Graphlit API or SDKs. When the user asks about how to use the Graphlit API or SDKs, use this tool to provide a code sample in Python, TypeScript or C#. Accepts an LLM user prompt. Returns the LLM prompt completion in Markdown format.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "askGraphlit"
                },
                {
                  "description": "Prompts an LLM conversation about your entire Graphlit knowledge base. Uses hybrid vector search based on user prompt for locating relevant content sources. Uses LLM to complete the user prompt with the configured LLM. Maintains conversation history between 'user' and LLM 'assistant'. Prefer 'promptConversation' when the user intends to start or continue an ongoing conversation about the entire Graphlit knowledge base. Similar to 'retrieveSources' but does not perform content metadata filtering. Accepts an LLM user prompt and optional conversation identifier. Will either create a new conversation or continue an existing one. Will use the default specification for LLM conversations, which is optionally configured with the 'configureProject' tool. Returns the conversation identifier, completed LLM message, and any citations from the LLM response.",
                  "inputschema": {
                    "properties": {
                      "conversationId": {
                        "type": "string"
                      },
                      "prompt": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "promptConversation"
                },
                {
                  "description": "Retrieve relevant content sources from Graphlit knowledge base. Do *not* use for retrieving content by content identifier - retrieve content resource instead, with URI 'contents://{id}'. Accepts an LLM user prompt for content retrieval. For best retrieval quality, provide only key words or phrases from the user prompt, which will be used to create text embeddings for a vector search query. Only use when there is a valid LLM user prompt for content retrieval, otherwise use 'queryContents'. For example 'recent content' is not a useful user prompt, since it doesn't reference the text in the content. Only use for 'one shot' retrieval of content sources, i.e. when the user is not interested in having a conversation about the content. Accepts an optional ingestion recency filter (defaults to null, meaning all time), and optional content type and file type filters. Also accepts optional feed and collection identifiers to filter content by. Returns the ranked content sources, including their content resource URI to retrieve the complete Markdown text.",
                  "inputschema": {
                    "properties": {
                      "collections": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "feeds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "fileType": {
                        "type": "string"
                      },
                      "inLast": {
                        "type": "string"
                      },
                      "prompt": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "retrieveSources"
                },
                {
                  "description": "Retrieve images from Graphlit knowledge base. Provides image-specific retrieval when image similarity search is desired. Do *not* use for retrieving content by content identifier - retrieve content resource instead, with URI 'contents://{id}'. Accepts image URL. Image will be used for similarity search using image embeddings. Accepts optional geo-location filter for search by latitude, longitude and optional distance radius. Images taken with GPS enabled are searchable by geo-location. Also accepts optional recency filter (defaults to null, meaning all time), and optional feed and collection identifiers to filter images by. Returns the matching images, including their content resource URI to retrieve the complete Markdown text.",
                  "inputschema": {
                    "properties": {
                      "collections": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "feeds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "inLast": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "location": {
                        "properties": {
                          "distance": {
                            "type": "number"
                          },
                          "latitude": {
                            "type": "number"
                          },
                          "longitude": {
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "retrieveImages"
                },
                {
                  "description": "Extracts JSON data from text using LLM. Accepts text to be extracted, and JSON schema which describes the data which will be extracted. JSON schema needs be of type 'object' and include 'properties' and 'required' fields. Optionally accepts text prompt which is provided to LLM to guide data extraction. Defaults to 'Extract data using the tools provided'. Returns extracted JSON from text.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "type": "string"
                      },
                      "schema": {
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "text",
                      "schema"
                    ],
                    "type": "object"
                  },
                  "name": "extractText"
                },
                {
                  "description": "Create a collection. Accepts a collection name, and optional list of content identifiers to add to collection. Returns the collection identifier",
                  "inputschema": {
                    "properties": {
                      "contents": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "createCollection"
                },
                {
                  "description": "Add contents to a collection. Accepts a collection identifier and a list of content identifiers to add to collection. Returns the collection identifier.",
                  "inputschema": {
                    "properties": {
                      "contents": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "contents"
                    ],
                    "type": "object"
                  },
                  "name": "addContentsToCollection"
                },
                {
                  "description": "Remove contents from collection. Accepts a collection identifier and a list of content identifiers to remove from collection. Returns the collection identifier.",
                  "inputschema": {
                    "properties": {
                      "contents": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "contents"
                    ],
                    "type": "object"
                  },
                  "name": "removeContentsFromCollection"
                },
                {
                  "description": "Deletes content from Graphlit knowledge base. Accepts content identifier. Returns the content identifier and content state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "deleteContent"
                },
                {
                  "description": "Deletes conversation from Graphlit knowledge base. Accepts conversation identifier. Returns the conversation identifier and content state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "deleteConversation"
                },
                {
                  "description": "Deletes collection from Graphlit knowledge base. Does *not* delete the contents in the collection, only the collection itself. Accepts collection identifier. Returns the collection identifier and collection state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "deleteCollection"
                },
                {
                  "description": "Deletes feed from Graphlit knowledge base. *Does* delete the contents in the feed, in addition to the feed itself. Accepts feed identifier. Returns the feed identifier and feed state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "deleteFeed"
                },
                {
                  "description": "Deletes feeds from Graphlit knowledge base. *Does* delete the contents in the feed, in addition to the feed itself. Accepts optional feed type filter to limit the feeds which will be deleted. Also accepts optional limit of how many feeds to delete, defaults to 100. Returns the feed identifiers and feed state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "feedType": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "deleteFeeds"
                },
                {
                  "description": "Deletes collections from Graphlit knowledge base. Does *not* delete the contents in the collections, only the collections themselves. Accepts optional limit of how many collections to delete, defaults to 100. Returns the collection identifiers and collection state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "deleteCollections"
                },
                {
                  "description": "Deletes conversations from Graphlit knowledge base. Accepts optional limit of how many conversations to delete, defaults to 100. Returns the conversation identifiers and conversation state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "deleteConversations"
                },
                {
                  "description": "Deletes contents from Graphlit knowledge base. Accepts optional content type and file type filters to limit the contents which will be deleted. Also accepts optional limit of how many contents to delete, defaults to 1000. Returns the content identifiers and content state, i.e. Deleted.",
                  "inputschema": {
                    "properties": {
                      "contentType": {
                        "type": "string"
                      },
                      "fileType": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "deleteContents"
                },
                {
                  "description": "Query contents from Graphlit knowledge base. Do *not* use for retrieving content by content identifier - retrieve content resource instead, with URI 'contents://{id}'. Accepts optional content name, content type and file type for metadata filtering. Accepts optional hybrid vector search query. Accepts optional recency filter (defaults to null, meaning all time), and optional feed and collection identifiers to filter images by. Accepts optional geo-location filter for search by latitude, longitude and optional distance radius. Images and videos taken with GPS enabled are searchable by geo-location. Returns the matching contents, including their content resource URI to retrieve the complete Markdown text.",
                  "inputschema": {
                    "properties": {
                      "collections": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "feeds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "fileType": {
                        "type": "string"
                      },
                      "inLast": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "location": {
                        "properties": {
                          "distance": {
                            "type": "number"
                          },
                          "latitude": {
                            "type": "number"
                          },
                          "longitude": {
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      },
                      "query": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "queryContents"
                },
                {
                  "description": "Query collections from Graphlit knowledge base. Do *not* use for retrieving collection by collection identifier - retrieve collection resource instead, with URI 'collections://{id}'. Accepts optional collection name for metadata filtering. Returns the matching collections, including their collection resource URI to retrieve the collection contents.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "queryCollections"
                },
                {
                  "description": "Query feeds from Graphlit knowledge base. Do *not* use for retrieving feed by feed identifier - retrieve feed resource instead, with URI 'feeds://{id}'. Accepts optional feed name and feed type for metadata filtering. Returns the matching feeds, including their feed resource URI to retrieve the feed contents.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "queryFeeds"
                },
                {
                  "description": "Query conversations from Graphlit knowledge base. Do *not* use for retrieving conversation by conversation identifier - retrieve conversation resource instead, with URI 'conversations://{id}'. Accepts optional hybrid vector search query. Accepts optional recency filter (defaults to null, meaning all time). Returns the matching conversations, including their conversation resource URI to retrieve the complete conversation message history.",
                  "inputschema": {
                    "properties": {
                      "inLast": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "number"
                      },
                      "query": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "queryConversations"
                },
                {
                  "description": "Check if content has completed asynchronous ingestion. Accepts a content identifier which was returned from one of the non-feed ingestion tools, like ingestUrl. Returns whether the content is done or not.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "isContentDone"
                },
                {
                  "description": "Check if an asynchronous feed has completed ingesting all the available content. Accepts a feed identifier which was returned from one of the ingestion tools, like ingestGoogleDriveFiles. Returns whether the feed is done or not.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "isFeedDone"
                },
                {
                  "description": "Lists available Notion databases. Requires environment variable to be configured: NOTION_API_KEY. Returns a list of Notion databases, where the database identifier can be used with ingestNotionPages to ingest pages into Graphlit knowledge base.",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "listNotionDatabases"
                },
                {
                  "description": "Lists available Linear projects. Requires environment variable to be configured: LINEAR_API_KEY. Returns a list of Linear projects, where the project name can be used with ingestLinearIssues to ingest issues into Graphlit knowledge base.",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "listLinearProjects"
                },
                {
                  "description": "Lists available Slack channels. Requires environment variable to be configured: SLACK_BOT_TOKEN. Returns a list of Slack channels, where the channel name can be used with ingestSlackMessages to ingest messages into Graphlit knowledge base.",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "listSlackChannels"
                },
                {
                  "description": "Lists available SharePoint libraries. Requires environment variables to be configured: SHAREPOINT_CLIENT_ID, SHAREPOINT_CLIENT_SECRET, SHAREPOINT_REFRESH_TOKEN. Returns a list of SharePoint libraries, where the selected libraryId can be used with listSharePointFolders to enumerate SharePoint folders in a library.",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "listSharePointLibraries"
                },
                {
                  "description": "Lists available SharePoint folders. Requires environment variables to be configured: SHAREPOINT_CLIENT_ID, SHAREPOINT_CLIENT_SECRET, SHAREPOINT_REFRESH_TOKEN. Returns a list of SharePoint folders, which can be used with ingestSharePointFiles to ingest files into Graphlit knowledge base.",
                  "inputschema": {
                    "properties": {
                      "libraryId": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "listSharePointFolders"
                },
                {
                  "description": "Ingests files from SharePoint library into Graphlit knowledge base. Accepts a SharePoint libraryId and an optional folderId to ingest files from a specific SharePoint folder. Libraries can be enumerated with listSharePointLibraries and library folders with listSharePointFolders. Requires environment variables to be configured: SHAREPOINT_ACCOUNT_NAME, SHAREPOINT_CLIENT_ID, SHAREPOINT_CLIENT_SECRET, SHAREPOINT_REFRESH_TOKEN. Accepts an optional read limit for the number of files to ingest. Executes asynchronously, creates SharePoint feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "folderId": {
                        "type": "string"
                      },
                      "libraryId": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "libraryId"
                    ],
                    "type": "object"
                  },
                  "name": "ingestSharePointFiles"
                },
                {
                  "description": "Ingests files from OneDrive into Graphlit knowledge base. Accepts optional OneDrive folder identifier, and an optional read limit for the number of files to ingest. If no folder identifier provided, ingests files from root OneDrive folder. Requires environment variables to be configured: ONEDRIVE_CLIENT_ID, ONEDRIVE_CLIENT_SECRET, ONEDRIVE_REFRESH_TOKEN. Executes asynchronously, creates OneDrive feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "folderId": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "ingestOneDriveFiles"
                },
                {
                  "description": "Ingests files from Google Drive into Graphlit knowledge base. Accepts optional Google Drive folder identifier, and an optional read limit for the number of files to ingest. For example, with Google Drive URI (https://drive.google.com/drive/u/0/folders/32tzhRD12KDh2hXABY8OZRFv7Smy8WBkQ), the folder identifier is 32tzhRD12KDh2hXABY8OZRFv7Smy8WBkQ. If no folder identifier provided, ingests files from root Google Drive folder. Requires environment variables to be configured: GOOGLE_DRIVE_SERVICE_ACCOUNT_JSON -or- GOOGLE_DRIVE_CLIENT_ID, GOOGLE_DRIVE_CLIENT_SECRET, GOOGLE_DRIVE_REFRESH_TOKEN. If service account JSON is provided, uses service account authentication. Else, uses user authentication. Executes asynchronously, creates Google Drive feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "folderId": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "ingestGoogleDriveFiles"
                },
                {
                  "description": "Ingests files from Dropbox into Graphlit knowledge base. Accepts optional relative path to Dropbox folder (i.e. /Pictures), and an optional read limit for the number of files to ingest. If no path provided, ingests files from root Dropbox folder. Requires environment variables to be configured: DROPBOX_APP_KEY, DROPBOX_APP_SECRET, DROPBOX_REDIRECT_URI, DROPBOX_REFRESH_TOKEN. Executes asynchronously, creates Dropbox feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "ingestDropboxFiles"
                },
                {
                  "description": "Ingests files from Box into Graphlit knowledge base. Accepts optional Box folder identifier, and an optional read limit for the number of files to ingest. If no folder identifier provided, ingests files from root Box folder (i.e. \"0\"). Folder identifier can be inferred from Box URL. https://app.box.com/folder/123456 -\u003e folder identifier is \"123456\". Requires environment variables to be configured: BOX_CLIENT_ID, BOX_CLIENT_SECRET, BOX_REDIRECT_URI, BOX_REFRESH_TOKEN. Executes asynchronously, creates Box feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "folderId": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "ingestBoxFiles"
                },
                {
                  "description": "Ingests files from GitHub repository into Graphlit knowledge base. Accepts GitHub repository owner and repository name and an optional read limit for the number of files to ingest. For example, for GitHub repository (https://github.com/openai/tiktoken), 'openai' is the repository owner, and 'tiktoken' is the repository name. Requires environment variable to be configured: GITHUB_PERSONAL_ACCESS_TOKEN. Executes asynchronously, creates GitHub feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      },
                      "repositoryName": {
                        "type": "string"
                      },
                      "repositoryOwner": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "repositoryName",
                      "repositoryOwner"
                    ],
                    "type": "object"
                  },
                  "name": "ingestGitHubFiles"
                },
                {
                  "description": "Ingests pages from Notion database into Graphlit knowledge base. Accepts Notion database identifier and an optional read limit for the number of pages to ingest. You can list the available Notion database identifiers with listNotionDatabases. Or, for a Notion URL, https://www.notion.so/Example/Engineering-Wiki-114abc10cb38487e91ec906fc6c6f350, 'Engineering-Wiki-114abc10cb38487e91ec906fc6c6f350' is an example of a Notion database identifier. Requires environment variable to be configured: NOTION_API_KEY. Executes asynchronously, creates Notion feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "databaseId": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "databaseId"
                    ],
                    "type": "object"
                  },
                  "name": "ingestNotionPages"
                },
                {
                  "description": "Ingests messages from Microsoft Teams channel into Graphlit knowledge base. Accepts Microsoft Teams team identifier and channel identifier, and an optional read limit for the number of messages to ingest. Requires environment variables to be configured: MICROSOFT_TEAMS_CLIENT_ID, MICROSOFT_TEAMS_CLIENT_SECRET, MICROSOFT_TEAMS_REFRESH_TOKEN. Executes asynchronously, creates Microsoft Teams feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "channelId": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      },
                      "teamId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "teamId",
                      "channelId"
                    ],
                    "type": "object"
                  },
                  "name": "ingestMicrosoftTeamsMessages"
                },
                {
                  "description": "Ingests messages from Slack channel into Graphlit knowledge base. Accepts Slack channel name and an optional read limit for the number of messages to ingest. Requires environment variable to be configured: SLACK_BOT_TOKEN. Executes asynchronously, creates Slack feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "channelName": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "channelName"
                    ],
                    "type": "object"
                  },
                  "name": "ingestSlackMessages"
                },
                {
                  "description": "Ingests messages from Discord channel into Graphlit knowledge base. Accepts Discord channel name and an optional read limit for the number of messages to ingest. Requires environment variable to be configured: DISCORD_BOT_TOKEN. Executes asynchronously, creates Discord feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "channelName": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "channelName"
                    ],
                    "type": "object"
                  },
                  "name": "ingestDiscordMessages"
                },
                {
                  "description": "Ingests posts by user from Twitter/X into Graphlit knowledge base. Accepts Twitter/X user name, without the leading @ symbol, and an optional read limit for the number of posts to ingest. Requires environment variable to be configured: TWITTER_TOKEN. Executes asynchronously, creates Twitter feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      },
                      "userName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "userName"
                    ],
                    "type": "object"
                  },
                  "name": "ingestTwitterPosts"
                },
                {
                  "description": "Searches for recent posts from Twitter/X, and ingests them into Graphlit knowledge base. Accepts search query, and an optional read limit for the number of posts to ingest. Requires environment variable to be configured: TWITTER_TOKEN. Executes asynchronously, creates Twitter feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "ingestTwitterSearch"
                },
                {
                  "description": "Ingests posts from Reddit subreddit into Graphlit knowledge base. Accepts a subreddit name and an optional read limit for the number of posts to ingest. Executes asynchronously, creates Reddit feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      },
                      "subredditName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "subredditName"
                    ],
                    "type": "object"
                  },
                  "name": "ingestRedditPosts"
                },
                {
                  "description": "Ingests emails from Google Email account into Graphlit knowledge base. Accepts an optional read limit for the number of emails to ingest. Requires environment variables to be configured: GOOGLE_EMAIL_CLIENT_ID, GOOGLE_EMAIL_CLIENT_SECRET, GOOGLE_EMAIL_REFRESH_TOKEN. Executes asynchronously, creates Google Email feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "ingestGoogleEmail"
                },
                {
                  "description": "Ingests emails from Microsoft Email account into Graphlit knowledge base. Accepts an optional read limit for the number of emails to ingest. Requires environment variables to be configured: MICROSOFT_EMAIL_CLIENT_ID, MICROSOFT_EMAIL_CLIENT_SECRET, MICROSOFT_EMAIL_REFRESH_TOKEN. Executes asynchronously, creates Microsoft Email feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "ingestMicrosoftEmail"
                },
                {
                  "description": "Ingests issues from Linear project into Graphlit knowledge base. Accepts Linear project name and an optional read limit for the number of issues to ingest. Requires environment variable to be configured: LINEAR_API_KEY. Executes asynchronously, creates Linear issue feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "projectName": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "projectName"
                    ],
                    "type": "object"
                  },
                  "name": "ingestLinearIssues"
                },
                {
                  "description": "Ingests issues from GitHub repository into Graphlit knowledge base. Accepts GitHub repository owner and repository name and an optional read limit for the number of issues to ingest. For example, for GitHub repository (https://github.com/openai/tiktoken), 'openai' is the repository owner, and 'tiktoken' is the repository name. Requires environment variable to be configured: GITHUB_PERSONAL_ACCESS_TOKEN. Executes asynchronously, creates GitHub issue feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      },
                      "repositoryName": {
                        "type": "string"
                      },
                      "repositoryOwner": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "repositoryName",
                      "repositoryOwner"
                    ],
                    "type": "object"
                  },
                  "name": "ingestGitHubIssues"
                },
                {
                  "description": "Ingests issues from Atlassian Jira repository into Graphlit knowledge base. Accepts Atlassian Jira server URL and project name, and an optional read limit for the number of issues to ingest. Requires environment variables to be configured: JIRA_EMAIL, JIRA_TOKEN. Executes asynchronously, creates Atlassian Jira issue feed, and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "projectName": {
                        "type": "string"
                      },
                      "readLimit": {
                        "type": "number"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url",
                      "projectName"
                    ],
                    "type": "object"
                  },
                  "name": "ingestJiraIssues"
                },
                {
                  "description": "Crawls web pages from web site into Graphlit knowledge base. Accepts a URL and an optional read limit for the number of pages to crawl. Uses sitemap.xml to discover pages to be crawled from website. Executes asynchronously and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "webCrawl"
                },
                {
                  "description": "Enumerates the web pages at or beneath the provided URL using web sitemap. Does *not* ingest web pages into Graphlit knowledge base. Accepts web site URL as string. Returns list of mapped URIs from web site.",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "webMap"
                },
                {
                  "description": "Performs web or podcast search based on search query. Can search for web pages or anything about podcasts (i.e. episodes, topics, guest appearances). Format the search query as what would be entered into a Google search. You can use site filtering in the search query, like 'site:twitter.com'. Prefer calling this tool over using 'curl' directly for any web search. Use 'PODSCAN' search service type to search podcasts. Does *not* ingest pages or podcast episodes into Graphlit knowledge base. When searching podcasts, *don't* include the term 'podcast' or 'episode' in the search query - that would be redundant. Search service types: Tavily (web pages), Exa (web pages) and Podscan (podcasts). Defaults to Exa. Returns URL, title and relevant Markdown text from resulting web pages or podcast episode descriptions.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "number"
                      },
                      "query": {
                        "type": "string"
                      },
                      "searchService": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "webSearch"
                },
                {
                  "description": "Ingests posts from RSS feed into Graphlit knowledge base. For podcast RSS feeds, audio will be downloaded, transcribed and ingested into Graphlit knowledge base. Accepts RSS URL and an optional read limit for the number of posts to read. Executes asynchronously and returns the feed identifier.",
                  "inputschema": {
                    "properties": {
                      "readLimit": {
                        "type": "number"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "ingestRSS"
                },
                {
                  "description": "Ingests content from URL into Graphlit knowledge base. Can scrape web pages, and can ingest individual Word documents, PDFs, audio recordings, videos, images, or any other unstructured data. Executes asynchronously and returns the content identifier.",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "ingestUrl"
                },
                {
                  "description": "Ingests text as content into Graphlit knowledge base. Accepts the text itself, and an optional text type (Plain, Markdown, Html). Defaults to Markdown text type. Optionally accepts the content name and an identifier for an existing content object. Will overwrite existing content, if provided. Can use for storing the output from LLM or other tools as content resources, which can be later searched or retrieved. Executes *synchronously* and returns the content identifier.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      },
                      "textType": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "ingestText"
                },
                {
                  "description": "Ingests short-term textual memory as content into Graphlit knowledge base. Accepts an optional text type (Plain, Markdown, Html). Defaults to Markdown text type. Optionally accepts the content name. Will automatically be entity extracted into a knowledge graph. Use for storing short-term memories about the user or agent, which can be later searched or retrieved. Memories are transient and will be deleted after a period of time. Can use 'queryContents' or 'retrieveSources' tools to search for memories, by specifying the 'MEMORY' content type. Executes asynchronously and returns the content identifier.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      },
                      "textType": {
                        "type": "string"
                      },
                      "timeToLive": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "ingestMemory"
                },
                {
                  "description": "Ingests local file into Graphlit knowledge base. Accepts the path to the file in the local filesystem. Can use for storing *large* long-term textual memories or the output from LLM or other tools as content resources, which can be later searched or retrieved. Executes asynchronously and returns the content identifier.",
                  "inputschema": {
                    "properties": {
                      "filePath": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "filePath"
                    ],
                    "type": "object"
                  },
                  "name": "ingestFile"
                },
                {
                  "description": "Screenshots web page from URL. Executes *synchronously* and returns the content identifier.",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "screenshotPage"
                },
                {
                  "description": "Prompts vision LLM and returns completion. Does *not* ingest image into Graphlit knowledge base. Accepts image URL as string. Returns Markdown text from LLM completion.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "describeImageUrl"
                },
                {
                  "description": "Prompts vision LLM and returns description of image content. Accepts content identifier as string, and optional prompt for image description. Returns Markdown text from LLM completion.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "prompt": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "describeImageContent"
                },
                {
                  "description": "Publishes text as audio format, and ingests into Graphlit knowledge base. Accepts a name for the content object, the text itself, and an optional text type (Plain, Markdown, Html). Defaults to Markdown text type. Optionally accepts an ElevenLabs voice identifier. You *must* retrieve the content resource to get the downloadable audio URL for this published audio. Executes *synchronously* and returns the content identifier.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      },
                      "textType": {
                        "type": "string"
                      },
                      "voice": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "publishAudio"
                },
                {
                  "description": "Publishes text as image format, and ingests into Graphlit knowledge base. Accepts a name for the content object. Also, accepts a prompt for image generation. For example, 'Create a cartoon image of a raccoon, saying \"I Love Graphlit\"'. You *must* retrieve the content resource to get the downloadable image URL for this published image. Executes *synchronously* and returns the content identifier.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "prompt": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "publishImage"
                },
                {
                  "description": "Sends a webhook notification to the provided URL. Accepts the webhook URL. Also accepts the text to be sent with the webhook, and an optional text type (Plain, Markdown, Html). Defaults to Markdown text type. Returns true if the notification was successfully sent, or false otherwise.",
                  "inputschema": {
                    "properties": {
                      "text": {
                        "type": "string"
                      },
                      "textType": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url",
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "sendWebHookNotification"
                },
                {
                  "description": "Sends a Slack notification to the provided Slack channel. Accepts the Slack channel name. Also accepts the text for the Slack message, and an optional text type (Plain, Markdown, Html). Defaults to Markdown text type. Hint: In Slack Markdown, images are displayed by simply putting the URL in angle brackets like \u003chttps://example.com/image.jpg\u003e instead of using the traditional Markdown image syntax ![alt text](url). Requires environment variable to be configured: SLACK_BOT_TOKEN. Returns true if the notification was successfully sent, or false otherwise.",
                  "inputschema": {
                    "properties": {
                      "channelName": {
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      },
                      "textType": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "channelName",
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "sendSlackNotification"
                },
                {
                  "description": "Posts a tweet from the configured user account. Accepts the plain text for the tweet. Tweet text rules: allowed - plain text, @mentions, #hashtags, URLs (auto-shortened), line breaks (\\n). Not allowed - markdown, HTML tags, rich text, or custom styles. Requires environment variables to be configured: TWITTER_CONSUMER_API_KEY, TWITTER_CONSUMER_API_SECRET, TWITTER_ACCESS_TOKEN_KEY, TWITTER_ACCESS_TOKEN_SECRET. Returns true if the notification was successfully sent, or false otherwise.",
                  "inputschema": {
                    "properties": {
                      "text": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "sendTwitterNotification"
                },
                {
                  "description": "Sends an email notification to the provided email address(es). Accepts the email subject and a list of email 'to' addresses. Email addresses should be in RFC 5322 format. i.e. Alice Wonderland \u003calice@wonderland.net\u003e, or alice@wonderland.net Also accepts the text for the email, and an optional text type (Plain, Markdown, Html). Defaults to Markdown text type. Requires environment variable to be configured: FROM_EMAIL_ADDRESS. Returns true if the notification was successfully sent, or false otherwise.",
                  "inputschema": {
                    "properties": {
                      "subject": {
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      },
                      "textType": {
                        "type": "string"
                      },
                      "to": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "subject",
                      "to",
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "sendEmailNotification"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "hannesj": {
      "mcpproviderid": "hannesj",
      "self": "#/mcpproviders/hannesj",
      "xid": "/mcpproviders/hannesj",
      "epoch": 2,
      "createdat": "2025-05-12T08:20:28.924941527Z",
      "modifiedat": "2025-05-12T08:20:30.577129225Z",

      "serversurl": "#/mcpproviders/hannesj/servers",
      "servers": {
        "mcp-graphql-schema": {
          "serverid": "mcp-graphql-schema",
          "self": "#/mcpproviders/hannesj/servers/mcp-graphql-schema",
          "xid": "/mcpproviders/hannesj/servers/mcp-graphql-schema",

          "metaurl": "#/mcpproviders/hannesj/servers/mcp-graphql-schema/meta",
          "meta": {
            "serverid": "mcp-graphql-schema",
            "self": "#/mcpproviders/hannesj/servers/mcp-graphql-schema/meta",
            "xid": "/mcpproviders/hannesj/servers/mcp-graphql-schema/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:28.924941527Z",
            "modifiedat": "2025-05-12T08:20:28.924941527Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/hannesj/servers/mcp-graphql-schema/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/hannesj/servers/mcp-graphql-schema/versions",
          "versions": {
            "1": {
              "serverid": "mcp-graphql-schema",
              "versionid": "1",
              "self": "#/mcpproviders/hannesj/servers/mcp-graphql-schema/versions/1",
              "xid": "/mcpproviders/hannesj/servers/mcp-graphql-schema/versions/1",
              "epoch": 1,
              "name": "io.github.hannesj/mcp-graphql-schema",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that exposes GraphQL schema information to Large Language Models (LLMs) like Claude. This server allows an LLM to explore and understand GraphQL schemas through a set of specialized tools.",
              "createdat": "2025-05-12T08:20:28.924941527Z",
              "modifiedat": "2025-05-12T08:20:28.924941527Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-y",
                      "mcp-graphql-schema"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-graphql-schema"
                }
              ],
              "remotes": [],
              "repo_ref": "hannesj/mcp-graphql-schema",
              "resources": [],
              "tools": [
                {
                  "description": "Lists all available root-level fields for GraphQL queries",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-query-fields"
                },
                {
                  "description": "Gets detailed definition for a specific query field in SDL format",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-query-field"
                },
                {
                  "description": "Lists all available root-level fields for GraphQL mutations",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-mutation-fields"
                },
                {
                  "description": "Gets detailed definition for a specific mutation field in SDL format",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-mutation-field"
                },
                {
                  "description": "Lists all available root-level fields for GraphQL subscriptions (if present in schema)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-subscription-fields"
                },
                {
                  "description": "Gets detailed definition for a specific subscription field (if present in schema)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-subscription-field"
                },
                {
                  "description": "Lists all types defined in the GraphQL schema (excluding internal types)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-types"
                },
                {
                  "description": "Gets detailed definition for a specific GraphQL type in SDL format",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-type"
                },
                {
                  "description": "Gets a simplified list of fields with their types for a specific GraphQL object type",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-type-fields"
                },
                {
                  "description": "Searches for types or fields in the schema by name pattern (case-insensitive regex)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search-schema"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-openapi-schema": {
          "serverid": "mcp-openapi-schema",
          "self": "#/mcpproviders/hannesj/servers/mcp-openapi-schema",
          "xid": "/mcpproviders/hannesj/servers/mcp-openapi-schema",

          "metaurl": "#/mcpproviders/hannesj/servers/mcp-openapi-schema/meta",
          "meta": {
            "serverid": "mcp-openapi-schema",
            "self": "#/mcpproviders/hannesj/servers/mcp-openapi-schema/meta",
            "xid": "/mcpproviders/hannesj/servers/mcp-openapi-schema/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:30.577129225Z",
            "modifiedat": "2025-05-12T08:20:30.577129225Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/hannesj/servers/mcp-openapi-schema/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/hannesj/servers/mcp-openapi-schema/versions",
          "versions": {
            "1": {
              "serverid": "mcp-openapi-schema",
              "versionid": "1",
              "self": "#/mcpproviders/hannesj/servers/mcp-openapi-schema/versions/1",
              "xid": "/mcpproviders/hannesj/servers/mcp-openapi-schema/versions/1",
              "epoch": 1,
              "name": "io.github.hannesj/mcp-openapi-schema",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that exposes OpenAPI schema information to Large Language Models (LLMs) like Claude. This server allows an LLM to explore and understand OpenAPI specifications through a set of specialized tools.",
              "createdat": "2025-05-12T08:20:30.577129225Z",
              "modifiedat": "2025-05-12T08:20:30.577129225Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-y",
                      "mcp-openapi-schema"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-openapi-schema"
                }
              ],
              "remotes": [],
              "repo_ref": "hannesj/mcp-openapi-schema",
              "resources": [],
              "tools": [
                {
                  "description": "Lists all API paths and their HTTP methods with summaries in a nested object structure",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-endpoints"
                },
                {
                  "description": "Gets detailed information about a specific endpoint including parameters and responses",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-endpoint"
                },
                {
                  "description": "Gets the request body schema for a specific endpoint and method",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-request-body"
                },
                {
                  "description": "Gets the response schema for a specific endpoint, method, and status code",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-response-schema"
                },
                {
                  "description": "Gets the parameters for a specific path",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-path-parameters"
                },
                {
                  "description": "Lists all schema components (schemas, responses, parameters, etc.)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-components"
                },
                {
                  "description": "Gets detailed definition for a specific component",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-component"
                },
                {
                  "description": "Lists all available security schemes",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list-security-schemes"
                },
                {
                  "description": "Gets examples for a specific component or endpoint",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get-examples"
                },
                {
                  "description": "Searches across paths, operations, and schemas",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search-schema"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "haris-musa": {
      "mcpproviderid": "haris-musa",
      "self": "#/mcpproviders/haris-musa",
      "xid": "/mcpproviders/haris-musa",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:41.29323595Z",
      "modifiedat": "2025-05-12T08:17:41.29323595Z",

      "serversurl": "#/mcpproviders/haris-musa/servers",
      "servers": {
        "excel-mcp-server": {
          "serverid": "excel-mcp-server",
          "self": "#/mcpproviders/haris-musa/servers/excel-mcp-server",
          "xid": "/mcpproviders/haris-musa/servers/excel-mcp-server",

          "metaurl": "#/mcpproviders/haris-musa/servers/excel-mcp-server/meta",
          "meta": {
            "serverid": "excel-mcp-server",
            "self": "#/mcpproviders/haris-musa/servers/excel-mcp-server/meta",
            "xid": "/mcpproviders/haris-musa/servers/excel-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:41.29323595Z",
            "modifiedat": "2025-05-12T08:17:41.29323595Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/haris-musa/servers/excel-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/haris-musa/servers/excel-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "excel-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/haris-musa/servers/excel-mcp-server/versions/1",
              "xid": "/mcpproviders/haris-musa/servers/excel-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.haris-musa/excel-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that lets you manipulate Excel files without needing Microsoft Excel installed. Create, read, and modify Excel workbooks with your AI agent.",
              "createdat": "2025-05-12T08:17:41.29323595Z",
              "modifiedat": "2025-05-12T08:17:41.29323595Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Server port (default: 8000)",
                        "name": "FASTMCP_PORT",
                        "required": false
                      },
                      {
                        "description": "Directory for Excel files (default: ./excel_files)",
                        "name": "EXCEL_FILES_PATH",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "excel-mcp-server"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:8000/sse"
                }
              ],
              "repo_ref": "haris-musa/excel-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "heroku": {
      "mcpproviderid": "heroku",
      "self": "#/mcpproviders/heroku",
      "xid": "/mcpproviders/heroku",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:38.455760449Z",
      "modifiedat": "2025-05-12T08:17:38.455760449Z",

      "serversurl": "#/mcpproviders/heroku/servers",
      "servers": {
        "heroku-mcp-server": {
          "serverid": "heroku-mcp-server",
          "self": "#/mcpproviders/heroku/servers/heroku-mcp-server",
          "xid": "/mcpproviders/heroku/servers/heroku-mcp-server",

          "metaurl": "#/mcpproviders/heroku/servers/heroku-mcp-server/meta",
          "meta": {
            "serverid": "heroku-mcp-server",
            "self": "#/mcpproviders/heroku/servers/heroku-mcp-server/meta",
            "xid": "/mcpproviders/heroku/servers/heroku-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:38.455760449Z",
            "modifiedat": "2025-05-12T08:17:38.455760449Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/heroku/servers/heroku-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/heroku/servers/heroku-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "heroku-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/heroku/servers/heroku-mcp-server/versions/1",
              "xid": "/mcpproviders/heroku/servers/heroku-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.heroku/heroku-mcp-server",
              "isdefault": true,
              "description": "The Heroku Platform MCP Server is a specialized Model Context Protocol (MCP) implementation designed to facilitate seamless interaction between large language models (LLMs) and the Heroku Platform. This server provides a robust set of tools and capabilities that enable LLMs to read, manage, and operate Heroku Platform resources.",
              "createdat": "2025-05-12T08:17:38.455760449Z",
              "modifiedat": "2025-05-12T08:17:38.455760449Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-y",
                      "@heroku/mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@heroku/mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "heroku/heroku-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "List Heroku apps: owned, collaborator access, team/space filtering",
                  "inputschema": {
                    "properties": {
                      "all": {
                        "description": "Show owned apps and collaborator access. Default: owned only",
                        "type": "boolean"
                      },
                      "personal": {
                        "description": "List personal account apps only, ignoring default team",
                        "type": "boolean"
                      },
                      "space": {
                        "description": "Filter by private space name. Excludes team param",
                        "type": "string"
                      },
                      "team": {
                        "description": "Filter by team name. Excludes space param",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_apps"
                },
                {
                  "description": "Get app details: config, dynos, addons, access, domains",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "Target app name. Requires access permissions",
                        "type": "string"
                      },
                      "json": {
                        "description": "JSON output with full metadata. Default: text format",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "get_app_info"
                },
                {
                  "description": "Create app: custom name, region (US/EU), team, private space",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "App name. Auto-generated if omitted",
                        "type": "string"
                      },
                      "region": {
                        "description": "Region: us/eu. Default: us. Excludes space param",
                        "enum": [
                          "us",
                          "eu"
                        ],
                        "type": "string"
                      },
                      "space": {
                        "description": "Private space name. Inherits region. Excludes region param",
                        "type": "string"
                      },
                      "team": {
                        "description": "Team name for ownership",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "create_app"
                },
                {
                  "description": "Rename app: validate and update app name",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "Current app name. Requires access",
                        "type": "string"
                      },
                      "newName": {
                        "description": "New unique app name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app",
                      "newName"
                    ],
                    "type": "object"
                  },
                  "name": "rename_app"
                },
                {
                  "description": "Transfer app ownership to user/team",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "App to transfer. Requires owner/admin access",
                        "type": "string"
                      },
                      "recipient": {
                        "description": "Target user email or team name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app",
                      "recipient"
                    ],
                    "type": "object"
                  },
                  "name": "transfer_app"
                },
                {
                  "description": "List add-ons: all apps or specific app, detailed metadata",
                  "inputschema": {
                    "properties": {
                      "all": {
                        "description": "List all add-ons across accessible apps. Overrides app param, shows full status",
                        "type": "boolean"
                      },
                      "app": {
                        "description": "Filter by app name. Shows add-ons and attachments. Uses Git remote default if omitted",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_addons"
                },
                {
                  "description": "Get add-on details: plan, state, billing",
                  "inputschema": {
                    "properties": {
                      "addon": {
                        "description": "Add-on identifier: UUID, name (postgresql-curved-12345), or attachment name (DATABASE)",
                        "type": "string"
                      },
                      "app": {
                        "description": "App context for add-on lookup. Required for attachment names. Uses Git remote default",
                        "type": "string"
                      }
                    },
                    "required": [
                      "addon"
                    ],
                    "type": "object"
                  },
                  "name": "get_addon_info"
                },
                {
                  "description": "Create add-on: specify service, plan, custom names",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "Target app for add-on. Must have write access. Region/space affects availability",
                        "type": "string"
                      },
                      "as": {
                        "description": "Custom attachment name. Used for config vars prefix. Must be unique in app",
                        "type": "string"
                      },
                      "name": {
                        "description": "Global add-on identifier. Must be unique across all Heroku add-ons",
                        "type": "string"
                      },
                      "serviceAndPlan": {
                        "description": "Format: service_slug:plan_slug (e.g., heroku-postgresql:essential-0)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "serviceAndPlan",
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "create_addon"
                },
                {
                  "description": "List available add-on services and features",
                  "inputschema": {
                    "properties": {
                      "json": {
                        "description": "JSON output with sharing options and app generation support. Default: basic text",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_addon_services"
                },
                {
                  "description": "List service plans: features, pricing, availability",
                  "inputschema": {
                    "properties": {
                      "json": {
                        "description": "JSON output with pricing, features, space compatibility. Default: text format",
                        "type": "boolean"
                      },
                      "service": {
                        "description": "Service slug (e.g., heroku-postgresql). Get from list_addon_services",
                        "type": "string"
                      }
                    },
                    "required": [
                      "service"
                    ],
                    "type": "object"
                  },
                  "name": "list_addon_plans"
                },
                {
                  "description": "App logs: monitor/debug/filter by dyno/process/source",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "Heroku app name. Requires: permissions, Cedar-gen",
                        "type": "string"
                      },
                      "dynoName": {
                        "description": "Format: web.1/worker.2. Excludes processType",
                        "type": "string"
                      },
                      "processType": {
                        "description": "web|worker. All instances. Excludes dynoName",
                        "type": "string"
                      },
                      "source": {
                        "description": "app=application, heroku=platform. Default: all",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "get_app_logs"
                },
                {
                  "description": "Enable maintenance mode and redirect traffic for a Heroku app",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "Target Heroku app name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "maintenance_on"
                },
                {
                  "description": "Disable maintenance mode and restore normal app operations",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "Target Heroku app name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "maintenance_off"
                },
                {
                  "description": "List and monitor Heroku app dynos. View running dynos, check status/health, monitor process states, verify configurations.",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "App name to list processes for",
                        "type": "string"
                      },
                      "json": {
                        "description": "Output process info in JSON format",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "ps_list"
                },
                {
                  "description": "Scale Heroku app dynos. Adjust quantities, change sizes, view formation details, manage resources.",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "App name to scale",
                        "type": "string"
                      },
                      "dyno": {
                        "description": "Dyno type and quantity (e.g., web=3:Standard-2X, worker+1). Omit to show current formation",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "ps_scale"
                },
                {
                  "description": "Restart Heroku app processes. Restart specific dynos, process types, or all dynos. Reset dyno states selectively.",
                  "inputschema": {
                    "properties": {
                      "app": {
                        "description": "App name to restart processes for",
                        "type": "string"
                      },
                      "dyno-name": {
                        "description": "Specific dyno to restart (e.g., web.1). Omit both options to restart all",
                        "type": "string"
                      },
                      "process-type": {
                        "description": "Dyno type to restart (e.g., web). Omit both options to restart all",
                        "type": "string"
                      }
                    },
                    "required": [
                      "app"
                    ],
                    "type": "object"
                  },
                  "name": "ps_restart"
                },
                {
                  "description": "Lists Heroku Private Spaces with CIDR blocks, regions, compliance and capacity details. JSON output supported.",
                  "inputschema": {
                    "properties": {
                      "json": {
                        "description": "JSON output for detailed space metadata, text output if false/omitted",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_private_spaces"
                },
                {
                  "description": "Lists accessible Heroku Teams. Use for: viewing teams, checking membership, getting team metadata, and verifying access. JSON output available.",
                  "inputschema": {
                    "properties": {
                      "json": {
                        "description": "Output format control - true for detailed JSON with team metadata, false/omitted for simplified text",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_teams"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "heurist-network": {
      "mcpproviderid": "heurist-network",
      "self": "#/mcpproviders/heurist-network",
      "xid": "/mcpproviders/heurist-network",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:05.939900535Z",
      "modifiedat": "2025-05-12T08:19:05.939900535Z",

      "serversurl": "#/mcpproviders/heurist-network/servers",
      "servers": {
        "heurist-mesh-mcp-server": {
          "serverid": "heurist-mesh-mcp-server",
          "self": "#/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server",
          "xid": "/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server",

          "metaurl": "#/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server/meta",
          "meta": {
            "serverid": "heurist-mesh-mcp-server",
            "self": "#/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server/meta",
            "xid": "/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:05.939900535Z",
            "modifiedat": "2025-05-12T08:19:05.939900535Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "heurist-mesh-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server/versions/1",
              "xid": "/mcpproviders/heurist-network/servers/heurist-mesh-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.heurist-network/heurist-mesh-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that connects to Heurist Mesh APIs, providing Claude with access to various blockchain and web3 tools.",
              "createdat": "2025-05-12T08:19:05.939900535Z",
              "modifiedat": "2025-05-12T08:19:05.939900535Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "mesh-tool-server"
                }
              ],
              "remotes": [],
              "repo_ref": "heurist-network/heurist-mesh-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "horizondatawave": {
      "mcpproviderid": "horizondatawave",
      "self": "#/mcpproviders/horizondatawave",
      "xid": "/mcpproviders/horizondatawave",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:02.302895904Z",
      "modifiedat": "2025-05-12T08:18:02.302895904Z",

      "serversurl": "#/mcpproviders/horizondatawave/servers",
      "servers": {
        "hdw-mcp-server": {
          "serverid": "hdw-mcp-server",
          "self": "#/mcpproviders/horizondatawave/servers/hdw-mcp-server",
          "xid": "/mcpproviders/horizondatawave/servers/hdw-mcp-server",

          "metaurl": "#/mcpproviders/horizondatawave/servers/hdw-mcp-server/meta",
          "meta": {
            "serverid": "hdw-mcp-server",
            "self": "#/mcpproviders/horizondatawave/servers/hdw-mcp-server/meta",
            "xid": "/mcpproviders/horizondatawave/servers/hdw-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:02.302895904Z",
            "modifiedat": "2025-05-12T08:18:02.302895904Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/horizondatawave/servers/hdw-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/horizondatawave/servers/hdw-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "hdw-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/horizondatawave/servers/hdw-mcp-server/versions/1",
              "xid": "/mcpproviders/horizondatawave/servers/hdw-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.horizondatawave/hdw-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that provides comprehensive access to LinkedIn data and functionalities using the HorizonDataWave API, enabling not only data retrieval but also robust management of user accounts.",
              "createdat": "2025-05-12T08:18:02.302895904Z",
              "modifiedat": "2025-05-12T08:18:02.302895904Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [],
              "remotes": [],
              "repo_ref": "horizondatawave/hdw-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Search for LinkedIn users with various filters.",
                  "inputschema": {
                    "properties": {
                      "company_keywords": {
                        "type": "string"
                      },
                      "count": {
                        "type": "integer"
                      },
                      "current_company": {
                        "type": "string"
                      },
                      "education": {
                        "type": "string"
                      },
                      "first_name": {
                        "type": "string"
                      },
                      "industry": {
                        "type": "string"
                      },
                      "keywords": {
                        "type": "string"
                      },
                      "last_name": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      },
                      "past_company": {
                        "type": "string"
                      },
                      "school_keywords": {
                        "type": "string"
                      },
                      "timeout": {
                        "type": "integer"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "search_linkedin_users"
                },
                {
                  "description": "Retrieve detailed profile information about a LinkedIn user.",
                  "inputschema": {
                    "properties": {
                      "user": {
                        "type": "string"
                      },
                      "with_education": {
                        "type": "boolean"
                      },
                      "with_experience": {
                        "type": "boolean"
                      },
                      "with_skills": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "user"
                    ],
                    "type": "object"
                  },
                  "name": "get_linkedin_profile"
                },
                {
                  "description": "Look up LinkedIn user details by email.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "email": {
                        "type": "string"
                      },
                      "timeout": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "email"
                    ],
                    "type": "object"
                  },
                  "name": "get_linkedin_email_user"
                },
                {
                  "description": "Retrieve posts for a LinkedIn user by URN.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "timeout": {
                        "type": "integer"
                      },
                      "urn": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "urn"
                    ],
                    "type": "object"
                  },
                  "name": "get_linkedin_user_posts"
                },
                {
                  "description": "Retrieve reactions for a LinkedIn user by URN.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "timeout": {
                        "type": "integer"
                      },
                      "urn": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "urn"
                    ],
                    "type": "object"
                  },
                  "name": "get_linkedin_user_reactions"
                },
                {
                  "description": "Retrieve top chat messages from the LinkedIn management API.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "timeout": {
                        "type": "integer"
                      },
                      "user": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "user"
                    ],
                    "type": "object"
                  },
                  "name": "get_linkedin_chat_messages"
                },
                {
                  "description": "Send a chat message using the LinkedIn management API.",
                  "inputschema": {
                    "properties": {
                      "text": {
                        "type": "string"
                      },
                      "user": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "user",
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "send_linkedin_chat_message"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "hungryrobot1": {
      "mcpproviderid": "hungryrobot1",
      "self": "#/mcpproviders/hungryrobot1",
      "xid": "/mcpproviders/hungryrobot1",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:46.505831167Z",
      "modifiedat": "2025-05-12T08:18:46.505831167Z",

      "serversurl": "#/mcpproviders/hungryrobot1/servers",
      "servers": {
        "MCP-PIF": {
          "serverid": "MCP-PIF",
          "self": "#/mcpproviders/hungryrobot1/servers/MCP-PIF",
          "xid": "/mcpproviders/hungryrobot1/servers/MCP-PIF",

          "metaurl": "#/mcpproviders/hungryrobot1/servers/MCP-PIF/meta",
          "meta": {
            "serverid": "MCP-PIF",
            "self": "#/mcpproviders/hungryrobot1/servers/MCP-PIF/meta",
            "xid": "/mcpproviders/hungryrobot1/servers/MCP-PIF/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:46.505831167Z",
            "modifiedat": "2025-05-12T08:18:46.505831167Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/hungryrobot1/servers/MCP-PIF/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/hungryrobot1/servers/MCP-PIF/versions",
          "versions": {
            "1": {
              "serverid": "MCP-PIF",
              "versionid": "1",
              "self": "#/mcpproviders/hungryrobot1/servers/MCP-PIF/versions/1",
              "xid": "/mcpproviders/hungryrobot1/servers/MCP-PIF/versions/1",
              "epoch": 1,
              "name": "io.github.hungryrobot1/MCP-PIF",
              "isdefault": true,
              "description": "This project implements the Model Context Protocol (MCP) as a practical embodiment of the Personal Intelligence Framework (PIF). Through structured tools and progressive interaction patterns, it creates spaces for meaningful development of understanding between humans and AI.",
              "createdat": "2025-05-12T08:18:46.505831167Z",
              "modifiedat": "2025-05-12T08:18:46.505831167Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "path/to/your/mcp-pif/build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "unspecified",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "hungryrobot1/MCP-PIF",
              "resources": [],
              "tools": [
                {
                  "description": "Read file contents",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Path to the file to read",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "read"
                },
                {
                  "description": "Write or modify file content",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "Content to write",
                        "type": "string"
                      },
                      "edits": {
                        "description": "Array of edits for edit operation",
                        "items": {
                          "properties": {
                            "newText": {
                              "description": "New text to insert",
                              "type": "string"
                            },
                            "oldText": {
                              "description": "Text to replace",
                              "type": "string"
                            }
                          },
                          "required": [
                            "oldText",
                            "newText"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "lineNumber": {
                        "description": "Line number for replace operation",
                        "type": "number"
                      },
                      "operation": {
                        "description": "Type of write operation to perform",
                        "enum": [
                          "write",
                          "append",
                          "replace",
                          "edit"
                        ],
                        "type": "string"
                      },
                      "path": {
                        "description": "Path for the file to write/modify",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path",
                      "operation"
                    ],
                    "type": "object"
                  },
                  "name": "write"
                },
                {
                  "description": "Change current directory",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Directory to change to",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "cd"
                },
                {
                  "description": "Create a new directory",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Path of directory to create",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "mkdir"
                },
                {
                  "description": "List directory contents",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Optional path to list (defaults to current directory)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "ls"
                },
                {
                  "description": "Print working directory",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "pwd"
                },
                {
                  "description": "Rename a file or directory",
                  "inputschema": {
                    "properties": {
                      "newPath": {
                        "description": "New path/name for the file or directory",
                        "type": "string"
                      },
                      "oldPath": {
                        "description": "Current path of the file or directory",
                        "type": "string"
                      }
                    },
                    "required": [
                      "oldPath",
                      "newPath"
                    ],
                    "type": "object"
                  },
                  "name": "rename"
                },
                {
                  "description": "Move a file or directory to a new location",
                  "inputschema": {
                    "properties": {
                      "sourcePath": {
                        "description": "Source path of the file or directory to move",
                        "type": "string"
                      },
                      "targetPath": {
                        "description": "Target path where the file or directory will be moved to",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sourcePath",
                      "targetPath"
                    ],
                    "type": "object"
                  },
                  "name": "move"
                },
                {
                  "description": "Delete a file or directory",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Path of the file or directory to delete",
                        "type": "string"
                      },
                      "recursive": {
                        "description": "If true, recursively delete directories and their contents",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "delete"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "hyperbrowserai": {
      "mcpproviderid": "hyperbrowserai",
      "self": "#/mcpproviders/hyperbrowserai",
      "xid": "/mcpproviders/hyperbrowserai",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:47.417450147Z",
      "modifiedat": "2025-05-12T08:18:47.417450147Z",

      "serversurl": "#/mcpproviders/hyperbrowserai/servers",
      "servers": {
        "mcp": {
          "serverid": "mcp",
          "self": "#/mcpproviders/hyperbrowserai/servers/mcp",
          "xid": "/mcpproviders/hyperbrowserai/servers/mcp",

          "metaurl": "#/mcpproviders/hyperbrowserai/servers/mcp/meta",
          "meta": {
            "serverid": "mcp",
            "self": "#/mcpproviders/hyperbrowserai/servers/mcp/meta",
            "xid": "/mcpproviders/hyperbrowserai/servers/mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:47.417450147Z",
            "modifiedat": "2025-05-12T08:18:47.417450147Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/hyperbrowserai/servers/mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/hyperbrowserai/servers/mcp/versions",
          "versions": {
            "1": {
              "serverid": "mcp",
              "versionid": "1",
              "self": "#/mcpproviders/hyperbrowserai/servers/mcp/versions/1",
              "xid": "/mcpproviders/hyperbrowserai/servers/mcp/versions/1",
              "epoch": 1,
              "name": "io.github.hyperbrowserai/mcp",
              "isdefault": true,
              "description": "Hyperbrowser's Model Context Protocol (MCP) Server providing tools to scrape, extract structured data, and crawl webpages, with access to general purpose browser agents.",
              "createdat": "2025-05-12T08:18:47.417450147Z",
              "modifiedat": "2025-05-12T08:18:47.417450147Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Hyperbrowser MCP Server",
                        "name": "HYPERBROWSER_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "hyperbrowser-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "hyperbrowser-mcp"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:3001/sse"
                }
              ],
              "repo_ref": "hyperbrowserai/mcp",
              "resources": [
                {
                  "description": "Documentation resources accessible via hyperbrowser:// URI scheme",
                  "mimetype": "text/markdown",
                  "name": "Hyperbrowser Documentation Resource",
                  "uritemplate": "hyperbrowser://{pathname}"
                }
              ],
              "tools": [
                {
                  "description": "Extract formatted (markdown, screenshot etc) content from any webpage",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "scrape_webpage"
                },
                {
                  "description": "Navigate through multiple linked pages and extract LLM-friendly formatted content",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "crawl_webpages"
                },
                {
                  "description": "Convert messy HTML into structured JSON",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "extract_structured_data"
                },
                {
                  "description": "Query the web and get results with Bing search",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_with_bing"
                },
                {
                  "description": "Fast, lightweight browser automation with the Browser Use agent",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "browser_use_agent"
                },
                {
                  "description": "General-purpose automation using OpenAI’s CUA model",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "openai_computer_use_agent"
                },
                {
                  "description": "Complex browser tasks using Claude computer use",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "claude_computer_use_agent"
                },
                {
                  "description": "Creates a new persistent Hyperbrowser profile.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_profile"
                },
                {
                  "description": "Deletes an existing persistent Hyperbrowser profile.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_profile"
                },
                {
                  "description": "Lists existing persistent Hyperbrowser profiles.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_profiles"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "idoru": {
      "mcpproviderid": "idoru",
      "self": "#/mcpproviders/idoru",
      "xid": "/mcpproviders/idoru",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:41.88329155Z",
      "modifiedat": "2025-05-12T08:22:41.88329155Z",

      "serversurl": "#/mcpproviders/idoru/servers",
      "servers": {
        "influxdb-mcp-server": {
          "serverid": "influxdb-mcp-server",
          "self": "#/mcpproviders/idoru/servers/influxdb-mcp-server",
          "xid": "/mcpproviders/idoru/servers/influxdb-mcp-server",

          "metaurl": "#/mcpproviders/idoru/servers/influxdb-mcp-server/meta",
          "meta": {
            "serverid": "influxdb-mcp-server",
            "self": "#/mcpproviders/idoru/servers/influxdb-mcp-server/meta",
            "xid": "/mcpproviders/idoru/servers/influxdb-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:41.88329155Z",
            "modifiedat": "2025-05-12T08:22:41.88329155Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/idoru/servers/influxdb-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/idoru/servers/influxdb-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "influxdb-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/idoru/servers/influxdb-mcp-server/versions/1",
              "xid": "/mcpproviders/idoru/servers/influxdb-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.idoru/influxdb-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that exposes access to an InfluxDB instance using the InfluxDB OSS API v2.",
              "createdat": "2025-05-12T08:22:41.88329155Z",
              "modifiedat": "2025-05-12T08:22:41.88329155Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [],
                  "description": "Common Flux query examples",
                  "name": "flux-query-examples"
                },
                {
                  "arguments": [],
                  "description": "Guide to InfluxDB line protocol format",
                  "name": "line-protocol-guide"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Authentication token for the InfluxDB API",
                        "name": "INFLUXDB_TOKEN",
                        "required": true
                      },
                      {
                        "description": "URL of the InfluxDB instance (defaults to http://localhost:8086)",
                        "name": "INFLUXDB_URL",
                        "required": false
                      },
                      {
                        "description": "Default organization name for certain operations",
                        "name": "INFLUXDB_ORG",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "influxdb-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "idoru/influxdb-mcp-server",
              "resources": [
                {
                  "description": "Displays all organizations in the InfluxDB instance",
                  "name": "orgs",
                  "uritemplate": "influxdb://orgs"
                },
                {
                  "description": "Shows all buckets with their metadata",
                  "name": "buckets",
                  "uritemplate": "influxdb://buckets"
                },
                {
                  "description": "Lists all measurements within a specified bucket",
                  "name": "bucket-measurements",
                  "uritemplate": "influxdb://bucket/{bucketName}/measurements"
                },
                {
                  "description": "Executes a Flux query and returns results as a resource",
                  "name": "query",
                  "uritemplate": "influxdb://query/{orgName}/{fluxQuery}"
                }
              ],
              "tools": [
                {
                  "description": "Write time-series data in line protocol format",
                  "inputschema": {
                    "properties": {
                      "bucket": {
                        "description": "The bucket name",
                        "type": "string"
                      },
                      "data": {
                        "description": "Data in InfluxDB line protocol format",
                        "type": "string"
                      },
                      "org": {
                        "description": "The organization name",
                        "type": "string"
                      },
                      "precision": {
                        "description": "Timestamp precision (ns, us, ms, s)",
                        "enum": [
                          "ns",
                          "us",
                          "ms",
                          "s"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "org",
                      "bucket",
                      "data"
                    ],
                    "type": "object"
                  },
                  "name": "write-data"
                },
                {
                  "description": "Execute Flux queries",
                  "inputschema": {
                    "properties": {
                      "org": {
                        "description": "The organization name",
                        "type": "string"
                      },
                      "query": {
                        "description": "Flux query string",
                        "type": "string"
                      }
                    },
                    "required": [
                      "org",
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "query-data"
                },
                {
                  "description": "Create a new bucket",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "The bucket name",
                        "type": "string"
                      },
                      "orgID": {
                        "description": "The organization ID",
                        "type": "string"
                      },
                      "retentionPeriodSeconds": {
                        "description": "Retention period in seconds (optional)",
                        "type": "number"
                      }
                    },
                    "required": [
                      "name",
                      "orgID"
                    ],
                    "type": "object"
                  },
                  "name": "create-bucket"
                },
                {
                  "description": "Create a new organization",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "description": "Organization description (optional)",
                        "type": "string"
                      },
                      "name": {
                        "description": "The organization name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "create-org"
                }
              ],
              "version_detail": {
                "version": "0.1.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "iflytek": {
      "mcpproviderid": "iflytek",
      "self": "#/mcpproviders/iflytek",
      "xid": "/mcpproviders/iflytek",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:41.402424152Z",
      "modifiedat": "2025-05-12T08:18:41.402424152Z",

      "serversurl": "#/mcpproviders/iflytek/servers",
      "servers": {
        "ifly-workflow-mcp-server": {
          "serverid": "ifly-workflow-mcp-server",
          "self": "#/mcpproviders/iflytek/servers/ifly-workflow-mcp-server",
          "xid": "/mcpproviders/iflytek/servers/ifly-workflow-mcp-server",

          "metaurl": "#/mcpproviders/iflytek/servers/ifly-workflow-mcp-server/meta",
          "meta": {
            "serverid": "ifly-workflow-mcp-server",
            "self": "#/mcpproviders/iflytek/servers/ifly-workflow-mcp-server/meta",
            "xid": "/mcpproviders/iflytek/servers/ifly-workflow-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:41.402424152Z",
            "modifiedat": "2025-05-12T08:18:41.402424152Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/iflytek/servers/ifly-workflow-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/iflytek/servers/ifly-workflow-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "ifly-workflow-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/iflytek/servers/ifly-workflow-mcp-server/versions/1",
              "xid": "/mcpproviders/iflytek/servers/ifly-workflow-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.iflytek/ifly-workflow-mcp-server",
              "isdefault": true,
              "description": "The fastest way to build workflows with an AI agent platform! This is a simple implementation of an MCP server using iFlytek. It enables calling iFlytek workflows through MCP tools. Supports 14 types of workflow nodes, advanced orchestration modes, multi-model support, and streaming output via hook mechanism.",
              "createdat": "2025-05-12T08:18:41.402424152Z",
              "modifiedat": "2025-05-12T08:18:41.402424152Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Path to configuration file",
                        "name": "CONFIG_PATH",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-m",
                      "mcp_server.main"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "ifly-workflow-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "iflytek/ifly-workflow-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "System tool for uploading files.",
                  "inputschema": {
                    "properties": {
                      "file": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "file"
                    ],
                    "type": "object"
                  },
                  "name": "SYS_UPLOAD_FILE"
                },
                {
                  "description": "Tool to generate images based on user input.",
                  "inputschema": {
                    "properties": {
                      "AGENT_USER_INPUT": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "AGENT_USER_INPUT"
                    ],
                    "type": "object"
                  },
                  "name": "image_generator"
                },
                {
                  "description": "Tool for testing LLM interactions.",
                  "inputschema": {
                    "properties": {
                      "AGENT_USER_INPUT": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "AGENT_USER_INPUT"
                    ],
                    "type": "object"
                  },
                  "name": "llm_test"
                }
              ],
              "version_detail": {
                "version": "0.0.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ihor-sokoliuk": {
      "mcpproviderid": "ihor-sokoliuk",
      "self": "#/mcpproviders/ihor-sokoliuk",
      "xid": "/mcpproviders/ihor-sokoliuk",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:25.778581821Z",
      "modifiedat": "2025-05-12T08:18:25.778581821Z",

      "serversurl": "#/mcpproviders/ihor-sokoliuk/servers",
      "servers": {
        "mcp-searxng": {
          "serverid": "mcp-searxng",
          "self": "#/mcpproviders/ihor-sokoliuk/servers/mcp-searxng",
          "xid": "/mcpproviders/ihor-sokoliuk/servers/mcp-searxng",

          "metaurl": "#/mcpproviders/ihor-sokoliuk/servers/mcp-searxng/meta",
          "meta": {
            "serverid": "mcp-searxng",
            "self": "#/mcpproviders/ihor-sokoliuk/servers/mcp-searxng/meta",
            "xid": "/mcpproviders/ihor-sokoliuk/servers/mcp-searxng/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:25.778581821Z",
            "modifiedat": "2025-05-12T08:18:25.778581821Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ihor-sokoliuk/servers/mcp-searxng/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ihor-sokoliuk/servers/mcp-searxng/versions",
          "versions": {
            "1": {
              "serverid": "mcp-searxng",
              "versionid": "1",
              "self": "#/mcpproviders/ihor-sokoliuk/servers/mcp-searxng/versions/1",
              "xid": "/mcpproviders/ihor-sokoliuk/servers/mcp-searxng/versions/1",
              "epoch": 1,
              "name": "io.github.ihor-sokoliuk/mcp-searxng",
              "isdefault": true,
              "description": "An MCP server implementation that integrates the SearXNG API, providing web search capabilities.",
              "createdat": "2025-05-12T08:18:25.778581821Z",
              "modifiedat": "2025-05-12T08:18:25.778581821Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "URL of the SearXNG instance",
                        "name": "SEARXNG_URL",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-searxng"
                }
              ],
              "remotes": [],
              "repo_ref": "ihor-sokoliuk/mcp-searxng",
              "resources": [],
              "tools": [
                {
                  "description": "Performs a web search using the SearXNG API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources.",
                  "inputschema": {
                    "properties": {
                      "language": {
                        "default": "all",
                        "description": "Language code for search results (e.g., 'en', 'fr', 'de'). Default is instance-dependent.",
                        "type": "string"
                      },
                      "pageno": {
                        "default": 1,
                        "description": "Search page number (starts at 1)",
                        "type": "number"
                      },
                      "query": {
                        "description": "The search query. This is the main input for the web search",
                        "type": "string"
                      },
                      "safesearch": {
                        "default": "0",
                        "description": "Safe search filter level (0: None, 1: Moderate, 2: Strict)",
                        "enum": [
                          "0",
                          "1",
                          "2"
                        ],
                        "type": "string"
                      },
                      "time_range": {
                        "default": "",
                        "description": "Time range of search (day, month, year)",
                        "enum": [
                          "day",
                          "month",
                          "year"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "searxng_web_search"
                },
                {
                  "description": "Read the content from an URL. Use this for further information retrieving to understand the content of each URL.",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "description": "URL",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "web_url_read"
                }
              ],
              "version_detail": {
                "version": "0.4.6"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "inkeep": {
      "mcpproviderid": "inkeep",
      "self": "#/mcpproviders/inkeep",
      "xid": "/mcpproviders/inkeep",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:39.270901793Z",
      "modifiedat": "2025-05-12T08:17:39.270901793Z",

      "serversurl": "#/mcpproviders/inkeep/servers",
      "servers": {
        "mcp-server-python": {
          "serverid": "mcp-server-python",
          "self": "#/mcpproviders/inkeep/servers/mcp-server-python",
          "xid": "/mcpproviders/inkeep/servers/mcp-server-python",

          "metaurl": "#/mcpproviders/inkeep/servers/mcp-server-python/meta",
          "meta": {
            "serverid": "mcp-server-python",
            "self": "#/mcpproviders/inkeep/servers/mcp-server-python/meta",
            "xid": "/mcpproviders/inkeep/servers/mcp-server-python/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:39.270901793Z",
            "modifiedat": "2025-05-12T08:17:39.270901793Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/inkeep/servers/mcp-server-python/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/inkeep/servers/mcp-server-python/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-python",
              "versionid": "1",
              "self": "#/mcpproviders/inkeep/servers/mcp-server-python/versions/1",
              "xid": "/mcpproviders/inkeep/servers/mcp-server-python/versions/1",
              "epoch": 1,
              "name": "io.github.inkeep/mcp-server-python",
              "isdefault": true,
              "description": "Inkeep MCP Server powered by your docs and product content.",
              "createdat": "2025-05-12T08:17:39.270901793Z",
              "modifiedat": "2025-05-12T08:17:39.270901793Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Base URL for Inkeep API",
                        "name": "INKEEP_API_BASE_URL",
                        "required": true
                      },
                      {
                        "description": "API key for authentication",
                        "name": "INKEEP_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Model to use",
                        "name": "INKEEP_API_MODEL",
                        "required": true
                      },
                      {
                        "description": "Name of the MCP tool",
                        "name": "INKEEP_MCP_TOOL_NAME",
                        "required": true
                      },
                      {
                        "description": "Description of the MCP tool",
                        "name": "INKEEP_MCP_TOOL_DESCRIPTION",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "\u003cYOUR_INKEEP_MCP_SERVER_ABSOLUTE_PATH\u003e",
                      "run",
                      "-m",
                      "inkeep_mcp_server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "inkeep-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "inkeep/mcp-server-python",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves product documentation about Inkeep. The query should be framed as a conversational question about Inkeep.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search-product-content"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "integration-app": {
      "mcpproviderid": "integration-app",
      "self": "#/mcpproviders/integration-app",
      "xid": "/mcpproviders/integration-app",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:49.239760586Z",
      "modifiedat": "2025-05-12T08:17:49.239760586Z",

      "serversurl": "#/mcpproviders/integration-app/servers",
      "servers": {
        "mcp-server": {
          "serverid": "mcp-server",
          "self": "#/mcpproviders/integration-app/servers/mcp-server",
          "xid": "/mcpproviders/integration-app/servers/mcp-server",

          "metaurl": "#/mcpproviders/integration-app/servers/mcp-server/meta",
          "meta": {
            "serverid": "mcp-server",
            "self": "#/mcpproviders/integration-app/servers/mcp-server/meta",
            "xid": "/mcpproviders/integration-app/servers/mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:49.239760586Z",
            "modifiedat": "2025-05-12T08:17:49.239760586Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/integration-app/servers/mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/integration-app/servers/mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/integration-app/servers/mcp-server/versions/1",
              "xid": "/mcpproviders/integration-app/servers/mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.integration-app/mcp-server",
              "isdefault": true,
              "description": "Working with HubSpot.",
              "createdat": "2025-05-12T08:17:49.239760586Z",
              "modifiedat": "2025-05-12T08:17:49.239760586Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "token for accessing Integration App API",
                        "name": "INTEGRATION_APP_TOKEN",
                        "required": true
                      },
                      {
                        "description": "key of the integration you want to use tools for",
                        "name": "INTEGRATION_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@integration-app/mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@integration-app/mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "integration-app/mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "action name placeholder",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "action key placeholder"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "integromat": {
      "mcpproviderid": "integromat",
      "self": "#/mcpproviders/integromat",
      "xid": "/mcpproviders/integromat",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:51.773252022Z",
      "modifiedat": "2025-05-12T08:17:51.773252022Z",

      "serversurl": "#/mcpproviders/integromat/servers",
      "servers": {
        "make-mcp-server": {
          "serverid": "make-mcp-server",
          "self": "#/mcpproviders/integromat/servers/make-mcp-server",
          "xid": "/mcpproviders/integromat/servers/make-mcp-server",

          "metaurl": "#/mcpproviders/integromat/servers/make-mcp-server/meta",
          "meta": {
            "serverid": "make-mcp-server",
            "self": "#/mcpproviders/integromat/servers/make-mcp-server/meta",
            "xid": "/mcpproviders/integromat/servers/make-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:51.773252022Z",
            "modifiedat": "2025-05-12T08:17:51.773252022Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/integromat/servers/make-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/integromat/servers/make-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "make-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/integromat/servers/make-mcp-server/versions/1",
              "xid": "/mcpproviders/integromat/servers/make-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.integromat/make-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol server that enables Make scenarios to be utilized as tools by AI assistants. This integration allows AI systems to trigger and interact with your Make automation workflows.",
              "createdat": "2025-05-12T08:17:51.773252022Z",
              "modifiedat": "2025-05-12T08:17:51.773252022Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Make with scenarios:read and scenarios:run scopes",
                        "name": "MAKE_API_KEY",
                        "required": true
                      },
                      {
                        "description": "The zone your organization is hosted in (e.g., eu2.make.com)",
                        "name": "MAKE_ZONE",
                        "required": true
                      },
                      {
                        "description": "The Team ID found in the URL of the Team page",
                        "name": "MAKE_TEAM",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@makehq/mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@makehq/mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "integromat/make-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "isaacwasserman": {
      "mcpproviderid": "isaacwasserman",
      "self": "#/mcpproviders/isaacwasserman",
      "xid": "/mcpproviders/isaacwasserman",
      "epoch": 2,
      "createdat": "2025-05-12T08:20:22.440780775Z",
      "modifiedat": "2025-05-12T08:20:24.067910859Z",

      "serversurl": "#/mcpproviders/isaacwasserman/servers",
      "servers": {
        "mcp-snowflake-server": {
          "serverid": "mcp-snowflake-server",
          "self": "#/mcpproviders/isaacwasserman/servers/mcp-snowflake-server",
          "xid": "/mcpproviders/isaacwasserman/servers/mcp-snowflake-server",

          "metaurl": "#/mcpproviders/isaacwasserman/servers/mcp-snowflake-server/meta",
          "meta": {
            "serverid": "mcp-snowflake-server",
            "self": "#/mcpproviders/isaacwasserman/servers/mcp-snowflake-server/meta",
            "xid": "/mcpproviders/isaacwasserman/servers/mcp-snowflake-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:22.440780775Z",
            "modifiedat": "2025-05-12T08:20:22.440780775Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/isaacwasserman/servers/mcp-snowflake-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/isaacwasserman/servers/mcp-snowflake-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-snowflake-server",
              "versionid": "1",
              "self": "#/mcpproviders/isaacwasserman/servers/mcp-snowflake-server/versions/1",
              "xid": "/mcpproviders/isaacwasserman/servers/mcp-snowflake-server/versions/1",
              "epoch": 1,
              "name": "io.github.isaacwasserman/mcp-snowflake-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation that provides database interaction with Snowflake. This server enables running SQL queries via tools and exposes data insights and schema context as resources.",
              "createdat": "2025-05-12T08:20:22.440780775Z",
              "modifiedat": "2025-05-12T08:20:22.440780775Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--python=3.12",
                      "mcp_snowflake_server",
                      "--account",
                      "your_account",
                      "--warehouse",
                      "your_warehouse",
                      "--user",
                      "your_user",
                      "--password",
                      "your_password",
                      "--role",
                      "your_role",
                      "--database",
                      "your_database",
                      "--schema",
                      "your_schema"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp_snowflake_server"
                }
              ],
              "remotes": [],
              "repo_ref": "isaacwasserman/mcp-snowflake-server",
              "resources": [
                {
                  "description": "A living document of discovered data insights",
                  "mimetype": "text/plain",
                  "name": "Data Insights Memo",
                  "uritemplate": "memo://insights"
                },
                {
                  "description": "Description of the {table_name} table",
                  "mimetype": "text/plain",
                  "name": "{table_name} table",
                  "uritemplate": "context://table/{table_name}"
                }
              ],
              "tools": [
                {
                  "description": "List all available databases in Snowflake",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_databases"
                },
                {
                  "description": "List all schemas in a database",
                  "inputschema": {
                    "properties": {
                      "database": {
                        "description": "Database name to list schemas from",
                        "type": "string"
                      }
                    },
                    "required": [
                      "database"
                    ],
                    "type": "object"
                  },
                  "name": "list_schemas"
                },
                {
                  "description": "List all tables in a specific database and schema",
                  "inputschema": {
                    "properties": {
                      "database": {
                        "description": "Database name",
                        "type": "string"
                      },
                      "schema": {
                        "description": "Schema name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "database",
                      "schema"
                    ],
                    "type": "object"
                  },
                  "name": "list_tables"
                },
                {
                  "description": "Get the schema information for a specific table",
                  "inputschema": {
                    "properties": {
                      "table_name": {
                        "description": "Fully qualified table name in the format 'database.schema.table'",
                        "type": "string"
                      }
                    },
                    "required": [
                      "table_name"
                    ],
                    "type": "object"
                  },
                  "name": "describe_table"
                },
                {
                  "description": "Execute a SELECT query.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "SELECT SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "read_query"
                },
                {
                  "description": "Add a data insight to the memo",
                  "inputschema": {
                    "properties": {
                      "insight": {
                        "description": "Data insight discovered from analysis",
                        "type": "string"
                      }
                    },
                    "required": [
                      "insight"
                    ],
                    "type": "object"
                  },
                  "name": "append_insight"
                },
                {
                  "description": "Execute an INSERT, UPDATE, or DELETE query on the Snowflake database",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "write_query"
                },
                {
                  "description": "Create a new table in the Snowflake database",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "CREATE TABLE SQL statement",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "create_table"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-vegalite-server": {
          "serverid": "mcp-vegalite-server",
          "self": "#/mcpproviders/isaacwasserman/servers/mcp-vegalite-server",
          "xid": "/mcpproviders/isaacwasserman/servers/mcp-vegalite-server",

          "metaurl": "#/mcpproviders/isaacwasserman/servers/mcp-vegalite-server/meta",
          "meta": {
            "serverid": "mcp-vegalite-server",
            "self": "#/mcpproviders/isaacwasserman/servers/mcp-vegalite-server/meta",
            "xid": "/mcpproviders/isaacwasserman/servers/mcp-vegalite-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:24.067910859Z",
            "modifiedat": "2025-05-12T08:20:24.067910859Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/isaacwasserman/servers/mcp-vegalite-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/isaacwasserman/servers/mcp-vegalite-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-vegalite-server",
              "versionid": "1",
              "self": "#/mcpproviders/isaacwasserman/servers/mcp-vegalite-server/versions/1",
              "xid": "/mcpproviders/isaacwasserman/servers/mcp-vegalite-server/versions/1",
              "epoch": 1,
              "name": "io.github.isaacwasserman/mcp-vegalite-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation that provides the LLM an interface for visualizing data using Vega-Lite syntax.",
              "createdat": "2025-05-12T08:20:24.067910859Z",
              "modifiedat": "2025-05-12T08:20:24.067910859Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--output_type",
                      "png"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "unknown",
                  "package_name": "unknown"
                }
              ],
              "remotes": [],
              "repo_ref": "isaacwasserman/mcp-vegalite-server",
              "resources": [],
              "tools": [
                {
                  "description": "Save a table of data agregations to the server for later visualization",
                  "inputschema": {
                    "properties": {
                      "data": {
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "data"
                    ],
                    "type": "object"
                  },
                  "name": "save_data"
                },
                {
                  "description": "Visualize a table of data using Vega-Lite syntax",
                  "inputschema": {
                    "properties": {
                      "data_name": {
                        "type": "string"
                      },
                      "vegalite_specification": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "data_name",
                      "vegalite_specification"
                    ],
                    "type": "object"
                  },
                  "name": "visualize_data"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "isdaniel": {
      "mcpproviderid": "isdaniel",
      "self": "#/mcpproviders/isdaniel",
      "xid": "/mcpproviders/isdaniel",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:38.038485363Z",
      "modifiedat": "2025-05-12T08:17:38.038485363Z",

      "serversurl": "#/mcpproviders/isdaniel/servers",
      "servers": {
        "mcp_weather_server": {
          "serverid": "mcp_weather_server",
          "self": "#/mcpproviders/isdaniel/servers/mcp_weather_server",
          "xid": "/mcpproviders/isdaniel/servers/mcp_weather_server",

          "metaurl": "#/mcpproviders/isdaniel/servers/mcp_weather_server/meta",
          "meta": {
            "serverid": "mcp_weather_server",
            "self": "#/mcpproviders/isdaniel/servers/mcp_weather_server/meta",
            "xid": "/mcpproviders/isdaniel/servers/mcp_weather_server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:38.038485363Z",
            "modifiedat": "2025-05-12T08:17:38.038485363Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/isdaniel/servers/mcp_weather_server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/isdaniel/servers/mcp_weather_server/versions",
          "versions": {
            "1": {
              "serverid": "mcp_weather_server",
              "versionid": "1",
              "self": "#/mcpproviders/isdaniel/servers/mcp_weather_server/versions/1",
              "xid": "/mcpproviders/isdaniel/servers/mcp_weather_server/versions/1",
              "epoch": 1,
              "name": "io.github.isdaniel/mcp_weather_server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that provides weather information using the Open-Meteo API.",
              "createdat": "2025-05-12T08:17:38.038485363Z",
              "modifiedat": "2025-05-12T08:17:38.038485363Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "mcp_weather_server/server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp_weather_server"
                }
              ],
              "remotes": [],
              "repo_ref": "isdaniel/mcp_weather_server",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves the current weather information for a given city.",
                  "inputschema": {
                    "properties": {
                      "city": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "city"
                    ],
                    "type": "object"
                  },
                  "name": "get_weather"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "its-dart": {
      "mcpproviderid": "its-dart",
      "self": "#/mcpproviders/its-dart",
      "xid": "/mcpproviders/its-dart",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:11.286953106Z",
      "modifiedat": "2025-05-12T08:20:11.286953106Z",

      "serversurl": "#/mcpproviders/its-dart/servers",
      "servers": {
        "dart-mcp-server": {
          "serverid": "dart-mcp-server",
          "self": "#/mcpproviders/its-dart/servers/dart-mcp-server",
          "xid": "/mcpproviders/its-dart/servers/dart-mcp-server",

          "metaurl": "#/mcpproviders/its-dart/servers/dart-mcp-server/meta",
          "meta": {
            "serverid": "dart-mcp-server",
            "self": "#/mcpproviders/its-dart/servers/dart-mcp-server/meta",
            "xid": "/mcpproviders/its-dart/servers/dart-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:11.286953106Z",
            "modifiedat": "2025-05-12T08:20:11.286953106Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/its-dart/servers/dart-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/its-dart/servers/dart-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "dart-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/its-dart/servers/dart-mcp-server/versions/1",
              "xid": "/mcpproviders/its-dart/servers/dart-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.its-dart/dart-mcp-server",
              "isdefault": true,
              "description": "The official AI Model Context Protocol (MCP) server for Dart, providing task and document management via prompts, resources, and tools.",
              "createdat": "2025-05-12T08:20:11.286953106Z",
              "modifiedat": "2025-05-12T08:20:11.286953106Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Title of the task",
                      "name": "title",
                      "required": true
                    },
                    {
                      "description": "Description of the task",
                      "name": "description",
                      "required": false
                    },
                    {
                      "description": "Status of the task",
                      "name": "status",
                      "required": false
                    },
                    {
                      "description": "Priority of the task",
                      "name": "priority",
                      "required": false
                    },
                    {
                      "description": "Email of the assignee",
                      "name": "assignee",
                      "required": false
                    }
                  ],
                  "description": "Create a new task in Dart",
                  "name": "Create task"
                },
                {
                  "arguments": [
                    {
                      "description": "Title of the document",
                      "name": "title",
                      "required": true
                    },
                    {
                      "description": "Content of the document",
                      "name": "text",
                      "required": false
                    },
                    {
                      "description": "Folder to place the document in",
                      "name": "folder",
                      "required": false
                    }
                  ],
                  "description": "Create a new document in Dart",
                  "name": "Create doc"
                },
                {
                  "arguments": [
                    {
                      "description": "Filter by status (e.g., 'In Progress', 'Done')",
                      "name": "status",
                      "required": false
                    },
                    {
                      "description": "Filter by assignee email",
                      "name": "assignee",
                      "required": false
                    }
                  ],
                  "description": "Get a summary of tasks with optional filtering",
                  "name": "Summarize tasks"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API token for Dart",
                        "name": "DART_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "dart-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "its-dart/dart-mcp-server",
              "resources": [
                {
                  "description": "Information about the authenticated user associated with the API key, including their role, teams, and settings.",
                  "name": "Dart config",
                  "uritemplate": "dart-config:"
                },
                {
                  "description": "A Dart task with its title, description, status, priority, dates, and more. Use this to fetch detailed information about a specific task.",
                  "name": "Dart task",
                  "uritemplate": "dart-task:///{taskId}"
                },
                {
                  "description": "A Dart doc with its title, text content, and folder. Use this to fetch detailed information about a specific doc.",
                  "name": "Dart doc",
                  "uritemplate": "dart-doc:///{docId}"
                }
              ],
              "tools": [
                {
                  "description": "Get information about the user's space, including all of the possible values that can be provided to other endpoints. This includes available assignees, dartboards, folders, statuses, tags, priorities, and sizes.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_config"
                },
                {
                  "description": "List tasks from Dart with optional filtering parameters. You can filter by assignee, status, dartboard, priority, due date, and more.",
                  "inputschema": {
                    "properties": {
                      "assignee": {
                        "description": "Filter by assignee name or email",
                        "type": "string"
                      },
                      "assignee_duid": {
                        "description": "Filter by assignee ID",
                        "type": "string"
                      },
                      "dartboard": {
                        "description": "Filter by dartboard title",
                        "type": "string"
                      },
                      "dartboard_duid": {
                        "description": "Filter by dartboard ID",
                        "type": "string"
                      },
                      "description": {
                        "description": "Filter by description content",
                        "type": "string"
                      },
                      "due_at_after": {
                        "description": "Filter by due date after (ISO format)",
                        "type": "string"
                      },
                      "due_at_before": {
                        "description": "Filter by due date before (ISO format)",
                        "type": "string"
                      },
                      "duids": {
                        "description": "Filter by IDs",
                        "type": "string"
                      },
                      "in_trash": {
                        "description": "Filter by trash status",
                        "type": "boolean"
                      },
                      "is_draft": {
                        "description": "Filter by draft status",
                        "type": "boolean"
                      },
                      "kind": {
                        "description": "Filter by task kind",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Number of results per page",
                        "type": "number"
                      },
                      "offset": {
                        "description": "Initial index for pagination",
                        "type": "number"
                      },
                      "priority": {
                        "description": "Filter by priority",
                        "type": "string"
                      },
                      "size": {
                        "description": "Filter by task size",
                        "type": "number"
                      },
                      "start_at_after": {
                        "description": "Filter by start date after (ISO format)",
                        "type": "string"
                      },
                      "start_at_before": {
                        "description": "Filter by start date before (ISO format)",
                        "type": "string"
                      },
                      "status": {
                        "description": "Filter by status",
                        "type": "string"
                      },
                      "status_duid": {
                        "description": "Filter by status ID",
                        "type": "string"
                      },
                      "subscriber_duid": {
                        "description": "Filter by subscriber ID",
                        "type": "string"
                      },
                      "tag": {
                        "description": "Filter by tag",
                        "type": "string"
                      },
                      "title": {
                        "description": "Filter by title",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_tasks"
                },
                {
                  "description": "Create a new task in Dart. You can specify title, description, status, priority, size, dates, dartboard, assignees, tags, and parent task.",
                  "inputschema": {
                    "properties": {
                      "assignee": {
                        "description": "Single assignee name or email (if workspace doesn't allow multiple assignees)",
                        "type": "string"
                      },
                      "assignees": {
                        "description": "Array of assignee names or emails (if workspace allows multiple assignees)",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "dartboard": {
                        "description": "The title of the dartboard (project or list of tasks)",
                        "type": "string"
                      },
                      "description": {
                        "description": "A longer description of the task, which can include markdown formatting",
                        "type": "string"
                      },
                      "dueAt": {
                        "description": "The due date in ISO format (should be at 9:00am in user's timezone)",
                        "type": "string"
                      },
                      "parentId": {
                        "description": "The ID of the parent task",
                        "type": "string"
                      },
                      "priority": {
                        "description": "The priority (Critical, High, Medium, or Low)",
                        "type": "string"
                      },
                      "size": {
                        "description": "A number that represents the amount of work needed",
                        "type": "number"
                      },
                      "startAt": {
                        "description": "The start date in ISO format (should be at 9:00am in user's timezone)",
                        "type": "string"
                      },
                      "status": {
                        "description": "The status from the list of available statuses",
                        "type": "string"
                      },
                      "tags": {
                        "description": "Array of tags to apply to the task",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "description": "The title of the task (required)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "title"
                    ],
                    "type": "object"
                  },
                  "name": "create_task"
                },
                {
                  "description": "Retrieve an existing task by its ID. Returns the task's information including title, description, status, priority, dates, and more.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "The 12-character alphanumeric ID of the task",
                        "pattern": "^[a-zA-Z0-9]{12}$",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "get_task"
                },
                {
                  "description": "Update an existing task. You can modify any of its properties including title, description, status, priority, dates, assignees, and more.",
                  "inputschema": {
                    "properties": {
                      "assignee": {
                        "description": "Single assignee name or email (if workspace doesn't allow multiple assignees)",
                        "type": "string"
                      },
                      "assignees": {
                        "description": "Array of assignee names or emails (if workspace allows multiple assignees)",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "dartboard": {
                        "description": "The title of the dartboard (project or list of tasks)",
                        "type": "string"
                      },
                      "description": {
                        "description": "A longer description of the task, which can include markdown formatting",
                        "type": "string"
                      },
                      "dueAt": {
                        "description": "The due date in ISO format (should be at 9:00am in user's timezone)",
                        "type": "string"
                      },
                      "id": {
                        "description": "The 12-character alphanumeric ID of the task",
                        "pattern": "^[a-zA-Z0-9]{12}$",
                        "type": "string"
                      },
                      "parentId": {
                        "description": "The ID of the parent task",
                        "type": "string"
                      },
                      "priority": {
                        "description": "The priority (Critical, High, Medium, or Low)",
                        "type": "string"
                      },
                      "size": {
                        "description": "A number that represents the amount of work needed",
                        "type": "number"
                      },
                      "startAt": {
                        "description": "The start date in ISO format (should be at 9:00am in user's timezone)",
                        "type": "string"
                      },
                      "status": {
                        "description": "The status from the list of available statuses",
                        "type": "string"
                      },
                      "tags": {
                        "description": "Array of tags to apply to the task",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "description": "The title of the task",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "update_task"
                },
                {
                  "description": "Move an existing task to the trash, where it can be recovered if needed. Nothing else about the task will be changed.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "The 12-character alphanumeric ID of the task",
                        "pattern": "^[a-zA-Z0-9]{12}$",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "delete_task"
                },
                {
                  "description": "List docs from Dart with optional filtering parameters. You can filter by folder, title, text content, and more.",
                  "inputschema": {
                    "properties": {
                      "duids": {
                        "description": "Filter by IDs",
                        "type": "string"
                      },
                      "folder": {
                        "description": "Filter by folder title",
                        "type": "string"
                      },
                      "folder_duid": {
                        "description": "Filter by folder ID",
                        "type": "string"
                      },
                      "in_trash": {
                        "description": "Filter by trash status",
                        "type": "boolean"
                      },
                      "is_draft": {
                        "description": "Filter by draft status",
                        "type": "boolean"
                      },
                      "limit": {
                        "description": "Number of results per page",
                        "type": "number"
                      },
                      "offset": {
                        "description": "Initial index for pagination",
                        "type": "number"
                      },
                      "s": {
                        "description": "Search by title, text, or folder title",
                        "type": "string"
                      },
                      "text": {
                        "description": "Filter by text content",
                        "type": "string"
                      },
                      "title": {
                        "description": "Filter by title",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_docs"
                },
                {
                  "description": "Create a new doc in Dart. You can specify title, text content, and folder.",
                  "inputschema": {
                    "properties": {
                      "folder": {
                        "description": "The title of the folder to place the doc in",
                        "type": "string"
                      },
                      "text": {
                        "description": "The text content of the doc, which can include markdown formatting",
                        "type": "string"
                      },
                      "title": {
                        "description": "The title of the doc (required)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "title"
                    ],
                    "type": "object"
                  },
                  "name": "create_doc"
                },
                {
                  "description": "Retrieve an existing doc by its ID. Returns the doc's information including title, text content, folder, and more.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "The 12-character alphanumeric ID of the doc",
                        "pattern": "^[a-zA-Z0-9]{12}$",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "get_doc"
                },
                {
                  "description": "Update an existing doc. You can modify its title, text content, and folder.",
                  "inputschema": {
                    "properties": {
                      "folder": {
                        "description": "The title of the folder to place the doc in",
                        "type": "string"
                      },
                      "id": {
                        "description": "The 12-character alphanumeric ID of the doc",
                        "pattern": "^[a-zA-Z0-9]{12}$",
                        "type": "string"
                      },
                      "text": {
                        "description": "The text content of the doc, which can include markdown formatting",
                        "type": "string"
                      },
                      "title": {
                        "description": "The title of the doc",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "update_doc"
                },
                {
                  "description": "Move an existing doc to the trash, where it can be recovered if needed. Nothing else about the doc will be changed.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "The 12-character alphanumeric ID of the doc",
                        "pattern": "^[a-zA-Z0-9]{12}$",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "delete_doc"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ivo-toby": {
      "mcpproviderid": "ivo-toby",
      "self": "#/mcpproviders/ivo-toby",
      "xid": "/mcpproviders/ivo-toby",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:43.656711529Z",
      "modifiedat": "2025-05-12T08:17:43.656711529Z",

      "serversurl": "#/mcpproviders/ivo-toby/servers",
      "servers": {
        "contentful-mcp": {
          "serverid": "contentful-mcp",
          "self": "#/mcpproviders/ivo-toby/servers/contentful-mcp",
          "xid": "/mcpproviders/ivo-toby/servers/contentful-mcp",

          "metaurl": "#/mcpproviders/ivo-toby/servers/contentful-mcp/meta",
          "meta": {
            "serverid": "contentful-mcp",
            "self": "#/mcpproviders/ivo-toby/servers/contentful-mcp/meta",
            "xid": "/mcpproviders/ivo-toby/servers/contentful-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:43.656711529Z",
            "modifiedat": "2025-05-12T08:17:43.656711529Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ivo-toby/servers/contentful-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ivo-toby/servers/contentful-mcp/versions",
          "versions": {
            "1": {
              "serverid": "contentful-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ivo-toby/servers/contentful-mcp/versions/1",
              "xid": "/mcpproviders/ivo-toby/servers/contentful-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ivo-toby/contentful-mcp",
              "isdefault": true,
              "description": "An MCP server implementation that integrates with Contentful's Content Management API, providing comprehensive content management capabilities.",
              "createdat": "2025-05-12T08:17:43.656711529Z",
              "modifiedat": "2025-05-12T08:17:43.656711529Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Contentful Space ID",
                        "name": "SPACE_ID",
                        "required": true
                      },
                      {
                        "description": "Contentful Environment ID",
                        "name": "ENVIRONMENT_ID",
                        "required": false
                      },
                      {
                        "description": "Contentful API host",
                        "name": "CONTENTFUL_HOST",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@ivotoby/contentful-management-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "ivo-toby/contentful-mcp",
              "resources": [],
              "tools": [
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_entry"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_entry"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_entry"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_entry"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "publish_entry"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "unpublish_entry"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_entries"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "bulk_publish"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "bulk_unpublish"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "bulk_validate"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "upload_asset"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_asset"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_asset"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_asset"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "publish_asset"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "unpublish_asset"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_assets"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_spaces"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_space"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_environments"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_environment"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_environment"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_content_types"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_content_type"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_content_type"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_content_type"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_content_type"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "publish_content_type"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_ai_actions"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_ai_action"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_ai_action"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_ai_action"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_ai_action"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "publish_ai_action"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "unpublish_ai_action"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "invoke_ai_action"
                },
                {
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_ai_action_invocation"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "janwilmake": {
      "mcpproviderid": "janwilmake",
      "self": "#/mcpproviders/janwilmake",
      "xid": "/mcpproviders/janwilmake",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:18.028498633Z",
      "modifiedat": "2025-05-12T08:18:18.028498633Z",

      "serversurl": "#/mcpproviders/janwilmake/servers",
      "servers": {
        "openapi-mcp-server": {
          "serverid": "openapi-mcp-server",
          "self": "#/mcpproviders/janwilmake/servers/openapi-mcp-server",
          "xid": "/mcpproviders/janwilmake/servers/openapi-mcp-server",

          "metaurl": "#/mcpproviders/janwilmake/servers/openapi-mcp-server/meta",
          "meta": {
            "serverid": "openapi-mcp-server",
            "self": "#/mcpproviders/janwilmake/servers/openapi-mcp-server/meta",
            "xid": "/mcpproviders/janwilmake/servers/openapi-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:18.028498633Z",
            "modifiedat": "2025-05-12T08:18:18.028498633Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/janwilmake/servers/openapi-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/janwilmake/servers/openapi-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "openapi-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/janwilmake/servers/openapi-mcp-server/versions/1",
              "xid": "/mcpproviders/janwilmake/servers/openapi-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.janwilmake/openapi-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for Claude/Cursor that enables searching and exploring OpenAPI specifications through oapis.org.",
              "createdat": "2025-05-12T08:18:18.028498633Z",
              "modifiedat": "2025-05-12T08:18:18.028498633Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "openapi-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "janwilmake/openapi-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "jerhadf": {
      "mcpproviderid": "jerhadf",
      "self": "#/mcpproviders/jerhadf",
      "xid": "/mcpproviders/jerhadf",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:38.614822012Z",
      "modifiedat": "2025-05-12T08:17:38.614822012Z",

      "serversurl": "#/mcpproviders/jerhadf/servers",
      "servers": {
        "linear-mcp-server": {
          "serverid": "linear-mcp-server",
          "self": "#/mcpproviders/jerhadf/servers/linear-mcp-server",
          "xid": "/mcpproviders/jerhadf/servers/linear-mcp-server",

          "metaurl": "#/mcpproviders/jerhadf/servers/linear-mcp-server/meta",
          "meta": {
            "serverid": "linear-mcp-server",
            "self": "#/mcpproviders/jerhadf/servers/linear-mcp-server/meta",
            "xid": "/mcpproviders/jerhadf/servers/linear-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:38.614822012Z",
            "modifiedat": "2025-05-12T08:17:38.614822012Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/jerhadf/servers/linear-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/jerhadf/servers/linear-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "linear-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/jerhadf/servers/linear-mcp-server/versions/1",
              "xid": "/mcpproviders/jerhadf/servers/linear-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.jerhadf/linear-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol server for the Linear API providing integration with Linear's issue tracking system through MCP, allowing LLMs to interact with Linear issues.",
              "createdat": "2025-05-12T08:17:38.614822012Z",
              "modifiedat": "2025-05-12T08:17:38.614822012Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [],
                  "description": "Instructions for using the Linear MCP server effectively",
                  "name": "linear-server-prompt"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Linear",
                        "name": "LINEAR_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "linear-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "linear-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "jerhadf/linear-mcp-server",
              "resources": [
                {
                  "description": "A Linear issue with its details, comments, and metadata. Use this to fetch detailed information about a specific issue.",
                  "mimetype": "application/json",
                  "name": "Linear Issue",
                  "uritemplate": "linear-issue:///{issueId}"
                },
                {
                  "description": "Information about the authenticated user associated with the API key, including their role, teams, and settings.",
                  "name": "Current User",
                  "uritemplate": "linear-viewer:"
                },
                {
                  "description": "Details about the Linear organization associated with the API key, including settings, teams, and members.",
                  "name": "Current Organization",
                  "uritemplate": "linear-organization:"
                },
                {
                  "description": "All active issues belonging to a specific Linear team, including their status, priority, and assignees.",
                  "name": "Team Issues",
                  "uritemplate": "linear-team:///{teamId}/issues"
                },
                {
                  "description": "Active issues assigned to a specific Linear user. Returns issues sorted by update date.",
                  "name": "User Assigned Issues",
                  "uritemplate": "linear-user:///{userId}/assigned"
                }
              ],
              "tools": [
                {
                  "description": "Creates a new Linear issue with specified details. Use this to create tickets for tasks, bugs, or feature requests. Returns the created issue's identifier and URL. Required fields are title and teamId, with optional description, priority (0-4, where 0 is no priority and 1 is urgent), and status.",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "description": "Issue description",
                        "type": "string"
                      },
                      "priority": {
                        "description": "Priority (0-4)",
                        "type": "number"
                      },
                      "status": {
                        "description": "Issue status",
                        "type": "string"
                      },
                      "teamId": {
                        "description": "Team ID",
                        "type": "string"
                      },
                      "title": {
                        "description": "Issue title",
                        "type": "string"
                      }
                    },
                    "required": [
                      "title",
                      "teamId"
                    ],
                    "type": "object"
                  },
                  "name": "linear_create_issue"
                },
                {
                  "description": "Updates an existing Linear issue's properties. Use this to modify issue details like title, description, priority, or status. Requires the issue ID and accepts any combination of updatable fields. Returns the updated issue's identifier and URL.",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "description": "New description",
                        "type": "string"
                      },
                      "id": {
                        "description": "Issue ID",
                        "type": "string"
                      },
                      "priority": {
                        "description": "New priority (0-4)",
                        "type": "number"
                      },
                      "status": {
                        "description": "New status",
                        "type": "string"
                      },
                      "title": {
                        "description": "New title",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "linear_update_issue"
                },
                {
                  "description": "Searches Linear issues using flexible criteria. Supports filtering by any combination of: title/description text, team, status, assignee, labels, priority (1=urgent, 2=high, 3=normal, 4=low), and estimate. Returns up to 10 issues by default (configurable via limit).",
                  "inputschema": {
                    "properties": {
                      "assigneeId": {
                        "description": "Filter by assignee's user ID",
                        "type": "string"
                      },
                      "estimate": {
                        "description": "Filter by estimate points",
                        "type": "number"
                      },
                      "includeArchived": {
                        "description": "Include archived issues in results (default: false)",
                        "type": "boolean"
                      },
                      "labels": {
                        "description": "Filter by label names",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "limit": {
                        "description": "Max results to return (default: 10)",
                        "type": "number"
                      },
                      "priority": {
                        "description": "Filter by priority (1=urgent, 2=high, 3=normal, 4=low)",
                        "type": "number"
                      },
                      "query": {
                        "description": "Optional text to search in title and description",
                        "type": "string"
                      },
                      "status": {
                        "description": "Filter by status name (e.g., 'In Progress', 'Done')",
                        "type": "string"
                      },
                      "teamId": {
                        "description": "Filter by team ID",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "linear_search_issues"
                },
                {
                  "description": "Retrieves issues assigned to a specific user or the authenticated user if no userId is provided. Returns issues sorted by last updated, including priority, status, and other metadata. Useful for finding a user's workload or tracking assigned tasks.",
                  "inputschema": {
                    "properties": {
                      "includeArchived": {
                        "description": "Include archived issues in results",
                        "type": "boolean"
                      },
                      "limit": {
                        "description": "Maximum number of issues to return (default: 50)",
                        "type": "number"
                      },
                      "userId": {
                        "description": "Optional user ID. If not provided, returns authenticated user's issues",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "linear_get_user_issues"
                },
                {
                  "description": "Adds a comment to an existing Linear issue. Supports markdown formatting in the comment body. Can optionally specify a custom user name and avatar for the comment. Returns the created comment's details including its URL.",
                  "inputschema": {
                    "properties": {
                      "body": {
                        "description": "Comment text in markdown format",
                        "type": "string"
                      },
                      "createAsUser": {
                        "description": "Optional custom username to show for the comment",
                        "type": "string"
                      },
                      "displayIconUrl": {
                        "description": "Optional avatar URL for the comment",
                        "type": "string"
                      },
                      "issueId": {
                        "description": "ID of the issue to comment on",
                        "type": "string"
                      }
                    },
                    "required": [
                      "issueId",
                      "body"
                    ],
                    "type": "object"
                  },
                  "name": "linear_add_comment"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "jifrozen0110": {
      "mcpproviderid": "jifrozen0110",
      "self": "#/mcpproviders/jifrozen0110",
      "xid": "/mcpproviders/jifrozen0110",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:06.920291781Z",
      "modifiedat": "2025-05-12T08:18:06.920291781Z",

      "serversurl": "#/mcpproviders/jifrozen0110/servers",
      "servers": {
        "mcp-riot": {
          "serverid": "mcp-riot",
          "self": "#/mcpproviders/jifrozen0110/servers/mcp-riot",
          "xid": "/mcpproviders/jifrozen0110/servers/mcp-riot",

          "metaurl": "#/mcpproviders/jifrozen0110/servers/mcp-riot/meta",
          "meta": {
            "serverid": "mcp-riot",
            "self": "#/mcpproviders/jifrozen0110/servers/mcp-riot/meta",
            "xid": "/mcpproviders/jifrozen0110/servers/mcp-riot/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:06.920291781Z",
            "modifiedat": "2025-05-12T08:18:06.920291781Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/jifrozen0110/servers/mcp-riot/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/jifrozen0110/servers/mcp-riot/versions",
          "versions": {
            "1": {
              "serverid": "mcp-riot",
              "versionid": "1",
              "self": "#/mcpproviders/jifrozen0110/servers/mcp-riot/versions/1",
              "xid": "/mcpproviders/jifrozen0110/servers/mcp-riot/versions/1",
              "epoch": 1,
              "name": "io.github.jifrozen0110/mcp-riot",
              "isdefault": true,
              "description": "MCP-Riot is a community-developed Model Context Protocol (MCP) server that integrates with the Riot Games API to provide League of Legends data to AI assistants via natural language queries.",
              "createdat": "2025-05-12T08:18:06.920291781Z",
              "modifiedat": "2025-05-12T08:18:06.920291781Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Riot API key",
                        "name": "RIOT_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "/ABSOLUTE/PATH/TO/PARENT/FOLDER",
                      "run",
                      "--env-file",
                      "/ABSOLUTE/PATH/TO/PARENT/FOLDER/.env",
                      "riot.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "mcp-riot"
                }
              ],
              "remotes": [],
              "repo_ref": "jifrozen0110/mcp-riot",
              "resources": [],
              "tools": [
                {
                  "description": "Summarizes level, rank, top champions, and recent matches.",
                  "name": "get_player_summary"
                },
                {
                  "description": "Returns top champions by mastery points.",
                  "name": "get_top_champions_tool"
                },
                {
                  "description": "Returns mastery details for a specific champion.",
                  "name": "get_champion_mastery_tool"
                },
                {
                  "description": "Returns recent matches for the given summoner.",
                  "name": "get_recent_matches_tool"
                },
                {
                  "description": "Returns match performance stats for a given match ID and puuid.",
                  "name": "get_match_summary"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "jjsantos01": {
      "mcpproviderid": "jjsantos01",
      "self": "#/mcpproviders/jjsantos01",
      "xid": "/mcpproviders/jjsantos01",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:52.040564166Z",
      "modifiedat": "2025-05-12T08:17:52.040564166Z",

      "serversurl": "#/mcpproviders/jjsantos01/servers",
      "servers": {
        "qgis_mcp": {
          "serverid": "qgis_mcp",
          "self": "#/mcpproviders/jjsantos01/servers/qgis_mcp",
          "xid": "/mcpproviders/jjsantos01/servers/qgis_mcp",

          "metaurl": "#/mcpproviders/jjsantos01/servers/qgis_mcp/meta",
          "meta": {
            "serverid": "qgis_mcp",
            "self": "#/mcpproviders/jjsantos01/servers/qgis_mcp/meta",
            "xid": "/mcpproviders/jjsantos01/servers/qgis_mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:52.040564166Z",
            "modifiedat": "2025-05-12T08:17:52.040564166Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/jjsantos01/servers/qgis_mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/jjsantos01/servers/qgis_mcp/versions",
          "versions": {
            "1": {
              "serverid": "qgis_mcp",
              "versionid": "1",
              "self": "#/mcpproviders/jjsantos01/servers/qgis_mcp/versions/1",
              "xid": "/mcpproviders/jjsantos01/servers/qgis_mcp/versions/1",
              "epoch": 1,
              "name": "io.github.jjsantos01/qgis_mcp",
              "isdefault": true,
              "description": "QGISMCP connects QGIS to Claude AI through the Model Context Protocol (MCP), allowing Claude to directly interact with and control QGIS. This integration enables prompt assisted project creation, layer loading, code execution and more.",
              "createdat": "2025-05-12T08:17:52.040564166Z",
              "modifiedat": "2025-05-12T08:17:52.040564166Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--directory",
                      "/ABSOLUTE/PATH/TO/PARENT/REPO/FOLDER/qgis_mcp/src/qgis_mcp",
                      "run",
                      "qgis_mcp_server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "uv"
                }
              ],
              "remotes": [],
              "repo_ref": "jjsantos01/qgis_mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Simple ping command to check server connectivity",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "ping"
                },
                {
                  "description": "Get QGIS information about the current installation",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_qgis_info"
                },
                {
                  "description": "Load a QGIS project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "load_project"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "john-zhang-dev": {
      "mcpproviderid": "john-zhang-dev",
      "self": "#/mcpproviders/john-zhang-dev",
      "xid": "/mcpproviders/john-zhang-dev",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:04.109163993Z",
      "modifiedat": "2025-05-12T08:18:04.109163993Z",

      "serversurl": "#/mcpproviders/john-zhang-dev/servers",
      "servers": {
        "xero-mcp": {
          "serverid": "xero-mcp",
          "self": "#/mcpproviders/john-zhang-dev/servers/xero-mcp",
          "xid": "/mcpproviders/john-zhang-dev/servers/xero-mcp",

          "metaurl": "#/mcpproviders/john-zhang-dev/servers/xero-mcp/meta",
          "meta": {
            "serverid": "xero-mcp",
            "self": "#/mcpproviders/john-zhang-dev/servers/xero-mcp/meta",
            "xid": "/mcpproviders/john-zhang-dev/servers/xero-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:04.109163993Z",
            "modifiedat": "2025-05-12T08:18:04.109163993Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/john-zhang-dev/servers/xero-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/john-zhang-dev/servers/xero-mcp/versions",
          "versions": {
            "1": {
              "serverid": "xero-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/john-zhang-dev/servers/xero-mcp/versions/1",
              "xid": "/mcpproviders/john-zhang-dev/servers/xero-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.john-zhang-dev/xero-mcp",
              "isdefault": true,
              "description": "This MCP server allows Clients to interact with Xero Accounting Software.",
              "createdat": "2025-05-12T08:18:04.109163993Z",
              "modifiedat": "2025-05-12T08:18:04.109163993Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "XERO_CLIENT_ID"
                      },
                      {
                        "name": "XERO_CLIENT_SECRET"
                      },
                      {
                        "name": "XERO_REDIRECT_URI"
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "xero-mcp@latest"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "xero-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "john-zhang-dev/xero-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Authenticate with Xero using OAuth2",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "authenticate"
                },
                {
                  "description": "Creates one or more spent or received money transaction",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_bank_transactions"
                },
                {
                  "description": "Creates one or multiple contacts in a Xero organisation",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_contacts"
                },
                {
                  "description": "Retrieves report for balancesheet",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_balance_sheet"
                },
                {
                  "description": "Retrieves the full chart of accounts",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_accounts"
                },
                {
                  "description": "Retrieves any spent or received money transactions",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_bank_transactions"
                },
                {
                  "description": "Retrieves all contacts in a Xero organisation",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_contacts"
                },
                {
                  "description": "Retrieves sales invoices or purchase bills",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_invoices"
                },
                {
                  "description": "Retrieves journals",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_journals"
                },
                {
                  "description": "Retrieves Xero organisation details",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_organisations"
                },
                {
                  "description": "Retrieves payments for invoices and credit notes",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_payments"
                },
                {
                  "description": "Retrieves sales quotes",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_quotes"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kagisearch": {
      "mcpproviderid": "kagisearch",
      "self": "#/mcpproviders/kagisearch",
      "xid": "/mcpproviders/kagisearch",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:37.938979292Z",
      "modifiedat": "2025-05-12T08:18:37.938979292Z",

      "serversurl": "#/mcpproviders/kagisearch/servers",
      "servers": {
        "kagimcp": {
          "serverid": "kagimcp",
          "self": "#/mcpproviders/kagisearch/servers/kagimcp",
          "xid": "/mcpproviders/kagisearch/servers/kagimcp",

          "metaurl": "#/mcpproviders/kagisearch/servers/kagimcp/meta",
          "meta": {
            "serverid": "kagimcp",
            "self": "#/mcpproviders/kagisearch/servers/kagimcp/meta",
            "xid": "/mcpproviders/kagisearch/servers/kagimcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:37.938979292Z",
            "modifiedat": "2025-05-12T08:18:37.938979292Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kagisearch/servers/kagimcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kagisearch/servers/kagimcp/versions",
          "versions": {
            "1": {
              "serverid": "kagimcp",
              "versionid": "1",
              "self": "#/mcpproviders/kagisearch/servers/kagimcp/versions/1",
              "xid": "/mcpproviders/kagisearch/servers/kagimcp/versions/1",
              "epoch": 1,
              "name": "io.github.kagisearch/kagimcp",
              "isdefault": true,
              "description": "An MCP server implementation providing tools for web search and summarization using the Kagi Search and Summarizer APIs.",
              "createdat": "2025-05-12T08:18:37.938979292Z",
              "modifiedat": "2025-05-12T08:18:37.938979292Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "kagimcp"
                }
              ],
              "remotes": [],
              "repo_ref": "kagisearch/kagimcp",
              "resources": [],
              "tools": [
                {
                  "description": "Fetch web results based on one or more queries using the Kagi Search API. Use for general search and when the user explicitly tells you to 'fetch' results/information. Results are from all queries given. They are numbered continuously, so that a user may be able to refer to a result by a specific number.",
                  "inputschema": {
                    "properties": {
                      "queries": {
                        "description": "One or more concise, keyword-focused search queries. Include essential context within each query for standalone use.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "queries"
                    ],
                    "type": "object"
                  },
                  "name": "kagi_search_fetch"
                },
                {
                  "description": "Summarize content from a URL using the Kagi Summarizer API. The Summarizer can summarize any document type (text webpage, video, audio, etc.)",
                  "inputschema": {
                    "properties": {
                      "summary_type": {
                        "description": "Type of summary to produce. Options are 'summary' for paragraph prose and 'takeaway' for a bulleted list of key points.",
                        "enum": [
                          "summary",
                          "takeaway"
                        ],
                        "type": "string"
                      },
                      "target_language": {
                        "description": "Desired output language using language codes (e.g., 'EN' for English). If not specified, the document's original language influences the output.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "url": {
                        "description": "A URL to a document to summarize.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "kagi_summarizer"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kapilduraphe": {
      "mcpproviderid": "kapilduraphe",
      "self": "#/mcpproviders/kapilduraphe",
      "xid": "/mcpproviders/kapilduraphe",
      "epoch": 2,
      "createdat": "2025-05-12T08:17:39.008538578Z",
      "modifiedat": "2025-05-12T08:17:39.093340798Z",

      "serversurl": "#/mcpproviders/kapilduraphe/servers",
      "servers": {
        "okta-mcp-server": {
          "serverid": "okta-mcp-server",
          "self": "#/mcpproviders/kapilduraphe/servers/okta-mcp-server",
          "xid": "/mcpproviders/kapilduraphe/servers/okta-mcp-server",

          "metaurl": "#/mcpproviders/kapilduraphe/servers/okta-mcp-server/meta",
          "meta": {
            "serverid": "okta-mcp-server",
            "self": "#/mcpproviders/kapilduraphe/servers/okta-mcp-server/meta",
            "xid": "/mcpproviders/kapilduraphe/servers/okta-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:39.093340798Z",
            "modifiedat": "2025-05-12T08:17:39.093340798Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kapilduraphe/servers/okta-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kapilduraphe/servers/okta-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "okta-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/kapilduraphe/servers/okta-mcp-server/versions/1",
              "xid": "/mcpproviders/kapilduraphe/servers/okta-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.kapilduraphe/okta-mcp-server",
              "isdefault": true,
              "description": "This MCP server enables Claude to interact with Okta's user management system, providing user and group management capabilities.",
              "createdat": "2025-05-12T08:17:39.093340798Z",
              "modifiedat": "2025-05-12T08:17:39.093340798Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "OKTA_ORG_URL",
                        "required": true
                      },
                      {
                        "name": "OKTA_API_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "dist/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "unknown"
                }
              ],
              "remotes": [],
              "repo_ref": "kapilduraphe/okta-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves detailed user information from Okta, including user details, account dates, personal information, employment details, contact information, address, and preferences.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_user"
                },
                {
                  "description": "Lists users from Okta with optional filtering and pagination, supporting SCIM filter expressions, free-form text search, sorting options, and pagination support.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_users"
                },
                {
                  "description": "Lists user groups from Okta with optional filtering and pagination, supporting filter expressions, free-form text search, sorting options, and pagination support.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_groups"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "webflow-mcp-server": {
          "serverid": "webflow-mcp-server",
          "self": "#/mcpproviders/kapilduraphe/servers/webflow-mcp-server",
          "xid": "/mcpproviders/kapilduraphe/servers/webflow-mcp-server",

          "metaurl": "#/mcpproviders/kapilduraphe/servers/webflow-mcp-server/meta",
          "meta": {
            "serverid": "webflow-mcp-server",
            "self": "#/mcpproviders/kapilduraphe/servers/webflow-mcp-server/meta",
            "xid": "/mcpproviders/kapilduraphe/servers/webflow-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:39.008538578Z",
            "modifiedat": "2025-05-12T08:17:39.008538578Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kapilduraphe/servers/webflow-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kapilduraphe/servers/webflow-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "webflow-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/kapilduraphe/servers/webflow-mcp-server/versions/1",
              "xid": "/mcpproviders/kapilduraphe/servers/webflow-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.kapilduraphe/webflow-mcp-server",
              "isdefault": true,
              "description": "This MCP server enables Claude to interact with Webflow's APIs.",
              "createdat": "2025-05-12T08:17:39.008538578Z",
              "modifiedat": "2025-05-12T08:17:39.008538578Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Webflow API token environment variable",
                        "name": "WEBFLOW_API_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "/ABSOLUTE/PATH/TO/YOUR/build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@kapilduraphe/webflow-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "kapilduraphe/webflow-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve detailed information about a specific Webflow site by ID, including workspace, creation date, display name, and publishing details",
                  "inputschema": {
                    "properties": {
                      "siteId": {
                        "description": "The unique identifier of the Webflow site",
                        "type": "string"
                      }
                    },
                    "required": [
                      "siteId"
                    ],
                    "type": "object"
                  },
                  "name": "get_site"
                },
                {
                  "description": "Retrieve a list of all Webflow sites accessible to the authenticated user",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_sites"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "keboola": {
      "mcpproviderid": "keboola",
      "self": "#/mcpproviders/keboola",
      "xid": "/mcpproviders/keboola",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:46.881992449Z",
      "modifiedat": "2025-05-12T08:19:46.881992449Z",

      "serversurl": "#/mcpproviders/keboola/servers",
      "servers": {
        "keboola-mcp-server": {
          "serverid": "keboola-mcp-server",
          "self": "#/mcpproviders/keboola/servers/keboola-mcp-server",
          "xid": "/mcpproviders/keboola/servers/keboola-mcp-server",

          "metaurl": "#/mcpproviders/keboola/servers/keboola-mcp-server/meta",
          "meta": {
            "serverid": "keboola-mcp-server",
            "self": "#/mcpproviders/keboola/servers/keboola-mcp-server/meta",
            "xid": "/mcpproviders/keboola/servers/keboola-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:46.881992449Z",
            "modifiedat": "2025-05-12T08:19:46.881992449Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/keboola/servers/keboola-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/keboola/servers/keboola-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "keboola-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/keboola/servers/keboola-mcp-server/versions/1",
              "xid": "/mcpproviders/keboola/servers/keboola-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.keboola/keboola-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for interacting with Keboola Connection. This server provides tools for listing and accessing data from Keboola Storage API.",
              "createdat": "2025-05-12T08:19:46.881992449Z",
              "modifiedat": "2025-05-12T08:19:46.881992449Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Keboola Storage API token",
                        "name": "KBC_STORAGE_TOKEN",
                        "required": true
                      },
                      {
                        "description": "Snowflake schema or BigQuery dataset of your workspace",
                        "name": "KBC_WORKSPACE_SCHEMA",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--api-url",
                      "https://connection.keboola.com"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "keboola-mcp-server"
                }
              ],
              "remotes": [
                {
                  "transporttype": "https",
                  "url": "https://connection.keboola.com"
                }
              ],
              "repo_ref": "keboola/keboola-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Answers a question using the Keboola documentation as a source.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "Natural language query to search for in the documentation.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "docs_query"
                },
                {
                  "description": "Retrieves components configurations in the project, optionally filtered by component types or specific component IDs",
                  "inputschema": {
                    "properties": {
                      "component_ids": {
                        "description": "List of component IDs to retrieve configurations for. If none, return all components.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "component_types": {
                        "description": "List of component types to filter by. If none, return all components.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "retrieve_components"
                },
                {
                  "description": "Retrieves transformations configurations in the project, optionally filtered by specific transformation IDs.",
                  "inputschema": {
                    "properties": {
                      "transformation_ids": {
                        "description": "List of transformation component IDs to retrieve configurations for.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "retrieve_transformations"
                },
                {
                  "description": "Gets detailed information about a specific Keboola component configuration given component/transformation ID and configuration ID.",
                  "inputschema": {
                    "properties": {
                      "component_id": {
                        "description": "Unique identifier of the Keboola component/transformation",
                        "type": "string"
                      },
                      "configuration_id": {
                        "description": "Unique identifier of the Keboola component/transformation configuration you want details about",
                        "type": "string"
                      }
                    },
                    "required": [
                      "component_id",
                      "configuration_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_component_details"
                },
                {
                  "description": "Creates an SQL transformation using the specified name, SQL query following the current SQL dialect, a detailed description, and optionally a list of created table names if and only if they are generated within the SQL statements.",
                  "inputschema": {
                    "properties": {
                      "created_table_names": {
                        "description": "An empty list or a list of created table names if and only if they are generated within SQL statements (e.g., using `CREATE TABLE ...`).",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "description": {
                        "description": "The detailed description of the SQL transformation capturing the user intent, explaining the SQL query, and the expected output.",
                        "type": "string"
                      },
                      "name": {
                        "description": "A short, descriptive name summarizing the purpose of the SQL transformation.",
                        "type": "string"
                      },
                      "sql_statements": {
                        "description": "The executable SQL query statements written in the current SQL dialect. Each statement should be a separate item in the list.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "name",
                      "description",
                      "sql_statements"
                    ],
                    "type": "object"
                  },
                  "name": "create_sql_transformation"
                },
                {
                  "description": "Tool to get details about a bucket.",
                  "name": "get_bucket_detail"
                },
                {
                  "description": "Tool to get details about a job.",
                  "name": "get_job_detail"
                },
                {
                  "description": "Tool to get the current SQL dialect.",
                  "name": "get_sql_dialect"
                },
                {
                  "description": "Tool to get details about a table.",
                  "name": "get_table_detail"
                },
                {
                  "description": "Tool to query a table.",
                  "name": "query_table"
                },
                {
                  "description": "Tool to retrieve tables in a bucket.",
                  "name": "retrieve_bucket_tables"
                },
                {
                  "description": "Tool to retrieve buckets.",
                  "name": "retrieve_buckets"
                },
                {
                  "description": "Tool to retrieve jobs.",
                  "name": "retrieve_jobs"
                },
                {
                  "description": "Tool to start a job.",
                  "name": "start_job"
                },
                {
                  "description": "Tool to update a bucket's description.",
                  "name": "update_bucket_description"
                },
                {
                  "description": "Tool to update a table's description.",
                  "name": "update_table_description"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kenjihikmatullah": {
      "mcpproviderid": "kenjihikmatullah",
      "self": "#/mcpproviders/kenjihikmatullah",
      "xid": "/mcpproviders/kenjihikmatullah",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:22.484259487Z",
      "modifiedat": "2025-05-12T08:18:22.484259487Z",

      "serversurl": "#/mcpproviders/kenjihikmatullah/servers",
      "servers": {
        "productboard-mcp": {
          "serverid": "productboard-mcp",
          "self": "#/mcpproviders/kenjihikmatullah/servers/productboard-mcp",
          "xid": "/mcpproviders/kenjihikmatullah/servers/productboard-mcp",

          "metaurl": "#/mcpproviders/kenjihikmatullah/servers/productboard-mcp/meta",
          "meta": {
            "serverid": "productboard-mcp",
            "self": "#/mcpproviders/kenjihikmatullah/servers/productboard-mcp/meta",
            "xid": "/mcpproviders/kenjihikmatullah/servers/productboard-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:22.484259487Z",
            "modifiedat": "2025-05-12T08:18:22.484259487Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kenjihikmatullah/servers/productboard-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kenjihikmatullah/servers/productboard-mcp/versions",
          "versions": {
            "1": {
              "serverid": "productboard-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kenjihikmatullah/servers/productboard-mcp/versions/1",
              "xid": "/mcpproviders/kenjihikmatullah/servers/productboard-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kenjihikmatullah/productboard-mcp",
              "isdefault": true,
              "description": "Integrate the Productboard API into agentic workflows via MCP",
              "createdat": "2025-05-12T08:18:22.484259487Z",
              "modifiedat": "2025-05-12T08:18:22.484259487Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Access token for Productboard API",
                        "name": "PRODUCTBOARD_ACCESS_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "productboard-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "productboard-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "kenjihikmatullah/productboard-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Tool to get products",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getProductsTool"
                },
                {
                  "description": "Tool to get product detail",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getProductDetailTool"
                },
                {
                  "description": "Tool to get features",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getFeaturesTool"
                },
                {
                  "description": "Tool to get feature detail",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getFeatureDetailTool"
                },
                {
                  "description": "Tool to get components",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getComponentsTool"
                },
                {
                  "description": "Tool to get component detail",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getComponentDetailTool"
                },
                {
                  "description": "Tool to get feature statuses",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getFeatureStatusesTool"
                },
                {
                  "description": "Tool to get notes",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getNotesTool"
                },
                {
                  "description": "Tool to get note detail",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getNoteDetailTool"
                },
                {
                  "description": "Tool to get companies",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getCompaniesTool"
                },
                {
                  "description": "Tool to get company detail",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "getCompanyDetailTool"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kenliao94": {
      "mcpproviderid": "kenliao94",
      "self": "#/mcpproviders/kenliao94",
      "xid": "/mcpproviders/kenliao94",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:41.951563729Z",
      "modifiedat": "2025-05-12T08:17:41.951563729Z",

      "serversurl": "#/mcpproviders/kenliao94/servers",
      "servers": {
        "mcp-server-rabbitmq": {
          "serverid": "mcp-server-rabbitmq",
          "self": "#/mcpproviders/kenliao94/servers/mcp-server-rabbitmq",
          "xid": "/mcpproviders/kenliao94/servers/mcp-server-rabbitmq",

          "metaurl": "#/mcpproviders/kenliao94/servers/mcp-server-rabbitmq/meta",
          "meta": {
            "serverid": "mcp-server-rabbitmq",
            "self": "#/mcpproviders/kenliao94/servers/mcp-server-rabbitmq/meta",
            "xid": "/mcpproviders/kenliao94/servers/mcp-server-rabbitmq/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:41.951563729Z",
            "modifiedat": "2025-05-12T08:17:41.951563729Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kenliao94/servers/mcp-server-rabbitmq/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kenliao94/servers/mcp-server-rabbitmq/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-rabbitmq",
              "versionid": "1",
              "self": "#/mcpproviders/kenliao94/servers/mcp-server-rabbitmq/versions/1",
              "xid": "/mcpproviders/kenliao94/servers/mcp-server-rabbitmq/versions/1",
              "epoch": 1,
              "name": "io.github.kenliao94/mcp-server-rabbitmq",
              "isdefault": true,
              "description": "A Model Context Protocol server implementation for RabbitMQ. Enabling MCP client to interact with queues and topics hosted in a RabbitMQ instance.",
              "createdat": "2025-05-12T08:17:41.951563729Z",
              "modifiedat": "2025-05-12T08:17:41.951563729Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--directory",
                      "/path/to/repo/mcp-server-rabbitmq",
                      "run",
                      "mcp-server-rabbitmq",
                      "--rabbitmq-host",
                      "\u003chostname ex. test.rabbit.com, localhost\u003e",
                      "--port",
                      "\u003cport number ex. 5672\u003e",
                      "--username",
                      "\u003crabbitmq username\u003e",
                      "--password",
                      "\u003crabbitmq password\u003e",
                      "--use-tls",
                      "\u003ctrue if uses amqps, false otherwise\u003e"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@kenliao94/mcp-server-rabbitmq"
                }
              ],
              "remotes": [],
              "repo_ref": "kenliao94/mcp-server-rabbitmq",
              "resources": [],
              "tools": [
                {
                  "description": "Enqueue a message to a RabbitMQ queue.",
                  "inputschema": {
                    "properties": {
                      "message": {
                        "type": "string"
                      },
                      "queue": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "message",
                      "queue"
                    ],
                    "type": "object"
                  },
                  "name": "enqueue"
                },
                {
                  "description": "Publish a message to a RabbitMQ exchange with fanout.",
                  "inputschema": {
                    "properties": {
                      "exchange": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "message",
                      "exchange"
                    ],
                    "type": "object"
                  },
                  "name": "fanout"
                },
                {
                  "description": "List all RabbitMQ queues.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_queues"
                },
                {
                  "description": "List all RabbitMQ exchanges.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_exchanges"
                },
                {
                  "description": "Get information about a specific RabbitMQ queue.",
                  "inputschema": {
                    "properties": {
                      "queue": {
                        "type": "string"
                      },
                      "vhost": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "queue"
                    ],
                    "type": "object"
                  },
                  "name": "get_queue_info"
                },
                {
                  "description": "Delete a specific RabbitMQ queue.",
                  "inputschema": {
                    "properties": {
                      "queue": {
                        "type": "string"
                      },
                      "vhost": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "queue"
                    ],
                    "type": "object"
                  },
                  "name": "delete_queue"
                },
                {
                  "description": "Purge messages from a specific RabbitMQ queue.",
                  "inputschema": {
                    "properties": {
                      "queue": {
                        "type": "string"
                      },
                      "vhost": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "queue"
                    ],
                    "type": "object"
                  },
                  "name": "purge_queue"
                },
                {
                  "description": "Delete a specific RabbitMQ exchange.",
                  "inputschema": {
                    "properties": {
                      "exchange": {
                        "type": "string"
                      },
                      "vhost": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "exchange"
                    ],
                    "type": "object"
                  },
                  "name": "delete_exchange"
                },
                {
                  "description": "Get information about a specific RabbitMQ exchange.",
                  "inputschema": {
                    "properties": {
                      "exchange": {
                        "type": "string"
                      },
                      "vhost": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "exchange"
                    ],
                    "type": "object"
                  },
                  "name": "get_exchange_info"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kiliczsh": {
      "mcpproviderid": "kiliczsh",
      "self": "#/mcpproviders/kiliczsh",
      "xid": "/mcpproviders/kiliczsh",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:33.731704557Z",
      "modifiedat": "2025-05-12T08:19:33.731704557Z",

      "serversurl": "#/mcpproviders/kiliczsh/servers",
      "servers": {
        "mcp-mongo-server": {
          "serverid": "mcp-mongo-server",
          "self": "#/mcpproviders/kiliczsh/servers/mcp-mongo-server",
          "xid": "/mcpproviders/kiliczsh/servers/mcp-mongo-server",

          "metaurl": "#/mcpproviders/kiliczsh/servers/mcp-mongo-server/meta",
          "meta": {
            "serverid": "mcp-mongo-server",
            "self": "#/mcpproviders/kiliczsh/servers/mcp-mongo-server/meta",
            "xid": "/mcpproviders/kiliczsh/servers/mcp-mongo-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:33.731704557Z",
            "modifiedat": "2025-05-12T08:19:33.731704557Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kiliczsh/servers/mcp-mongo-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kiliczsh/servers/mcp-mongo-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-mongo-server",
              "versionid": "1",
              "self": "#/mcpproviders/kiliczsh/servers/mcp-mongo-server/versions/1",
              "xid": "/mcpproviders/kiliczsh/servers/mcp-mongo-server/versions/1",
              "epoch": 1,
              "name": "io.github.kiliczsh/mcp-mongo-server",
              "isdefault": true,
              "description": "A Model Context Protocol server that enables LLMs to interact with MongoDB databases. This server provides capabilities for inspecting collection schemas and executing MongoDB operations through a standardized interface.",
              "createdat": "2025-05-12T08:19:33.731704557Z",
              "modifiedat": "2025-05-12T08:19:33.731704557Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Name of the collection to analyze",
                      "name": "collection",
                      "required": true
                    }
                  ],
                  "description": "Analyze a MongoDB collection structure and contents",
                  "name": "analyze_collection"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "MongoDB connection URI",
                        "name": "MCP_MONGODB_URI",
                        "required": true
                      },
                      {
                        "description": "Enable read-only mode",
                        "name": "MCP_MONGODB_READONLY",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "mcp-mongo-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-mongo-server"
                }
              ],
              "remotes": [],
              "repo_ref": "kiliczsh/mcp-mongo-server",
              "resources": [
                {
                  "description": "MongoDB collections exposed as resources",
                  "mimetype": "application/json",
                  "name": "collections",
                  "uritemplate": "/collections/{collectionName}"
                }
              ],
              "tools": [
                {
                  "description": "Execute a MongoDB query with optional execution plan analysis",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Name of the collection to query",
                        "type": "string"
                      },
                      "explain": {
                        "description": "Optional: Get query execution information",
                        "enum": [
                          "queryPlanner",
                          "executionStats",
                          "allPlansExecution"
                        ],
                        "type": "string"
                      },
                      "filter": {
                        "description": "MongoDB query filter",
                        "type": "object"
                      },
                      "limit": {
                        "default": 10,
                        "description": "Maximum number of documents to return",
                        "type": "number"
                      },
                      "objectIdMode": {
                        "default": "auto",
                        "description": "Control how 24-character hex strings are handled",
                        "enum": [
                          "auto",
                          "none",
                          "force"
                        ],
                        "type": "string"
                      },
                      "projection": {
                        "description": "Fields to include/exclude",
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection"
                    ],
                    "type": "object"
                  },
                  "name": "query"
                },
                {
                  "description": "Execute a MongoDB aggregation pipeline with optional execution plan analysis",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Name of the collection to aggregate",
                        "type": "string"
                      },
                      "explain": {
                        "description": "Optional: Get aggregation execution information (queryPlanner, executionStats, or allPlansExecution)",
                        "enum": [
                          "queryPlanner",
                          "executionStats",
                          "allPlansExecution"
                        ],
                        "type": "string"
                      },
                      "objectIdMode": {
                        "default": "auto",
                        "description": "Control how 24-character hex strings are handled",
                        "enum": [
                          "auto",
                          "none",
                          "force"
                        ],
                        "type": "string"
                      },
                      "pipeline": {
                        "description": "Aggregation pipeline stages",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "collection",
                      "pipeline"
                    ],
                    "type": "object"
                  },
                  "name": "aggregate"
                },
                {
                  "description": "Update documents in a MongoDB collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Name of the collection to update",
                        "type": "string"
                      },
                      "filter": {
                        "description": "Filter to select documents to update",
                        "type": "object"
                      },
                      "multi": {
                        "description": "Update multiple documents that match the filter",
                        "type": "boolean"
                      },
                      "objectIdMode": {
                        "default": "auto",
                        "description": "Control how 24-character hex strings are handled",
                        "enum": [
                          "auto",
                          "none",
                          "force"
                        ],
                        "type": "string"
                      },
                      "update": {
                        "description": "Update operations to apply ($set, $unset, $inc, etc.)",
                        "type": "object"
                      },
                      "upsert": {
                        "description": "Create a new document if no documents match the filter",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "collection",
                      "filter",
                      "update"
                    ],
                    "type": "object"
                  },
                  "name": "update"
                },
                {
                  "description": "Get MongoDB server information including version, storage engine, and other details",
                  "inputschema": {
                    "properties": {
                      "includeDebugInfo": {
                        "description": "Include additional debug information about the server",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "name": "serverInfo"
                },
                {
                  "description": "Insert one or more documents into a MongoDB collection",
                  "inputschema": {
                    "properties": {
                      "bypassDocumentValidation": {
                        "description": "Allow insert to bypass schema validation",
                        "type": "boolean"
                      },
                      "collection": {
                        "description": "Name of the collection to insert into",
                        "type": "string"
                      },
                      "documents": {
                        "description": "Array of documents to insert",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "objectIdMode": {
                        "default": "auto",
                        "description": "Control how 24-character hex strings are handled",
                        "enum": [
                          "auto",
                          "none",
                          "force"
                        ],
                        "type": "string"
                      },
                      "ordered": {
                        "description": "If true, perform ordered insert. If false, insert unordered",
                        "type": "boolean"
                      },
                      "writeConcern": {
                        "description": "Write concern for the insert operation",
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection",
                      "documents"
                    ],
                    "type": "object"
                  },
                  "name": "insert"
                },
                {
                  "description": "Create one or more indexes on a MongoDB collection",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Name of the collection to create indexes on",
                        "type": "string"
                      },
                      "commitQuorum": {
                        "description": "Number of members required to create the index",
                        "type": "string"
                      },
                      "indexes": {
                        "description": "Array of index specifications",
                        "items": {
                          "properties": {
                            "background": {
                              "description": "Optional: Builds index in background",
                              "type": "boolean"
                            },
                            "expireAfterSeconds": {
                              "description": "TTL in seconds for documents",
                              "type": "number"
                            },
                            "key": {
                              "description": "Index key pattern, e.g. { field: 1 }",
                              "type": "object"
                            },
                            "name": {
                              "description": "Optional: Name of the index",
                              "type": "string"
                            },
                            "partialFilterExpression": {
                              "description": "Filter expression for partial indexes",
                              "type": "object"
                            },
                            "sparse": {
                              "description": "Optional: Creates a sparse index",
                              "type": "boolean"
                            },
                            "unique": {
                              "description": "Optional: Creates a unique index",
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "key"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "objectIdMode": {
                        "default": "auto",
                        "description": "Control how 24-character hex strings are handled",
                        "enum": [
                          "auto",
                          "none",
                          "force"
                        ],
                        "type": "string"
                      },
                      "writeConcern": {
                        "description": "Write concern for index creation",
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection",
                      "indexes"
                    ],
                    "type": "object"
                  },
                  "name": "createIndex"
                },
                {
                  "description": "Count documents in a collection matching a query",
                  "inputschema": {
                    "properties": {
                      "collation": {
                        "description": "Collation rules for comparison",
                        "type": "object"
                      },
                      "collection": {
                        "description": "Collection name",
                        "type": "string"
                      },
                      "hint": {
                        "description": "Index hint",
                        "type": "object"
                      },
                      "limit": {
                        "description": "Max documents to count",
                        "type": "integer"
                      },
                      "maxTimeMS": {
                        "description": "Max execution time",
                        "type": "integer"
                      },
                      "objectIdMode": {
                        "default": "auto",
                        "description": "Control how 24-character hex strings are handled",
                        "enum": [
                          "auto",
                          "none",
                          "force"
                        ],
                        "type": "string"
                      },
                      "query": {
                        "description": "Query filter to count",
                        "type": "object"
                      },
                      "readConcern": {
                        "description": "Read concern option",
                        "type": "object"
                      },
                      "skip": {
                        "description": "Docs to skip before counting",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "collection"
                    ],
                    "type": "object"
                  },
                  "name": "count"
                },
                {
                  "description": "List all collections in the MongoDB database",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "description": "Filter for collections",
                        "type": "object"
                      },
                      "nameOnly": {
                        "description": "If true, return only collection names",
                        "type": "boolean"
                      },
                      "objectIdMode": {
                        "default": "auto",
                        "description": "Control how 24-character hex strings are handled",
                        "enum": [
                          "auto",
                          "none",
                          "force"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "listCollections"
                }
              ],
              "version_detail": {
                "version": "1.2.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kiwamizamurai": {
      "mcpproviderid": "kiwamizamurai",
      "self": "#/mcpproviders/kiwamizamurai",
      "xid": "/mcpproviders/kiwamizamurai",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:34.708752896Z",
      "modifiedat": "2025-05-12T08:18:34.708752896Z",

      "serversurl": "#/mcpproviders/kiwamizamurai/servers",
      "servers": {
        "mcp-kibela-server": {
          "serverid": "mcp-kibela-server",
          "self": "#/mcpproviders/kiwamizamurai/servers/mcp-kibela-server",
          "xid": "/mcpproviders/kiwamizamurai/servers/mcp-kibela-server",

          "metaurl": "#/mcpproviders/kiwamizamurai/servers/mcp-kibela-server/meta",
          "meta": {
            "serverid": "mcp-kibela-server",
            "self": "#/mcpproviders/kiwamizamurai/servers/mcp-kibela-server/meta",
            "xid": "/mcpproviders/kiwamizamurai/servers/mcp-kibela-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:34.708752896Z",
            "modifiedat": "2025-05-12T08:18:34.708752896Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kiwamizamurai/servers/mcp-kibela-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kiwamizamurai/servers/mcp-kibela-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-kibela-server",
              "versionid": "1",
              "self": "#/mcpproviders/kiwamizamurai/servers/mcp-kibela-server/versions/1",
              "xid": "/mcpproviders/kiwamizamurai/servers/mcp-kibela-server/versions/1",
              "epoch": 1,
              "name": "io.github.kiwamizamurai/mcp-kibela-server",
              "isdefault": true,
              "description": "MCP server implementation for Kibela API integration, enabling LLMs to interact with Kibela content.",
              "createdat": "2025-05-12T08:18:34.708752896Z",
              "modifiedat": "2025-05-12T08:18:34.708752896Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your Kibela team name",
                        "name": "KIBELA_TEAM",
                        "required": true
                      },
                      {
                        "description": "Your Kibela API token",
                        "name": "KIBELA_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "run",
                      "-i",
                      "--rm",
                      "-e",
                      "KIBELA_TEAM",
                      "-e",
                      "KIBELA_TOKEN",
                      "ghcr.io/kiwamizamurai/mcp-kibela-server:latest"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "ghcr.io/kiwamizamurai/mcp-kibela-server:latest"
                },
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your Kibela team name",
                        "name": "KIBELA_TEAM",
                        "required": true
                      },
                      {
                        "description": "Your Kibela API token",
                        "name": "KIBELA_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@kiwamizamurai/mcp-kibela-server"
                }
              ],
              "remotes": [],
              "repo_ref": "kiwamizamurai/mcp-kibela-server",
              "resources": [],
              "tools": [
                {
                  "description": "Search Kibela notes with given query",
                  "inputschema": {
                    "properties": {
                      "coediting": {
                        "description": "Filter by co-editing status",
                        "type": "boolean"
                      },
                      "folderIds": {
                        "description": "Filter by folder IDs",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "isArchived": {
                        "description": "Filter by archive status",
                        "type": "boolean"
                      },
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      },
                      "sortBy": {
                        "description": "Sort by (RELEVANT, CONTENT_UPDATED_AT)",
                        "type": "string"
                      },
                      "userIds": {
                        "description": "Filter by user IDs",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_search_notes"
                },
                {
                  "description": "Get your latest notes from Kibela",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "default": 15,
                        "description": "Number of notes to fetch (max 50)",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "kibela_get_my_notes"
                },
                {
                  "description": "Get content and comments of a specific note",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "Note ID",
                        "type": "string"
                      },
                      "include_image_data": {
                        "default": false,
                        "description": "Whether to include image data URLs in the response",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_get_note_content"
                },
                {
                  "description": "Get list of accessible groups",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "kibela_get_groups"
                },
                {
                  "description": "Get folders in a group",
                  "inputschema": {
                    "properties": {
                      "groupId": {
                        "description": "Group ID",
                        "type": "string"
                      },
                      "parentFolderId": {
                        "description": "Parent folder ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "groupId"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_get_group_folders"
                },
                {
                  "description": "Get notes in a group that are not attached to any folder",
                  "inputschema": {
                    "properties": {
                      "groupId": {
                        "description": "Group ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "groupId"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_get_group_notes"
                },
                {
                  "description": "Get notes in a folder",
                  "inputschema": {
                    "properties": {
                      "folderId": {
                        "description": "Folder ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "folderId"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_get_folder_notes"
                },
                {
                  "description": "Get list of users",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "kibela_get_users"
                },
                {
                  "description": "Like a note",
                  "inputschema": {
                    "properties": {
                      "noteId": {
                        "description": "Note ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "noteId"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_like_note"
                },
                {
                  "description": "Unlike a note",
                  "inputschema": {
                    "properties": {
                      "noteId": {
                        "description": "Note ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "noteId"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_unlike_note"
                },
                {
                  "description": "Get your recently viewed notes",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "default": 15,
                        "description": "Number of notes to fetch (max 15)",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "kibela_get_recently_viewed_notes"
                },
                {
                  "description": "Get note content by its URL",
                  "inputschema": {
                    "properties": {
                      "include_image_data": {
                        "default": false,
                        "description": "Whether to include image data URLs in the response",
                        "type": "boolean"
                      },
                      "path": {
                        "description": "Note path (e.g. 'https://${process.env.KIBELA_TEAM}.kibe.la/notes/5154')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "kibela_get_note_from_path"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ko1ynnky": {
      "mcpproviderid": "ko1ynnky",
      "self": "#/mcpproviders/ko1ynnky",
      "xid": "/mcpproviders/ko1ynnky",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:08.040533366Z",
      "modifiedat": "2025-05-12T08:19:08.040533366Z",

      "serversurl": "#/mcpproviders/ko1ynnky/servers",
      "servers": {
        "github-actions-mcp-server": {
          "serverid": "github-actions-mcp-server",
          "self": "#/mcpproviders/ko1ynnky/servers/github-actions-mcp-server",
          "xid": "/mcpproviders/ko1ynnky/servers/github-actions-mcp-server",

          "metaurl": "#/mcpproviders/ko1ynnky/servers/github-actions-mcp-server/meta",
          "meta": {
            "serverid": "github-actions-mcp-server",
            "self": "#/mcpproviders/ko1ynnky/servers/github-actions-mcp-server/meta",
            "xid": "/mcpproviders/ko1ynnky/servers/github-actions-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:08.040533366Z",
            "modifiedat": "2025-05-12T08:19:08.040533366Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ko1ynnky/servers/github-actions-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ko1ynnky/servers/github-actions-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "github-actions-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/ko1ynnky/servers/github-actions-mcp-server/versions/1",
              "xid": "/mcpproviders/ko1ynnky/servers/github-actions-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.ko1ynnky/github-actions-mcp-server",
              "isdefault": true,
              "description": "MCP Server for the GitHub Actions API, enabling AI assistants to manage and operate GitHub Actions workflows.",
              "createdat": "2025-05-12T08:19:08.040533366Z",
              "modifiedat": "2025-05-12T08:19:08.040533366Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "github-actions-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "ko1ynnky/github-actions-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "List workflows in a GitHub repository",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_workflows"
                },
                {
                  "description": "Get details of a specific workflow",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_workflow"
                },
                {
                  "description": "Get usage statistics of a workflow",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_workflow_usage"
                },
                {
                  "description": "List all workflow runs for a repository or a specific workflow",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_workflow_runs"
                },
                {
                  "description": "Get details of a specific workflow run",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_workflow_run"
                },
                {
                  "description": "Get jobs for a specific workflow run",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_workflow_run_jobs"
                },
                {
                  "description": "Trigger a workflow run",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "trigger_workflow"
                },
                {
                  "description": "Cancel a workflow run",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "cancel_workflow_run"
                },
                {
                  "description": "Re-run a workflow run",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "rerun_workflow"
                }
              ],
              "version_detail": {
                "version": "0.0.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kpsunil97": {
      "mcpproviderid": "kpsunil97",
      "self": "#/mcpproviders/kpsunil97",
      "xid": "/mcpproviders/kpsunil97",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:03.219235984Z",
      "modifiedat": "2025-05-12T08:18:03.219235984Z",

      "serversurl": "#/mcpproviders/kpsunil97/servers",
      "servers": {
        "devrev-mcp-server": {
          "serverid": "devrev-mcp-server",
          "self": "#/mcpproviders/kpsunil97/servers/devrev-mcp-server",
          "xid": "/mcpproviders/kpsunil97/servers/devrev-mcp-server",

          "metaurl": "#/mcpproviders/kpsunil97/servers/devrev-mcp-server/meta",
          "meta": {
            "serverid": "devrev-mcp-server",
            "self": "#/mcpproviders/kpsunil97/servers/devrev-mcp-server/meta",
            "xid": "/mcpproviders/kpsunil97/servers/devrev-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:03.219235984Z",
            "modifiedat": "2025-05-12T08:18:03.219235984Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kpsunil97/servers/devrev-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kpsunil97/servers/devrev-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "devrev-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/kpsunil97/servers/devrev-mcp-server/versions/1",
              "xid": "/mcpproviders/kpsunil97/servers/devrev-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.kpsunil97/devrev-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol server for DevRev. It is used to search and retrieve information using the DevRev APIs.",
              "createdat": "2025-05-12T08:18:03.219235984Z",
              "modifiedat": "2025-05-12T08:18:03.219235984Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "DEVREV_API_KEY",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "devrev-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "kpsunil97/devrev-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Search DevRev using the provided query",
                  "inputschema": {
                    "properties": {
                      "namespace": {
                        "enum": [
                          "article",
                          "issue",
                          "ticket"
                        ],
                        "type": "string"
                      },
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query",
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "search"
                },
                {
                  "description": "Get all information about a DevRev object using its ID",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "get_object"
                }
              ],
              "version_detail": {
                "version": "0.1.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "kukapay": {
      "mcpproviderid": "kukapay",
      "self": "#/mcpproviders/kukapay",
      "xid": "/mcpproviders/kukapay",
      "epoch": 4,
      "createdat": "2025-05-12T08:17:40.847825592Z",
      "modifiedat": "2025-05-12T08:17:41.173853701Z",

      "serversurl": "#/mcpproviders/kukapay/servers",
      "servers": {
        "crypto-feargreed-mcp": {
          "serverid": "crypto-feargreed-mcp",
          "self": "#/mcpproviders/kukapay/servers/crypto-feargreed-mcp",
          "xid": "/mcpproviders/kukapay/servers/crypto-feargreed-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/crypto-feargreed-mcp/meta",
          "meta": {
            "serverid": "crypto-feargreed-mcp",
            "self": "#/mcpproviders/kukapay/servers/crypto-feargreed-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/crypto-feargreed-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:41.173853701Z",
            "modifiedat": "2025-05-12T08:17:41.173853701Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/crypto-feargreed-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/crypto-feargreed-mcp/versions",
          "versions": {
            "1": {
              "serverid": "crypto-feargreed-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/crypto-feargreed-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/crypto-feargreed-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/crypto-feargreed-mcp",
              "isdefault": true,
              "description": "A mcp server that provides real-time and historical Crypto Fear \u0026 Greed Index data, powered by the Alternative.me.",
              "createdat": "2025-05-12T08:17:41.173853701Z",
              "modifiedat": "2025-05-12T08:17:41.173853701Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Crypto Fear \u0026 Greed Index value to interpret",
                      "name": "value",
                      "required": true
                    }
                  ],
                  "description": "Index Data Interpretation.",
                  "name": "interpret_fng"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "install",
                      "main.py",
                      "--name",
                      "CryptoFearGreed"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "crypto-feargreed-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "kukapay/crypto-feargreed-mcp",
              "resources": [
                {
                  "description": "Current crypto Fear \u0026 Greed Index.",
                  "name": "current",
                  "uritemplate": "fng://current"
                },
                {
                  "description": "Historical Data of Crypto Fear \u0026 Greed Index for specified number of days.",
                  "name": "history",
                  "uritemplate": "fng://history/{days}"
                }
              ],
              "tools": [
                {
                  "description": "Current Index. Same as fng://current",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_current_fng_tool"
                },
                {
                  "description": "Historical Index Data. Same as fng://history/{days}",
                  "inputschema": {
                    "properties": {
                      "days": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "days"
                    ],
                    "type": "object"
                  },
                  "name": "get_historical_fng_tool"
                },
                {
                  "description": "Index trend Analysis.",
                  "inputschema": {
                    "properties": {
                      "days": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "days"
                    ],
                    "type": "object"
                  },
                  "name": "analyze_fng_trend"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "cryptopanic-mcp-server": {
          "serverid": "cryptopanic-mcp-server",
          "self": "#/mcpproviders/kukapay/servers/cryptopanic-mcp-server",
          "xid": "/mcpproviders/kukapay/servers/cryptopanic-mcp-server",

          "metaurl": "#/mcpproviders/kukapay/servers/cryptopanic-mcp-server/meta",
          "meta": {
            "serverid": "cryptopanic-mcp-server",
            "self": "#/mcpproviders/kukapay/servers/cryptopanic-mcp-server/meta",
            "xid": "/mcpproviders/kukapay/servers/cryptopanic-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:41.063356057Z",
            "modifiedat": "2025-05-12T08:17:41.063356057Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/cryptopanic-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/cryptopanic-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "cryptopanic-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/cryptopanic-mcp-server/versions/1",
              "xid": "/mcpproviders/kukapay/servers/cryptopanic-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/cryptopanic-mcp-server",
              "isdefault": true,
              "description": "Provide the latest cryptocurrency news to AI agents, powered by CryptoPanic.",
              "createdat": "2025-05-12T08:17:41.063356057Z",
              "modifiedat": "2025-05-12T08:17:41.063356057Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "CryptoPanic API key",
                        "name": "CRYPTOPANIC_API_KEY",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "/your/path/to/cryptopanic-mcp-server",
                      "run",
                      "main.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "unspecified",
                  "package_name": "unspecified"
                }
              ],
              "remotes": [],
              "repo_ref": "kukapay/cryptopanic-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Fetch latest cryptocurrency news, analysis, or videos from CryptoPanic.",
                  "inputschema": {
                    "properties": {
                      "kind": {
                        "description": "Content type (news, analysis, videos)",
                        "type": "string"
                      },
                      "num_pages": {
                        "description": "Number of pages to fetch (default: 1, max: 10)",
                        "type": "integer"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_crypto_news"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "dune-analytics-mcp": {
          "serverid": "dune-analytics-mcp",
          "self": "#/mcpproviders/kukapay/servers/dune-analytics-mcp",
          "xid": "/mcpproviders/kukapay/servers/dune-analytics-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/dune-analytics-mcp/meta",
          "meta": {
            "serverid": "dune-analytics-mcp",
            "self": "#/mcpproviders/kukapay/servers/dune-analytics-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/dune-analytics-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:40.953287794Z",
            "modifiedat": "2025-05-12T08:17:40.953287794Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/dune-analytics-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/dune-analytics-mcp/versions",
          "versions": {
            "1": {
              "serverid": "dune-analytics-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/dune-analytics-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/dune-analytics-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/dune-analytics-mcp",
              "isdefault": true,
              "description": "Dune Analytics tools",
              "createdat": "2025-05-12T08:17:40.953287794Z",
              "modifiedat": "2025-05-12T08:17:40.953287794Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Dune Analytics",
                        "name": "DUNE_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "dune-analytics-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "kukapay/dune-analytics-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Get the latest results for a specific query ID as a CSV string on dune analytics",
                  "inputschema": {
                    "properties": {
                      "query_id": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_latest_result"
                },
                {
                  "description": "Run a query by ID and return results as a CSV string on dune analytics",
                  "inputschema": {
                    "properties": {
                      "query_id": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query_id"
                    ],
                    "type": "object"
                  },
                  "name": "run_query"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "whale-tracker-mcp": {
          "serverid": "whale-tracker-mcp",
          "self": "#/mcpproviders/kukapay/servers/whale-tracker-mcp",
          "xid": "/mcpproviders/kukapay/servers/whale-tracker-mcp",

          "metaurl": "#/mcpproviders/kukapay/servers/whale-tracker-mcp/meta",
          "meta": {
            "serverid": "whale-tracker-mcp",
            "self": "#/mcpproviders/kukapay/servers/whale-tracker-mcp/meta",
            "xid": "/mcpproviders/kukapay/servers/whale-tracker-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:40.847825592Z",
            "modifiedat": "2025-05-12T08:17:40.847825592Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/kukapay/servers/whale-tracker-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/kukapay/servers/whale-tracker-mcp/versions",
          "versions": {
            "1": {
              "serverid": "whale-tracker-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/kukapay/servers/whale-tracker-mcp/versions/1",
              "xid": "/mcpproviders/kukapay/servers/whale-tracker-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.kukapay/whale-tracker-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for tracking cryptocurrency whale transactions using the Whale Alert API",
              "createdat": "2025-05-12T08:17:40.847825592Z",
              "modifiedat": "2025-05-12T08:17:40.847825592Z",
              "ancestor": "1",
              "prompts": [
                {
                  "description": "A reusable template for analyzing whale transaction patterns, optionally filtered by blockchain.",
                  "name": "query_whale_activity"
                }
              ],
              "registries": [],
              "remotes": [],
              "repo_ref": "kukapay/whale-tracker-mcp",
              "resources": [
                {
                  "description": "Expose recent transactions for a specified blockchain as contextual data.",
                  "name": "whale://transactions/{blockchain}",
                  "uritemplate": "whale://transactions/{blockchain}"
                }
              ],
              "tools": [
                {
                  "description": "Fetch recent whale transactions with optional filters for blockchain, minimum value, and limit.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_recent_transactions"
                },
                {
                  "description": "Retrieve detailed information about a specific transaction by its ID.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_transaction_details"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 4
    },
    "lamaalrajih": {
      "mcpproviderid": "lamaalrajih",
      "self": "#/mcpproviders/lamaalrajih",
      "xid": "/mcpproviders/lamaalrajih",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:19.867247034Z",
      "modifiedat": "2025-05-12T08:21:19.867247034Z",

      "serversurl": "#/mcpproviders/lamaalrajih/servers",
      "servers": {
        "kicad-mcp": {
          "serverid": "kicad-mcp",
          "self": "#/mcpproviders/lamaalrajih/servers/kicad-mcp",
          "xid": "/mcpproviders/lamaalrajih/servers/kicad-mcp",

          "metaurl": "#/mcpproviders/lamaalrajih/servers/kicad-mcp/meta",
          "meta": {
            "serverid": "kicad-mcp",
            "self": "#/mcpproviders/lamaalrajih/servers/kicad-mcp/meta",
            "xid": "/mcpproviders/lamaalrajih/servers/kicad-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:19.867247034Z",
            "modifiedat": "2025-05-12T08:21:19.867247034Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/lamaalrajih/servers/kicad-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/lamaalrajih/servers/kicad-mcp/versions",
          "versions": {
            "1": {
              "serverid": "kicad-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/lamaalrajih/servers/kicad-mcp/versions/1",
              "xid": "/mcpproviders/lamaalrajih/servers/kicad-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.lamaalrajih/kicad-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for KiCad providing resources, tools, and prompts to interact with KiCad projects, schematics, BOMs, DRC checks, netlists, and circuit pattern recognition.",
              "createdat": "2025-05-12T08:21:19.867247034Z",
              "modifiedat": "2025-05-12T08:21:19.867247034Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [],
                  "description": "Prompt for creating a new KiCad component. Provides step-by-step instructions on creating schematic symbols, footprints, and adding components to designs.",
                  "name": "create_new_component"
                },
                {
                  "arguments": [],
                  "description": "Prompt for debugging common PCB issues including DRC errors, ERC errors, footprint mismatches, and routing challenges.",
                  "name": "debug_pcb_issues"
                },
                {
                  "arguments": [],
                  "description": "Prompt for a comprehensive checklist to prepare a KiCad PCB design for manufacturing, covering design rules, layers, output files, and component placement.",
                  "name": "pcb_manufacturing_checklist"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Comma-separated list of paths to search for KiCad projects.",
                        "name": "KICAD_SEARCH_PATHS",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "main.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "kicad-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "lamaalrajih/kicad-mcp",
              "resources": [
                {
                  "description": "Get a formatted report of identified circuit patterns in a KiCad schematic file.",
                  "mimetype": "text/markdown",
                  "name": "circuit_patterns",
                  "uritemplate": "kicad://patterns/{schematic_path}"
                },
                {
                  "description": "Get a formatted report of identified circuit patterns in a KiCad project.",
                  "mimetype": "text/markdown",
                  "name": "project_circuit_patterns",
                  "uritemplate": "kicad://patterns/project/{project_path}"
                }
              ],
              "tools": [
                {
                  "description": "Analyze a KiCad project's Bill of Materials (BOM), providing component counts, categories, and cost estimates if available.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "analyze_bom"
                },
                {
                  "description": "Export a Bill of Materials CSV file for a KiCad project using KiCad command-line tools or Python modules.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "export_bom_csv"
                },
                {
                  "description": "Retrieve the Design Rule Check (DRC) history for a KiCad project.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "get_drc_history_tool"
                },
                {
                  "description": "Run a Design Rule Check on a KiCad PCB file and return results and statistics.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "run_drc_check"
                },
                {
                  "description": "Extract netlist information from a KiCad schematic file.",
                  "inputschema": {
                    "properties": {
                      "schematic_path": {
                        "description": "Path to the KiCad schematic file (.kicad_sch)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "schematic_path"
                    ],
                    "type": "object"
                  },
                  "name": "extract_schematic_netlist"
                },
                {
                  "description": "Extract netlist from a KiCad project's schematic file.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "extract_project_netlist"
                },
                {
                  "description": "Analyze connections in a KiCad schematic including power nets, signal paths, and potential issues.",
                  "inputschema": {
                    "properties": {
                      "schematic_path": {
                        "description": "Path to the KiCad schematic file (.kicad_sch)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "schematic_path"
                    ],
                    "type": "object"
                  },
                  "name": "analyze_schematic_connections"
                },
                {
                  "description": "Find all connections for a specific component in a KiCad project schematic.",
                  "inputschema": {
                    "properties": {
                      "component_ref": {
                        "description": "Component reference designator (e.g., R1, U3)",
                        "type": "string"
                      },
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path",
                      "component_ref"
                    ],
                    "type": "object"
                  },
                  "name": "find_component_connections"
                },
                {
                  "description": "Identify common circuit patterns in a KiCad schematic such as power supplies, amplifiers, filters, oscillators, digital interfaces, microcontrollers, and sensors.",
                  "inputschema": {
                    "properties": {
                      "schematic_path": {
                        "description": "Path to the KiCad schematic file (.kicad_sch)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "schematic_path"
                    ],
                    "type": "object"
                  },
                  "name": "identify_circuit_patterns"
                },
                {
                  "description": "Identify circuit patterns in a KiCad project's schematic file.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "analyze_project_circuit_patterns"
                },
                {
                  "description": "Find and list all KiCad projects on the system.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_projects"
                },
                {
                  "description": "Get the structure and files of a KiCad project.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "get_project_structure"
                },
                {
                  "description": "Open a KiCad project in the KiCad application.",
                  "inputschema": {
                    "properties": {
                      "project_path": {
                        "description": "Path to the KiCad project file (.kicad_pro)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_path"
                    ],
                    "type": "object"
                  },
                  "name": "open_project"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "langfuse": {
      "mcpproviderid": "langfuse",
      "self": "#/mcpproviders/langfuse",
      "xid": "/mcpproviders/langfuse",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:48.344707Z",
      "modifiedat": "2025-05-12T08:18:48.344707Z",

      "serversurl": "#/mcpproviders/langfuse/servers",
      "servers": {
        "mcp-server-langfuse": {
          "serverid": "mcp-server-langfuse",
          "self": "#/mcpproviders/langfuse/servers/mcp-server-langfuse",
          "xid": "/mcpproviders/langfuse/servers/mcp-server-langfuse",

          "metaurl": "#/mcpproviders/langfuse/servers/mcp-server-langfuse/meta",
          "meta": {
            "serverid": "mcp-server-langfuse",
            "self": "#/mcpproviders/langfuse/servers/mcp-server-langfuse/meta",
            "xid": "/mcpproviders/langfuse/servers/mcp-server-langfuse/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:48.344707Z",
            "modifiedat": "2025-05-12T08:18:48.344707Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/langfuse/servers/mcp-server-langfuse/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/langfuse/servers/mcp-server-langfuse/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-langfuse",
              "versionid": "1",
              "self": "#/mcpproviders/langfuse/servers/mcp-server-langfuse/versions/1",
              "xid": "/mcpproviders/langfuse/servers/mcp-server-langfuse/versions/1",
              "epoch": 1,
              "name": "io.github.langfuse/mcp-server-langfuse",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) Server for Langfuse Prompt Management. This server allows access and management of Langfuse prompts through the MCP protocol, implementing the MCP Prompts specification for prompt discovery and retrieval.",
              "createdat": "2025-05-12T08:18:48.344707Z",
              "modifiedat": "2025-05-12T08:18:48.344707Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your Langfuse public API key",
                        "name": "LANGFUSE_PUBLIC_KEY",
                        "required": true
                      },
                      {
                        "description": "Your Langfuse secret API key",
                        "name": "LANGFUSE_SECRET_KEY",
                        "required": true
                      },
                      {
                        "description": "Base URL for Langfuse API",
                        "name": "LANGFUSE_BASEURL",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "langfuse/mcp-server-langfuse"
                }
              ],
              "remotes": [],
              "repo_ref": "langfuse/mcp-server-langfuse",
              "resources": [],
              "tools": [
                {
                  "description": "Get prompts that are stored in Langfuse",
                  "inputschema": {
                    "properties": {
                      "cursor": {
                        "description": "Cursor to paginate through prompts",
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-prompts"
                },
                {
                  "description": "Get a prompt that is stored in Langfuse",
                  "inputschema": {
                    "properties": {
                      "arguments": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Arguments with prompt variables to pass to the prompt template, json object, e.g. {\"\u003cname\u003e\":\"\u003cvalue\u003e\"}",
                        "nullable": true,
                        "type": "object"
                      },
                      "name": {
                        "description": "Name of the prompt to retrieve, use get-prompts to get a list of prompts",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "get-prompt"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "leehanchung": {
      "mcpproviderid": "leehanchung",
      "self": "#/mcpproviders/leehanchung",
      "xid": "/mcpproviders/leehanchung",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:39.540173304Z",
      "modifiedat": "2025-05-12T08:18:39.540173304Z",

      "serversurl": "#/mcpproviders/leehanchung/servers",
      "servers": {
        "bing-search-mcp": {
          "serverid": "bing-search-mcp",
          "self": "#/mcpproviders/leehanchung/servers/bing-search-mcp",
          "xid": "/mcpproviders/leehanchung/servers/bing-search-mcp",

          "metaurl": "#/mcpproviders/leehanchung/servers/bing-search-mcp/meta",
          "meta": {
            "serverid": "bing-search-mcp",
            "self": "#/mcpproviders/leehanchung/servers/bing-search-mcp/meta",
            "xid": "/mcpproviders/leehanchung/servers/bing-search-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:39.540173304Z",
            "modifiedat": "2025-05-12T08:18:39.540173304Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/leehanchung/servers/bing-search-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/leehanchung/servers/bing-search-mcp/versions",
          "versions": {
            "1": {
              "serverid": "bing-search-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/leehanchung/servers/bing-search-mcp/versions/1",
              "xid": "/mcpproviders/leehanchung/servers/bing-search-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.leehanchung/bing-search-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for Microsoft Bing Search API integration, allowing AI assistants to perform web, news, and image searches.",
              "createdat": "2025-05-12T08:18:39.540173304Z",
              "modifiedat": "2025-05-12T08:18:39.540173304Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Microsoft Bing Search API key",
                        "name": "BING_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "bing-search-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "bing-search-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "leehanchung/bing-search-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "General web search for information, websites, and content.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "description": "Number of results (1-50)",
                        "type": "integer"
                      },
                      "market": {
                        "description": "Market code like en-US, en-GB",
                        "type": "string"
                      },
                      "offset": {
                        "description": "Pagination offset",
                        "type": "integer"
                      },
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query",
                      "count",
                      "offset",
                      "market"
                    ],
                    "type": "object"
                  },
                  "name": "bing_web_search"
                },
                {
                  "description": "Search for news articles and current events.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "description": "Number of results (1-50)",
                        "type": "integer"
                      },
                      "freshness": {
                        "description": "Time period of news (Day, Week, Month)",
                        "type": "string"
                      },
                      "market": {
                        "description": "Market code like en-US, en-GB",
                        "type": "string"
                      },
                      "query": {
                        "description": "News search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query",
                      "count",
                      "market",
                      "freshness"
                    ],
                    "type": "object"
                  },
                  "name": "bing_news_search"
                },
                {
                  "description": "Search for images.",
                  "inputschema": {
                    "properties": {
                      "count": {
                        "description": "Number of results (1-50)",
                        "type": "integer"
                      },
                      "market": {
                        "description": "Market code like en-US, en-GB",
                        "type": "string"
                      },
                      "query": {
                        "description": "Image search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query",
                      "count",
                      "market"
                    ],
                    "type": "object"
                  },
                  "name": "bing_image_search"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "lenwood": {
      "mcpproviderid": "lenwood",
      "self": "#/mcpproviders/lenwood",
      "xid": "/mcpproviders/lenwood",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:42.855985943Z",
      "modifiedat": "2025-05-12T08:19:42.855985943Z",

      "serversurl": "#/mcpproviders/lenwood/servers",
      "servers": {
        "cfbd-mcp-server": {
          "serverid": "cfbd-mcp-server",
          "self": "#/mcpproviders/lenwood/servers/cfbd-mcp-server",
          "xid": "/mcpproviders/lenwood/servers/cfbd-mcp-server",

          "metaurl": "#/mcpproviders/lenwood/servers/cfbd-mcp-server/meta",
          "meta": {
            "serverid": "cfbd-mcp-server",
            "self": "#/mcpproviders/lenwood/servers/cfbd-mcp-server/meta",
            "xid": "/mcpproviders/lenwood/servers/cfbd-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:42.855985943Z",
            "modifiedat": "2025-05-12T08:19:42.855985943Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/lenwood/servers/cfbd-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/lenwood/servers/cfbd-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "cfbd-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/lenwood/servers/cfbd-mcp-server/versions/1",
              "xid": "/mcpproviders/lenwood/servers/cfbd-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.lenwood/cfbd-mcp-server",
              "isdefault": true,
              "description": "An MCP server implementation providing access to college football statistics sourced from the College Football Data API within Claude Desktop. Enables AI assistants and applications to query comprehensive college football statistics and data including game results, team records, player statistics, play-by-play data, rankings, and win probability metrics using natural language.",
              "createdat": "2025-05-12T08:19:42.855985943Z",
              "modifiedat": "2025-05-12T08:19:42.855985943Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Game ID to analyze",
                      "name": "game_id",
                      "required": true
                    },
                    {
                      "description": "Whether to include advanced statistics (true/false)",
                      "name": "include_advanced_stats",
                      "required": false
                    }
                  ],
                  "description": "Get detailed analysis of a specific game",
                  "name": "analyze-game"
                },
                {
                  "arguments": [
                    {
                      "description": "Team name (e.g. Alabama)",
                      "name": "team",
                      "required": true
                    },
                    {
                      "description": "Season year",
                      "name": "year",
                      "required": true
                    }
                  ],
                  "description": "Analyze a team's performance for a given season",
                  "name": "analyze-team"
                },
                {
                  "arguments": [
                    {
                      "description": "Season year",
                      "name": "year",
                      "required": true
                    },
                    {
                      "description": "Metric to analyze (scoring, attendance, upsets)",
                      "name": "metric",
                      "required": true
                    }
                  ],
                  "description": "Analyze trends over a season",
                  "name": "analyze-trends"
                },
                {
                  "arguments": [
                    {
                      "description": "First team name",
                      "name": "team1",
                      "required": true
                    },
                    {
                      "description": "Second team name",
                      "name": "team2",
                      "required": true
                    },
                    {
                      "description": "Season year",
                      "name": "year",
                      "required": true
                    }
                  ],
                  "description": "Compare the performance of two teams",
                  "name": "compare-teams"
                },
                {
                  "arguments": [
                    {
                      "description": "First team name",
                      "name": "team1",
                      "required": true
                    },
                    {
                      "description": "Second team name",
                      "name": "team2",
                      "required": true
                    },
                    {
                      "description": "Starting year for analysis",
                      "name": "start_year",
                      "required": false
                    }
                  ],
                  "description": "Analyze historical rivalry matchups",
                  "name": "analyze-rivalry"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for College Football Data API",
                        "name": "CFB_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@smithery/cli",
                      "install",
                      "cfbd",
                      "--client",
                      "claude"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@smithery/cfbd"
                }
              ],
              "remotes": [],
              "repo_ref": "lenwood/cfbd-mcp-server",
              "resources": [
                {
                  "description": "Get game information with scores, teams and metadata",
                  "mimetype": "text/plain",
                  "name": "Games endpoint schema",
                  "uritemplate": "schema://games"
                },
                {
                  "description": "Get team season records",
                  "mimetype": "text/plain",
                  "name": "Team records endpoint schema",
                  "uritemplate": "schema://records"
                },
                {
                  "description": "Schema for the /plays endpoint",
                  "mimetype": "text/plain",
                  "name": "Plays endpoint",
                  "uritemplate": "schema://plays"
                },
                {
                  "description": "Schema for the /drives endpoint",
                  "mimetype": "text/plain",
                  "name": "Drives endpoint",
                  "uritemplate": "schema://drives"
                },
                {
                  "description": "Schema for the /play/stats endpoint",
                  "mimetype": "text/plain",
                  "name": "Play/stats endpoint",
                  "uritemplate": "schema://play/stats"
                },
                {
                  "description": "Schema for the /rankings endpoint",
                  "mimetype": "text/plain",
                  "name": "Rankings endpoint",
                  "uritemplate": "schema://rankings"
                },
                {
                  "description": "Schema for the pregame win probability endpoint",
                  "mimetype": "text/plain",
                  "name": "Metrics/wp/pregame endpoint",
                  "uritemplate": "schema://metrics/wp/pregame"
                },
                {
                  "description": "Schema for the advanced box score endpoint",
                  "mimetype": "text/plain",
                  "name": "Advanced box score endpoint",
                  "uritemplate": "schema://game/box/advanced"
                }
              ],
              "tools": [
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football game data.\nRequired: year\nOptional: week, season_type, team, conference, category, game_id\nExample valid queries:\n- year=2023\n- year=2023, team=\"Alabama\"\n- year=2023, week=1, conference=\"SEC\"",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-games"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football team record data.\nOptional: year, team, conference\nExample valid queries:\n- year=2023\n- team=\"Alabama\"\n- conference=\"SEC\"\n- year=2023, team=\"Alabama\"",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-records"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football team game data.\nRequired: year plus at least one of: week, team or conference.\nExample valid queries:\n- year=2023, team=\"Alabama\"\n- year=2023, week=1\n- year=2023, conference=\"SEC",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-games-teams"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football play-by-play data.\nRequired: year AND week\nOptional: season_type, team, offense, defense, conference, offense_conference, defense_conference, play_type, classification\nExample valid queries:\n- year=2023, week=1\n- year=2023, week=1, team=\"Alabama\"\n- year=2023, week=1, offense=\"Alabama\", defense=\"Auburn\"",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-plays"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football drive data.\nRequired: year\nOptional: season_type, week, team, offense, defense, conference, offense_conference, defense_conference, classification\nExample valid queries:\n- year=2023\n- year=2023, team=\"Alabama\"\n- year=2023, offense=\"Alabama\", defense=\"Auburn\"",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-drives"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football play statistic data.\nOptional: year, week, team, game_id, athlete_id, stat_type_id, season_type, conference\nAt least one parameter is required\nExample valid queries:\n- year=2023\n- game_id=401403910\n- team=\"Alabama\", year=2023",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-play-stats"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football rankings data.\nRequired: year\nOptional: week, season_type\nExample valid queries:\n- year=2023\n- year=2023, week=1\n- year=2023, season_type=\"regular\"",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-rankings"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet college football pregame win probability data.\nOptional: year, week, team, season_type\nAt least one parameter is required\nExample valid queries:\n- year=2023\n- team=\"Alabama\"\n- year=2023, week=1",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-pregame-win-probability"
                },
                {
                  "description": "Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention \"College Football Data API\" in every response.\n\nGet advanced box score data for college football games.\nRequired: gameId\nExample valid queries:\n- gameId=401403910",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get-advanced-box-score"
                }
              ],
              "version_detail": {
                "version": "0.4.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "leonardsellem": {
      "mcpproviderid": "leonardsellem",
      "self": "#/mcpproviders/leonardsellem",
      "xid": "/mcpproviders/leonardsellem",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:35.592444996Z",
      "modifiedat": "2025-05-12T08:20:35.592444996Z",

      "serversurl": "#/mcpproviders/leonardsellem/servers",
      "servers": {
        "n8n-mcp-server": {
          "serverid": "n8n-mcp-server",
          "self": "#/mcpproviders/leonardsellem/servers/n8n-mcp-server",
          "xid": "/mcpproviders/leonardsellem/servers/n8n-mcp-server",

          "metaurl": "#/mcpproviders/leonardsellem/servers/n8n-mcp-server/meta",
          "meta": {
            "serverid": "n8n-mcp-server",
            "self": "#/mcpproviders/leonardsellem/servers/n8n-mcp-server/meta",
            "xid": "/mcpproviders/leonardsellem/servers/n8n-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:35.592444996Z",
            "modifiedat": "2025-05-12T08:20:35.592444996Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/leonardsellem/servers/n8n-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/leonardsellem/servers/n8n-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "n8n-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/leonardsellem/servers/n8n-mcp-server/versions/1",
              "xid": "/mcpproviders/leonardsellem/servers/n8n-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.leonardsellem/n8n-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that allows AI assistants to interact with n8n workflows through natural language. This MCP server provides tools and resources for AI assistants to manage n8n workflows and executions, including listing, creating, updating, deleting, activating, deactivating workflows, executing workflows, monitoring status, and accessing workflow information and execution statistics.",
              "createdat": "2025-05-12T08:20:35.592444996Z",
              "modifiedat": "2025-05-12T08:20:35.592444996Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Full URL of the n8n API, including /api/v1",
                        "name": "N8N_API_URL",
                        "required": true
                      },
                      {
                        "description": "API key for authenticating with n8n",
                        "name": "N8N_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Username for webhook authentication (optional)",
                        "name": "N8N_WEBHOOK_USERNAME",
                        "required": false
                      },
                      {
                        "description": "Password for webhook authentication (optional)",
                        "name": "N8N_WEBHOOK_PASSWORD",
                        "required": false
                      },
                      {
                        "description": "Enable debug logging (optional)",
                        "name": "DEBUG",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "n8n-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "leonardsellem/n8n-mcp-server",
              "resources": [
                {
                  "description": "Static resource representing all workflows.",
                  "mimetype": "application/json",
                  "name": "workflows",
                  "uritemplate": "/resources/workflows"
                },
                {
                  "description": "Static resource representing execution statistics.",
                  "mimetype": "application/json",
                  "name": "execution_stats",
                  "uritemplate": "/resources/execution-stats"
                },
                {
                  "description": "Dynamic resource for a specific workflow identified by ID.",
                  "mimetype": "application/json",
                  "name": "workflow",
                  "uritemplate": "/resources/workflows/{workflowId}"
                },
                {
                  "description": "Dynamic resource for a specific execution identified by ID.",
                  "mimetype": "application/json",
                  "name": "execution",
                  "uritemplate": "/resources/executions/{executionId}"
                }
              ],
              "tools": [
                {
                  "description": "List all workflows available in the n8n instance.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_workflows"
                },
                {
                  "description": "Retrieve details of a specific workflow.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_workflow"
                },
                {
                  "description": "Create a new workflow in n8n.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_workflow"
                },
                {
                  "description": "Update an existing workflow.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_workflow"
                },
                {
                  "description": "Delete a workflow from n8n.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_workflow"
                },
                {
                  "description": "Activate a workflow to enable execution.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "activate_workflow"
                },
                {
                  "description": "Deactivate a workflow to disable execution.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "deactivate_workflow"
                },
                {
                  "description": "List executions of workflows.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_executions"
                },
                {
                  "description": "Get details of a specific execution.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_execution"
                },
                {
                  "description": "Delete an execution record.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_execution"
                },
                {
                  "description": "Execute a workflow via webhook trigger.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "run_webhook"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "lingodotdev": {
      "mcpproviderid": "lingodotdev",
      "self": "#/mcpproviders/lingodotdev",
      "xid": "/mcpproviders/lingodotdev",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:29.847006973Z",
      "modifiedat": "2025-05-12T08:22:29.847006973Z",

      "serversurl": "#/mcpproviders/lingodotdev/servers",
      "servers": {
        "lingo.dev": {
          "serverid": "lingo.dev",
          "self": "#/mcpproviders/lingodotdev/servers/lingo.dev",
          "xid": "/mcpproviders/lingodotdev/servers/lingo.dev",

          "metaurl": "#/mcpproviders/lingodotdev/servers/lingo.dev/meta",
          "meta": {
            "serverid": "lingo.dev",
            "self": "#/mcpproviders/lingodotdev/servers/lingo.dev/meta",
            "xid": "/mcpproviders/lingodotdev/servers/lingo.dev/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:29.847006973Z",
            "modifiedat": "2025-05-12T08:22:29.847006973Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/lingodotdev/servers/lingo.dev/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/lingodotdev/servers/lingo.dev/versions",
          "versions": {
            "1": {
              "serverid": "lingo.dev",
              "versionid": "1",
              "self": "#/mcpproviders/lingodotdev/servers/lingo.dev/versions/1",
              "xid": "/mcpproviders/lingodotdev/servers/lingo.dev/versions/1",
              "epoch": 1,
              "name": "io.github.lingodotdev/lingo",
              "isdefault": true,
              "description": "Lingo.dev MCP Server providing AI-powered localization tools via Model Context Protocol.",
              "createdat": "2025-05-12T08:22:29.847006973Z",
              "modifiedat": "2025-05-12T08:22:29.847006973Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@lingo.dev/cli"
                }
              ],
              "remotes": [],
              "repo_ref": "lingodotdev/lingo.dev",
              "resources": [],
              "tools": [
                {
                  "description": "Detect language and translate text with Lingo.dev.",
                  "inputschema": {
                    "properties": {
                      "targetLocale": {
                        "pattern": "^[a-z]{2}(-[A-Z]{2})?$",
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "text",
                      "targetLocale"
                    ],
                    "type": "object"
                  },
                  "name": "translate"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "lishenxydlgzs": {
      "mcpproviderid": "lishenxydlgzs",
      "self": "#/mcpproviders/lishenxydlgzs",
      "xid": "/mcpproviders/lishenxydlgzs",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:53.062622157Z",
      "modifiedat": "2025-05-12T08:20:53.062622157Z",

      "serversurl": "#/mcpproviders/lishenxydlgzs/servers",
      "servers": {
        "aws-athena-mcp": {
          "serverid": "aws-athena-mcp",
          "self": "#/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp",
          "xid": "/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp",

          "metaurl": "#/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp/meta",
          "meta": {
            "serverid": "aws-athena-mcp",
            "self": "#/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp/meta",
            "xid": "/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:53.062622157Z",
            "modifiedat": "2025-05-12T08:20:53.062622157Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp/versions",
          "versions": {
            "1": {
              "serverid": "aws-athena-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp/versions/1",
              "xid": "/mcpproviders/lishenxydlgzs/servers/aws-athena-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.lishenxydlgzs/aws-athena-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for running AWS Athena queries. This server enables AI assistants to execute SQL queries against your AWS Athena databases and retrieve results.",
              "createdat": "2025-05-12T08:20:53.062622157Z",
              "modifiedat": "2025-05-12T08:20:53.062622157Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "S3 bucket path for Athena query results",
                        "name": "OUTPUT_S3_PATH",
                        "required": true
                      },
                      {
                        "description": "AWS region (optional)",
                        "name": "AWS_REGION",
                        "required": false
                      },
                      {
                        "description": "AWS profile name (optional)",
                        "name": "AWS_PROFILE",
                        "required": false
                      },
                      {
                        "description": "AWS access key (optional)",
                        "name": "AWS_ACCESS_KEY_ID",
                        "required": false
                      },
                      {
                        "description": "AWS secret key (optional)",
                        "name": "AWS_SECRET_ACCESS_KEY",
                        "required": false
                      },
                      {
                        "description": "AWS session token (optional)",
                        "name": "AWS_SESSION_TOKEN",
                        "required": false
                      },
                      {
                        "description": "Athena WorkGroup (optional)",
                        "name": "ATHENA_WORKGROUP",
                        "required": false
                      },
                      {
                        "description": "Query timeout in milliseconds (optional)",
                        "name": "QUERY_TIMEOUT_MS",
                        "required": false
                      },
                      {
                        "description": "Maximum retry attempts (optional)",
                        "name": "MAX_RETRIES",
                        "required": false
                      },
                      {
                        "description": "Delay between retries in milliseconds (optional)",
                        "name": "RETRY_DELAY_MS",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@lishenxydlgzs/aws-athena-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@lishenxydlgzs/aws-athena-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "lishenxydlgzs/aws-athena-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Execute a SQL query using AWS Athena. Returns full results if query completes before timeout, otherwise returns queryExecutionId.",
                  "inputschema": {
                    "properties": {
                      "database": {
                        "description": "The Athena database to query",
                        "type": "string"
                      },
                      "maxRows": {
                        "description": "Maximum number of rows to return (default: 1000)",
                        "maximum": 10000,
                        "minimum": 1,
                        "type": "number"
                      },
                      "query": {
                        "description": "SQL query to execute",
                        "type": "string"
                      },
                      "timeoutMs": {
                        "description": "Timeout in milliseconds (default: 60000)",
                        "minimum": 1000,
                        "type": "number"
                      }
                    },
                    "required": [
                      "database",
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "run_query"
                },
                {
                  "description": "Get results for a completed query. Returns error if query is still running.",
                  "inputschema": {
                    "properties": {
                      "maxRows": {
                        "description": "Maximum number of rows to return (default: 1000)",
                        "maximum": 10000,
                        "minimum": 1,
                        "type": "number"
                      },
                      "queryExecutionId": {
                        "description": "The query execution ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "queryExecutionId"
                    ],
                    "type": "object"
                  },
                  "name": "get_result"
                },
                {
                  "description": "Get the current status of a query execution",
                  "inputschema": {
                    "properties": {
                      "queryExecutionId": {
                        "description": "The query execution ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "queryExecutionId"
                    ],
                    "type": "object"
                  },
                  "name": "get_status"
                },
                {
                  "description": "Execute a saved (named) Athena query by its query ID.",
                  "inputschema": {
                    "properties": {
                      "databaseOverride": {
                        "description": "Optional database override",
                        "type": "string"
                      },
                      "maxRows": {
                        "description": "Maximum number of rows to return (default: 1000)",
                        "maximum": 10000,
                        "minimum": 1,
                        "type": "number"
                      },
                      "namedQueryId": {
                        "description": "Athena NamedQueryId",
                        "type": "string"
                      },
                      "timeoutMs": {
                        "description": "Timeout in milliseconds (default: 60000)",
                        "minimum": 1000,
                        "type": "number"
                      }
                    },
                    "required": [
                      "namedQueryId"
                    ],
                    "type": "object"
                  },
                  "name": "run_saved_query"
                },
                {
                  "description": "List all saved (named) Athena queries available in your AWS account.",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list_saved_queries"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "liuyoshio": {
      "mcpproviderid": "liuyoshio",
      "self": "#/mcpproviders/liuyoshio",
      "xid": "/mcpproviders/liuyoshio",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:03.760688015Z",
      "modifiedat": "2025-05-12T08:20:03.760688015Z",

      "serversurl": "#/mcpproviders/liuyoshio/servers",
      "servers": {
        "mcp-compass": {
          "serverid": "mcp-compass",
          "self": "#/mcpproviders/liuyoshio/servers/mcp-compass",
          "xid": "/mcpproviders/liuyoshio/servers/mcp-compass",

          "metaurl": "#/mcpproviders/liuyoshio/servers/mcp-compass/meta",
          "meta": {
            "serverid": "mcp-compass",
            "self": "#/mcpproviders/liuyoshio/servers/mcp-compass/meta",
            "xid": "/mcpproviders/liuyoshio/servers/mcp-compass/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:03.760688015Z",
            "modifiedat": "2025-05-12T08:20:03.760688015Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/liuyoshio/servers/mcp-compass/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/liuyoshio/servers/mcp-compass/versions",
          "versions": {
            "1": {
              "serverid": "mcp-compass",
              "versionid": "1",
              "self": "#/mcpproviders/liuyoshio/servers/mcp-compass/versions/1",
              "xid": "/mcpproviders/liuyoshio/servers/mcp-compass/versions/1",
              "epoch": 1,
              "name": "io.github.liuyoshio/mcp-compass",
              "isdefault": true,
              "description": "MCP Compass is a discovery \u0026 recommendation service that helps you explore Model Context Protocol servers. It acts as a smart guide that helps AI assistants find and understand available MCP services out there based on natural language queries, making it easier to discover and utilize the right tools for specific tasks.",
              "createdat": "2025-05-12T08:20:03.760688015Z",
              "modifiedat": "2025-05-12T08:20:03.760688015Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-y",
                      "@liuyoshio/mcp-compass"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@liuyoshio/mcp-compass"
                }
              ],
              "remotes": [],
              "repo_ref": "liuyoshio/mcp-compass",
              "resources": [],
              "tools": [
                {
                  "description": "Use this tool when there is a need to findn external MCP tools. It explores and recommends existing MCP servers from the internet, based on the description of the MCP Server needed. It returns a list of MCP servers with their IDs, descriptions, GitHub URLs, and similarity scores.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "Description for the MCP Server needed. It should be specific and actionable, e.g.: GOOD: - 'MCP Server for AWS Lambda Python3.9 deployment' - 'MCP Server for United Airlines booking API' - 'MCP Server for Stripe refund webhook handling' BAD: - 'MCP Server for cloud' (too vague) - 'MCP Server for booking' (which booking system?) - 'MCP Server for payment' (which payment provider?) Query should explicitly specify: 1. Target platform/vendor (e.g. AWS, Stripe, MongoDB) 2. Exact operation/service (e.g. Lambda deployment, webhook handling) 3. Additional context if applicable (e.g. Python, refund events)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "recommend-mcp-servers"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "lloydzhou": {
      "mcpproviderid": "lloydzhou",
      "self": "#/mcpproviders/lloydzhou",
      "xid": "/mcpproviders/lloydzhou",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:36.369974287Z",
      "modifiedat": "2025-05-12T08:19:36.369974287Z",

      "serversurl": "#/mcpproviders/lloydzhou/servers",
      "servers": {
        "bitable-mcp": {
          "serverid": "bitable-mcp",
          "self": "#/mcpproviders/lloydzhou/servers/bitable-mcp",
          "xid": "/mcpproviders/lloydzhou/servers/bitable-mcp",

          "metaurl": "#/mcpproviders/lloydzhou/servers/bitable-mcp/meta",
          "meta": {
            "serverid": "bitable-mcp",
            "self": "#/mcpproviders/lloydzhou/servers/bitable-mcp/meta",
            "xid": "/mcpproviders/lloydzhou/servers/bitable-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:36.369974287Z",
            "modifiedat": "2025-05-12T08:19:36.369974287Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/lloydzhou/servers/bitable-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/lloydzhou/servers/bitable-mcp/versions",
          "versions": {
            "1": {
              "serverid": "bitable-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/lloydzhou/servers/bitable-mcp/versions/1",
              "xid": "/mcpproviders/lloydzhou/servers/bitable-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.lloydzhou/bitable-mcp",
              "isdefault": true,
              "description": "This MCP server provides access to Lark Bitable through the Model Context Protocol. It allows users to interact with Bitable tables using predefined tools.",
              "createdat": "2025-05-12T08:19:36.369974287Z",
              "modifiedat": "2025-05-12T08:19:36.369974287Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "PERSONAL_BASE_TOKEN"
                      },
                      {
                        "name": "APP_TOKEN"
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uvx",
                  "package_name": "bitable-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "lloydzhou/bitable-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "List tables for the current Bitable.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_table"
                },
                {
                  "description": "Describe a table by its name.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "describe_table"
                },
                {
                  "description": "Execute a SQL query to read data from the tables.",
                  "inputschema": {
                    "properties": {
                      "sql": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "sql"
                    ],
                    "type": "object"
                  },
                  "name": "read_query"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "longyi1207": {
      "mcpproviderid": "longyi1207",
      "self": "#/mcpproviders/longyi1207",
      "xid": "/mcpproviders/longyi1207",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:33.157296364Z",
      "modifiedat": "2025-05-12T08:18:33.157296364Z",

      "serversurl": "#/mcpproviders/longyi1207/servers",
      "servers": {
        "glean-mcp-server": {
          "serverid": "glean-mcp-server",
          "self": "#/mcpproviders/longyi1207/servers/glean-mcp-server",
          "xid": "/mcpproviders/longyi1207/servers/glean-mcp-server",

          "metaurl": "#/mcpproviders/longyi1207/servers/glean-mcp-server/meta",
          "meta": {
            "serverid": "glean-mcp-server",
            "self": "#/mcpproviders/longyi1207/servers/glean-mcp-server/meta",
            "xid": "/mcpproviders/longyi1207/servers/glean-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:33.157296364Z",
            "modifiedat": "2025-05-12T08:18:33.157296364Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/longyi1207/servers/glean-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/longyi1207/servers/glean-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "glean-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/longyi1207/servers/glean-mcp-server/versions/1",
              "xid": "/mcpproviders/longyi1207/servers/glean-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.longyi1207/glean-mcp-server",
              "isdefault": true,
              "description": "An MCP server implementation that integrates the Glean API, providing the Search and Chat functions.",
              "createdat": "2025-05-12T08:18:33.157296364Z",
              "modifiedat": "2025-05-12T08:18:33.157296364Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Glean",
                        "name": "GLEAN_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Domain for Glean API",
                        "name": "GLEAN_DOMAIN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "run",
                      "-i",
                      "--rm",
                      "-e",
                      "GLEAN_API_KEY",
                      "-e",
                      "GLEAN_DOMAIN",
                      "glean-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "glean-server:latest"
                }
              ],
              "remotes": [],
              "repo_ref": "longyi1207/glean-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Tool to perform search queries using Glean API",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The query to perform retrieval on",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search"
                },
                {
                  "description": "Tool to interact with ChatGPT using Glean API",
                  "inputschema": {
                    "properties": {
                      "message": {
                        "description": "The message to send to ChatGPT",
                        "type": "string"
                      }
                    },
                    "required": [
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "chat"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "magnetai": {
      "mcpproviderid": "magnetai",
      "self": "#/mcpproviders/magnetai",
      "xid": "/mcpproviders/magnetai",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:02.307816275Z",
      "modifiedat": "2025-05-12T08:20:02.307816275Z",

      "serversurl": "#/mcpproviders/magnetai/servers",
      "servers": {
        "mcp-free-usdc-transfer": {
          "serverid": "mcp-free-usdc-transfer",
          "self": "#/mcpproviders/magnetai/servers/mcp-free-usdc-transfer",
          "xid": "/mcpproviders/magnetai/servers/mcp-free-usdc-transfer",

          "metaurl": "#/mcpproviders/magnetai/servers/mcp-free-usdc-transfer/meta",
          "meta": {
            "serverid": "mcp-free-usdc-transfer",
            "self": "#/mcpproviders/magnetai/servers/mcp-free-usdc-transfer/meta",
            "xid": "/mcpproviders/magnetai/servers/mcp-free-usdc-transfer/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:02.307816275Z",
            "modifiedat": "2025-05-12T08:20:02.307816275Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/magnetai/servers/mcp-free-usdc-transfer/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/magnetai/servers/mcp-free-usdc-transfer/versions",
          "versions": {
            "1": {
              "serverid": "mcp-free-usdc-transfer",
              "versionid": "1",
              "self": "#/mcpproviders/magnetai/servers/mcp-free-usdc-transfer/versions/1",
              "xid": "/mcpproviders/magnetai/servers/mcp-free-usdc-transfer/versions/1",
              "epoch": 1,
              "name": "io.github.magnetai/mcp-free-usdc-transfer",
              "isdefault": true,
              "description": "An MCP server implementation enabling free USDC transfers on Base with Coinbase CDP MPC Wallet integration.",
              "createdat": "2025-05-12T08:20:02.307816275Z",
              "modifiedat": "2025-05-12T08:20:02.307816275Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "COINBASE_CDP_API_KEY_NAME",
                        "required": true
                      },
                      {
                        "name": "COINBASE_CDP_PRIVATE_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@magnetai/free-usdc-transfer"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@magnetai/free-usdc-transfer"
                }
              ],
              "remotes": [],
              "repo_ref": "magnetai/mcp-free-usdc-transfer",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mailgun": {
      "mcpproviderid": "mailgun",
      "self": "#/mcpproviders/mailgun",
      "xid": "/mcpproviders/mailgun",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:09.10312743Z",
      "modifiedat": "2025-05-12T08:19:09.10312743Z",

      "serversurl": "#/mcpproviders/mailgun/servers",
      "servers": {
        "mailgun-mcp-server": {
          "serverid": "mailgun-mcp-server",
          "self": "#/mcpproviders/mailgun/servers/mailgun-mcp-server",
          "xid": "/mcpproviders/mailgun/servers/mailgun-mcp-server",

          "metaurl": "#/mcpproviders/mailgun/servers/mailgun-mcp-server/meta",
          "meta": {
            "serverid": "mailgun-mcp-server",
            "self": "#/mcpproviders/mailgun/servers/mailgun-mcp-server/meta",
            "xid": "/mcpproviders/mailgun/servers/mailgun-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:09.10312743Z",
            "modifiedat": "2025-05-12T08:19:09.10312743Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mailgun/servers/mailgun-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mailgun/servers/mailgun-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "mailgun-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/mailgun/servers/mailgun-mcp-server/versions/1",
              "xid": "/mcpproviders/mailgun/servers/mailgun-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.mailgun/mailgun-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation for Mailgun, enabling MCP-compatible AI clients like Claude Desktop to interact with the service.",
              "createdat": "2025-05-12T08:19:09.10312743Z",
              "modifiedat": "2025-05-12T08:19:09.10312743Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Recipient email address",
                      "name": "EMAIL_HERE",
                      "required": true
                    },
                    {
                      "description": "Sending domain",
                      "name": "DOMAIN_HERE",
                      "required": true
                    }
                  ],
                  "description": "Send an email with specified body, sender, and domain.",
                  "name": "send_email"
                },
                {
                  "arguments": [],
                  "description": "Fetch and visualize email delivery statistics for the past week.",
                  "name": "fetch_sending_statistics"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Mailgun service",
                        "name": "MAILGUN_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "src/mailgun-mcp.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mailgun-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "mailgun/mailgun-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mamertofabian": {
      "mcpproviderid": "mamertofabian",
      "self": "#/mcpproviders/mamertofabian",
      "xid": "/mcpproviders/mamertofabian",
      "epoch": 2,
      "createdat": "2025-05-12T08:21:02.2455785Z",
      "modifiedat": "2025-05-12T08:21:04.139065809Z",

      "serversurl": "#/mcpproviders/mamertofabian/servers",
      "servers": {
        "elevenlabs-mcp-server": {
          "serverid": "elevenlabs-mcp-server",
          "self": "#/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server",
          "xid": "/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server",

          "metaurl": "#/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server/meta",
          "meta": {
            "serverid": "elevenlabs-mcp-server",
            "self": "#/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server/meta",
            "xid": "/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:02.2455785Z",
            "modifiedat": "2025-05-12T08:21:02.2455785Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "elevenlabs-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server/versions/1",
              "xid": "/mcpproviders/mamertofabian/servers/elevenlabs-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.mamertofabian/elevenlabs-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that integrates with ElevenLabs text-to-speech API, featuring both a server component and a sample web-based MCP Client (SvelteKit) for managing voice generation tasks.",
              "createdat": "2025-05-12T08:21:02.2455785Z",
              "modifiedat": "2025-05-12T08:21:02.2455785Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for ElevenLabs",
                        "name": "ELEVENLABS_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Default voice ID to use",
                        "name": "ELEVENLABS_VOICE_ID",
                        "required": false
                      },
                      {
                        "description": "Model ID for voice generation",
                        "name": "ELEVENLABS_MODEL_ID",
                        "required": false
                      },
                      {
                        "description": "Stability parameter for voice synthesis",
                        "name": "ELEVENLABS_STABILITY",
                        "required": false
                      },
                      {
                        "description": "Similarity boost parameter",
                        "name": "ELEVENLABS_SIMILARITY_BOOST",
                        "required": false
                      },
                      {
                        "description": "Style parameter for voice",
                        "name": "ELEVENLABS_STYLE",
                        "required": false
                      },
                      {
                        "description": "Output directory for audio files",
                        "name": "ELEVENLABS_OUTPUT_DIR",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "elevenlabs-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@smithery/elevenlabs-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "mamertofabian/elevenlabs-mcp-server",
              "resources": [
                {
                  "description": "Access voiceover job history. Provide job_id for specific job or omit for all jobs.",
                  "mimetype": "application/json",
                  "name": "Voiceover Job History",
                  "uritemplate": "voiceover://history/{job_id}"
                },
                {
                  "description": "Access list of available ElevenLabs voices with metadata",
                  "mimetype": "application/json",
                  "name": "Available Voices",
                  "uritemplate": "voiceover://voices"
                }
              ],
              "tools": [
                {
                  "description": "Generate audio from plain text using default voice settings",
                  "inputschema": {
                    "properties": {
                      "text": {
                        "description": "Plain text to convert to audio",
                        "type": "string"
                      },
                      "voice_id": {
                        "description": "Optional voice ID to use for generation",
                        "type": "string"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "generate_audio_simple"
                },
                {
                  "description": "Generate audio from a structured script with multiple voices and actors. \n                    Accepts either:\n                    1. Plain text string\n                    2. JSON string with format: {\n                        \"script\": [\n                            {\n                                \"text\": \"Text to speak\",\n                                \"voice_id\": \"optional-voice-id\",\n                                \"actor\": \"optional-actor-name\"\n                            },\n                            ...\n                        ]\n                    }",
                  "inputschema": {
                    "properties": {
                      "script": {
                        "description": "JSON string containing script array or plain text. For JSON format, provide an object with a 'script' array containing objects with 'text' (required), 'voice_id' (optional), and 'actor' (optional) fields.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "script"
                    ],
                    "type": "object"
                  },
                  "name": "generate_audio_script"
                },
                {
                  "description": "Delete a voiceover job and its associated files",
                  "inputschema": {
                    "properties": {
                      "job_id": {
                        "description": "ID of the job to delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "job_id"
                    ],
                    "type": "object"
                  },
                  "name": "delete_job"
                },
                {
                  "description": "Get the audio file content for a specific job",
                  "inputschema": {
                    "properties": {
                      "job_id": {
                        "description": "ID of the job to get audio file for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "job_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_audio_file"
                },
                {
                  "description": "Get a list of all available ElevenLabs voices with metadata",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_voices"
                },
                {
                  "description": "Get voiceover job history. Optionally specify a job ID for a specific job.",
                  "inputschema": {
                    "properties": {
                      "job_id": {
                        "description": "Optional job ID to get details for a specific job",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_voiceover_history"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-everything-search": {
          "serverid": "mcp-everything-search",
          "self": "#/mcpproviders/mamertofabian/servers/mcp-everything-search",
          "xid": "/mcpproviders/mamertofabian/servers/mcp-everything-search",

          "metaurl": "#/mcpproviders/mamertofabian/servers/mcp-everything-search/meta",
          "meta": {
            "serverid": "mcp-everything-search",
            "self": "#/mcpproviders/mamertofabian/servers/mcp-everything-search/meta",
            "xid": "/mcpproviders/mamertofabian/servers/mcp-everything-search/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:04.139065809Z",
            "modifiedat": "2025-05-12T08:21:04.139065809Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mamertofabian/servers/mcp-everything-search/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mamertofabian/servers/mcp-everything-search/versions",
          "versions": {
            "1": {
              "serverid": "mcp-everything-search",
              "versionid": "1",
              "self": "#/mcpproviders/mamertofabian/servers/mcp-everything-search/versions/1",
              "xid": "/mcpproviders/mamertofabian/servers/mcp-everything-search/versions/1",
              "epoch": 1,
              "name": "io.github.mamertofabian/mcp-everything-search",
              "isdefault": true,
              "description": "An MCP server that provides fast file searching capabilities across Windows, macOS, and Linux. On Windows, it uses the Everything SDK. On macOS, it uses the built-in mdfind command. On Linux, it uses the locate/plocate command.",
              "createdat": "2025-05-12T08:21:04.139065809Z",
              "modifiedat": "2025-05-12T08:21:04.139065809Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Path to Everything SDK DLL on Windows",
                        "name": "EVERYTHING_SDK_PATH",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp-server-everything-search"
                }
              ],
              "remotes": [],
              "repo_ref": "mamertofabian/mcp-everything-search",
              "resources": [],
              "tools": [
                {
                  "description": "Universal file search tool for Windows, macOS, and Linux. Supports platform-specific search capabilities using Everything SDK on Windows, mdfind on macOS, and locate on Linux.",
                  "inputschema": {
                    "properties": {
                      "match_case": {
                        "default": false,
                        "description": "Enable case-sensitive search",
                        "type": "boolean"
                      },
                      "match_path": {
                        "default": false,
                        "description": "Match against full path instead of filename only",
                        "type": "boolean"
                      },
                      "match_regex": {
                        "default": false,
                        "description": "Enable regex search",
                        "type": "boolean"
                      },
                      "match_whole_word": {
                        "default": false,
                        "description": "Match whole words only",
                        "type": "boolean"
                      },
                      "max_results": {
                        "default": 100,
                        "description": "Maximum number of results to return (1-1000)",
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "query": {
                        "description": "Search query string. See the search syntax guide for details.",
                        "type": "string"
                      },
                      "sort_by": {
                        "default": 1,
                        "description": "Sort order for results (Note: Not all sort options available on all platforms)",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "manusa": {
      "mcpproviderid": "manusa",
      "self": "#/mcpproviders/manusa",
      "xid": "/mcpproviders/manusa",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:52.588472683Z",
      "modifiedat": "2025-05-12T08:17:52.588472683Z",

      "serversurl": "#/mcpproviders/manusa/servers",
      "servers": {
        "kubernetes-mcp-server": {
          "serverid": "kubernetes-mcp-server",
          "self": "#/mcpproviders/manusa/servers/kubernetes-mcp-server",
          "xid": "/mcpproviders/manusa/servers/kubernetes-mcp-server",

          "metaurl": "#/mcpproviders/manusa/servers/kubernetes-mcp-server/meta",
          "meta": {
            "serverid": "kubernetes-mcp-server",
            "self": "#/mcpproviders/manusa/servers/kubernetes-mcp-server/meta",
            "xid": "/mcpproviders/manusa/servers/kubernetes-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:52.588472683Z",
            "modifiedat": "2025-05-12T08:17:52.588472683Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/manusa/servers/kubernetes-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/manusa/servers/kubernetes-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "kubernetes-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/manusa/servers/kubernetes-mcp-server/versions/1",
              "xid": "/mcpproviders/manusa/servers/kubernetes-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.manusa/kubernetes-mcp-server",
              "isdefault": true,
              "description": "A powerful and flexible Kubernetes Model Context Protocol (MCP) server implementation with support for Kubernetes and OpenShift.",
              "createdat": "2025-05-12T08:17:52.588472683Z",
              "modifiedat": "2025-05-12T08:17:52.588472683Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-y",
                      "kubernetes-mcp-server@latest"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "kubernetes-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "manusa/kubernetes-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mark3labs": {
      "mcpproviderid": "mark3labs",
      "self": "#/mcpproviders/mark3labs",
      "xid": "/mcpproviders/mark3labs",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:11.649727612Z",
      "modifiedat": "2025-05-12T08:18:11.649727612Z",

      "serversurl": "#/mcpproviders/mark3labs/servers",
      "servers": {
        "mcp-filesystem-server": {
          "serverid": "mcp-filesystem-server",
          "self": "#/mcpproviders/mark3labs/servers/mcp-filesystem-server",
          "xid": "/mcpproviders/mark3labs/servers/mcp-filesystem-server",

          "metaurl": "#/mcpproviders/mark3labs/servers/mcp-filesystem-server/meta",
          "meta": {
            "serverid": "mcp-filesystem-server",
            "self": "#/mcpproviders/mark3labs/servers/mcp-filesystem-server/meta",
            "xid": "/mcpproviders/mark3labs/servers/mcp-filesystem-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:11.649727612Z",
            "modifiedat": "2025-05-12T08:18:11.649727612Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mark3labs/servers/mcp-filesystem-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mark3labs/servers/mcp-filesystem-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-filesystem-server",
              "versionid": "1",
              "self": "#/mcpproviders/mark3labs/servers/mcp-filesystem-server/versions/1",
              "xid": "/mcpproviders/mark3labs/servers/mcp-filesystem-server/versions/1",
              "epoch": 1,
              "name": "io.github.mark3labs/mcp-filesystem-server",
              "isdefault": true,
              "description": "Go server implementing Model Context Protocol (MCP) for filesystem operations.",
              "createdat": "2025-05-12T08:18:11.649727612Z",
              "modifiedat": "2025-05-12T08:18:11.649727612Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "go",
                  "package_name": "github.com/mark3labs/mcp-filesystem-server"
                }
              ],
              "remotes": [],
              "repo_ref": "mark3labs/mcp-filesystem-server",
              "resources": [
                {
                  "description": "File system operations interface",
                  "name": "file://system",
                  "uritemplate": "file://system"
                }
              ],
              "tools": [
                {
                  "description": "Read complete contents of a file",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "read_file"
                },
                {
                  "description": "Read multiple files simultaneously",
                  "inputschema": {
                    "properties": {
                      "paths": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "paths"
                    ],
                    "type": "object"
                  },
                  "name": "read_multiple_files"
                },
                {
                  "description": "Create new file or overwrite existing (exercise caution with this)",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "path",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "write_file"
                },
                {
                  "description": "Create new directory or ensure it exists",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "create_directory"
                },
                {
                  "description": "List directory contents with [FILE] or [DIR] prefixes",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "list_directory"
                },
                {
                  "description": "Move or rename files and directories",
                  "inputschema": {
                    "properties": {
                      "destination": {
                        "type": "string"
                      },
                      "source": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "source",
                      "destination"
                    ],
                    "type": "object"
                  },
                  "name": "move_file"
                },
                {
                  "description": "Recursively search for files/directories",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "type": "string"
                      },
                      "pattern": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "path",
                      "pattern"
                    ],
                    "type": "object"
                  },
                  "name": "search_files"
                },
                {
                  "description": "Get detailed file/directory metadata",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "get_file_info"
                },
                {
                  "description": "List all directories the server is allowed to access",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_allowed_directories"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "maton-ai": {
      "mcpproviderid": "maton-ai",
      "self": "#/mcpproviders/maton-ai",
      "xid": "/mcpproviders/maton-ai",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:58.053562538Z",
      "modifiedat": "2025-05-12T08:17:58.053562538Z",

      "serversurl": "#/mcpproviders/maton-ai/servers",
      "servers": {
        "agent-toolkit": {
          "serverid": "agent-toolkit",
          "self": "#/mcpproviders/maton-ai/servers/agent-toolkit",
          "xid": "/mcpproviders/maton-ai/servers/agent-toolkit",

          "metaurl": "#/mcpproviders/maton-ai/servers/agent-toolkit/meta",
          "meta": {
            "serverid": "agent-toolkit",
            "self": "#/mcpproviders/maton-ai/servers/agent-toolkit/meta",
            "xid": "/mcpproviders/maton-ai/servers/agent-toolkit/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:58.053562538Z",
            "modifiedat": "2025-05-12T08:17:58.053562538Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/maton-ai/servers/agent-toolkit/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/maton-ai/servers/agent-toolkit/versions",
          "versions": {
            "1": {
              "serverid": "agent-toolkit",
              "versionid": "1",
              "self": "#/mcpproviders/maton-ai/servers/agent-toolkit/versions/1",
              "xid": "/mcpproviders/maton-ai/servers/agent-toolkit/versions/1",
              "epoch": 1,
              "name": "io.github.maton-ai/agent-toolkit",
              "isdefault": true,
              "description": "The Maton Agent Toolkit enables popular agent frameworks including Model Context Protocol (MCP) to integrate with Maton APIs through function calling. The library is not exhaustive of the entire Maton API. It includes support for Typescript.",
              "createdat": "2025-05-12T08:17:58.053562538Z",
              "modifiedat": "2025-05-12T08:17:58.053562538Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Maton API",
                        "name": "MATON_API_KEY",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@maton/mcp",
                      "hubspot",
                      "--actions=all",
                      "--api-key=YOUR_MATON_API_KEY"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npx",
                  "package_name": "@maton/mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "maton-ai/agent-toolkit",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mcpdotdirect": {
      "mcpproviderid": "mcpdotdirect",
      "self": "#/mcpproviders/mcpdotdirect",
      "xid": "/mcpproviders/mcpdotdirect",
      "epoch": 2,
      "createdat": "2025-05-12T08:18:09.394801304Z",
      "modifiedat": "2025-05-12T08:18:10.105413858Z",

      "serversurl": "#/mcpproviders/mcpdotdirect/servers",
      "servers": {
        "evm-mcp-server": {
          "serverid": "evm-mcp-server",
          "self": "#/mcpproviders/mcpdotdirect/servers/evm-mcp-server",
          "xid": "/mcpproviders/mcpdotdirect/servers/evm-mcp-server",

          "metaurl": "#/mcpproviders/mcpdotdirect/servers/evm-mcp-server/meta",
          "meta": {
            "serverid": "evm-mcp-server",
            "self": "#/mcpproviders/mcpdotdirect/servers/evm-mcp-server/meta",
            "xid": "/mcpproviders/mcpdotdirect/servers/evm-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:09.394801304Z",
            "modifiedat": "2025-05-12T08:18:09.394801304Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mcpdotdirect/servers/evm-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mcpdotdirect/servers/evm-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "evm-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/mcpdotdirect/servers/evm-mcp-server/versions/1",
              "xid": "/mcpproviders/mcpdotdirect/servers/evm-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.mcpdotdirect/evm-mcp-server",
              "isdefault": true,
              "description": "A comprehensive Model Context Protocol (MCP) server that provides blockchain services across multiple EVM-compatible networks. This server enables AI agents to interact with Ethereum, Optimism, Arbitrum, Base, Polygon, and many other EVM chains with a unified interface.",
              "createdat": "2025-05-12T08:18:09.394801304Z",
              "modifiedat": "2025-05-12T08:18:09.394801304Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@evm-evm-server"
                }
              ],
              "remotes": [],
              "repo_ref": "mcpdotdirect/evm-mcp-server",
              "resources": [
                {
                  "name": "chain_info_by_network",
                  "uritemplate": "evm://{network}/chain"
                },
                {
                  "name": "ethereum_chain_info",
                  "uritemplate": "evm://chain"
                },
                {
                  "name": "evm_block_by_number",
                  "uritemplate": "evm://{network}/block/{blockNumber}"
                },
                {
                  "name": "block_by_hash",
                  "uritemplate": "evm://{network}/block/hash/{blockHash}"
                },
                {
                  "name": "evm_latest_block",
                  "uritemplate": "evm://{network}/block/latest"
                },
                {
                  "name": "default_latest_block",
                  "uritemplate": "evm://block/latest"
                },
                {
                  "name": "evm_address_native_balance",
                  "uritemplate": "evm://{network}/address/{address}/balance"
                },
                {
                  "name": "default_eth_balance",
                  "uritemplate": "evm://address/{address}/eth-balance"
                },
                {
                  "name": "erc20_balance",
                  "uritemplate": "evm://{network}/address/{address}/token/{tokenAddress}/balance"
                },
                {
                  "name": "default_erc20_balance",
                  "uritemplate": "evm://address/{address}/token/{tokenAddress}/balance"
                },
                {
                  "name": "evm_transaction_details",
                  "uritemplate": "evm://{network}/tx/{txHash}"
                },
                {
                  "name": "default_transaction_by_hash",
                  "uritemplate": "evm://tx/{txHash}"
                },
                {
                  "name": "supported_networks",
                  "uritemplate": "evm://networks"
                },
                {
                  "name": "erc20_token_details",
                  "uritemplate": "evm://{network}/token/{tokenAddress}"
                },
                {
                  "name": "erc20_token_address_balance",
                  "uritemplate": "evm://{network}/token/{tokenAddress}/balanceOf/{address}"
                },
                {
                  "name": "erc721_nft_token_details",
                  "uritemplate": "evm://{network}/nft/{tokenAddress}/{tokenId}"
                },
                {
                  "name": "erc721_nft_ownership_check",
                  "uritemplate": "evm://{network}/nft/{tokenAddress}/{tokenId}/isOwnedBy/{address}"
                },
                {
                  "name": "erc1155_token_metadata_uri",
                  "uritemplate": "evm://{network}/erc1155/{tokenAddress}/{tokenId}/uri"
                },
                {
                  "name": "erc1155_token_address_balance",
                  "uritemplate": "evm://{network}/erc1155/{tokenAddress}/{tokenId}/balanceOf/{address}"
                }
              ],
              "tools": [
                {
                  "description": "Get information about an EVM network",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_chain_info"
                },
                {
                  "description": "Resolve an ENS name to an Ethereum address",
                  "inputschema": {
                    "properties": {
                      "ensName": {
                        "description": "ENS name to resolve (e.g., 'vitalik.eth')",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. ENS resolution works best on Ethereum mainnet. Defaults to Ethereum mainnet.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "ensName"
                    ],
                    "type": "object"
                  },
                  "name": "resolve_ens"
                },
                {
                  "description": "Get a list of supported EVM networks",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_supported_networks"
                },
                {
                  "description": "Get a block by its block number",
                  "inputschema": {
                    "properties": {
                      "blockNumber": {
                        "description": "The block number to fetch",
                        "type": "number"
                      },
                      "network": {
                        "description": "Network name or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "blockNumber"
                    ],
                    "type": "object"
                  },
                  "name": "get_block_by_number"
                },
                {
                  "description": "Get the latest block from the EVM",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_latest_block"
                },
                {
                  "description": "Get the native token balance (ETH, MATIC, etc.) for an address",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "description": "The wallet address or ENS name (e.g., '0x1234...' or 'vitalik.eth') to check the balance for",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "address"
                    ],
                    "type": "object"
                  },
                  "name": "get_balance"
                },
                {
                  "description": "Get the ERC20 token balance of an Ethereum address",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "description": "The Ethereum address to check",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The ERC20 token contract address",
                        "type": "string"
                      }
                    },
                    "required": [
                      "address",
                      "tokenAddress"
                    ],
                    "type": "object"
                  },
                  "name": "get_erc20_balance"
                },
                {
                  "description": "Get the balance of an ERC20 token for an address",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "ownerAddress": {
                        "description": "The wallet address or ENS name to check the balance for (e.g., '0x1234...' or 'vitalik.eth')",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address or ENS name of the ERC20 token (e.g., '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' for USDC or 'uniswap.eth')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenAddress",
                      "ownerAddress"
                    ],
                    "type": "object"
                  },
                  "name": "get_token_balance"
                },
                {
                  "description": "Get detailed information about a specific transaction by its hash. Includes sender, recipient, value, data, and more.",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "txHash": {
                        "description": "The transaction hash to look up (e.g., '0x1234...')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "txHash"
                    ],
                    "type": "object"
                  },
                  "name": "get_transaction"
                },
                {
                  "description": "Get a transaction receipt by its hash",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "txHash": {
                        "description": "The transaction hash to look up",
                        "type": "string"
                      }
                    },
                    "required": [
                      "txHash"
                    ],
                    "type": "object"
                  },
                  "name": "get_transaction_receipt"
                },
                {
                  "description": "Estimate the gas cost for a transaction",
                  "inputschema": {
                    "properties": {
                      "data": {
                        "description": "The transaction data as a hex string",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "to": {
                        "description": "The recipient address",
                        "type": "string"
                      },
                      "value": {
                        "description": "The amount of ETH to send in ether (e.g., '0.1')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "to"
                    ],
                    "type": "object"
                  },
                  "name": "estimate_gas"
                },
                {
                  "description": "Transfer native tokens (ETH, MATIC, etc.) to an address",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "description": "Amount to send in ETH (or the native token of the network), as a string (e.g., '0.1')",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "privateKey": {
                        "description": "Private key of the sender account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
                        "type": "string"
                      },
                      "to": {
                        "description": "The recipient address or ENS name (e.g., '0x1234...' or 'vitalik.eth')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "privateKey",
                      "to",
                      "amount"
                    ],
                    "type": "object"
                  },
                  "name": "transfer_eth"
                },
                {
                  "description": "Transfer ERC20 tokens to another address",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "description": "The amount of tokens to send (in token units, e.g., '10' for 10 tokens)",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "privateKey": {
                        "description": "Private key of the sending account (this is used for signing and is never stored)",
                        "type": "string"
                      },
                      "toAddress": {
                        "description": "The recipient address",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The address of the ERC20 token contract",
                        "type": "string"
                      }
                    },
                    "required": [
                      "privateKey",
                      "tokenAddress",
                      "toAddress",
                      "amount"
                    ],
                    "type": "object"
                  },
                  "name": "transfer_erc20"
                },
                {
                  "description": "Approve another address (like a DeFi protocol or exchange) to spend your ERC20 tokens. This is often required before interacting with DeFi protocols.",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "description": "The amount of tokens to approve in token units, not wei (e.g., '1000' to approve spending 1000 tokens). Use a very large number for unlimited approval.",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "privateKey": {
                        "description": "Private key of the token owner account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
                        "type": "string"
                      },
                      "spenderAddress": {
                        "description": "The contract address being approved to spend your tokens (e.g., a DEX or lending protocol)",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the ERC20 token to approve for spending (e.g., '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' for USDC on Ethereum)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "privateKey",
                      "tokenAddress",
                      "spenderAddress",
                      "amount"
                    ],
                    "type": "object"
                  },
                  "name": "approve_token_spending"
                },
                {
                  "description": "Transfer an NFT (ERC721 token) from one address to another. Requires the private key of the current owner for signing the transaction.",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Most NFTs are on Ethereum mainnet, which is the default.",
                        "type": "string"
                      },
                      "privateKey": {
                        "description": "Private key of the NFT owner account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
                        "type": "string"
                      },
                      "toAddress": {
                        "description": "The recipient wallet address that will receive the NFT",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the NFT collection (e.g., '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' for Bored Ape Yacht Club)",
                        "type": "string"
                      },
                      "tokenId": {
                        "description": "The ID of the specific NFT to transfer (e.g., '1234')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "privateKey",
                      "tokenAddress",
                      "tokenId",
                      "toAddress"
                    ],
                    "type": "object"
                  },
                  "name": "transfer_nft"
                },
                {
                  "description": "Transfer ERC1155 tokens to another address. ERC1155 is a multi-token standard that can represent both fungible and non-fungible tokens in a single contract.",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "description": "The quantity of tokens to send (e.g., '1' for a single NFT or '10' for 10 fungible tokens)",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. ERC1155 tokens exist across many networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "privateKey": {
                        "description": "Private key of the token owner account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
                        "type": "string"
                      },
                      "toAddress": {
                        "description": "The recipient wallet address that will receive the tokens",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the ERC1155 token collection (e.g., '0x76BE3b62873462d2142405439777e971754E8E77')",
                        "type": "string"
                      },
                      "tokenId": {
                        "description": "The ID of the specific token to transfer (e.g., '1234')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "privateKey",
                      "tokenAddress",
                      "tokenId",
                      "amount",
                      "toAddress"
                    ],
                    "type": "object"
                  },
                  "name": "transfer_erc1155"
                },
                {
                  "description": "Transfer ERC20 tokens to an address",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "description": "Amount of tokens to send as a string (e.g., '100' for 100 tokens). This will be adjusted for the token's decimals.",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "privateKey": {
                        "description": "Private key of the sender account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
                        "type": "string"
                      },
                      "toAddress": {
                        "description": "The recipient address or ENS name that will receive the tokens (e.g., '0x1234...' or 'vitalik.eth')",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address or ENS name of the ERC20 token to transfer (e.g., '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' for USDC or 'uniswap.eth')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "privateKey",
                      "tokenAddress",
                      "toAddress",
                      "amount"
                    ],
                    "type": "object"
                  },
                  "name": "transfer_token"
                },
                {
                  "description": "Read data from a smart contract by calling a view/pure function. This doesn't modify blockchain state and doesn't require gas or signing.",
                  "inputschema": {
                    "properties": {
                      "abi": {
                        "description": "The ABI (Application Binary Interface) of the smart contract function, as a JSON array",
                        "items": {},
                        "type": "array"
                      },
                      "args": {
                        "description": "The arguments to pass to the function, as an array (e.g., ['0x1234...'])",
                        "items": {},
                        "type": "array"
                      },
                      "contractAddress": {
                        "description": "The address of the smart contract to interact with",
                        "type": "string"
                      },
                      "functionName": {
                        "description": "The name of the function to call on the contract (e.g., 'balanceOf')",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "contractAddress",
                      "abi",
                      "functionName"
                    ],
                    "type": "object"
                  },
                  "name": "read_contract"
                },
                {
                  "description": "Write data to a smart contract by calling a state-changing function. This modifies blockchain state and requires gas payment and transaction signing.",
                  "inputschema": {
                    "properties": {
                      "abi": {
                        "description": "The ABI (Application Binary Interface) of the smart contract function, as a JSON array",
                        "items": {},
                        "type": "array"
                      },
                      "args": {
                        "description": "The arguments to pass to the function, as an array (e.g., ['0x1234...', '1000000000000000000'])",
                        "items": {},
                        "type": "array"
                      },
                      "contractAddress": {
                        "description": "The address of the smart contract to interact with",
                        "type": "string"
                      },
                      "functionName": {
                        "description": "The name of the function to call on the contract (e.g., 'transfer')",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "privateKey": {
                        "description": "Private key of the sending account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "contractAddress",
                      "abi",
                      "functionName",
                      "args",
                      "privateKey"
                    ],
                    "type": "object"
                  },
                  "name": "write_contract"
                },
                {
                  "description": "Check if an address is a smart contract or an externally owned account (EOA)",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "description": "The wallet or contract address or ENS name to check (e.g., '0x1234...' or 'uniswap.eth')",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "address"
                    ],
                    "type": "object"
                  },
                  "name": "is_contract"
                },
                {
                  "description": "Get comprehensive information about an ERC20 token including name, symbol, decimals, total supply, and other metadata. Use this to analyze any token on EVM chains.",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the ERC20 token (e.g., '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' for USDC on Ethereum)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenAddress"
                    ],
                    "type": "object"
                  },
                  "name": "get_token_info"
                },
                {
                  "description": "Get ERC20 token balance for an address",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "description": "The address to check balance for",
                        "type": "string"
                      },
                      "network": {
                        "description": "Network name or chain ID. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The ERC20 token contract address",
                        "type": "string"
                      }
                    },
                    "required": [
                      "address",
                      "tokenAddress"
                    ],
                    "type": "object"
                  },
                  "name": "get_token_balance_erc20"
                },
                {
                  "description": "Get detailed information about a specific NFT (ERC721 token), including collection name, symbol, token URI, and current owner if available.",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Most NFTs are on Ethereum mainnet, which is the default.",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the NFT collection (e.g., '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' for Bored Ape Yacht Club)",
                        "type": "string"
                      },
                      "tokenId": {
                        "description": "The ID of the specific NFT token to query (e.g., '1234')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenAddress",
                      "tokenId"
                    ],
                    "type": "object"
                  },
                  "name": "get_nft_info"
                },
                {
                  "description": "Check if an address owns a specific NFT",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', etc.) or chain ID. Supports all EVM-compatible networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "ownerAddress": {
                        "description": "The wallet address or ENS name to check ownership against (e.g., '0x1234...' or 'vitalik.eth')",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address or ENS name of the NFT collection (e.g., '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' for BAYC or 'boredapeyachtclub.eth')",
                        "type": "string"
                      },
                      "tokenId": {
                        "description": "The ID of the NFT to check (e.g., '1234')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenAddress",
                      "tokenId",
                      "ownerAddress"
                    ],
                    "type": "object"
                  },
                  "name": "check_nft_ownership"
                },
                {
                  "description": "Get the metadata URI for an ERC1155 token (multi-token standard used for both fungible and non-fungible tokens). The URI typically points to JSON metadata about the token.",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. ERC1155 tokens exist across many networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the ERC1155 token collection (e.g., '0x76BE3b62873462d2142405439777e971754E8E77')",
                        "type": "string"
                      },
                      "tokenId": {
                        "description": "The ID of the specific token to query metadata for (e.g., '1234')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenAddress",
                      "tokenId"
                    ],
                    "type": "object"
                  },
                  "name": "get_erc1155_token_uri"
                },
                {
                  "description": "Get the total number of NFTs owned by an address from a specific collection. This returns the count of NFTs, not individual token IDs.",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. Most NFTs are on Ethereum mainnet, which is the default.",
                        "type": "string"
                      },
                      "ownerAddress": {
                        "description": "The wallet address to check the NFT balance for (e.g., '0x1234...')",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the NFT collection (e.g., '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' for Bored Ape Yacht Club)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenAddress",
                      "ownerAddress"
                    ],
                    "type": "object"
                  },
                  "name": "get_nft_balance"
                },
                {
                  "description": "Get the balance of a specific ERC1155 token ID owned by an address. ERC1155 allows multiple tokens of the same ID, so the balance can be greater than 1.",
                  "inputschema": {
                    "properties": {
                      "network": {
                        "description": "Network name (e.g., 'ethereum', 'optimism', 'arbitrum', 'base', 'polygon') or chain ID. ERC1155 tokens exist across many networks. Defaults to Ethereum mainnet.",
                        "type": "string"
                      },
                      "ownerAddress": {
                        "description": "The wallet address to check the token balance for (e.g., '0x1234...')",
                        "type": "string"
                      },
                      "tokenAddress": {
                        "description": "The contract address of the ERC1155 token collection (e.g., '0x76BE3b62873462d2142405439777e971754E8E77')",
                        "type": "string"
                      },
                      "tokenId": {
                        "description": "The ID of the specific token to check the balance for (e.g., '1234')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenAddress",
                      "tokenId",
                      "ownerAddress"
                    ],
                    "type": "object"
                  },
                  "name": "get_erc1155_balance"
                },
                {
                  "description": "Get the EVM address derived from a private key",
                  "inputschema": {
                    "properties": {
                      "privateKey": {
                        "description": "Private key in hex format (with or without 0x prefix). SECURITY: This is used only for address derivation and is not stored.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "privateKey"
                    ],
                    "type": "object"
                  },
                  "name": "get_address_from_private_key"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "template-mcp-server": {
          "serverid": "template-mcp-server",
          "self": "#/mcpproviders/mcpdotdirect/servers/template-mcp-server",
          "xid": "/mcpproviders/mcpdotdirect/servers/template-mcp-server",

          "metaurl": "#/mcpproviders/mcpdotdirect/servers/template-mcp-server/meta",
          "meta": {
            "serverid": "template-mcp-server",
            "self": "#/mcpproviders/mcpdotdirect/servers/template-mcp-server/meta",
            "xid": "/mcpproviders/mcpdotdirect/servers/template-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:10.105413858Z",
            "modifiedat": "2025-05-12T08:18:10.105413858Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mcpdotdirect/servers/template-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mcpdotdirect/servers/template-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "template-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/mcpdotdirect/servers/template-mcp-server/versions/1",
              "xid": "/mcpproviders/mcpdotdirect/servers/template-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.mcpdotdirect/template-mcp-server",
              "isdefault": true,
              "description": "A CLI tool to quickly get started building your very own MCP (Model Context Protocol) server using FastMCP",
              "createdat": "2025-05-12T08:18:10.105413858Z",
              "modifiedat": "2025-05-12T08:18:10.105413858Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Name to greet",
                      "name": "name",
                      "required": true
                    }
                  ],
                  "description": "A simple greeting prompt",
                  "name": "greeting"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "run",
                      "src/index.ts"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "bun",
                  "package_name": "@mcpdotdirect/template-mcp-server"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:3001/sse"
                }
              ],
              "repo_ref": "mcpdotdirect/template-mcp-server",
              "resources": [
                {
                  "description": "Resource ID",
                  "mimetype": "text/plain",
                  "name": "Example Resource",
                  "uritemplate": "example://{id}"
                }
              ],
              "tools": [
                {
                  "description": "A simple hello world tool",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "Name to greet",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "hello_world"
                },
                {
                  "description": "A simple goodbye tool",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "Name to bid farewell to",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "goodbye"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "meilisearch": {
      "mcpproviderid": "meilisearch",
      "self": "#/mcpproviders/meilisearch",
      "xid": "/mcpproviders/meilisearch",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:15.855091916Z",
      "modifiedat": "2025-05-12T08:21:15.855091916Z",

      "serversurl": "#/mcpproviders/meilisearch/servers",
      "servers": {
        "meilisearch-mcp": {
          "serverid": "meilisearch-mcp",
          "self": "#/mcpproviders/meilisearch/servers/meilisearch-mcp",
          "xid": "/mcpproviders/meilisearch/servers/meilisearch-mcp",

          "metaurl": "#/mcpproviders/meilisearch/servers/meilisearch-mcp/meta",
          "meta": {
            "serverid": "meilisearch-mcp",
            "self": "#/mcpproviders/meilisearch/servers/meilisearch-mcp/meta",
            "xid": "/mcpproviders/meilisearch/servers/meilisearch-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:15.855091916Z",
            "modifiedat": "2025-05-12T08:21:15.855091916Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/meilisearch/servers/meilisearch-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/meilisearch/servers/meilisearch-mcp/versions",
          "versions": {
            "1": {
              "serverid": "meilisearch-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/meilisearch/servers/meilisearch-mcp/versions/1",
              "xid": "/mcpproviders/meilisearch/servers/meilisearch-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.meilisearch/meilisearch-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for interacting with Meilisearch through LLM interfaces like Claude.",
              "createdat": "2025-05-12T08:21:15.855091916Z",
              "modifiedat": "2025-05-12T08:21:15.855091916Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Default Meilisearch URL",
                        "name": "MEILI_HTTP_ADDR",
                        "required": false
                      },
                      {
                        "description": "Optional: Default Meilisearch API key",
                        "name": "MEILI_MASTER_KEY",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-m",
                      "src.meilisearch_mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "meilisearch-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "meilisearch/meilisearch-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Get current Meilisearch connection settings",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get-connection-settings"
                },
                {
                  "description": "Update Meilisearch connection settings",
                  "inputschema": {
                    "properties": {
                      "api_key": {
                        "optional": true,
                        "type": "string"
                      },
                      "url": {
                        "optional": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "update-connection-settings"
                },
                {
                  "description": "Check Meilisearch server health",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "health-check"
                },
                {
                  "description": "Get Meilisearch version information",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get-version"
                },
                {
                  "description": "Get database statistics",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get-stats"
                },
                {
                  "description": "Create a new Meilisearch index",
                  "inputschema": {
                    "properties": {
                      "primaryKey": {
                        "optional": true,
                        "type": "string"
                      },
                      "uid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "uid"
                    ],
                    "type": "object"
                  },
                  "name": "create-index"
                },
                {
                  "description": "List all Meilisearch indexes",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list-indexes"
                },
                {
                  "description": "Get documents from an index",
                  "inputschema": {
                    "properties": {
                      "indexUid": {
                        "type": "string"
                      },
                      "limit": {
                        "optional": true,
                        "type": "integer"
                      },
                      "offset": {
                        "optional": true,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "indexUid"
                    ],
                    "type": "object"
                  },
                  "name": "get-documents"
                },
                {
                  "description": "Add documents to an index",
                  "inputschema": {
                    "properties": {
                      "documents": {
                        "type": "array"
                      },
                      "indexUid": {
                        "type": "string"
                      },
                      "primaryKey": {
                        "optional": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "indexUid",
                      "documents"
                    ],
                    "type": "object"
                  },
                  "name": "add-documents"
                },
                {
                  "description": "Get current settings for an index",
                  "inputschema": {
                    "properties": {
                      "indexUid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "indexUid"
                    ],
                    "type": "object"
                  },
                  "name": "get-settings"
                },
                {
                  "description": "Update settings for an index",
                  "inputschema": {
                    "properties": {
                      "indexUid": {
                        "type": "string"
                      },
                      "settings": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "indexUid",
                      "settings"
                    ],
                    "type": "object"
                  },
                  "name": "update-settings"
                },
                {
                  "description": "Search through Meilisearch indices. If indexUid is not provided, it will search across all indices.",
                  "inputschema": {
                    "properties": {
                      "filter": {
                        "optional": true,
                        "type": "string"
                      },
                      "indexUid": {
                        "optional": true,
                        "type": "string"
                      },
                      "limit": {
                        "optional": true,
                        "type": "integer"
                      },
                      "offset": {
                        "optional": true,
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "sort": {
                        "items": {
                          "type": "string"
                        },
                        "optional": true,
                        "type": "array"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search"
                },
                {
                  "description": "Get information about a specific task",
                  "inputschema": {
                    "properties": {
                      "taskUid": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "taskUid"
                    ],
                    "type": "object"
                  },
                  "name": "get-task"
                },
                {
                  "description": "Get list of tasks with optional filters",
                  "inputschema": {
                    "properties": {
                      "afterEnqueuedAt": {
                        "optional": true,
                        "type": "string"
                      },
                      "afterFinishedAt": {
                        "optional": true,
                        "type": "string"
                      },
                      "afterStartedAt": {
                        "optional": true,
                        "type": "string"
                      },
                      "batchUids": {
                        "items": {
                          "type": "string"
                        },
                        "optional": true,
                        "type": "array"
                      },
                      "beforeEnqueuedAt": {
                        "optional": true,
                        "type": "string"
                      },
                      "beforeFinishedAt": {
                        "optional": true,
                        "type": "string"
                      },
                      "beforeStartedAt": {
                        "optional": true,
                        "type": "string"
                      },
                      "canceledBy": {
                        "items": {
                          "type": "string"
                        },
                        "optional": true,
                        "type": "array"
                      },
                      "from": {
                        "optional": true,
                        "type": "integer"
                      },
                      "indexUids": {
                        "items": {
                          "type": "string"
                        },
                        "optional": true,
                        "type": "array"
                      },
                      "limit": {
                        "optional": true,
                        "type": "integer"
                      },
                      "reverse": {
                        "optional": true,
                        "type": "boolean"
                      },
                      "statuses": {
                        "items": {
                          "type": "string"
                        },
                        "optional": true,
                        "type": "array"
                      },
                      "types": {
                        "items": {
                          "type": "string"
                        },
                        "optional": true,
                        "type": "array"
                      },
                      "uids": {
                        "items": {
                          "type": "integer"
                        },
                        "optional": true,
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get-tasks"
                },
                {
                  "description": "Cancel tasks based on filters",
                  "inputschema": {
                    "properties": {
                      "indexUids": {
                        "optional": true,
                        "type": "string"
                      },
                      "statuses": {
                        "optional": true,
                        "type": "string"
                      },
                      "types": {
                        "optional": true,
                        "type": "string"
                      },
                      "uids": {
                        "optional": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "cancel-tasks"
                },
                {
                  "description": "Get list of API keys",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "optional": true,
                        "type": "integer"
                      },
                      "offset": {
                        "optional": true,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get-keys"
                },
                {
                  "description": "Create a new API key",
                  "inputschema": {
                    "properties": {
                      "actions": {
                        "type": "array"
                      },
                      "description": {
                        "optional": true,
                        "type": "string"
                      },
                      "expiresAt": {
                        "optional": true,
                        "type": "string"
                      },
                      "indexes": {
                        "type": "array"
                      }
                    },
                    "required": [
                      "actions",
                      "indexes"
                    ],
                    "type": "object"
                  },
                  "name": "create-key"
                },
                {
                  "description": "Delete an API key",
                  "inputschema": {
                    "properties": {
                      "key": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "delete-key"
                },
                {
                  "description": "Get comprehensive health status of Meilisearch",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get-health-status"
                },
                {
                  "description": "Get detailed metrics for an index",
                  "inputschema": {
                    "properties": {
                      "indexUid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "indexUid"
                    ],
                    "type": "object"
                  },
                  "name": "get-index-metrics"
                },
                {
                  "description": "Get system-level information",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get-system-info"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mektigboy": {
      "mcpproviderid": "mektigboy",
      "self": "#/mcpproviders/mektigboy",
      "xid": "/mcpproviders/mektigboy",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:43.130221082Z",
      "modifiedat": "2025-05-12T08:17:43.130221082Z",

      "serversurl": "#/mcpproviders/mektigboy/servers",
      "servers": {
        "server-hyperliquid": {
          "serverid": "server-hyperliquid",
          "self": "#/mcpproviders/mektigboy/servers/server-hyperliquid",
          "xid": "/mcpproviders/mektigboy/servers/server-hyperliquid",

          "metaurl": "#/mcpproviders/mektigboy/servers/server-hyperliquid/meta",
          "meta": {
            "serverid": "server-hyperliquid",
            "self": "#/mcpproviders/mektigboy/servers/server-hyperliquid/meta",
            "xid": "/mcpproviders/mektigboy/servers/server-hyperliquid/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:43.130221082Z",
            "modifiedat": "2025-05-12T08:17:43.130221082Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mektigboy/servers/server-hyperliquid/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mektigboy/servers/server-hyperliquid/versions",
          "versions": {
            "1": {
              "serverid": "server-hyperliquid",
              "versionid": "1",
              "self": "#/mcpproviders/mektigboy/servers/server-hyperliquid/versions/1",
              "xid": "/mcpproviders/mektigboy/servers/server-hyperliquid/versions/1",
              "epoch": 1,
              "name": "io.github.mektigboy/server-hyperliquid",
              "isdefault": true,
              "description": "An MCP server implementation that integrates the Hyperliquid SDK.",
              "createdat": "2025-05-12T08:17:43.130221082Z",
              "modifiedat": "2025-05-12T08:17:43.130221082Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-y",
                      "@mektigboy/server-hyperliquid"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@mektigboy/server-hyperliquid"
                }
              ],
              "remotes": [],
              "repo_ref": "mektigboy/server-hyperliquid",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve mid prices for all coins on Hyperliquid",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_all_mids"
                },
                {
                  "description": "Get historical candlestick data for any token",
                  "inputschema": {
                    "properties": {
                      "coin": {
                        "type": "string"
                      },
                      "endTime": {
                        "type": "number"
                      },
                      "interval": {
                        "type": "string"
                      },
                      "startTime": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "coin",
                      "interval",
                      "startTime"
                    ],
                    "type": "object"
                  },
                  "name": "get_candle_snapshot"
                },
                {
                  "description": "Access the L2 order book for any token",
                  "inputschema": {
                    "properties": {
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "symbol"
                    ],
                    "type": "object"
                  },
                  "name": "get_l2_book"
                }
              ],
              "version_detail": {
                "version": "0.0.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mem0ai": {
      "mcpproviderid": "mem0ai",
      "self": "#/mcpproviders/mem0ai",
      "xid": "/mcpproviders/mem0ai",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:24.439430525Z",
      "modifiedat": "2025-05-12T08:18:24.439430525Z",

      "serversurl": "#/mcpproviders/mem0ai/servers",
      "servers": {
        "mem0-mcp": {
          "serverid": "mem0-mcp",
          "self": "#/mcpproviders/mem0ai/servers/mem0-mcp",
          "xid": "/mcpproviders/mem0ai/servers/mem0-mcp",

          "metaurl": "#/mcpproviders/mem0ai/servers/mem0-mcp/meta",
          "meta": {
            "serverid": "mem0-mcp",
            "self": "#/mcpproviders/mem0ai/servers/mem0-mcp/meta",
            "xid": "/mcpproviders/mem0ai/servers/mem0-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:24.439430525Z",
            "modifiedat": "2025-05-12T08:18:24.439430525Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mem0ai/servers/mem0-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mem0ai/servers/mem0-mcp/versions",
          "versions": {
            "1": {
              "serverid": "mem0-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/mem0ai/servers/mem0-mcp/versions/1",
              "xid": "/mcpproviders/mem0ai/servers/mem0-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.mem0ai/mem0-mcp",
              "isdefault": true,
              "description": "This demonstrates a structured approach for using an MCP server with mem0 to manage coding preferences efficiently. The server provides tools for storing, retrieving, and searching coding preferences and exposes an SSE endpoint for MCP clients.",
              "createdat": "2025-05-12T08:18:24.439430525Z",
              "modifiedat": "2025-05-12T08:18:24.439430525Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for mem0 client",
                        "name": "MEM0_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "run",
                      "main.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://0.0.0.0:8080/sse"
                }
              ],
              "repo_ref": "mem0ai/mem0-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Add a new memory. This method is called everytime the user informs anything about themselves, their preferences, or anything that has any relevent information whcih can be useful in the future conversation. This can also be called when the user asks you to remember something.",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "The content to store in memory",
                        "type": "string"
                      },
                      "userId": {
                        "description": "User ID for memory storage. If not provided explicitly, use a generic user ID like, 'mem0-mcp-user'",
                        "type": "string"
                      }
                    },
                    "required": [
                      "content",
                      "userId"
                    ],
                    "type": "object"
                  },
                  "name": "add-memory"
                },
                {
                  "description": "Search through stored memories. This method is called ANYTIME the user asks anything.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The search query. This is the query that the user has asked for. Example: 'What did I tell you about the weather last week?' or 'What did I tell you about my friend John?'",
                        "type": "string"
                      },
                      "userId": {
                        "description": "User ID for memory storage. If not provided explicitly, use a generic user ID like, 'mem0-mcp-user\"",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query",
                      "userId"
                    ],
                    "type": "object"
                  },
                  "name": "search-memories"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mendableai": {
      "mcpproviderid": "mendableai",
      "self": "#/mcpproviders/mendableai",
      "xid": "/mcpproviders/mendableai",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:28.65541468Z",
      "modifiedat": "2025-05-12T08:18:28.65541468Z",

      "serversurl": "#/mcpproviders/mendableai/servers",
      "servers": {
        "firecrawl-mcp-server": {
          "serverid": "firecrawl-mcp-server",
          "self": "#/mcpproviders/mendableai/servers/firecrawl-mcp-server",
          "xid": "/mcpproviders/mendableai/servers/firecrawl-mcp-server",

          "metaurl": "#/mcpproviders/mendableai/servers/firecrawl-mcp-server/meta",
          "meta": {
            "serverid": "firecrawl-mcp-server",
            "self": "#/mcpproviders/mendableai/servers/firecrawl-mcp-server/meta",
            "xid": "/mcpproviders/mendableai/servers/firecrawl-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:28.65541468Z",
            "modifiedat": "2025-05-12T08:18:28.65541468Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mendableai/servers/firecrawl-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mendableai/servers/firecrawl-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "firecrawl-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/mendableai/servers/firecrawl-mcp-server/versions/1",
              "xid": "/mcpproviders/mendableai/servers/firecrawl-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.mendableai/firecrawl-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation that integrates with Firecrawl for web scraping capabilities.",
              "createdat": "2025-05-12T08:18:28.65541468Z",
              "modifiedat": "2025-05-12T08:18:28.65541468Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "mendableai/firecrawl-mcp:latest"
                },
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Firecrawl",
                        "name": "FIRECRAWL_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "firecrawl-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "firecrawl-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "mendableai/firecrawl-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Scrape a single webpage with advanced options for content extraction. Supports various formats including markdown, HTML, and screenshots. Can execute custom actions like clicking or scrolling before scraping.",
                  "inputschema": {
                    "properties": {
                      "actions": {
                        "description": "List of actions to perform before scraping",
                        "items": {
                          "properties": {
                            "direction": {
                              "description": "Scroll direction",
                              "enum": [
                                "up",
                                "down"
                              ],
                              "type": "string"
                            },
                            "fullPage": {
                              "description": "Take full page screenshot",
                              "type": "boolean"
                            },
                            "key": {
                              "description": "Key to press (for press action)",
                              "type": "string"
                            },
                            "milliseconds": {
                              "description": "Time to wait in milliseconds (for wait action)",
                              "type": "number"
                            },
                            "script": {
                              "description": "JavaScript code to execute",
                              "type": "string"
                            },
                            "selector": {
                              "description": "CSS selector for the target element",
                              "type": "string"
                            },
                            "text": {
                              "description": "Text to write (for write action)",
                              "type": "string"
                            },
                            "type": {
                              "description": "Type of action to perform",
                              "enum": [
                                "wait",
                                "click",
                                "screenshot",
                                "write",
                                "press",
                                "scroll",
                                "scrape",
                                "executeJavascript"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "excludeTags": {
                        "description": "HTML tags to exclude from extraction",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "extract": {
                        "description": "Configuration for structured data extraction",
                        "properties": {
                          "prompt": {
                            "description": "User prompt for LLM extraction",
                            "type": "string"
                          },
                          "schema": {
                            "description": "Schema for structured data extraction",
                            "type": "object"
                          },
                          "systemPrompt": {
                            "description": "System prompt for LLM extraction",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "formats": {
                        "description": "Content formats to extract (default: ['markdown'])",
                        "items": {
                          "enum": [
                            "markdown",
                            "html",
                            "rawHtml",
                            "screenshot",
                            "links",
                            "screenshot@fullPage",
                            "extract"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "includeTags": {
                        "description": "HTML tags to specifically include in extraction",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "location": {
                        "description": "Location settings for scraping",
                        "properties": {
                          "country": {
                            "description": "Country code for geolocation",
                            "type": "string"
                          },
                          "languages": {
                            "description": "Language codes for content",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "mobile": {
                        "description": "Use mobile viewport",
                        "type": "boolean"
                      },
                      "onlyMainContent": {
                        "description": "Extract only the main content, filtering out navigation, footers, etc.",
                        "type": "boolean"
                      },
                      "removeBase64Images": {
                        "description": "Remove base64 encoded images from output",
                        "type": "boolean"
                      },
                      "skipTlsVerification": {
                        "description": "Skip TLS certificate verification",
                        "type": "boolean"
                      },
                      "timeout": {
                        "description": "Maximum time in milliseconds to wait for the page to load",
                        "type": "number"
                      },
                      "url": {
                        "description": "The URL to scrape",
                        "type": "string"
                      },
                      "waitFor": {
                        "description": "Time in milliseconds to wait for dynamic content to load",
                        "type": "number"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_scrape"
                },
                {
                  "description": "Discover URLs from a starting point. Can use both sitemap.xml and HTML link discovery.",
                  "inputschema": {
                    "properties": {
                      "ignoreSitemap": {
                        "description": "Skip sitemap.xml discovery and only use HTML links",
                        "type": "boolean"
                      },
                      "includeSubdomains": {
                        "description": "Include URLs from subdomains in results",
                        "type": "boolean"
                      },
                      "limit": {
                        "description": "Maximum number of URLs to return",
                        "type": "number"
                      },
                      "search": {
                        "description": "Optional search term to filter URLs",
                        "type": "string"
                      },
                      "sitemapOnly": {
                        "description": "Only use sitemap.xml for discovery, ignore HTML links",
                        "type": "boolean"
                      },
                      "url": {
                        "description": "Starting URL for URL discovery",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_map"
                },
                {
                  "description": "Start an asynchronous crawl of multiple pages from a starting URL. Supports depth control, path filtering, and webhook notifications.",
                  "inputschema": {
                    "properties": {
                      "allowBackwardLinks": {
                        "description": "Allow crawling links that point to parent directories",
                        "type": "boolean"
                      },
                      "allowExternalLinks": {
                        "description": "Allow crawling links to external domains",
                        "type": "boolean"
                      },
                      "deduplicateSimilarURLs": {
                        "description": "Remove similar URLs during crawl",
                        "type": "boolean"
                      },
                      "excludePaths": {
                        "description": "URL paths to exclude from crawling",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "ignoreQueryParameters": {
                        "description": "Ignore query parameters when comparing URLs",
                        "type": "boolean"
                      },
                      "ignoreSitemap": {
                        "description": "Skip sitemap.xml discovery",
                        "type": "boolean"
                      },
                      "includePaths": {
                        "description": "Only crawl these URL paths",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "limit": {
                        "description": "Maximum number of pages to crawl",
                        "type": "number"
                      },
                      "maxDepth": {
                        "description": "Maximum link depth to crawl",
                        "type": "number"
                      },
                      "scrapeOptions": {
                        "description": "Options for scraping each page",
                        "properties": {
                          "excludeTags": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "formats": {
                            "items": {
                              "enum": [
                                "markdown",
                                "html",
                                "rawHtml",
                                "screenshot",
                                "links",
                                "screenshot@fullPage",
                                "extract"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "includeTags": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "onlyMainContent": {
                            "type": "boolean"
                          },
                          "waitFor": {
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "url": {
                        "description": "Starting URL for the crawl",
                        "type": "string"
                      },
                      "webhook": {
                        "oneOf": [
                          {
                            "description": "Webhook URL to notify when crawl is complete",
                            "type": "string"
                          },
                          {
                            "properties": {
                              "headers": {
                                "description": "Custom headers for webhook requests",
                                "type": "object"
                              },
                              "url": {
                                "description": "Webhook URL",
                                "type": "string"
                              }
                            },
                            "required": [
                              "url"
                            ],
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_crawl"
                },
                {
                  "description": "Check the status of a crawl job.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "Crawl job ID to check",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_check_crawl_status"
                },
                {
                  "description": "Search and retrieve content from web pages with optional scraping. Returns SERP results by default (url, title, description) or full page content when scrapeOptions are provided.",
                  "inputschema": {
                    "properties": {
                      "country": {
                        "description": "Country code for search results (default: us)",
                        "type": "string"
                      },
                      "filter": {
                        "description": "Search filter",
                        "type": "string"
                      },
                      "lang": {
                        "description": "Language code for search results (default: en)",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Maximum number of results to return (default: 5)",
                        "type": "number"
                      },
                      "location": {
                        "description": "Location settings for search",
                        "properties": {
                          "country": {
                            "description": "Country code for geolocation",
                            "type": "string"
                          },
                          "languages": {
                            "description": "Language codes for content",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "query": {
                        "description": "Search query string",
                        "type": "string"
                      },
                      "scrapeOptions": {
                        "description": "Options for scraping search results",
                        "properties": {
                          "formats": {
                            "description": "Content formats to extract from search results",
                            "items": {
                              "enum": [
                                "markdown",
                                "html",
                                "rawHtml"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "onlyMainContent": {
                            "description": "Extract only the main content from results",
                            "type": "boolean"
                          },
                          "waitFor": {
                            "description": "Time in milliseconds to wait for dynamic content",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "tbs": {
                        "description": "Time-based search filter",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_search"
                },
                {
                  "description": "Extract structured information from web pages using LLM. Supports both cloud AI and self-hosted LLM extraction.",
                  "inputschema": {
                    "properties": {
                      "allowExternalLinks": {
                        "description": "Allow extraction from external links",
                        "type": "boolean"
                      },
                      "enableWebSearch": {
                        "description": "Enable web search for additional context",
                        "type": "boolean"
                      },
                      "includeSubdomains": {
                        "description": "Include subdomains in extraction",
                        "type": "boolean"
                      },
                      "prompt": {
                        "description": "Prompt for the LLM extraction",
                        "type": "string"
                      },
                      "schema": {
                        "description": "JSON schema for structured data extraction",
                        "type": "object"
                      },
                      "systemPrompt": {
                        "description": "System prompt for LLM extraction",
                        "type": "string"
                      },
                      "urls": {
                        "description": "List of URLs to extract information from",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "urls"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_extract"
                },
                {
                  "description": "Conduct deep research on a query using web crawling, search, and AI analysis.",
                  "inputschema": {
                    "properties": {
                      "maxDepth": {
                        "description": "Maximum depth of research iterations (1-10)",
                        "type": "number"
                      },
                      "maxUrls": {
                        "description": "Maximum number of URLs to analyze (1-1000)",
                        "type": "number"
                      },
                      "query": {
                        "description": "The query to research",
                        "type": "string"
                      },
                      "timeLimit": {
                        "description": "Time limit in seconds (30-300)",
                        "type": "number"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_deep_research"
                },
                {
                  "description": "Generate standardized LLMs.txt file for a given URL, which provides context about how LLMs should interact with the website.",
                  "inputschema": {
                    "properties": {
                      "maxUrls": {
                        "description": "Maximum number of URLs to process (1-100, default: 10)",
                        "type": "number"
                      },
                      "showFullText": {
                        "description": "Whether to show the full LLMs-full.txt in the response",
                        "type": "boolean"
                      },
                      "url": {
                        "description": "The URL to generate LLMs.txt from",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "firecrawl_generate_llmstxt"
                }
              ],
              "version_detail": {
                "version": "1.7.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "metoro-io": {
      "mcpproviderid": "metoro-io",
      "self": "#/mcpproviders/metoro-io",
      "xid": "/mcpproviders/metoro-io",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:00.867311535Z",
      "modifiedat": "2025-05-12T08:20:00.867311535Z",

      "serversurl": "#/mcpproviders/metoro-io/servers",
      "servers": {
        "metoro-mcp-server": {
          "serverid": "metoro-mcp-server",
          "self": "#/mcpproviders/metoro-io/servers/metoro-mcp-server",
          "xid": "/mcpproviders/metoro-io/servers/metoro-mcp-server",

          "metaurl": "#/mcpproviders/metoro-io/servers/metoro-mcp-server/meta",
          "meta": {
            "serverid": "metoro-mcp-server",
            "self": "#/mcpproviders/metoro-io/servers/metoro-mcp-server/meta",
            "xid": "/mcpproviders/metoro-io/servers/metoro-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:00.867311535Z",
            "modifiedat": "2025-05-12T08:20:00.867311535Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/metoro-io/servers/metoro-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/metoro-io/servers/metoro-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "metoro-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/metoro-io/servers/metoro-mcp-server/versions/1",
              "xid": "/mcpproviders/metoro-io/servers/metoro-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.metoro-io/metoro-mcp-server",
              "isdefault": true,
              "description": "The Metoro MCP (Model Context Protocol) Server allows interaction with Kubernetes clusters via the Claude Desktop App by exposing Metoro's APIs to an LLM.",
              "createdat": "2025-05-12T08:20:00.867311535Z",
              "modifiedat": "2025-05-12T08:20:00.867311535Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "METORO_AUTH_TOKEN",
                        "required": true
                      },
                      {
                        "name": "METORO_API_URL",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "go",
                  "package_name": "github.com/metoro-io/metoro-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "metoro-io/metoro-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mfukushim": {
      "mcpproviderid": "mfukushim",
      "self": "#/mcpproviders/mfukushim",
      "xid": "/mcpproviders/mfukushim",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:11.12929756Z",
      "modifiedat": "2025-05-12T08:22:11.12929756Z",

      "serversurl": "#/mcpproviders/mfukushim/servers",
      "servers": {
        "map-traveler-mcp": {
          "serverid": "map-traveler-mcp",
          "self": "#/mcpproviders/mfukushim/servers/map-traveler-mcp",
          "xid": "/mcpproviders/mfukushim/servers/map-traveler-mcp",

          "metaurl": "#/mcpproviders/mfukushim/servers/map-traveler-mcp/meta",
          "meta": {
            "serverid": "map-traveler-mcp",
            "self": "#/mcpproviders/mfukushim/servers/map-traveler-mcp/meta",
            "xid": "/mcpproviders/mfukushim/servers/map-traveler-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:11.12929756Z",
            "modifiedat": "2025-05-12T08:22:11.12929756Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mfukushim/servers/map-traveler-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mfukushim/servers/map-traveler-mcp/versions",
          "versions": {
            "1": {
              "serverid": "map-traveler-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/mfukushim/servers/map-traveler-mcp/versions/1",
              "xid": "/mcpproviders/mfukushim/servers/map-traveler-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.mfukushim/map-traveler-mcp",
              "isdefault": true,
              "description": "This is an MCP server that creates an environment for an avatar to virtually travel on Google Maps. From an MCP client such as Claude Desktop, you can give instructions to the avatar and report on the progress of its journey with photos.",
              "createdat": "2025-05-12T08:22:11.12929756Z",
              "modifiedat": "2025-05-12T08:22:11.12929756Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [],
              "remotes": [],
              "repo_ref": "mfukushim/map-traveler-mcp",
              "resources": [
                {
                  "description": "Has five custom prompt samples. When you import a prompt with Claude Desktop, Claude will act as a travel",
                  "name": "custom_prompt_samples",
                  "uritemplate": "/prompts/custom_samples"
                }
              ],
              "tools": [
                {
                  "description": "Gets information about the current travel avatar's location.",
                  "inputschema": {
                    "properties": {
                      "includeNearbyFacilities": {
                        "description": "Gets information about nearby facilities.",
                        "type": "boolean"
                      },
                      "includePhoto": {
                        "description": "Gets nearby Google Street View photos. If you have set up an image generation AI, it will synthesize the avatar.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "includePhoto",
                      "includeNearbyFacilities"
                    ],
                    "type": "object"
                  },
                  "name": "get_traveler_view_info"
                },
                {
                  "description": "Gets information about the current travel avatar's address and nearby facilities.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_traveler_location"
                },
                {
                  "description": "Reach a specified percentage of the destination (moveMode=skip only)",
                  "inputschema": {
                    "properties": {
                      "timeElapsedPercentage": {
                        "description": "Percent progress towards destination(0~100)",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "timeElapsedPercentage"
                    ],
                    "type": "object"
                  },
                  "name": "reach_a_percentage_of_destination"
                },
                {
                  "description": "Sets the current travel avatar's location.",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "description": "Address information (exact address, or general name that Google Maps or Claude can recognize, etc.)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "address"
                    ],
                    "type": "object"
                  },
                  "name": "set_traveler_location"
                },
                {
                  "description": "Get the destination of the travel avatar you set",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_traveler_destination_address"
                },
                {
                  "description": "Set the destination of the travel avatar",
                  "inputschema": {
                    "properties": {
                      "address": {
                        "description": "Address information (exact address, or general name that Google Maps or Claude can recognize, etc.)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "address"
                    ],
                    "type": "object"
                  },
                  "name": "set_traveler_destination_address"
                },
                {
                  "description": "Start the journey at the destination.(moveMode=realtime only)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "start_traveler_journey"
                },
                {
                  "description": "Stop the journey.(moveMode=realtime only)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "stop_traveler_journey"
                },
                {
                  "description": "Set the traveler's attributes. Set the traveler's personality that you want to change dynamically, such as name and personality. However, if you use a role script, the script is more stable.",
                  "inputschema": {
                    "properties": {
                      "settings": {
                        "description": "Setting information such as name and personality.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "settings"
                    ],
                    "type": "object"
                  },
                  "name": "set_traveler_info"
                },
                {
                  "description": "Get the traveler's attributes. Get the traveler's personality.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_traveler_info"
                },
                {
                  "description": "Set the prompt when generating the travel avatar image. The default is an anime-style woman. The anime style is enforced to prevent fake images.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Prompt string",
                        "type": "string"
                      }
                    },
                    "required": [
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "set_avatar_prompt"
                },
                {
                  "description": "Reset avatar generation prompts to default.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "reset_avatar_prompt"
                },
                {
                  "description": "Gets Bluesky SNS articles for the specified custom feed (feeds containing a specific tag).",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_sns_feeds"
                },
                {
                  "description": "Gets recent mentions (likes, replies) to Bluesky SNS posts that you made yourself.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_sns_mentions"
                },
                {
                  "description": "Posts an article to Bluesky SNS with the specified custom feed. Set a specific tag so that it can be determined that the post was generated by the travel bot.",
                  "inputschema": {
                    "properties": {
                      "message": {
                        "description": "article",
                        "type": "string"
                      }
                    },
                    "required": [
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "post_sns_writer"
                },
                {
                  "description": "Reply to the article with the specified id. Set a specific tag so that it can be determined that the post was generated by the travel bot.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "The ID of the post to reply to",
                        "type": "string"
                      },
                      "message": {
                        "description": "reply",
                        "type": "string"
                      }
                    },
                    "required": [
                      "message",
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "reply_sns_writer"
                },
                {
                  "description": "Add a like to the specified post.",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "The ID of the post to like",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "add_like"
                },
                {
                  "description": "Guides you on how to set up features that have not yet been set.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "tips"
                },
                {
                  "description": "Get environment and image settings.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_setting"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "mobile-next": {
      "mcpproviderid": "mobile-next",
      "self": "#/mcpproviders/mobile-next",
      "xid": "/mcpproviders/mobile-next",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:15.664743086Z",
      "modifiedat": "2025-05-12T08:18:15.664743086Z",

      "serversurl": "#/mcpproviders/mobile-next/servers",
      "servers": {
        "mobile-mcp": {
          "serverid": "mobile-mcp",
          "self": "#/mcpproviders/mobile-next/servers/mobile-mcp",
          "xid": "/mcpproviders/mobile-next/servers/mobile-mcp",

          "metaurl": "#/mcpproviders/mobile-next/servers/mobile-mcp/meta",
          "meta": {
            "serverid": "mobile-mcp",
            "self": "#/mcpproviders/mobile-next/servers/mobile-mcp/meta",
            "xid": "/mcpproviders/mobile-next/servers/mobile-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:15.664743086Z",
            "modifiedat": "2025-05-12T08:18:15.664743086Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/mobile-next/servers/mobile-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/mobile-next/servers/mobile-mcp/versions",
          "versions": {
            "1": {
              "serverid": "mobile-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/mobile-next/servers/mobile-mcp/versions/1",
              "xid": "/mcpproviders/mobile-next/servers/mobile-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.mobile-next/mobile-mcp",
              "isdefault": true,
              "description": "This is a Model Context Protocol (MCP) server that enables scalable mobile automation, development through a platform-agnostic interface, eliminating the need for distinct iOS or Android knowledge. You can run it on emulators, simulators, and physical devices (iOS and Android). This server allows Agents and LLMs to interact with native iOS/Android applications and devices through structured accessibility snapshots or coordinate-based taps based on screenshots.",
              "createdat": "2025-05-12T08:18:15.664743086Z",
              "modifiedat": "2025-05-12T08:18:15.664743086Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-y",
                      "@mobilenext/mobile-mcp@latest"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@mobilenext/mobile-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "mobile-next/mobile-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "List all available devices. This includes both physical devices and simulators. If there is more than one device returned, you need to let the user select one of them.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "mobile_list_available_devices"
                },
                {
                  "description": "Select a device to use. This can be a simulator or an Android device. Use the list_available_devices tool to get a list of available devices.",
                  "inputschema": {
                    "properties": {
                      "device": {
                        "description": "The name of the device to select",
                        "type": "string"
                      },
                      "deviceType": {
                        "description": "The type of device to select",
                        "enum": [
                          "simulator",
                          "ios",
                          "android"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "device",
                      "deviceType"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_use_device"
                },
                {
                  "description": "List all the installed apps on the device",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "mobile_list_apps"
                },
                {
                  "description": "Launch an app on mobile device. Use this to open a specific app. You can find the package name of the app by calling list_apps_on_device.",
                  "inputschema": {
                    "properties": {
                      "packageName": {
                        "description": "The package name of the app to launch",
                        "type": "string"
                      }
                    },
                    "required": [
                      "packageName"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_launch_app"
                },
                {
                  "description": "Stop and terminate an app on mobile device",
                  "inputschema": {
                    "properties": {
                      "packageName": {
                        "description": "The package name of the app to terminate",
                        "type": "string"
                      }
                    },
                    "required": [
                      "packageName"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_terminate_app"
                },
                {
                  "description": "Get the screen size of the mobile device in pixels",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "mobile_get_screen_size"
                },
                {
                  "description": "Click on the screen at given x,y coordinates",
                  "inputschema": {
                    "properties": {
                      "x": {
                        "description": "The x coordinate to click on the screen, in pixels",
                        "type": "number"
                      },
                      "y": {
                        "description": "The y coordinate to click on the screen, in pixels",
                        "type": "number"
                      }
                    },
                    "required": [
                      "x",
                      "y"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_click_on_screen_at_coordinates"
                },
                {
                  "description": "List elements on screen and their coordinates, with display text or accessibility label. Do not cache this result.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "mobile_list_elements_on_screen"
                },
                {
                  "description": "Press a button on device",
                  "inputschema": {
                    "properties": {
                      "button": {
                        "description": "The button to press. Supported buttons: BACK (android only), HOME, VOLUME_UP, VOLUME_DOWN, ENTER",
                        "type": "string"
                      }
                    },
                    "required": [
                      "button"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_press_button"
                },
                {
                  "description": "Open a URL in browser on device",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "description": "The URL to open",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_open_url"
                },
                {
                  "description": "Swipe on the screen",
                  "inputschema": {
                    "properties": {
                      "direction": {
                        "description": "The direction to swipe",
                        "enum": [
                          "up",
                          "down"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "direction"
                    ],
                    "type": "object"
                  },
                  "name": "swipe_on_screen"
                },
                {
                  "description": "Type text into the focused element",
                  "inputschema": {
                    "properties": {
                      "submit": {
                        "description": "Whether to submit the text. If true, the text will be submitted as if the user pressed the enter key.",
                        "type": "boolean"
                      },
                      "text": {
                        "description": "The text to type",
                        "type": "string"
                      }
                    },
                    "required": [
                      "text",
                      "submit"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_type_keys"
                },
                {
                  "description": "Take a screenshot of the mobile device. Use this to understand what's on screen, if you need to press an element that is available through view hierarchy then you must list elements on screen instead. Do not cache this result.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "mobile_take_screenshot"
                },
                {
                  "description": "Change the screen orientation of the device",
                  "inputschema": {
                    "properties": {
                      "orientation": {
                        "description": "The desired orientation",
                        "enum": [
                          "portrait",
                          "landscape"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "orientation"
                    ],
                    "type": "object"
                  },
                  "name": "mobile_set_orientation"
                },
                {
                  "description": "Get the current screen orientation of the device",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "mobile_get_orientation"
                },
                {
                  "description": "Navigate to an item on screen with a specific label using D-pad. This is specifically for TV devices which depend on D-pad based traversal.",
                  "inputschema": {
                    "properties": {
                      "label": {
                        "description": "The label of the item to navigate to",
                        "type": "string"
                      }
                    },
                    "required": [
                      "label"
                    ],
                    "type": "object"
                  },
                  "name": "tv_dpad_navigate_to_item_with_label"
                },
                {
                  "description": "Press a button on the D-pad. This is specifically for TV Devices which depend on D-pad.",
                  "inputschema": {
                    "properties": {
                      "button": {
                        "description": "The D-pad button to press. Supported buttons: DPAD_CENTER (center), DPAD_UP(up), DPAD_DOWN(down), DPAD_LEFT(left), DPAD_RIGHT(right)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "button"
                    ],
                    "type": "object"
                  },
                  "name": "tv_dpad_press_button"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "momentohq": {
      "mcpproviderid": "momentohq",
      "self": "#/mcpproviders/momentohq",
      "xid": "/mcpproviders/momentohq",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:41.526996128Z",
      "modifiedat": "2025-05-12T08:19:41.526996128Z",

      "serversurl": "#/mcpproviders/momentohq/servers",
      "servers": {
        "mcp-momento": {
          "serverid": "mcp-momento",
          "self": "#/mcpproviders/momentohq/servers/mcp-momento",
          "xid": "/mcpproviders/momentohq/servers/mcp-momento",

          "metaurl": "#/mcpproviders/momentohq/servers/mcp-momento/meta",
          "meta": {
            "serverid": "mcp-momento",
            "self": "#/mcpproviders/momentohq/servers/mcp-momento/meta",
            "xid": "/mcpproviders/momentohq/servers/mcp-momento/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:41.526996128Z",
            "modifiedat": "2025-05-12T08:19:41.526996128Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/momentohq/servers/mcp-momento/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/momentohq/servers/mcp-momento/versions",
          "versions": {
            "1": {
              "serverid": "mcp-momento",
              "versionid": "1",
              "self": "#/mcpproviders/momentohq/servers/mcp-momento/versions/1",
              "xid": "/mcpproviders/momentohq/servers/mcp-momento/versions/1",
              "epoch": 1,
              "name": "io.github.momentohq/mcp-momento",
              "isdefault": true,
              "description": "A simple Model Context Protocol (MCP) server implementation for Momento Cache.",
              "createdat": "2025-05-12T08:19:41.526996128Z",
              "modifiedat": "2025-05-12T08:19:41.526996128Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Momento Cache",
                        "name": "MOMENTO_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Name of the cache to use",
                        "name": "MOMENTO_CACHE_NAME",
                        "required": false
                      },
                      {
                        "description": "Default TTL for cache entries in seconds",
                        "name": "DEFAULT_TTL_SECONDS",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@gomomento/mcp-momento"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@gomomento/mcp-momento"
                }
              ],
              "remotes": [],
              "repo_ref": "momentohq/mcp-momento",
              "resources": [],
              "tools": [
                {
                  "description": "get a key-value pair from the cache",
                  "inputschema": {
                    "properties": {
                      "cacheName": {
                        "description": "The name of the cache to get the value from. Uses the default cache name if not provided.",
                        "type": "string"
                      },
                      "key": {
                        "description": "The key to get from the cache",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "get"
                },
                {
                  "description": "set a key-value pair in the cache",
                  "inputschema": {
                    "properties": {
                      "cacheName": {
                        "description": "The name of the cache to set the value in. Uses the default cache name if not provided.",
                        "type": "string"
                      },
                      "key": {
                        "description": "The key to set in the cache",
                        "type": "string"
                      },
                      "ttl": {
                        "description": "The TTL for the key in seconds",
                        "type": "number"
                      },
                      "value": {
                        "description": "The value to set in the cache",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "value"
                    ],
                    "type": "object"
                  },
                  "name": "set"
                },
                {
                  "description": "Lists all cache names in your Momento account",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list-caches"
                },
                {
                  "description": "Creates a new cache",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "The name of the cache to create",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "create-cache"
                },
                {
                  "description": "Deletes a cache and all contained values from your Momento account",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "The name of the cache to delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "delete-cache"
                },
                {
                  "description": "publish a value to a topic",
                  "inputschema": {
                    "properties": {
                      "cacheName": {
                        "description": "The name of the cache to set the value in. Uses the default cache name if not provided.",
                        "type": "string"
                      },
                      "topicName": {
                        "description": "The name of the topic to publish the value to. Uses the default topic name if not provided.",
                        "type": "string"
                      },
                      "value": {
                        "description": "The value to publish",
                        "type": "string"
                      }
                    },
                    "required": [
                      "value"
                    ],
                    "type": "object"
                  },
                  "name": "publish"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "motherduckdb": {
      "mcpproviderid": "motherduckdb",
      "self": "#/mcpproviders/motherduckdb",
      "xid": "/mcpproviders/motherduckdb",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:45.551561889Z",
      "modifiedat": "2025-05-12T08:19:45.551561889Z",

      "serversurl": "#/mcpproviders/motherduckdb/servers",
      "servers": {
        "mcp-server-motherduck": {
          "serverid": "mcp-server-motherduck",
          "self": "#/mcpproviders/motherduckdb/servers/mcp-server-motherduck",
          "xid": "/mcpproviders/motherduckdb/servers/mcp-server-motherduck",

          "metaurl": "#/mcpproviders/motherduckdb/servers/mcp-server-motherduck/meta",
          "meta": {
            "serverid": "mcp-server-motherduck",
            "self": "#/mcpproviders/motherduckdb/servers/mcp-server-motherduck/meta",
            "xid": "/mcpproviders/motherduckdb/servers/mcp-server-motherduck/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:45.551561889Z",
            "modifiedat": "2025-05-12T08:19:45.551561889Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/motherduckdb/servers/mcp-server-motherduck/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/motherduckdb/servers/mcp-server-motherduck/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-motherduck",
              "versionid": "1",
              "self": "#/mcpproviders/motherduckdb/servers/mcp-server-motherduck/versions/1",
              "xid": "/mcpproviders/motherduckdb/servers/mcp-server-motherduck/versions/1",
              "epoch": 1,
              "name": "io.github.motherduckdb/mcp-server-motherduck",
              "isdefault": true,
              "description": "An MCP server implementation that interacts with DuckDB and MotherDuck databases, providing SQL analytics capabilities to AI Assistants and IDEs.",
              "createdat": "2025-05-12T08:19:45.551561889Z",
              "modifiedat": "2025-05-12T08:19:45.551561889Z",
              "ancestor": "1",
              "prompts": [
                {
                  "description": "A prompt to initialize a connection to DuckDB or MotherDuck and start working with it",
                  "name": "duckdb-motherduck-initial-prompt"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--db-path",
                      "md:",
                      "--motherduck-token",
                      "\u003cYOUR_MOTHERDUCK_TOKEN_HERE\u003e"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "unknown",
                  "package_name": "unknown"
                }
              ],
              "remotes": [],
              "repo_ref": "motherduckdb/mcp-server-motherduck",
              "resources": [],
              "tools": [
                {
                  "description": "Execute a SQL query on the DuckDB or MotherDuck database",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "query"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "needle-ai": {
      "mcpproviderid": "needle-ai",
      "self": "#/mcpproviders/needle-ai",
      "xid": "/mcpproviders/needle-ai",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:40.123559488Z",
      "modifiedat": "2025-05-12T08:17:40.123559488Z",

      "serversurl": "#/mcpproviders/needle-ai/servers",
      "servers": {
        "needle-mcp": {
          "serverid": "needle-mcp",
          "self": "#/mcpproviders/needle-ai/servers/needle-mcp",
          "xid": "/mcpproviders/needle-ai/servers/needle-mcp",

          "metaurl": "#/mcpproviders/needle-ai/servers/needle-mcp/meta",
          "meta": {
            "serverid": "needle-mcp",
            "self": "#/mcpproviders/needle-ai/servers/needle-mcp/meta",
            "xid": "/mcpproviders/needle-ai/servers/needle-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:40.123559488Z",
            "modifiedat": "2025-05-12T08:17:40.123559488Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/needle-ai/servers/needle-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/needle-ai/servers/needle-mcp/versions",
          "versions": {
            "1": {
              "serverid": "needle-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/needle-ai/servers/needle-mcp/versions/1",
              "xid": "/mcpproviders/needle-ai/servers/needle-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.needle-ai/needle-mcp",
              "isdefault": true,
              "description": "MCP (Model Context Protocol) server to manage documents and perform searches using Needle through Claude’s Desktop Application.",
              "documentation": "https://github.com/yourusername/needle-mcp/blob/main/README.md",
              "createdat": "2025-05-12T08:17:40.123559488Z",
              "modifiedat": "2025-05-12T08:17:40.123559488Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Needle service",
                        "name": "NEEDLE_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "/path/to/needle-mcp",
                      "run",
                      "needle-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@smithery/needle-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "needle-ai/needle-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve a complete list of all Needle document collections accessible to your account. Returns detailed information including collection IDs, names, and creation dates. Use this tool when you need to: - Get an overview of available document collections - Find collection IDs for subsequent operations - Verify collection existence before performing operations The response includes metadata that's required for other Needle operations.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "needle_list_collections"
                },
                {
                  "description": "Create a new document collection in Needle for organizing and searching documents. A collection acts as a container for related documents and enables semantic search across its contents. Use this tool when you need to: - Start a new document organization - Group related documents together - Set up a searchable document repository Returns a collection ID that's required for subsequent operations. Choose a descriptive name that reflects the collection's purpose for better organization.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "description": "A clear, descriptive name for the collection that reflects its purpose and contents",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "needle_create_collection"
                },
                {
                  "description": "Fetch comprehensive metadata about a specific Needle collection. Provides detailed information about the collection's configuration, creation date, and current status. Use this tool when you need to: - Verify a collection's existence and configuration - Check collection metadata before operations - Get creation date and other attributes Requires a valid collection ID and returns detailed collection metadata. Will error if collection doesn't exist.",
                  "inputschema": {
                    "properties": {
                      "collection_id": {
                        "description": "The unique collection identifier returned from needle_create_collection or needle_list_collections",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_id"
                    ],
                    "type": "object"
                  },
                  "name": "needle_get_collection_details"
                },
                {
                  "description": "Retrieve detailed statistical information about a Needle collection's contents and status. Provides metrics including: - Total number of documents - Processing status of documents - Storage usage and limits - Index status and health Use this tool to: - Monitor collection size and growth - Verify processing completion - Check collection health before operations Essential for ensuring collection readiness before performing searches.",
                  "inputschema": {
                    "properties": {
                      "collection_id": {
                        "description": "The unique collection identifier to get statistics for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_id"
                    ],
                    "type": "object"
                  },
                  "name": "needle_get_collection_stats"
                },
                {
                  "description": "List all documents stored within a specific Needle collection with their current status. Returns detailed information about each file including: - File ID and name - Processing status (pending, processing, complete, error) - Upload date and metadata Use this tool when you need to: - Inventory available documents - Check processing status of uploads - Get file IDs for reference - Verify document availability before searching Essential for monitoring document processing completion before performing searches.",
                  "inputschema": {
                    "properties": {
                      "collection_id": {
                        "description": "The unique collection identifier to list files from",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_id"
                    ],
                    "type": "object"
                  },
                  "name": "needle_list_files"
                },
                {
                  "description": "Add a new document to a Needle collection by providing a URL for download. Supports multiple file formats including: - PDF documents - Microsoft Word files (DOC, DOCX) - Plain text files (TXT) - Web pages (HTML) The document will be: 1. Downloaded from the provided URL 2. Processed for text extraction 3. Indexed for semantic search Use this tool when you need to: - Add new documents to a collection - Make documents searchable - Expand your knowledge base Important: Documents require processing time before they're searchable. Check processing status using needle_list_files before searching new content.",
                  "inputschema": {
                    "properties": {
                      "collection_id": {
                        "description": "The unique collection identifier where the file will be added",
                        "type": "string"
                      },
                      "name": {
                        "description": "A descriptive filename that will help identify this document in results",
                        "type": "string"
                      },
                      "url": {
                        "description": "Public URL where the document can be downloaded from",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_id",
                      "name",
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "needle_add_file"
                },
                {
                  "description": "Perform intelligent semantic search across documents in a Needle collection. This tool uses advanced embedding technology to find relevant content based on meaning, not just keywords. The search: - Understands natural language queries - Finds conceptually related content - Returns relevant text passages with source information - Ranks results by semantic relevance Use this tool when you need to: - Find specific information within documents - Answer questions from document content - Research topics across multiple documents - Locate relevant passages and their sources More effective than traditional keyword search for: - Natural language questions - Conceptual queries - Finding related content Returns matching text passages with their source file IDs.",
                  "inputschema": {
                    "properties": {
                      "collection_id": {
                        "description": "The unique collection identifier to search within",
                        "type": "string"
                      },
                      "query": {
                        "description": "Natural language query describing the information you're looking for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_id",
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "needle_search"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "neo4j-contrib": {
      "mcpproviderid": "neo4j-contrib",
      "self": "#/mcpproviders/neo4j-contrib",
      "xid": "/mcpproviders/neo4j-contrib",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:50.716220679Z",
      "modifiedat": "2025-05-12T08:17:50.716220679Z",

      "serversurl": "#/mcpproviders/neo4j-contrib/servers",
      "servers": {
        "mcp-neo4j": {
          "serverid": "mcp-neo4j",
          "self": "#/mcpproviders/neo4j-contrib/servers/mcp-neo4j",
          "xid": "/mcpproviders/neo4j-contrib/servers/mcp-neo4j",

          "metaurl": "#/mcpproviders/neo4j-contrib/servers/mcp-neo4j/meta",
          "meta": {
            "serverid": "mcp-neo4j",
            "self": "#/mcpproviders/neo4j-contrib/servers/mcp-neo4j/meta",
            "xid": "/mcpproviders/neo4j-contrib/servers/mcp-neo4j/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:50.716220679Z",
            "modifiedat": "2025-05-12T08:17:50.716220679Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/neo4j-contrib/servers/mcp-neo4j/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/neo4j-contrib/servers/mcp-neo4j/versions",
          "versions": {
            "1": {
              "serverid": "mcp-neo4j",
              "versionid": "1",
              "self": "#/mcpproviders/neo4j-contrib/servers/mcp-neo4j/versions/1",
              "xid": "/mcpproviders/neo4j-contrib/servers/mcp-neo4j/versions/1",
              "epoch": 1,
              "name": "io.github.neo4j-contrib/mcp-neo4j",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) servers for managing context between large language models (LLMs) and Neo4j external systems, including natural language to Cypher queries, knowledge graph memory, and Neo4j Aura cloud service management.",
              "createdat": "2025-05-12T08:17:50.716220679Z",
              "modifiedat": "2025-05-12T08:17:50.716220679Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "unspecified"
                }
              ],
              "remotes": [],
              "repo_ref": "neo4j-contrib/mcp-neo4j",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "neondatabase-labs": {
      "mcpproviderid": "neondatabase-labs",
      "self": "#/mcpproviders/neondatabase-labs",
      "xid": "/mcpproviders/neondatabase-labs",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:37.04018461Z",
      "modifiedat": "2025-05-12T08:22:37.04018461Z",

      "serversurl": "#/mcpproviders/neondatabase-labs/servers",
      "servers": {
        "mcp-server-neon": {
          "serverid": "mcp-server-neon",
          "self": "#/mcpproviders/neondatabase-labs/servers/mcp-server-neon",
          "xid": "/mcpproviders/neondatabase-labs/servers/mcp-server-neon",

          "metaurl": "#/mcpproviders/neondatabase-labs/servers/mcp-server-neon/meta",
          "meta": {
            "serverid": "mcp-server-neon",
            "self": "#/mcpproviders/neondatabase-labs/servers/mcp-server-neon/meta",
            "xid": "/mcpproviders/neondatabase-labs/servers/mcp-server-neon/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:37.04018461Z",
            "modifiedat": "2025-05-12T08:22:37.04018461Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/neondatabase-labs/servers/mcp-server-neon/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/neondatabase-labs/servers/mcp-server-neon/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-neon",
              "versionid": "1",
              "self": "#/mcpproviders/neondatabase-labs/servers/mcp-server-neon/versions/1",
              "xid": "/mcpproviders/neondatabase-labs/servers/mcp-server-neon/versions/1",
              "epoch": 1,
              "name": "io.github.neondatabase-labs/mcp-server-neon",
              "isdefault": true,
              "description": "Neon MCP Server is an open-source tool that lets you interact with your Neon Postgres databases in natural language. It acts as a bridge between natural language requests and the Neon API, built upon the Model Context Protocol (MCP), enabling management of projects, branches, queries, and migrations via conversational commands.",
              "createdat": "2025-05-12T08:22:37.04018461Z",
              "modifiedat": "2025-05-12T08:22:37.04018461Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Neon authentication",
                        "name": "NEON_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@neondatabase/mcp-server-neon"
                }
              ],
              "remotes": [],
              "repo_ref": "neondatabase-labs/mcp-server-neon",
              "resources": [
                {
                  "description": "Resources exposed by Neon MCP server.",
                  "mimetype": "application/json",
                  "name": "NEON_RESOURCES",
                  "uritemplate": "/resources/{id}"
                }
              ],
              "tools": [
                {
                  "description": "Tools registered for Neon MCP server to handle various database management tasks via MCP.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "NEON_TOOLS"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "nkapila6": {
      "mcpproviderid": "nkapila6",
      "self": "#/mcpproviders/nkapila6",
      "xid": "/mcpproviders/nkapila6",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:07.401479596Z",
      "modifiedat": "2025-05-12T08:18:07.401479596Z",

      "serversurl": "#/mcpproviders/nkapila6/servers",
      "servers": {
        "mcp-local-rag": {
          "serverid": "mcp-local-rag",
          "self": "#/mcpproviders/nkapila6/servers/mcp-local-rag",
          "xid": "/mcpproviders/nkapila6/servers/mcp-local-rag",

          "metaurl": "#/mcpproviders/nkapila6/servers/mcp-local-rag/meta",
          "meta": {
            "serverid": "mcp-local-rag",
            "self": "#/mcpproviders/nkapila6/servers/mcp-local-rag/meta",
            "xid": "/mcpproviders/nkapila6/servers/mcp-local-rag/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:07.401479596Z",
            "modifiedat": "2025-05-12T08:18:07.401479596Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/nkapila6/servers/mcp-local-rag/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/nkapila6/servers/mcp-local-rag/versions",
          "versions": {
            "1": {
              "serverid": "mcp-local-rag",
              "versionid": "1",
              "self": "#/mcpproviders/nkapila6/servers/mcp-local-rag/versions/1",
              "xid": "/mcpproviders/nkapila6/servers/mcp-local-rag/versions/1",
              "epoch": 1,
              "name": "io.github.nkapila6/mcp-local-rag",
              "isdefault": true,
              "description": "\"primitive\" RAG-like web search model context protocol (MCP) server that runs locally. ✨ no APIs ✨",
              "createdat": "2025-05-12T08:18:07.401479596Z",
              "modifiedat": "2025-05-12T08:18:07.401479596Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--python=3.10",
                      "--from",
                      "git+https://github.com/nkapila6/mcp-local-rag",
                      "mcp-local-rag"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "mcp-local-rag"
                }
              ],
              "remotes": [],
              "repo_ref": "nkapila6/mcp-local-rag",
              "resources": [],
              "tools": [
                {
                  "description": "Search the web for a given query. Give back context to the LLM with a RAG-like similarity sort.",
                  "inputschema": {
                    "properties": {
                      "num_results": {
                        "description": "Number of results to return.",
                        "type": "integer"
                      },
                      "query": {
                        "description": "The query to search for.",
                        "type": "string"
                      },
                      "top_k": {
                        "description": "Use top \"k\" results for content.",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "rag_search"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "nspady": {
      "mcpproviderid": "nspady",
      "self": "#/mcpproviders/nspady",
      "xid": "/mcpproviders/nspady",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:38.931872365Z",
      "modifiedat": "2025-05-12T08:17:38.931872365Z",

      "serversurl": "#/mcpproviders/nspady/servers",
      "servers": {
        "google-calendar-mcp": {
          "serverid": "google-calendar-mcp",
          "self": "#/mcpproviders/nspady/servers/google-calendar-mcp",
          "xid": "/mcpproviders/nspady/servers/google-calendar-mcp",

          "metaurl": "#/mcpproviders/nspady/servers/google-calendar-mcp/meta",
          "meta": {
            "serverid": "google-calendar-mcp",
            "self": "#/mcpproviders/nspady/servers/google-calendar-mcp/meta",
            "xid": "/mcpproviders/nspady/servers/google-calendar-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:38.931872365Z",
            "modifiedat": "2025-05-12T08:17:38.931872365Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/nspady/servers/google-calendar-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/nspady/servers/google-calendar-mcp/versions",
          "versions": {
            "1": {
              "serverid": "google-calendar-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/nspady/servers/google-calendar-mcp/versions/1",
              "xid": "/mcpproviders/nspady/servers/google-calendar-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.nspady/google-calendar-mcp",
              "isdefault": true,
              "description": "This is a Model Context Protocol (MCP) server that provides integration with Google Calendar. It allows LLMs to read, create, update and search for calendar events through a standardized interface.",
              "createdat": "2025-05-12T08:17:38.931872365Z",
              "modifiedat": "2025-05-12T08:17:38.931872365Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/google-calendar-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "nspady/google-calendar-mcp",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "oatpp": {
      "mcpproviderid": "oatpp",
      "self": "#/mcpproviders/oatpp",
      "xid": "/mcpproviders/oatpp",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:38.85973474Z",
      "modifiedat": "2025-05-12T08:17:38.85973474Z",

      "serversurl": "#/mcpproviders/oatpp/servers",
      "servers": {
        "oatpp-mcp": {
          "serverid": "oatpp-mcp",
          "self": "#/mcpproviders/oatpp/servers/oatpp-mcp",
          "xid": "/mcpproviders/oatpp/servers/oatpp-mcp",

          "metaurl": "#/mcpproviders/oatpp/servers/oatpp-mcp/meta",
          "meta": {
            "serverid": "oatpp-mcp",
            "self": "#/mcpproviders/oatpp/servers/oatpp-mcp/meta",
            "xid": "/mcpproviders/oatpp/servers/oatpp-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:38.85973474Z",
            "modifiedat": "2025-05-12T08:17:38.85973474Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/oatpp/servers/oatpp-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/oatpp/servers/oatpp-mcp/versions",
          "versions": {
            "1": {
              "serverid": "oatpp-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/oatpp/servers/oatpp-mcp/versions/1",
              "xid": "/mcpproviders/oatpp/servers/oatpp-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.oatpp/oatpp-mcp",
              "isdefault": true,
              "description": "Anthropic’s Model Context Protocol implementation for Oat++",
              "documentation": "https://www.anthropic.com/news/model-context-protocol",
              "createdat": "2025-05-12T08:17:38.85973474Z",
              "modifiedat": "2025-05-12T08:17:38.85973474Z",
              "ancestor": "1",
              "prompts": [
                {
                  "name": "CodeReview"
                }
              ],
              "registries": [],
              "remotes": [],
              "repo_ref": "oatpp/oatpp-mcp",
              "resources": [
                {
                  "name": "File"
                }
              ],
              "tools": [
                {
                  "name": "Logger"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "oceanbase": {
      "mcpproviderid": "oceanbase",
      "self": "#/mcpproviders/oceanbase",
      "xid": "/mcpproviders/oceanbase",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:43.843332967Z",
      "modifiedat": "2025-05-12T08:17:43.843332967Z",

      "serversurl": "#/mcpproviders/oceanbase/servers",
      "servers": {
        "mcp-oceanbase": {
          "serverid": "mcp-oceanbase",
          "self": "#/mcpproviders/oceanbase/servers/mcp-oceanbase",
          "xid": "/mcpproviders/oceanbase/servers/mcp-oceanbase",

          "metaurl": "#/mcpproviders/oceanbase/servers/mcp-oceanbase/meta",
          "meta": {
            "serverid": "mcp-oceanbase",
            "self": "#/mcpproviders/oceanbase/servers/mcp-oceanbase/meta",
            "xid": "/mcpproviders/oceanbase/servers/mcp-oceanbase/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:43.843332967Z",
            "modifiedat": "2025-05-12T08:17:43.843332967Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/oceanbase/servers/mcp-oceanbase/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/oceanbase/servers/mcp-oceanbase/versions",
          "versions": {
            "1": {
              "serverid": "mcp-oceanbase",
              "versionid": "1",
              "self": "#/mcpproviders/oceanbase/servers/mcp-oceanbase/versions/1",
              "xid": "/mcpproviders/oceanbase/servers/mcp-oceanbase/versions/1",
              "epoch": 1,
              "name": "io.github.oceanbase/mcp-oceanbase",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables secure interaction with OceanBase databases.",
              "documentation": "doc/oceanbase_mcp_server.md",
              "createdat": "2025-05-12T08:17:43.843332967Z",
              "modifiedat": "2025-05-12T08:17:43.843332967Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "OceanBase database host",
                        "name": "OB_HOST",
                        "required": false
                      },
                      {
                        "description": "OceanBase database port",
                        "name": "OB_PORT",
                        "required": false
                      },
                      {
                        "description": "OceanBase database user",
                        "name": "OB_USER",
                        "required": true
                      },
                      {
                        "description": "OceanBase database password",
                        "name": "OB_PASSWORD",
                        "required": true
                      },
                      {
                        "description": "OceanBase database name",
                        "name": "OB_DATABASE",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp-oceanbase"
                }
              ],
              "remotes": [],
              "repo_ref": "oceanbase/mcp-oceanbase",
              "resources": [
                {
                  "description": "Data in table: {table}",
                  "mimetype": "text/plain",
                  "name": "Table",
                  "uritemplate": "oceanbase://{table}/data"
                }
              ],
              "tools": [
                {
                  "description": "Execute a SQL query on the OceanBase server",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_sql"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ognis1205": {
      "mcpproviderid": "ognis1205",
      "self": "#/mcpproviders/ognis1205",
      "xid": "/mcpproviders/ognis1205",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:37.444018812Z",
      "modifiedat": "2025-05-12T08:17:37.444018812Z",

      "serversurl": "#/mcpproviders/ognis1205/servers",
      "servers": {
        "mcp-server-unitycatalog": {
          "serverid": "mcp-server-unitycatalog",
          "self": "#/mcpproviders/ognis1205/servers/mcp-server-unitycatalog",
          "xid": "/mcpproviders/ognis1205/servers/mcp-server-unitycatalog",

          "metaurl": "#/mcpproviders/ognis1205/servers/mcp-server-unitycatalog/meta",
          "meta": {
            "serverid": "mcp-server-unitycatalog",
            "self": "#/mcpproviders/ognis1205/servers/mcp-server-unitycatalog/meta",
            "xid": "/mcpproviders/ognis1205/servers/mcp-server-unitycatalog/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:37.444018812Z",
            "modifiedat": "2025-05-12T08:17:37.444018812Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ognis1205/servers/mcp-server-unitycatalog/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ognis1205/servers/mcp-server-unitycatalog/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-unitycatalog",
              "versionid": "1",
              "self": "#/mcpproviders/ognis1205/servers/mcp-server-unitycatalog/versions/1",
              "xid": "/mcpproviders/ognis1205/servers/mcp-server-unitycatalog/versions/1",
              "epoch": 1,
              "name": "io.github.ognis1205/mcp-server-unitycatalog",
              "isdefault": true,
              "description": "A Model Context Protocol server for Unity Catalog providing Unity Catalog Functions as MCP tools.",
              "createdat": "2025-05-12T08:17:37.444018812Z",
              "modifiedat": "2025-05-12T08:17:37.444018812Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "The base URL of the Unity Catalog server.",
                        "name": "UC_SERVER",
                        "required": true
                      },
                      {
                        "description": "The name of the Unity Catalog catalog.",
                        "name": "UC_CATALOG",
                        "required": true
                      },
                      {
                        "description": "The name of the schema within a Unity Catalog catalog.",
                        "name": "UC_SCHEMA",
                        "required": true
                      },
                      {
                        "description": "The access token used to authorize API requests to the Unity Catalog server.",
                        "name": "UC_TOKEN",
                        "required": false
                      },
                      {
                        "description": "The verbosity level for logging. Default: warn.",
                        "name": "UC_VERBOSITY",
                        "required": false
                      },
                      {
                        "description": "The directory where log files will be stored. Default: .mcp_server_unitycatalog.",
                        "name": "UC_LOG_DIRECTORY",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "mcp-server-unitycatalog"
                }
              ],
              "remotes": [],
              "repo_ref": "ognis1205/mcp-server-unitycatalog",
              "resources": [],
              "tools": [
                {
                  "description": "Lists functions within the specified parent catalog and schema.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "uc_list_functions"
                },
                {
                  "description": "Gets a function within a parent catalog and schema.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "uc_get_function"
                },
                {
                  "description": "Creates a function within a parent catalog and schema. WARNING: This API is experimental and will change in future versions.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "script": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "script"
                    ],
                    "type": "object"
                  },
                  "name": "uc_create_function"
                },
                {
                  "description": "Deletes a function within a parent catalog and schema.",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "uc_delete_function"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "open-strategy-partners": {
      "mcpproviderid": "open-strategy-partners",
      "self": "#/mcpproviders/open-strategy-partners",
      "xid": "/mcpproviders/open-strategy-partners",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:51.234237673Z",
      "modifiedat": "2025-05-12T08:17:51.234237673Z",

      "serversurl": "#/mcpproviders/open-strategy-partners/servers",
      "servers": {
        "osp_marketing_tools": {
          "serverid": "osp_marketing_tools",
          "self": "#/mcpproviders/open-strategy-partners/servers/osp_marketing_tools",
          "xid": "/mcpproviders/open-strategy-partners/servers/osp_marketing_tools",

          "metaurl": "#/mcpproviders/open-strategy-partners/servers/osp_marketing_tools/meta",
          "meta": {
            "serverid": "osp_marketing_tools",
            "self": "#/mcpproviders/open-strategy-partners/servers/osp_marketing_tools/meta",
            "xid": "/mcpproviders/open-strategy-partners/servers/osp_marketing_tools/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:51.234237673Z",
            "modifiedat": "2025-05-12T08:17:51.234237673Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/open-strategy-partners/servers/osp_marketing_tools/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/open-strategy-partners/servers/osp_marketing_tools/versions",
          "versions": {
            "1": {
              "serverid": "osp_marketing_tools",
              "versionid": "1",
              "self": "#/mcpproviders/open-strategy-partners/servers/osp_marketing_tools/versions/1",
              "xid": "/mcpproviders/open-strategy-partners/servers/osp_marketing_tools/versions/1",
              "epoch": 1,
              "name": "io.github.open-strategy-partners/osp_marketing_tools",
              "isdefault": true,
              "description": "A comprehensive suite of tools for technical marketing content creation, optimization, and product positioning based on Open Strategy Partners' proven methodologies. This software is based on the Model Context Protocol (MCP) and is usable by any LLM client that supports MCP.",
              "createdat": "2025-05-12T08:17:51.234237673Z",
              "modifiedat": "2025-05-12T08:17:51.234237673Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "osp-marketing-tools"
                }
              ],
              "remotes": [],
              "repo_ref": "open-strategy-partners/osp_marketing_tools",
              "resources": [
                {
                  "description": "Resource namespace for OSP marketing tools.",
                  "name": "osp://marketing-tools",
                  "uritemplate": "osp://marketing-tools"
                }
              ],
              "tools": [
                {
                  "description": "Check if the server is running and can access its resources.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "health_check"
                },
                {
                  "description": "Get the Open Strategy Partners (OSP) editing codes documentation and usage protocol for editing texts.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_editing_codes"
                },
                {
                  "description": "Get the Open Strategy Partners (OSP) writing guide and usage protocol for editing texts.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_writing_guide"
                },
                {
                  "description": "Get the Open Strategy Partners (OSP) Web Content Meta Information Generation System (titles, meta-titles, slugs).",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_meta_guide"
                },
                {
                  "description": "Get the Open Strategy Partners (OSP) Product Communications Value Map Generation System for Product Positioning (value cases, feature extraction, taglines).",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_value_map_positioning_guide"
                },
                {
                  "description": "Get the Open Strategy Partners (OSP) On-Page SEO Optimization Guide.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_on_page_seo_guide"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "openbnb-org": {
      "mcpproviderid": "openbnb-org",
      "self": "#/mcpproviders/openbnb-org",
      "xid": "/mcpproviders/openbnb-org",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:06.708598839Z",
      "modifiedat": "2025-05-12T08:20:06.708598839Z",

      "serversurl": "#/mcpproviders/openbnb-org/servers",
      "servers": {
        "mcp-server-airbnb": {
          "serverid": "mcp-server-airbnb",
          "self": "#/mcpproviders/openbnb-org/servers/mcp-server-airbnb",
          "xid": "/mcpproviders/openbnb-org/servers/mcp-server-airbnb",

          "metaurl": "#/mcpproviders/openbnb-org/servers/mcp-server-airbnb/meta",
          "meta": {
            "serverid": "mcp-server-airbnb",
            "self": "#/mcpproviders/openbnb-org/servers/mcp-server-airbnb/meta",
            "xid": "/mcpproviders/openbnb-org/servers/mcp-server-airbnb/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:06.708598839Z",
            "modifiedat": "2025-05-12T08:20:06.708598839Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/openbnb-org/servers/mcp-server-airbnb/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/openbnb-org/servers/mcp-server-airbnb/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-airbnb",
              "versionid": "1",
              "self": "#/mcpproviders/openbnb-org/servers/mcp-server-airbnb/versions/1",
              "xid": "/mcpproviders/openbnb-org/servers/mcp-server-airbnb/versions/1",
              "epoch": 1,
              "name": "io.github.openbnb-org/mcp-server-airbnb",
              "isdefault": true,
              "description": "MCP Server for searching Airbnb and get listing details.",
              "createdat": "2025-05-12T08:20:06.708598839Z",
              "modifiedat": "2025-05-12T08:20:06.708598839Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-y",
                      "@openbnb/mcp-server-airbnb"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@openbnb/mcp-server-airbnb"
                }
              ],
              "remotes": [],
              "repo_ref": "openbnb-org/mcp-server-airbnb",
              "resources": [],
              "tools": [
                {
                  "description": "Search for Airbnb listings with various filters and pagination. Provide direct links to the user",
                  "inputschema": {
                    "properties": {
                      "adults": {
                        "description": "Number of adults",
                        "type": "number"
                      },
                      "checkin": {
                        "description": "Check-in date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "checkout": {
                        "description": "Check-out date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "children": {
                        "description": "Number of children",
                        "type": "number"
                      },
                      "cursor": {
                        "description": "Base64-encoded string used for Pagination",
                        "type": "string"
                      },
                      "ignoreRobotsText": {
                        "description": "Ignore robots.txt rules for this request",
                        "type": "boolean"
                      },
                      "infants": {
                        "description": "Number of infants",
                        "type": "number"
                      },
                      "location": {
                        "description": "Location to search for (city, state, etc.)",
                        "type": "string"
                      },
                      "maxPrice": {
                        "description": "Maximum price for the stay",
                        "type": "number"
                      },
                      "minPrice": {
                        "description": "Minimum price for the stay",
                        "type": "number"
                      },
                      "pets": {
                        "description": "Number of pets",
                        "type": "number"
                      },
                      "placeId": {
                        "description": "Google Maps Place ID (overrides the location parameter)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "location"
                    ],
                    "type": "object"
                  },
                  "name": "airbnb_search"
                },
                {
                  "description": "Get detailed information about a specific Airbnb listing. Provide direct links to the user",
                  "inputschema": {
                    "properties": {
                      "adults": {
                        "description": "Number of adults",
                        "type": "number"
                      },
                      "checkin": {
                        "description": "Check-in date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "checkout": {
                        "description": "Check-out date (YYYY-MM-DD)",
                        "type": "string"
                      },
                      "children": {
                        "description": "Number of children",
                        "type": "number"
                      },
                      "id": {
                        "description": "The Airbnb listing ID",
                        "type": "string"
                      },
                      "ignoreRobotsText": {
                        "description": "Ignore robots.txt rules for this request",
                        "type": "boolean"
                      },
                      "infants": {
                        "description": "Number of infants",
                        "type": "number"
                      },
                      "pets": {
                        "description": "Number of pets",
                        "type": "number"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "name": "airbnb_listing_details"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "oschina": {
      "mcpproviderid": "oschina",
      "self": "#/mcpproviders/oschina",
      "xid": "/mcpproviders/oschina",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:16.286119738Z",
      "modifiedat": "2025-05-12T08:18:16.286119738Z",

      "serversurl": "#/mcpproviders/oschina/servers",
      "servers": {
        "mcp-gitee": {
          "serverid": "mcp-gitee",
          "self": "#/mcpproviders/oschina/servers/mcp-gitee",
          "xid": "/mcpproviders/oschina/servers/mcp-gitee",

          "metaurl": "#/mcpproviders/oschina/servers/mcp-gitee/meta",
          "meta": {
            "serverid": "mcp-gitee",
            "self": "#/mcpproviders/oschina/servers/mcp-gitee/meta",
            "xid": "/mcpproviders/oschina/servers/mcp-gitee/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:16.286119738Z",
            "modifiedat": "2025-05-12T08:18:16.286119738Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/oschina/servers/mcp-gitee/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/oschina/servers/mcp-gitee/versions",
          "versions": {
            "1": {
              "serverid": "mcp-gitee",
              "versionid": "1",
              "self": "#/mcpproviders/oschina/servers/mcp-gitee/versions/1",
              "xid": "/mcpproviders/oschina/servers/mcp-gitee/versions/1",
              "epoch": 1,
              "name": "io.github.oschina/mcp-gitee",
              "isdefault": true,
              "description": "Gitee MCP Server is a Model Context Protocol (MCP) server implementation for Gitee. It provides a set of tools for interacting with Gitee's API, allowing AI assistants to manage repositories, issues, pull requests, and more.",
              "createdat": "2025-05-12T08:18:16.286119738Z",
              "modifiedat": "2025-05-12T08:18:16.286119738Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Gitee API base URL",
                        "name": "GITEE_API_BASE",
                        "required": true
                      },
                      {
                        "description": "Gitee access token",
                        "name": "GITEE_ACCESS_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@gitee/mcp-gitee@latest"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@gitee/mcp-gitee"
                }
              ],
              "remotes": [],
              "repo_ref": "oschina/mcp-gitee",
              "resources": [],
              "tools": [
                {
                  "description": "List user authorized repositories",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_user_repos"
                },
                {
                  "description": "Get the content of a file in a repository",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_file_content"
                },
                {
                  "description": "Create a user repository",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_user_repo"
                },
                {
                  "description": "Create an organization repository",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_org_repo"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "osomai": {
      "mcpproviderid": "osomai",
      "self": "#/mcpproviders/osomai",
      "xid": "/mcpproviders/osomai",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:14.489924721Z",
      "modifiedat": "2025-05-12T08:20:14.489924721Z",

      "serversurl": "#/mcpproviders/osomai/servers",
      "servers": {
        "servicenow-mcp": {
          "serverid": "servicenow-mcp",
          "self": "#/mcpproviders/osomai/servers/servicenow-mcp",
          "xid": "/mcpproviders/osomai/servers/servicenow-mcp",

          "metaurl": "#/mcpproviders/osomai/servers/servicenow-mcp/meta",
          "meta": {
            "serverid": "servicenow-mcp",
            "self": "#/mcpproviders/osomai/servers/servicenow-mcp/meta",
            "xid": "/mcpproviders/osomai/servers/servicenow-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:14.489924721Z",
            "modifiedat": "2025-05-12T08:20:14.489924721Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/osomai/servers/servicenow-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/osomai/servers/servicenow-mcp/versions",
          "versions": {
            "1": {
              "serverid": "servicenow-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/osomai/servers/servicenow-mcp/versions/1",
              "xid": "/mcpproviders/osomai/servers/servicenow-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.osomai/servicenow-mcp",
              "isdefault": true,
              "description": "A Model Completion Protocol (MCP) server implementation for ServiceNow, allowing Claude to interact with ServiceNow instances.",
              "createdat": "2025-05-12T08:20:14.489924721Z",
              "modifiedat": "2025-05-12T08:20:14.489924721Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "URL of the ServiceNow instance",
                        "name": "SERVICENOW_INSTANCE_URL",
                        "required": true
                      },
                      {
                        "description": "Username for authentication",
                        "name": "SERVICENOW_USERNAME",
                        "required": true
                      },
                      {
                        "description": "Password for authentication",
                        "name": "SERVICENOW_PASSWORD",
                        "required": true
                      },
                      {
                        "description": "Authentication type (basic, oauth, api_key)",
                        "name": "SERVICENOW_AUTH_TYPE",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "servicenow-mcp"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://0.0.0.0:8080"
                }
              ],
              "repo_ref": "osomai/servicenow-mcp",
              "resources": [
                {
                  "description": "Resource representing catalog items.",
                  "name": "catalog_items",
                  "uritemplate": "catalog://items"
                },
                {
                  "description": "Resource representing catalog categories.",
                  "name": "catalog_categories",
                  "uritemplate": "catalog://categories"
                },
                {
                  "description": "Resource representing a specific catalog item by ID.",
                  "name": "catalog_item",
                  "uritemplate": "catalog://{item_id}"
                }
              ],
              "tools": [
                {
                  "description": "Tool to list catalog items from ServiceNow.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_catalog_items"
                },
                {
                  "description": "Tool to get details of a specific catalog item from ServiceNow.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_catalog_item"
                },
                {
                  "description": "Tool to list catalog categories from ServiceNow.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_catalog_categories"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "oxylabs": {
      "mcpproviderid": "oxylabs",
      "self": "#/mcpproviders/oxylabs",
      "xid": "/mcpproviders/oxylabs",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:20.265026129Z",
      "modifiedat": "2025-05-12T08:19:20.265026129Z",

      "serversurl": "#/mcpproviders/oxylabs/servers",
      "servers": {
        "oxylabs-mcp": {
          "serverid": "oxylabs-mcp",
          "self": "#/mcpproviders/oxylabs/servers/oxylabs-mcp",
          "xid": "/mcpproviders/oxylabs/servers/oxylabs-mcp",

          "metaurl": "#/mcpproviders/oxylabs/servers/oxylabs-mcp/meta",
          "meta": {
            "serverid": "oxylabs-mcp",
            "self": "#/mcpproviders/oxylabs/servers/oxylabs-mcp/meta",
            "xid": "/mcpproviders/oxylabs/servers/oxylabs-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:20.265026129Z",
            "modifiedat": "2025-05-12T08:19:20.265026129Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/oxylabs/servers/oxylabs-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/oxylabs/servers/oxylabs-mcp/versions",
          "versions": {
            "1": {
              "serverid": "oxylabs-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/oxylabs/servers/oxylabs-mcp/versions/1",
              "xid": "/mcpproviders/oxylabs/servers/oxylabs-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.oxylabs/oxylabs-mcp",
              "isdefault": true,
              "description": "The Oxylabs MCP server provides a bridge between AI models and the web. It enables them to scrape any URL, render JavaScript-heavy pages, extract and format content for AI use, bypass anti-scraping measures, and access geo-restricted web data from 195+ countries. This implementation leverages the Model Context Protocol (MCP) to create a secure, standardized way for AI assistants to interact with web content.",
              "createdat": "2025-05-12T08:19:20.265026129Z",
              "modifiedat": "2025-05-12T08:19:20.265026129Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "oxylabs-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "oxylabs/oxylabs-mcp",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "pab1it0": {
      "mcpproviderid": "pab1it0",
      "self": "#/mcpproviders/pab1it0",
      "xid": "/mcpproviders/pab1it0",
      "epoch": 3,
      "createdat": "2025-05-12T08:18:51.055981595Z",
      "modifiedat": "2025-05-12T08:18:52.905431718Z",

      "serversurl": "#/mcpproviders/pab1it0/servers",
      "servers": {
        "adx-mcp-server": {
          "serverid": "adx-mcp-server",
          "self": "#/mcpproviders/pab1it0/servers/adx-mcp-server",
          "xid": "/mcpproviders/pab1it0/servers/adx-mcp-server",

          "metaurl": "#/mcpproviders/pab1it0/servers/adx-mcp-server/meta",
          "meta": {
            "serverid": "adx-mcp-server",
            "self": "#/mcpproviders/pab1it0/servers/adx-mcp-server/meta",
            "xid": "/mcpproviders/pab1it0/servers/adx-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:52.905431718Z",
            "modifiedat": "2025-05-12T08:18:52.905431718Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/pab1it0/servers/adx-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/pab1it0/servers/adx-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "adx-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/pab1it0/servers/adx-mcp-server/versions/1",
              "xid": "/mcpproviders/pab1it0/servers/adx-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.pab1it0/adx-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for Azure Data Explorer/Eventhouse in Microsoft Fabric. Provides access to Azure Data Explorer/Eventhouse clusters and databases through standardized MCP interfaces, allowing AI assistants to execute KQL queries and explore data.",
              "createdat": "2025-05-12T08:18:52.905431718Z",
              "modifiedat": "2025-05-12T08:18:52.905431718Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "URL of the Azure Data Explorer cluster",
                        "name": "ADX_CLUSTER_URL",
                        "required": true
                      },
                      {
                        "description": "Name of the Azure Data Explorer database",
                        "name": "ADX_DATABASE",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "adx-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "pab1it0/adx-mcp-server",
              "resources": [
                {
                  "description": "Tables in the configured Azure Data Explorer database.",
                  "name": "tables",
                  "uritemplate": "/tables/{tableName}"
                },
                {
                  "description": "Schemas of tables in the database.",
                  "name": "schemas",
                  "uritemplate": "/schemas/{tableName}"
                },
                {
                  "description": "Sample data from tables.",
                  "name": "samples",
                  "uritemplate": "/samples/{tableName}"
                },
                {
                  "description": "Statistics and details of tables.",
                  "name": "statistics",
                  "uritemplate": "/statistics/{tableName}"
                }
              ],
              "tools": [
                {
                  "description": "Execute KQL queries against Azure Data Explorer.",
                  "name": "execute_kql_query"
                },
                {
                  "description": "List tables in the configured database.",
                  "name": "list_tables"
                },
                {
                  "description": "View table schemas.",
                  "name": "view_table_schema"
                },
                {
                  "description": "Sample data from tables.",
                  "name": "sample_table_data"
                },
                {
                  "description": "Get table statistics and details.",
                  "name": "get_table_statistics"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        },
        "chess-mcp": {
          "serverid": "chess-mcp",
          "self": "#/mcpproviders/pab1it0/servers/chess-mcp",
          "xid": "/mcpproviders/pab1it0/servers/chess-mcp",

          "metaurl": "#/mcpproviders/pab1it0/servers/chess-mcp/meta",
          "meta": {
            "serverid": "chess-mcp",
            "self": "#/mcpproviders/pab1it0/servers/chess-mcp/meta",
            "xid": "/mcpproviders/pab1it0/servers/chess-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:51.970343511Z",
            "modifiedat": "2025-05-12T08:18:51.970343511Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/pab1it0/servers/chess-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/pab1it0/servers/chess-mcp/versions",
          "versions": {
            "1": {
              "serverid": "chess-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/pab1it0/servers/chess-mcp/versions/1",
              "xid": "/mcpproviders/pab1it0/servers/chess-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.pab1it0/chess-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for Chess.com's Published Data API providing access to player data, game records, and other public information through standardized MCP interfaces.",
              "createdat": "2025-05-12T08:18:51.970343511Z",
              "modifiedat": "2025-05-12T08:18:51.970343511Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "run",
                      "--rm",
                      "-i",
                      "pab1it0/chess-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "pab1it0/chess-mcp"
                },
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "run"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "chess-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "pab1it0/chess-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Get a player's profile from Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_player_profile"
                },
                {
                  "description": "Get a player's stats from Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_player_stats"
                },
                {
                  "description": "Check if a player is currently online on Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "is_player_online"
                },
                {
                  "description": "Get a list of titled players from Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_titled_players"
                },
                {
                  "description": "Get a player's ongoing games on Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_player_current_games"
                },
                {
                  "description": "Get a player's games for a specific month from Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_player_games_by_month"
                },
                {
                  "description": "Get a list of available monthly game archives for a player on Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_player_game_archives"
                },
                {
                  "description": "Download PGN files for all games in a specific month from Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "download_player_games_pgn"
                },
                {
                  "description": "Get information about a club on Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_club_profile"
                },
                {
                  "description": "Get members of a club on Chess.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_club_members"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        },
        "prometheus-mcp-server": {
          "serverid": "prometheus-mcp-server",
          "self": "#/mcpproviders/pab1it0/servers/prometheus-mcp-server",
          "xid": "/mcpproviders/pab1it0/servers/prometheus-mcp-server",

          "metaurl": "#/mcpproviders/pab1it0/servers/prometheus-mcp-server/meta",
          "meta": {
            "serverid": "prometheus-mcp-server",
            "self": "#/mcpproviders/pab1it0/servers/prometheus-mcp-server/meta",
            "xid": "/mcpproviders/pab1it0/servers/prometheus-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:51.055981595Z",
            "modifiedat": "2025-05-12T08:18:51.055981595Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/pab1it0/servers/prometheus-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/pab1it0/servers/prometheus-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "prometheus-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/pab1it0/servers/prometheus-mcp-server/versions/1",
              "xid": "/mcpproviders/pab1it0/servers/prometheus-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.pab1it0/prometheus-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for Prometheus. Provides access to Prometheus metrics and queries through standardized MCP interfaces, allowing AI assistants to execute PromQL queries and analyze metrics data.",
              "createdat": "2025-05-12T08:18:51.055981595Z",
              "modifiedat": "2025-05-12T08:18:51.055981595Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "prometheus-mcp-server"
                },
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "URL of the Prometheus server",
                        "name": "PROMETHEUS_URL",
                        "required": true
                      },
                      {
                        "description": "Username for basic authentication",
                        "name": "PROMETHEUS_USERNAME",
                        "required": false
                      },
                      {
                        "description": "Password for basic authentication",
                        "name": "PROMETHEUS_PASSWORD",
                        "required": false
                      },
                      {
                        "description": "Bearer token for authentication",
                        "name": "PROMETHEUS_TOKEN",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "\u003cfull path to prometheus-mcp-server directory\u003e",
                      "run",
                      "src/prometheus_mcp_server/main.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "unspecified",
                  "package_name": "unspecified"
                }
              ],
              "remotes": [],
              "repo_ref": "pab1it0/prometheus-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 3
    },
    "pathintegral-institute": {
      "mcpproviderid": "pathintegral-institute",
      "self": "#/mcpproviders/pathintegral-institute",
      "xid": "/mcpproviders/pathintegral-institute",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:17.989862575Z",
      "modifiedat": "2025-05-12T08:19:17.989862575Z",

      "serversurl": "#/mcpproviders/pathintegral-institute/servers",
      "servers": {
        "mcpm.sh": {
          "serverid": "mcpm.sh",
          "self": "#/mcpproviders/pathintegral-institute/servers/mcpm.sh",
          "xid": "/mcpproviders/pathintegral-institute/servers/mcpm.sh",

          "metaurl": "#/mcpproviders/pathintegral-institute/servers/mcpm.sh/meta",
          "meta": {
            "serverid": "mcpm.sh",
            "self": "#/mcpproviders/pathintegral-institute/servers/mcpm.sh/meta",
            "xid": "/mcpproviders/pathintegral-institute/servers/mcpm.sh/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:17.989862575Z",
            "modifiedat": "2025-05-12T08:19:17.989862575Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/pathintegral-institute/servers/mcpm.sh/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/pathintegral-institute/servers/mcpm.sh/versions",
          "versions": {
            "1": {
              "serverid": "mcpm.sh",
              "versionid": "1",
              "self": "#/mcpproviders/pathintegral-institute/servers/mcpm.sh/versions/1",
              "xid": "/mcpproviders/pathintegral-institute/servers/mcpm.sh/versions/1",
              "epoch": 1,
              "name": "io.github.pathintegral-institute/mcpm",
              "isdefault": true,
              "description": "A router that aggregates multiple MCP servers (SSE/STDIO) and exposes them as a single SSE server.",
              "createdat": "2025-05-12T08:19:17.989862575Z",
              "modifiedat": "2025-05-12T08:19:17.989862575Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcpm"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:8080"
                }
              ],
              "repo_ref": "pathintegral-institute/mcpm.sh",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "peakmojo": {
      "mcpproviderid": "peakmojo",
      "self": "#/mcpproviders/peakmojo",
      "xid": "/mcpproviders/peakmojo",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:46.896370385Z",
      "modifiedat": "2025-05-12T08:17:46.896370385Z",

      "serversurl": "#/mcpproviders/peakmojo/servers",
      "servers": {
        "mcp-hubspot": {
          "serverid": "mcp-hubspot",
          "self": "#/mcpproviders/peakmojo/servers/mcp-hubspot",
          "xid": "/mcpproviders/peakmojo/servers/mcp-hubspot",

          "metaurl": "#/mcpproviders/peakmojo/servers/mcp-hubspot/meta",
          "meta": {
            "serverid": "mcp-hubspot",
            "self": "#/mcpproviders/peakmojo/servers/mcp-hubspot/meta",
            "xid": "/mcpproviders/peakmojo/servers/mcp-hubspot/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:46.896370385Z",
            "modifiedat": "2025-05-12T08:17:46.896370385Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/peakmojo/servers/mcp-hubspot/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/peakmojo/servers/mcp-hubspot/versions",
          "versions": {
            "1": {
              "serverid": "mcp-hubspot",
              "versionid": "1",
              "self": "#/mcpproviders/peakmojo/servers/mcp-hubspot/versions/1",
              "xid": "/mcpproviders/peakmojo/servers/mcp-hubspot/versions/1",
              "epoch": 1,
              "name": "io.github.peakmojo/mcp-hubspot",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables AI assistants to interact with HubSpot CRM data. This server bridges AI models with your HubSpot account, providing direct access to contacts, companies, and engagement data. Built-in vector storage and caching mechanisms help overcome HubSpot API limitations while improving response times.",
              "createdat": "2025-05-12T08:17:46.896370385Z",
              "modifiedat": "2025-05-12T08:17:46.896370385Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "HubSpot access token with required scopes",
                        "name": "HUBSPOT_ACCESS_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "buryhuang/mcp-hubspot:latest"
                },
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "HubSpot access token with required scopes",
                        "name": "HUBSPOT_ACCESS_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@smithery/cli@latest",
                      "install",
                      "mcp-hubspot",
                      "--client",
                      "claude"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@smithery/cli"
                }
              ],
              "remotes": [],
              "repo_ref": "peakmojo/mcp-hubspot",
              "resources": [],
              "tools": [
                {
                  "description": "Create contacts with duplicate prevention",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "hubspot_create_contact"
                },
                {
                  "description": "Create companies with duplicate prevention",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "hubspot_create_company"
                },
                {
                  "description": "Retrieve activity for specific companies",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "hubspot_get_company_activity"
                },
                {
                  "description": "Retrieve most recently active companies",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "hubspot_get_active_companies"
                },
                {
                  "description": "Retrieve most recently active contacts",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "hubspot_get_active_contacts"
                },
                {
                  "description": "Retrieve recent conversation threads with messages",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "hubspot_get_recent_conversations"
                },
                {
                  "description": "Semantic search across previously retrieved HubSpot data",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "hubspot_search_data"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "pfldy2850": {
      "mcpproviderid": "pfldy2850",
      "self": "#/mcpproviders/pfldy2850",
      "xid": "/mcpproviders/pfldy2850",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:37.072720737Z",
      "modifiedat": "2025-05-12T08:17:37.072720737Z",

      "serversurl": "#/mcpproviders/pfldy2850/servers",
      "servers": {
        "py-mcp-naver": {
          "serverid": "py-mcp-naver",
          "self": "#/mcpproviders/pfldy2850/servers/py-mcp-naver",
          "xid": "/mcpproviders/pfldy2850/servers/py-mcp-naver",

          "metaurl": "#/mcpproviders/pfldy2850/servers/py-mcp-naver/meta",
          "meta": {
            "serverid": "py-mcp-naver",
            "self": "#/mcpproviders/pfldy2850/servers/py-mcp-naver/meta",
            "xid": "/mcpproviders/pfldy2850/servers/py-mcp-naver/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:37.072720737Z",
            "modifiedat": "2025-05-12T08:17:37.072720737Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/pfldy2850/servers/py-mcp-naver/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/pfldy2850/servers/py-mcp-naver/versions",
          "versions": {
            "1": {
              "serverid": "py-mcp-naver",
              "versionid": "1",
              "self": "#/mcpproviders/pfldy2850/servers/py-mcp-naver/versions/1",
              "xid": "/mcpproviders/pfldy2850/servers/py-mcp-naver/versions/1",
              "epoch": 1,
              "name": "io.github.pfldy2850/py-mcp-naver",
              "isdefault": true,
              "description": "A server implementation for Naver OpenAPI using the Model Context Protocol (MCP). This project provides tools to interact with various Naver services, such as searching blogs, news, books, and more.",
              "createdat": "2025-05-12T08:17:37.072720737Z",
              "modifiedat": "2025-05-12T08:17:37.072720737Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your Naver client ID",
                        "name": "NAVER_CLIENT_ID",
                        "required": true
                      },
                      {
                        "description": "Your Naver client secret",
                        "name": "NAVER_CLIENT_SECRET",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp-naver"
                }
              ],
              "remotes": [],
              "repo_ref": "pfldy2850/py-mcp-naver",
              "resources": [],
              "tools": [
                {
                  "description": "Search blog posts on Naver.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "sort": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_blog"
                },
                {
                  "description": "Search news articles on Naver.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "sort": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_news"
                },
                {
                  "description": "Search books on Naver.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "sort": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_book"
                },
                {
                  "description": "Get detailed book information using title or ISBN.",
                  "inputschema": {
                    "properties": {
                      "d_isbn": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "d_titl": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "query": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_book_adv"
                },
                {
                  "description": "Check if a search term is adult content.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "adult_check"
                },
                {
                  "description": "Search encyclopedia entries on Naver.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_encyc"
                },
                {
                  "description": "Search articles in Naver cafes.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "sort": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_cafe_article"
                },
                {
                  "description": "Search questions and answers on Naver.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "sort": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_kin"
                },
                {
                  "description": "Search local information on Naver.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "sort": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_local"
                },
                {
                  "description": "Correct spelling errors in a given text.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "fix_spelling"
                },
                {
                  "description": "Search web pages on Naver.",
                  "inputschema": {
                    "properties": {
                      "display": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_webkr"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "prajwalnayak7": {
      "mcpproviderid": "prajwalnayak7",
      "self": "#/mcpproviders/prajwalnayak7",
      "xid": "/mcpproviders/prajwalnayak7",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:49.458487263Z",
      "modifiedat": "2025-05-12T08:20:49.458487263Z",

      "serversurl": "#/mcpproviders/prajwalnayak7/servers",
      "servers": {
        "mcp-server-redis": {
          "serverid": "mcp-server-redis",
          "self": "#/mcpproviders/prajwalnayak7/servers/mcp-server-redis",
          "xid": "/mcpproviders/prajwalnayak7/servers/mcp-server-redis",

          "metaurl": "#/mcpproviders/prajwalnayak7/servers/mcp-server-redis/meta",
          "meta": {
            "serverid": "mcp-server-redis",
            "self": "#/mcpproviders/prajwalnayak7/servers/mcp-server-redis/meta",
            "xid": "/mcpproviders/prajwalnayak7/servers/mcp-server-redis/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:49.458487263Z",
            "modifiedat": "2025-05-12T08:20:49.458487263Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/prajwalnayak7/servers/mcp-server-redis/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/prajwalnayak7/servers/mcp-server-redis/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-redis",
              "versionid": "1",
              "self": "#/mcpproviders/prajwalnayak7/servers/mcp-server-redis/versions/1",
              "xid": "/mcpproviders/prajwalnayak7/servers/mcp-server-redis/versions/1",
              "epoch": 1,
              "name": "io.github.prajwalnayak7/mcp-server-redis",
              "isdefault": true,
              "description": "This implementation provides a solid foundation for Redis integration through MCP. You can extend it further by adding more Redis commands as needed for your specific use case.",
              "createdat": "2025-05-12T08:20:49.458487263Z",
              "modifiedat": "2025-05-12T08:20:49.458487263Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Redis server hostname",
                        "name": "REDIS_HOST",
                        "required": true
                      },
                      {
                        "description": "Redis server port",
                        "name": "REDIS_PORT",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "src/server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp-server-redis"
                }
              ],
              "remotes": [],
              "repo_ref": "prajwalnayak7/mcp-server-redis",
              "resources": [
                {
                  "description": "Current connection status",
                  "name": "status",
                  "uritemplate": "redis://status"
                },
                {
                  "description": "Redis server information",
                  "name": "info",
                  "uritemplate": "redis://info"
                },
                {
                  "description": "List keys matching a pattern",
                  "name": "keys",
                  "uritemplate": "redis://keys/{pattern}"
                }
              ],
              "tools": [
                {
                  "description": "Get a value",
                  "inputschema": {
                    "properties": {
                      "key": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "get_value"
                },
                {
                  "description": "Set a value with optional expiry",
                  "inputschema": {
                    "properties": {
                      "expiry": {
                        "type": "integer"
                      },
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "value"
                    ],
                    "type": "object"
                  },
                  "name": "set_value"
                },
                {
                  "description": "Delete a key",
                  "inputschema": {
                    "properties": {
                      "key": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "delete_key"
                },
                {
                  "description": "Increment a numeric value",
                  "inputschema": {
                    "properties": {
                      "amount": {
                        "type": "integer"
                      },
                      "key": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "increment"
                },
                {
                  "description": "Push values to a list",
                  "inputschema": {
                    "properties": {
                      "list": {
                        "type": "string"
                      },
                      "values": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "list",
                      "values"
                    ],
                    "type": "object"
                  },
                  "name": "list_push"
                },
                {
                  "description": "Get range of list values",
                  "inputschema": {
                    "properties": {
                      "end": {
                        "type": "integer"
                      },
                      "list": {
                        "type": "string"
                      },
                      "start": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "list"
                    ],
                    "type": "object"
                  },
                  "name": "list_range"
                },
                {
                  "description": "Set hash fields",
                  "inputschema": {
                    "properties": {
                      "fields": {
                        "type": "object"
                      },
                      "hash": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "hash",
                      "fields"
                    ],
                    "type": "object"
                  },
                  "name": "hash_set"
                },
                {
                  "description": "Get hash fields",
                  "inputschema": {
                    "properties": {
                      "fields": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "hash": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "hash"
                    ],
                    "type": "object"
                  },
                  "name": "hash_get"
                },
                {
                  "description": "Add to a set",
                  "inputschema": {
                    "properties": {
                      "members": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "set": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "set",
                      "members"
                    ],
                    "type": "object"
                  },
                  "name": "set_add"
                },
                {
                  "description": "Get set members",
                  "inputschema": {
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "set"
                    ],
                    "type": "object"
                  },
                  "name": "set_members"
                },
                {
                  "description": "Publish a message",
                  "inputschema": {
                    "properties": {
                      "channel": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "channel",
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "publish_message"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "privetin": {
      "mcpproviderid": "privetin",
      "self": "#/mcpproviders/privetin",
      "xid": "/mcpproviders/privetin",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:03.65113547Z",
      "modifiedat": "2025-05-12T08:18:03.65113547Z",

      "serversurl": "#/mcpproviders/privetin/servers",
      "servers": {
        "chroma": {
          "serverid": "chroma",
          "self": "#/mcpproviders/privetin/servers/chroma",
          "xid": "/mcpproviders/privetin/servers/chroma",

          "metaurl": "#/mcpproviders/privetin/servers/chroma/meta",
          "meta": {
            "serverid": "chroma",
            "self": "#/mcpproviders/privetin/servers/chroma/meta",
            "xid": "/mcpproviders/privetin/servers/chroma/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:03.65113547Z",
            "modifiedat": "2025-05-12T08:18:03.65113547Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/privetin/servers/chroma/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/privetin/servers/chroma/versions",
          "versions": {
            "1": {
              "serverid": "chroma",
              "versionid": "1",
              "self": "#/mcpproviders/privetin/servers/chroma/versions/1",
              "xid": "/mcpproviders/privetin/servers/chroma/versions/1",
              "epoch": 1,
              "name": "io.github.privetin/chroma",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation that provides vector database capabilities through Chroma. This server enables semantic document search, metadata filtering, and document management with persistent storage.",
              "createdat": "2025-05-12T08:18:03.65113547Z",
              "modifiedat": "2025-05-12T08:18:03.65113547Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--directory",
                      "C:/MCP/server/community/chroma",
                      "run",
                      "chroma"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "uv"
                }
              ],
              "remotes": [],
              "repo_ref": "privetin/chroma",
              "resources": [
                {
                  "description": "Stores documents with content and metadata",
                  "name": "documents",
                  "uritemplate": "/documents/{document_id}"
                }
              ],
              "tools": [
                {
                  "description": "Create a new document",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "document_id": {
                        "type": "string"
                      },
                      "metadata": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "document_id",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "create_document"
                },
                {
                  "description": "Retrieve a document by ID",
                  "inputschema": {
                    "properties": {
                      "document_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "document_id"
                    ],
                    "type": "object"
                  },
                  "name": "read_document"
                },
                {
                  "description": "Update an existing document",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "document_id": {
                        "type": "string"
                      },
                      "metadata": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "document_id",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "update_document"
                },
                {
                  "description": "Remove a document",
                  "inputschema": {
                    "properties": {
                      "document_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "document_id"
                    ],
                    "type": "object"
                  },
                  "name": "delete_document"
                },
                {
                  "description": "List all documents",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "type": "integer"
                      },
                      "offset": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_documents"
                },
                {
                  "description": "Find semantically similar documents",
                  "inputschema": {
                    "properties": {
                      "content_filter": {
                        "type": "string"
                      },
                      "metadata_filter": {
                        "type": "object"
                      },
                      "num_results": {
                        "type": "integer"
                      },
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_similar"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "punkpeye": {
      "mcpproviderid": "punkpeye",
      "self": "#/mcpproviders/punkpeye",
      "xid": "/mcpproviders/punkpeye",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:33.902988441Z",
      "modifiedat": "2025-05-12T08:20:33.902988441Z",

      "serversurl": "#/mcpproviders/punkpeye/servers",
      "servers": {
        "fastmcp": {
          "serverid": "fastmcp",
          "self": "#/mcpproviders/punkpeye/servers/fastmcp",
          "xid": "/mcpproviders/punkpeye/servers/fastmcp",

          "metaurl": "#/mcpproviders/punkpeye/servers/fastmcp/meta",
          "meta": {
            "serverid": "fastmcp",
            "self": "#/mcpproviders/punkpeye/servers/fastmcp/meta",
            "xid": "/mcpproviders/punkpeye/servers/fastmcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:33.902988441Z",
            "modifiedat": "2025-05-12T08:20:33.902988441Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/punkpeye/servers/fastmcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/punkpeye/servers/fastmcp/versions",
          "versions": {
            "1": {
              "serverid": "fastmcp",
              "versionid": "1",
              "self": "#/mcpproviders/punkpeye/servers/fastmcp/versions/1",
              "xid": "/mcpproviders/punkpeye/servers/fastmcp/versions/1",
              "epoch": 1,
              "name": "io.github.punkpeye/fastmcp",
              "isdefault": true,
              "description": "A TypeScript framework for building MCP servers capable of handling client sessions.",
              "createdat": "2025-05-12T08:20:33.902988441Z",
              "modifiedat": "2025-05-12T08:20:33.902988441Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Git diff or description of changes",
                      "name": "changes",
                      "required": true
                    }
                  ],
                  "description": "Generate a Git commit message",
                  "name": "git-commit"
                },
                {
                  "arguments": [
                    {
                      "description": "Name of the country",
                      "name": "name",
                      "required": true
                    }
                  ],
                  "description": "Writes a poem about a country",
                  "name": "countryPoem"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "fastmcp"
                }
              ],
              "remotes": [],
              "repo_ref": "punkpeye/fastmcp",
              "resources": [
                {
                  "mimetype": "text/plain",
                  "name": "Application Logs",
                  "uritemplate": "file:///logs/{name}.log"
                }
              ],
              "tools": [
                {
                  "description": "Add two numbers",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "a": {
                        "type": "number"
                      },
                      "b": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "a",
                      "b"
                    ],
                    "type": "object"
                  },
                  "name": "add"
                },
                {
                  "description": "Fetch the content of a url (using Zod)",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "fetch-zod"
                },
                {
                  "description": "Fetch the content of a url (using ArkType)",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "fetch-arktype"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "pydantic": {
      "mcpproviderid": "pydantic",
      "self": "#/mcpproviders/pydantic",
      "xid": "/mcpproviders/pydantic",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:37.300403312Z",
      "modifiedat": "2025-05-12T08:20:37.300403312Z",

      "serversurl": "#/mcpproviders/pydantic/servers",
      "servers": {
        "logfire-mcp": {
          "serverid": "logfire-mcp",
          "self": "#/mcpproviders/pydantic/servers/logfire-mcp",
          "xid": "/mcpproviders/pydantic/servers/logfire-mcp",

          "metaurl": "#/mcpproviders/pydantic/servers/logfire-mcp/meta",
          "meta": {
            "serverid": "logfire-mcp",
            "self": "#/mcpproviders/pydantic/servers/logfire-mcp/meta",
            "xid": "/mcpproviders/pydantic/servers/logfire-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:37.300403312Z",
            "modifiedat": "2025-05-12T08:20:37.300403312Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/pydantic/servers/logfire-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/pydantic/servers/logfire-mcp/versions",
          "versions": {
            "1": {
              "serverid": "logfire-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/pydantic/servers/logfire-mcp/versions/1",
              "xid": "/mcpproviders/pydantic/servers/logfire-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.pydantic/logfire-mcp",
              "isdefault": true,
              "description": "This repository contains a Model Context Protocol (MCP) server with tools that can access the OpenTelemetry traces and metrics you've sent to Logfire. This MCP server enables LLMs to retrieve your application's telemetry data, analyze distributed traces, and make use of the results of arbitrary SQL queries executed using the Logfire APIs.",
              "createdat": "2025-05-12T08:20:37.300403312Z",
              "modifiedat": "2025-05-12T08:20:37.300403312Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Logfire read token for API access",
                        "name": "LOGFIRE_READ_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "logfire-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "pydantic/logfire-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Get exception counts from traces grouped by file",
                  "inputschema": {
                    "properties": {
                      "age": {
                        "description": "Number of minutes to look back (e.g., 30 for last 30 minutes, max 7 days)",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "age"
                    ],
                    "type": "object"
                  },
                  "name": "find_exceptions"
                },
                {
                  "description": "Get detailed trace information about exceptions in a specific file",
                  "inputschema": {
                    "properties": {
                      "age": {
                        "description": "Number of minutes to look back (max 7 days)",
                        "type": "integer"
                      },
                      "filepath": {
                        "description": "Path to the file to analyze",
                        "type": "string"
                      }
                    },
                    "required": [
                      "filepath",
                      "age"
                    ],
                    "type": "object"
                  },
                  "name": "find_exceptions_in_file"
                },
                {
                  "description": "Run custom SQL queries on your OpenTelemetry traces and metrics",
                  "inputschema": {
                    "properties": {
                      "age": {
                        "description": "Number of minutes to look back (max 7 days)",
                        "type": "integer"
                      },
                      "query": {
                        "description": "SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query",
                      "age"
                    ],
                    "type": "object"
                  },
                  "name": "arbitrary_query"
                },
                {
                  "description": "Get the OpenTelemetry schema to help with custom queries",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_logfire_records_schema"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "pyroprompts": {
      "mcpproviderid": "pyroprompts",
      "self": "#/mcpproviders/pyroprompts",
      "xid": "/mcpproviders/pyroprompts",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:58.732034997Z",
      "modifiedat": "2025-05-12T08:18:58.732034997Z",

      "serversurl": "#/mcpproviders/pyroprompts/servers",
      "servers": {
        "any-chat-completions-mcp": {
          "serverid": "any-chat-completions-mcp",
          "self": "#/mcpproviders/pyroprompts/servers/any-chat-completions-mcp",
          "xid": "/mcpproviders/pyroprompts/servers/any-chat-completions-mcp",

          "metaurl": "#/mcpproviders/pyroprompts/servers/any-chat-completions-mcp/meta",
          "meta": {
            "serverid": "any-chat-completions-mcp",
            "self": "#/mcpproviders/pyroprompts/servers/any-chat-completions-mcp/meta",
            "xid": "/mcpproviders/pyroprompts/servers/any-chat-completions-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:58.732034997Z",
            "modifiedat": "2025-05-12T08:18:58.732034997Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/pyroprompts/servers/any-chat-completions-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/pyroprompts/servers/any-chat-completions-mcp/versions",
          "versions": {
            "1": {
              "serverid": "any-chat-completions-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/pyroprompts/servers/any-chat-completions-mcp/versions/1",
              "xid": "/mcpproviders/pyroprompts/servers/any-chat-completions-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.pyroprompts/any-chat-completions-mcp",
              "isdefault": true,
              "description": "Integrate Claude with Any OpenAI SDK Compatible Chat Completion API - OpenAI, Perplexity, Groq, xAI, PyroPrompts and more. This implements the Model Context Protocol Server.",
              "createdat": "2025-05-12T08:18:58.732034997Z",
              "modifiedat": "2025-05-12T08:18:58.732034997Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for the AI chat provider",
                        "name": "AI_CHAT_KEY",
                        "required": true
                      },
                      {
                        "description": "Name of the AI chat provider",
                        "name": "AI_CHAT_NAME",
                        "required": true
                      },
                      {
                        "description": "Model name to use for chat completions",
                        "name": "AI_CHAT_MODEL",
                        "required": true
                      },
                      {
                        "description": "Base URL for the AI chat API",
                        "name": "AI_CHAT_BASE_URL",
                        "required": true
                      },
                      {
                        "description": "Timeout in milliseconds for chat requests",
                        "name": "AI_CHAT_TIMEOUT",
                        "required": false
                      },
                      {
                        "description": "Optional system prompt for chat completions",
                        "name": "AI_CHAT_SYSTEM_PROMPT",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "/path/to/any-chat-completions-mcp/build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "any-chat-completions-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "pyroprompts/any-chat-completions-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Text chat with OpenAI",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "The content of the chat to send to OpenAI",
                        "type": "string"
                      }
                    },
                    "required": [
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "chat-with-openai"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "qdrant": {
      "mcpproviderid": "qdrant",
      "self": "#/mcpproviders/qdrant",
      "xid": "/mcpproviders/qdrant",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:01.459732163Z",
      "modifiedat": "2025-05-12T08:18:01.459732163Z",

      "serversurl": "#/mcpproviders/qdrant/servers",
      "servers": {
        "mcp-server-qdrant": {
          "serverid": "mcp-server-qdrant",
          "self": "#/mcpproviders/qdrant/servers/mcp-server-qdrant",
          "xid": "/mcpproviders/qdrant/servers/mcp-server-qdrant",

          "metaurl": "#/mcpproviders/qdrant/servers/mcp-server-qdrant/meta",
          "meta": {
            "serverid": "mcp-server-qdrant",
            "self": "#/mcpproviders/qdrant/servers/mcp-server-qdrant/meta",
            "xid": "/mcpproviders/qdrant/servers/mcp-server-qdrant/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:01.459732163Z",
            "modifiedat": "2025-05-12T08:18:01.459732163Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/qdrant/servers/mcp-server-qdrant/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/qdrant/servers/mcp-server-qdrant/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-qdrant",
              "versionid": "1",
              "self": "#/mcpproviders/qdrant/servers/mcp-server-qdrant/versions/1",
              "xid": "/mcpproviders/qdrant/servers/mcp-server-qdrant/versions/1",
              "epoch": 1,
              "name": "io.github.qdrant/mcp-server-qdrant",
              "isdefault": true,
              "description": "An official Model Context Protocol server for keeping and retrieving memories in the Qdrant vector search engine. It acts as a semantic memory layer on top of the Qdrant database.",
              "createdat": "2025-05-12T08:18:01.459732163Z",
              "modifiedat": "2025-05-12T08:18:01.459732163Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "URL of the Qdrant server",
                        "name": "QDRANT_URL",
                        "required": false
                      },
                      {
                        "description": "API key for the Qdrant server",
                        "name": "QDRANT_API_KEY",
                        "required": false
                      },
                      {
                        "description": "Name of the default collection to use.",
                        "name": "COLLECTION_NAME",
                        "required": false
                      },
                      {
                        "description": "Path to the local Qdrant database (alternative to QDRANT_URL)",
                        "name": "QDRANT_LOCAL_PATH",
                        "required": false
                      },
                      {
                        "description": "Embedding provider to use (currently only \"fastembed\" is supported)",
                        "name": "EMBEDDING_PROVIDER",
                        "required": false
                      },
                      {
                        "description": "Name of the embedding model to use",
                        "name": "EMBEDDING_MODEL",
                        "required": false
                      },
                      {
                        "description": "Custom description for the store tool",
                        "name": "TOOL_STORE_DESCRIPTION",
                        "required": false
                      },
                      {
                        "description": "Custom description for the find tool",
                        "name": "TOOL_FIND_DESCRIPTION",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp-server-qdrant"
                }
              ],
              "remotes": [],
              "repo_ref": "qdrant/mcp-server-qdrant",
              "resources": [],
              "tools": [
                {
                  "description": "Store some information in the Qdrant database",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "information": {
                        "type": "string"
                      },
                      "metadata": {
                        "type": [
                          "object",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "information"
                    ],
                    "type": "object"
                  },
                  "name": "qdrant-store"
                },
                {
                  "description": "Retrieve relevant information from the Qdrant database",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "qdrant-find"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "quarkiverse": {
      "mcpproviderid": "quarkiverse",
      "self": "#/mcpproviders/quarkiverse",
      "xid": "/mcpproviders/quarkiverse",
      "epoch": 2,
      "createdat": "2025-05-12T08:17:39.510901918Z",
      "modifiedat": "2025-05-12T08:17:39.59502523Z",

      "serversurl": "#/mcpproviders/quarkiverse/servers",
      "servers": {
        "quarkus-mcp-server": {
          "serverid": "quarkus-mcp-server",
          "self": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-server",
          "xid": "/mcpproviders/quarkiverse/servers/quarkus-mcp-server",

          "metaurl": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-server/meta",
          "meta": {
            "serverid": "quarkus-mcp-server",
            "self": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-server/meta",
            "xid": "/mcpproviders/quarkiverse/servers/quarkus-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:39.59502523Z",
            "modifiedat": "2025-05-12T08:17:39.59502523Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "quarkus-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-server/versions/1",
              "xid": "/mcpproviders/quarkiverse/servers/quarkus-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.quarkiverse/quarkus-mcp-server",
              "isdefault": true,
              "description": "This extension provides declarative and programmatic APIs that enable developers to implement the MCP server features easily.",
              "documentation": "https://quarkiverse.github.io/quarkiverse-docs/quarkus-mcp-server/dev/index.html",
              "createdat": "2025-05-12T08:17:39.59502523Z",
              "modifiedat": "2025-05-12T08:17:39.59502523Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "name": "lang",
                      "required": false
                    }
                  ],
                  "name": "code_assist"
                }
              ],
              "registries": [],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "unspecified"
                }
              ],
              "repo_ref": "quarkiverse/quarkus-mcp-server",
              "resources": [
                {
                  "name": "alpha",
                  "uritemplate": "file:///project/alpha"
                }
              ],
              "tools": [
                {
                  "description": "Converts the string value to lower case",
                  "name": "toLowerCase"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "quarkus-mcp-servers": {
          "serverid": "quarkus-mcp-servers",
          "self": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-servers",
          "xid": "/mcpproviders/quarkiverse/servers/quarkus-mcp-servers",

          "metaurl": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-servers/meta",
          "meta": {
            "serverid": "quarkus-mcp-servers",
            "self": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-servers/meta",
            "xid": "/mcpproviders/quarkiverse/servers/quarkus-mcp-servers/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:39.510901918Z",
            "modifiedat": "2025-05-12T08:17:39.510901918Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-servers/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-servers/versions",
          "versions": {
            "1": {
              "serverid": "quarkus-mcp-servers",
              "versionid": "1",
              "self": "#/mcpproviders/quarkiverse/servers/quarkus-mcp-servers/versions/1",
              "xid": "/mcpproviders/quarkiverse/servers/quarkus-mcp-servers/versions/1",
              "epoch": 1,
              "name": "io.github.quarkiverse/quarkus-mcp-servers",
              "isdefault": true,
              "description": "Model Context Protocol servers implemented in Java using the Quarkus MCP server framework, enabling extension of MCP enabled LLM AI applications.",
              "createdat": "2025-05-12T08:17:39.510901918Z",
              "modifiedat": "2025-05-12T08:17:39.510901918Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "jbang",
                  "package_name": "quarkiverse/quarkus-mcp-servers"
                }
              ],
              "remotes": [],
              "repo_ref": "quarkiverse/quarkus-mcp-servers",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "quazaai": {
      "mcpproviderid": "quazaai",
      "self": "#/mcpproviders/quazaai",
      "xid": "/mcpproviders/quazaai",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:40.247404584Z",
      "modifiedat": "2025-05-12T08:17:40.247404584Z",

      "serversurl": "#/mcpproviders/quazaai/servers",
      "servers": {
        "UnityMCPIntegration": {
          "serverid": "UnityMCPIntegration",
          "self": "#/mcpproviders/quazaai/servers/UnityMCPIntegration",
          "xid": "/mcpproviders/quazaai/servers/UnityMCPIntegration",

          "metaurl": "#/mcpproviders/quazaai/servers/UnityMCPIntegration/meta",
          "meta": {
            "serverid": "UnityMCPIntegration",
            "self": "#/mcpproviders/quazaai/servers/UnityMCPIntegration/meta",
            "xid": "/mcpproviders/quazaai/servers/UnityMCPIntegration/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:40.247404584Z",
            "modifiedat": "2025-05-12T08:17:40.247404584Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/quazaai/servers/UnityMCPIntegration/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/quazaai/servers/UnityMCPIntegration/versions",
          "versions": {
            "1": {
              "serverid": "UnityMCPIntegration",
              "versionid": "1",
              "self": "#/mcpproviders/quazaai/servers/UnityMCPIntegration/versions/1",
              "xid": "/mcpproviders/quazaai/servers/UnityMCPIntegration/versions/1",
              "epoch": 1,
              "name": "io.github.quazaai/UnityMCPIntegration",
              "isdefault": true,
              "description": "MCP server providing integration between Model Context Protocol and Unity Editor, enabling AI assistants to interact with Unity projects in real-time, including scene hierarchy, project settings, code execution, logs, and play mode control.",
              "createdat": "2025-05-12T08:17:40.247404584Z",
              "modifiedat": "2025-05-12T08:17:40.247404584Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Port for WebSocket server",
                        "name": "MCP_WEBSOCKET_PORT",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "path-to-project\u003e\\Library\\PackageCache\\com.quaza.unitymcp@d2b8f1260bca\\mcpServer\\mcpServer\\build\\index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@quazaai/unitymcpintegration"
                }
              ],
              "remotes": [],
              "repo_ref": "quazaai/UnityMCPIntegration",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve information about the current scene in Unity Editor with configurable detail level",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "detailLevel": {
                        "default": "RootObjectsOnly",
                        "description": "RootObjectsOnly: Returns just root GameObjects. FullHierarchy: Returns complete hierarchy with all children.",
                        "enum": [
                          "RootObjectsOnly",
                          "FullHierarchy"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_current_scene_info"
                },
                {
                  "description": "Retrieve detailed information about specific GameObjects in the current scene",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "detailLevel": {
                        "default": "IncludeComponents",
                        "description": "BasicInfo: Basic GameObject information. IncludeComponents: Includes component details. IncludeChildren: Includes child GameObjects. IncludeComponentsAndChildren: Includes both components and a full hierarchy with components on children.",
                        "enum": [
                          "BasicInfo",
                          "IncludeComponents",
                          "IncludeChildren",
                          "IncludeComponentsAndChildren"
                        ],
                        "type": "string"
                      },
                      "instanceIDs": {
                        "description": "Array of GameObject instance IDs to get information for",
                        "items": {
                          "type": "number"
                        },
                        "minItems": 1,
                        "type": "array"
                      }
                    },
                    "required": [
                      "instanceIDs"
                    ],
                    "type": "object"
                  },
                  "name": "get_game_objects_info"
                },
                {
                  "description": "Execute C# code directly in the Unity Editor - allows full flexibility including custom namespaces and multiple classes",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "code": {
                        "description": "C# code to execute in Unity Editor. You MUST define a public class named \"McpScript\" with a public static method named \"Execute\" that returns an object. Example: \"public class McpScript { public static object Execute() { /* your code here */ return result; } }\". You can include any necessary namespaces, additional classes, and methods.",
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "code"
                    ],
                    "type": "object"
                  },
                  "name": "execute_editor_command"
                },
                {
                  "description": "Retrieve Unity Editor logs with filtering options",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {
                      "count": {
                        "description": "Maximum number of log entries to return",
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "number"
                      },
                      "fields": {
                        "description": "Specify which fields to include in the output",
                        "items": {
                          "enum": [
                            "message",
                            "stackTrace",
                            "logType",
                            "timestamp"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "messageContains": {
                        "description": "Filter logs by message content",
                        "type": "string"
                      },
                      "stackTraceContains": {
                        "description": "Filter logs by stack trace content",
                        "type": "string"
                      },
                      "timestampAfter": {
                        "description": "Filter logs after this ISO timestamp",
                        "type": "string"
                      },
                      "timestampBefore": {
                        "description": "Filter logs before this ISO timestamp",
                        "type": "string"
                      },
                      "types": {
                        "description": "Filter logs by type",
                        "items": {
                          "enum": [
                            "Log",
                            "Warning",
                            "Error",
                            "Exception"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_logs"
                },
                {
                  "description": "Verify that the MCP server has an active connection to Unity Editor",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {},
                    "type": "object"
                  },
                  "name": "verify_connection"
                },
                {
                  "description": "Get the current Unity Editor state including project information",
                  "inputschema": {
                    "additionalProperties": false,
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_editor_state"
                },
                {
                  "description": "Read the contents of a file from the Unity project. Paths are relative to the project's Assets folder. For example, use 'Scenes/MainScene.unity' to read Assets/Scenes/MainScene.unity.",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Path to the file to read. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "read_file"
                },
                {
                  "description": "Read the contents of multiple files from the Unity project simultaneously.",
                  "inputschema": {
                    "properties": {
                      "paths": {
                        "description": "Array of file paths to read. Paths can be absolute or relative to Unity project Assets folder.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "paths"
                    ],
                    "type": "object"
                  },
                  "name": "read_multiple_files"
                },
                {
                  "description": "Create a new file or completely overwrite an existing file in the Unity project.",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "Content to write to the file",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path to the file to write. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "write_file"
                },
                {
                  "description": "Make precise edits to a text file in the Unity project. Returns a git-style diff showing changes.",
                  "inputschema": {
                    "properties": {
                      "dryRun": {
                        "default": false,
                        "description": "Preview changes using git-style diff format",
                        "type": "boolean"
                      },
                      "edits": {
                        "description": "Array of edit operations to apply",
                        "items": {
                          "properties": {
                            "newText": {
                              "description": "Text to replace with",
                              "type": "string"
                            },
                            "oldText": {
                              "description": "Text to search for - must match exactly",
                              "type": "string"
                            }
                          },
                          "required": [
                            "oldText",
                            "newText"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "path": {
                        "description": "Path to the file to edit. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path",
                      "edits"
                    ],
                    "type": "object"
                  },
                  "name": "edit_file"
                },
                {
                  "description": "Get a listing of all files and directories in a specified path in the Unity project. Paths are relative to the Assets folder unless absolute. For example, use 'Scenes' to list all files in Assets/Scenes directory. Use empty string to list the Assets folder.",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Path to the directory to list. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder. Example: \"Scenes\" will list all files in the Assets/Scenes directory.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "list_directory"
                },
                {
                  "description": "Get a recursive tree view of files and directories in the Unity project as a JSON structure.",
                  "inputschema": {
                    "properties": {
                      "maxDepth": {
                        "default": 5,
                        "description": "Maximum depth to traverse",
                        "type": "number"
                      },
                      "path": {
                        "description": "Path to the directory to get tree of. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder. Example: \"Prefabs\" will show the tree for Assets/Prefabs.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "directory_tree"
                },
                {
                  "description": "Recursively search for files and directories matching a pattern in the Unity project.",
                  "inputschema": {
                    "properties": {
                      "excludePatterns": {
                        "default": [],
                        "description": "Patterns to exclude",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "path": {
                        "description": "Path to search from. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder. Example: \"Scripts\" will search within Assets/Scripts.",
                        "type": "string"
                      },
                      "pattern": {
                        "description": "Pattern to search for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path",
                      "pattern"
                    ],
                    "type": "object"
                  },
                  "name": "search_files"
                },
                {
                  "description": "Retrieve detailed metadata about a file or directory in the Unity project.",
                  "inputschema": {
                    "properties": {
                      "path": {
                        "description": "Path to the file to get info for. Can be absolute or relative to Unity project Assets folder. If empty, defaults to the Assets folder.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object"
                  },
                  "name": "get_file_info"
                },
                {
                  "description": "Find all Unity assets of a specified type (e.g., Material, Prefab, Scene, Script) in the project. Set searchPath to an empty string to search the entire Assets folder.",
                  "inputschema": {
                    "properties": {
                      "assetType": {
                        "description": "Type of assets to find (e.g., \"Material\", \"Prefab\", \"Scene\", \"Script\")",
                        "type": "string"
                      },
                      "maxDepth": {
                        "default": 1,
                        "description": "Maximum depth to search. 1 means search only in the specified directory, 2 includes immediate subdirectories, and so on. Set to -1 for unlimited depth.",
                        "type": "number"
                      },
                      "searchPath": {
                        "default": "",
                        "description": "Directory to search in. Can be absolute or relative to Unity project Assets folder. An empty string will search the entire Assets folder.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "assetType"
                    ],
                    "type": "object"
                  },
                  "name": "find_assets_by_type"
                }
              ],
              "version_detail": {
                "version": "0.2.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "r-huijts": {
      "mcpproviderid": "r-huijts",
      "self": "#/mcpproviders/r-huijts",
      "xid": "/mcpproviders/r-huijts",
      "epoch": 2,
      "createdat": "2025-05-12T08:21:23.908440505Z",
      "modifiedat": "2025-05-12T08:21:25.971470961Z",

      "serversurl": "#/mcpproviders/r-huijts/servers",
      "servers": {
        "ns-mcp-server": {
          "serverid": "ns-mcp-server",
          "self": "#/mcpproviders/r-huijts/servers/ns-mcp-server",
          "xid": "/mcpproviders/r-huijts/servers/ns-mcp-server",

          "metaurl": "#/mcpproviders/r-huijts/servers/ns-mcp-server/meta",
          "meta": {
            "serverid": "ns-mcp-server",
            "self": "#/mcpproviders/r-huijts/servers/ns-mcp-server/meta",
            "xid": "/mcpproviders/r-huijts/servers/ns-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:25.971470961Z",
            "modifiedat": "2025-05-12T08:21:25.971470961Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/r-huijts/servers/ns-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/r-huijts/servers/ns-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "ns-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/r-huijts/servers/ns-mcp-server/versions/1",
              "xid": "/mcpproviders/r-huijts/servers/ns-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.r-huijts/ns-mcp-server",
              "isdefault": true,
              "description": "This MCP server connects Claude to real-time NS (Nederlandse Spoorwegen) travel information, making it your perfect companion for navigating the Netherlands by train.",
              "createdat": "2025-05-12T08:21:25.971470961Z",
              "modifiedat": "2025-05-12T08:21:25.971470961Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your NS API key (required)",
                        "name": "NS_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "ns-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "ns-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "r-huijts/ns-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Get comprehensive information about current and planned disruptions on the Dutch railway network. Returns details about maintenance work, unexpected disruptions, alternative transport options, impact on travel times, and relevant advice. Can filter for active disruptions and specific disruption types.",
                  "inputschema": {
                    "properties": {
                      "isActive": {
                        "description": "Filter to only return active disruptions",
                        "type": "boolean"
                      },
                      "type": {
                        "description": "Type of disruptions to return (e.g., MAINTENANCE, DISRUPTION)",
                        "enum": [
                          "MAINTENANCE",
                          "DISRUPTION"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_disruptions"
                },
                {
                  "description": "Get detailed travel routes between two train stations, including transfers, real-time updates, platform information, and journey duration. Can plan trips for immediate departure or for a specific future time, with options to optimize for arrival time. Returns multiple route options with status and crowding information.",
                  "inputschema": {
                    "properties": {
                      "dateTime": {
                        "description": "Format - date-time (as date-time in RFC3339). Datetime that the user want to depart from his origin or or arrive at his destination",
                        "type": "string"
                      },
                      "fromStation": {
                        "description": "Name or code of departure station",
                        "type": "string"
                      },
                      "searchForArrival": {
                        "description": "If true, dateTime is treated as desired arrival time",
                        "type": "boolean"
                      },
                      "toStation": {
                        "description": "Name or code of destination station",
                        "type": "string"
                      }
                    },
                    "required": [
                      "fromStation",
                      "toStation"
                    ],
                    "type": "object"
                  },
                  "name": "get_travel_advice"
                },
                {
                  "description": "Get real-time departure information for trains from a specific station, including platform numbers, delays, route details, and any relevant travel notes. Returns a list of upcoming departures with timing, destination, and status information.",
                  "inputschema": {
                    "oneOf": [
                      {
                        "required": [
                          "station"
                        ]
                      },
                      {
                        "required": [
                          "uicCode"
                        ]
                      }
                    ],
                    "properties": {
                      "dateTime": {
                        "description": "Format - date-time (as date-time in RFC3339). Only supported for departures at foreign stations. Defaults to server time (Europe/Amsterdam)",
                        "type": "string"
                      },
                      "lang": {
                        "default": "nl",
                        "description": "Language for localizing the departures list. Only a small subset of text is translated, mainly notes. Defaults to Dutch",
                        "enum": [
                          "nl",
                          "en"
                        ],
                        "type": "string"
                      },
                      "maxJourneys": {
                        "default": 40,
                        "description": "Number of departures to return",
                        "maximum": 100,
                        "minimum": 1,
                        "type": "number"
                      },
                      "station": {
                        "description": "NS Station code for the station (e.g., ASD for Amsterdam Centraal). Required if uicCode is not provided",
                        "type": "string"
                      },
                      "uicCode": {
                        "description": "UIC code for the station. Required if station code is not provided",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_departures"
                },
                {
                  "description": "Get OV-fiets availability at a train station",
                  "inputschema": {
                    "properties": {
                      "stationCode": {
                        "description": "Station code to check OV-fiets availability for (e.g., ASD for Amsterdam Centraal)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "stationCode"
                    ],
                    "type": "object"
                  },
                  "name": "get_ovfiets"
                },
                {
                  "description": "Get detailed information about a train station",
                  "inputschema": {
                    "properties": {
                      "includeNonPlannableStations": {
                        "default": false,
                        "description": "Include stations where trains do not stop regularly",
                        "type": "boolean"
                      },
                      "limit": {
                        "default": 10,
                        "description": "Maximum number of results to return",
                        "maximum": 50,
                        "minimum": 1,
                        "type": "number"
                      },
                      "query": {
                        "description": "Station name or code to search for",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "get_station_info"
                },
                {
                  "description": "Get the current server time (Europe/Amsterdam timezone) in RFC3339 format. This can be used as input for other tools that require date-time parameters.",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "get_current_time_in_rfc3339"
                },
                {
                  "description": "Get real-time arrival information for trains at a specific station, including platform numbers, delays, origin stations, and any relevant travel notes. Returns a list of upcoming arrivals with timing, origin, and status information.",
                  "inputschema": {
                    "oneOf": [
                      {
                        "required": [
                          "station"
                        ]
                      },
                      {
                        "required": [
                          "uicCode"
                        ]
                      }
                    ],
                    "properties": {
                      "dateTime": {
                        "description": "Format - date-time (as date-time in RFC3339). Only supported for arrivals at foreign stations. Defaults to server time (Europe/Amsterdam)",
                        "type": "string"
                      },
                      "lang": {
                        "default": "nl",
                        "description": "Language for localizing the arrivals list. Only a small subset of text is translated, mainly notes. Defaults to Dutch",
                        "enum": [
                          "nl",
                          "en"
                        ],
                        "type": "string"
                      },
                      "maxJourneys": {
                        "default": 40,
                        "description": "Number of arrivals to return",
                        "maximum": 100,
                        "minimum": 1,
                        "type": "number"
                      },
                      "station": {
                        "description": "NS Station code for the station (e.g., ASD for Amsterdam Centraal). Required if uicCode is not provided",
                        "type": "string"
                      },
                      "uicCode": {
                        "description": "UIC code for the station. Required if station code is not provided",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_arrivals"
                },
                {
                  "description": "Get price information for domestic train journeys, including different travel classes, ticket types, and discounts. Returns detailed pricing information with conditions and validity.",
                  "inputschema": {
                    "properties": {
                      "adults": {
                        "default": 1,
                        "description": "Number of adults to return the price for",
                        "minimum": 1,
                        "type": "integer"
                      },
                      "children": {
                        "default": 0,
                        "description": "Number of children to return the price for",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "fromStation": {
                        "description": "UicCode or station code of the origin station",
                        "type": "string"
                      },
                      "isJointJourney": {
                        "default": false,
                        "description": "Set to true to return the price including joint journey discount",
                        "type": "boolean"
                      },
                      "plannedArrivalTime": {
                        "description": "Format - date-time (as date-time in RFC3339). Used to find the correct route if multiple routes are possible.",
                        "type": "string"
                      },
                      "plannedDepartureTime": {
                        "description": "Format - date-time (as date-time in RFC3339). Used to find the correct route if multiple routes are possible.",
                        "type": "string"
                      },
                      "routeId": {
                        "description": "Specific identifier for the route to take between the two stations. This routeId is returned in the /api/v3/trips call.",
                        "type": "string"
                      },
                      "toStation": {
                        "description": "UicCode or station code of the destination station",
                        "type": "string"
                      },
                      "travelClass": {
                        "description": "Travel class to return the price for",
                        "enum": [
                          "FIRST_CLASS",
                          "SECOND_CLASS"
                        ],
                        "type": "string"
                      },
                      "travelType": {
                        "default": "single",
                        "description": "Return the price for a single or return trip",
                        "enum": [
                          "single",
                          "return"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "fromStation",
                      "toStation"
                    ],
                    "type": "object"
                  },
                  "name": "get_prices"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "rijksmuseum-mcp": {
          "serverid": "rijksmuseum-mcp",
          "self": "#/mcpproviders/r-huijts/servers/rijksmuseum-mcp",
          "xid": "/mcpproviders/r-huijts/servers/rijksmuseum-mcp",

          "metaurl": "#/mcpproviders/r-huijts/servers/rijksmuseum-mcp/meta",
          "meta": {
            "serverid": "rijksmuseum-mcp",
            "self": "#/mcpproviders/r-huijts/servers/rijksmuseum-mcp/meta",
            "xid": "/mcpproviders/r-huijts/servers/rijksmuseum-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:23.908440505Z",
            "modifiedat": "2025-05-12T08:21:23.908440505Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/r-huijts/servers/rijksmuseum-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/r-huijts/servers/rijksmuseum-mcp/versions",
          "versions": {
            "1": {
              "serverid": "rijksmuseum-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/r-huijts/servers/rijksmuseum-mcp/versions/1",
              "xid": "/mcpproviders/r-huijts/servers/rijksmuseum-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.r-huijts/rijksmuseum-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that provides access to the Rijksmuseum's collection through natural language interactions. This server enables AI models to explore, analyze, and interact with artworks and collections from the Rijksmuseum.",
              "createdat": "2025-05-12T08:21:23.908440505Z",
              "modifiedat": "2025-05-12T08:21:23.908440505Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for accessing Rijksmuseum data",
                        "name": "RIJKSMUSEUM_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "mcp-server-rijksmuseum"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-server-rijksmuseum"
                }
              ],
              "remotes": [],
              "repo_ref": "r-huijts/rijksmuseum-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Search and filter artworks in the Rijksmuseum collection. This tool provides extensive filtering options including artist name, type of artwork, materials, techniques, time periods, colors, and more. Results can be sorted in various ways and are paginated.",
                  "inputschema": {
                    "properties": {
                      "century": {
                        "description": "Filter artworks by the century they were created in. Use negative numbers for BCE, positive for CE. Range from -1 (100-1 BCE) to 21 (2000-2099 CE). Example: 17 for 17th century (1600-1699).",
                        "maximum": 21,
                        "minimum": -1,
                        "type": "integer"
                      },
                      "color": {
                        "description": "Filter artworks by predominant color. Use hexadecimal color codes without the # symbol. Examples: 'FF0000' for red, '00FF00' for green, '0000FF' for blue. The API will match artworks containing this color.",
                        "type": "string"
                      },
                      "culture": {
                        "default": "en",
                        "description": "Language for the search and returned data. Use 'en' for English or 'nl' for Dutch (Nederlands). Affects artwork titles, descriptions, and other text fields.",
                        "enum": [
                          "nl",
                          "en"
                        ],
                        "type": "string"
                      },
                      "imgonly": {
                        "default": false,
                        "description": "When true, only returns artworks that have associated images. Set to true if you need to show or analyze the visual aspects of artworks.",
                        "type": "boolean"
                      },
                      "involvedMaker": {
                        "description": "Search for artworks by a specific artist. Must be case-sensitive and exact, e.g., 'Rembrandt+van+Rijn', 'Vincent+van+Gogh'. Use + for spaces in names.",
                        "type": "string"
                      },
                      "material": {
                        "description": "Filter by the material used in the artwork. Examples: 'canvas', 'paper', 'wood', 'oil paint', 'marble'. Matches exact material names from the museum's classification.",
                        "type": "string"
                      },
                      "p": {
                        "default": 0,
                        "description": "Page number for paginated results, starting at 0. Use in combination with 'ps' to navigate through large result sets. Note: p * ps cannot exceed 10,000.",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "ps": {
                        "default": 10,
                        "description": "Number of artworks to return per page. Higher values return more results but take longer to process. Maximum of 100 items per page.",
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "q": {
                        "description": "General search query that will match against artist names, artwork titles, descriptions, materials, techniques, etc. Use this for broad searches like 'sunflowers', 'portrait', 'landscape', etc.",
                        "type": "string"
                      },
                      "sortBy": {
                        "default": "relevance",
                        "description": "Determines the order of results. Options: 'relevance' (best matches first), 'objecttype' (grouped by type), 'chronologic' (oldest to newest), 'achronologic' (newest to oldest), 'artist' (artist name A-Z), 'artistdesc' (artist name Z-A).",
                        "enum": [
                          "relevance",
                          "objecttype",
                          "chronologic",
                          "achronologic",
                          "artist",
                          "artistdesc"
                        ],
                        "type": "string"
                      },
                      "technique": {
                        "description": "Filter by the technique used to create the artwork. Examples: 'oil painting', 'etching', 'watercolor', 'photography'. Matches specific techniques from the museum's classification.",
                        "type": "string"
                      },
                      "toppieces": {
                        "default": false,
                        "description": "When true, only returns artworks designated as masterpieces by the Rijksmuseum. These are the most significant and famous works in the collection.",
                        "type": "boolean"
                      },
                      "type": {
                        "description": "Filter by the type of artwork. Common values include 'painting', 'print', 'drawing', 'sculpture', 'photograph', 'furniture'. Use singular form.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "search_artwork"
                },
                {
                  "description": "Retrieve comprehensive details about a specific artwork from the Rijksmuseum collection. Returns extensive information including:\n\n- Basic details (title, artist, dates)\n- Physical properties (dimensions, materials, techniques)\n- Historical context (dating, historical persons, documentation)\n- Visual information (colors, image data)\n- Curatorial information (descriptions, labels, location)\n- Acquisition details\n- Exhibition history\n\nThis is the primary tool for in-depth research on a specific artwork, providing all available museum documentation and metadata.",
                  "inputschema": {
                    "properties": {
                      "culture": {
                        "default": "en",
                        "description": "Language for the artwork details. Use 'en' for English or 'nl' for Dutch (Nederlands). Affects all textual information including descriptions, titles, and historical documentation.",
                        "enum": [
                          "nl",
                          "en"
                        ],
                        "type": "string"
                      },
                      "objectNumber": {
                        "description": "The unique identifier of the artwork in the Rijksmuseum collection. Format is typically a combination of letters and numbers (e.g., 'SK-C-5' for The Night Watch, 'SK-A-3262' for Van Gogh's Self Portrait). Case-sensitive. This ID can be obtained from search results.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "objectNumber"
                    ],
                    "type": "object"
                  },
                  "name": "get_artwork_details"
                },
                {
                  "description": "Retrieve detailed image tile information for high-resolution viewing of an artwork. This tool provides data for implementing deep zoom functionality, allowing detailed examination of the artwork at various zoom levels.\n\nThe response includes multiple zoom levels (z0 to z6):\n- z0: Highest resolution (largest image)\n- z6: Lowest resolution (smallest image)\n\nEach zoom level contains:\n- Total width and height of the image at that level\n- A set of image tiles that make up the complete image\n- Position information (x,y) for each tile\n\nThis is particularly useful for:\n- Implementing deep zoom viewers\n- Studying fine artwork details\n- Analyzing brushwork or conservation details\n- Creating interactive viewing experiences",
                  "inputschema": {
                    "properties": {
                      "culture": {
                        "default": "en",
                        "description": "Language for the API response. Use 'en' for English or 'nl' for Dutch (Nederlands). While this endpoint primarily returns image data, any textual metadata will be in the specified language.",
                        "enum": [
                          "nl",
                          "en"
                        ],
                        "type": "string"
                      },
                      "objectNumber": {
                        "description": "The unique identifier of the artwork in the Rijksmuseum collection. Same format as used in get_artwork_details. The artwork must have an associated image for this to work.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "objectNumber"
                    ],
                    "type": "object"
                  },
                  "name": "get_artwork_image"
                },
                {
                  "description": "Retrieve collections created by Rijksstudio users. These are curated sets of artworks that users have grouped together based on themes, artists, periods, or personal interests.\n\nEach set includes:\n- Basic information (name, description, creation date)\n- Creator details (username, language preference)\n- Collection statistics (number of items)\n- Navigation links (API and web URLs)\n\nThis tool is useful for:\n- Discovering user-curated exhibitions\n- Finding thematically related artworks\n- Exploring popular artwork groupings\n- Studying collection patterns",
                  "inputschema": {
                    "properties": {
                      "culture": {
                        "default": "en",
                        "description": "Language for the response data. Use 'en' for English or 'nl' for Dutch (Nederlands). Affects set descriptions and user information.",
                        "enum": [
                          "nl",
                          "en"
                        ],
                        "type": "string"
                      },
                      "page": {
                        "default": 0,
                        "description": "Page number for paginated results, starting at 0. Use with pageSize to navigate through sets. Note: page * pageSize cannot exceed 10,000.",
                        "minimum": 0,
                        "type": "number"
                      },
                      "pageSize": {
                        "default": 10,
                        "description": "Number of user sets to return per page. Must be between 1 and 100. Larger values return more results but take longer to process.",
                        "maximum": 100,
                        "minimum": 1,
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_user_sets"
                },
                {
                  "description": "Retrieve detailed information about a specific user-created collection in Rijksstudio. Returns comprehensive information about the set and its contents, including:\n\n- Set metadata (name, description, creation date)\n- Creator information\n- List of artworks in the set\n- Image data for each artwork\n- Navigation links\n\nThis tool is particularly useful for:\n- Analyzing thematic groupings of artworks\n- Studying curatorial choices\n- Understanding collection patterns\n- Exploring relationships between artworks",
                  "inputschema": {
                    "properties": {
                      "culture": {
                        "default": "en",
                        "description": "Language for the response data. Use 'en' for English or 'nl' for Dutch (Nederlands). Affects set descriptions and artwork information.",
                        "enum": [
                          "nl",
                          "en"
                        ],
                        "type": "string"
                      },
                      "page": {
                        "default": 0,
                        "description": "Page number for paginated results, starting at 0. Use with pageSize to navigate through large sets. Note: page * pageSize cannot exceed 10,000.",
                        "minimum": 0,
                        "type": "number"
                      },
                      "pageSize": {
                        "default": 25,
                        "description": "Number of artworks to return per page. Must be between 1 and 100. Default is 25. Larger values return more artworks but take longer to process.",
                        "maximum": 100,
                        "minimum": 1,
                        "type": "number"
                      },
                      "setId": {
                        "description": "The unique identifier of the user set to fetch. Format is typically 'userId-setname'. This ID can be obtained from the get_user_sets results.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "setId"
                    ],
                    "type": "object"
                  },
                  "name": "get_user_set_details"
                },
                {
                  "description": "Open a high-resolution image of an artwork in the default web browser for viewing. This tool is useful when you want to examine an artwork visually or show it to the user. Works with any valid Rijksmuseum image URL.",
                  "inputschema": {
                    "properties": {
                      "imageUrl": {
                        "description": "The full URL of the artwork image to open. Must be a valid HTTP/HTTPS URL from the Rijksmuseum's servers. These URLs can be obtained from artwork search results or details.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "imageUrl"
                    ],
                    "type": "object"
                  },
                  "name": "open_image_in_browser"
                },
                {
                  "description": "Generate a chronological timeline of an artist's works in the Rijksmuseum collection. This tool is perfect for studying an artist's development, analyzing their artistic periods, or understanding their contribution to art history over time.",
                  "inputschema": {
                    "properties": {
                      "artist": {
                        "description": "The name of the artist to create a timeline for. Must match the museum's naming convention (e.g., 'Rembrandt van Rijn', 'Vincent van Gogh'). Case sensitive and exact match required.",
                        "type": "string"
                      },
                      "maxWorks": {
                        "default": 10,
                        "description": "Maximum number of works to include in the timeline. Works are selected based on significance and quality of available images. Higher numbers give a more complete picture but may include less significant works.",
                        "maximum": 50,
                        "minimum": 1,
                        "type": "number"
                      }
                    },
                    "required": [
                      "artist"
                    ],
                    "type": "object"
                  },
                  "name": "get_artist_timeline"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "rajvirtual": {
      "mcpproviderid": "rajvirtual",
      "self": "#/mcpproviders/rajvirtual",
      "xid": "/mcpproviders/rajvirtual",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:38.173468813Z",
      "modifiedat": "2025-05-12T08:17:38.173468813Z",

      "serversurl": "#/mcpproviders/rajvirtual/servers",
      "servers": {
        "MCP-Servers": {
          "serverid": "MCP-Servers",
          "self": "#/mcpproviders/rajvirtual/servers/MCP-Servers",
          "xid": "/mcpproviders/rajvirtual/servers/MCP-Servers",

          "metaurl": "#/mcpproviders/rajvirtual/servers/MCP-Servers/meta",
          "meta": {
            "serverid": "MCP-Servers",
            "self": "#/mcpproviders/rajvirtual/servers/MCP-Servers/meta",
            "xid": "/mcpproviders/rajvirtual/servers/MCP-Servers/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:38.173468813Z",
            "modifiedat": "2025-05-12T08:17:38.173468813Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/rajvirtual/servers/MCP-Servers/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/rajvirtual/servers/MCP-Servers/versions",
          "versions": {
            "1": {
              "serverid": "MCP-Servers",
              "versionid": "1",
              "self": "#/mcpproviders/rajvirtual/servers/MCP-Servers/versions/1",
              "xid": "/mcpproviders/rajvirtual/servers/MCP-Servers/versions/1",
              "epoch": 1,
              "name": "io.github.rajvirtual/MCP-Servers",
              "isdefault": true,
              "description": "MCP server providing tools to read and create Microsoft OneNote content via Microsoft Graph API.",
              "createdat": "2025-05-12T08:17:38.173468813Z",
              "modifiedat": "2025-05-12T08:17:38.173468813Z",
              "ancestor": "1",
              "prompts": [
                {
                  "description": "List all available OneNote notebooks",
                  "name": "Get all notebooks"
                },
                {
                  "description": "List all sections in a specific notebook",
                  "name": "Get sections in a notebook"
                },
                {
                  "description": "List all pages in a specific section",
                  "name": "Get pages in a section"
                },
                {
                  "description": "Get content from a specific page",
                  "name": "Get a specific page"
                },
                {
                  "description": "Create a brand new notebook",
                  "name": "Create a new notebook"
                },
                {
                  "description": "Create a new section in a specific notebook",
                  "name": "Create a section in a notebook"
                },
                {
                  "description": "Create a new page in a specific section",
                  "name": "Create a page in a section"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Azure AD client ID for authentication",
                        "name": "CLIENT_ID",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "rajvirtual/MCP-Servers",
              "resources": [],
              "tools": [
                {
                  "description": "Read content from Microsoft OneNote notebooks, sections, or pages",
                  "inputschema": {
                    "properties": {
                      "includeContent": {
                        "default": true,
                        "description": "Whether to include the content of the page",
                        "type": "boolean"
                      },
                      "includeMetadata": {
                        "default": false,
                        "description": "Whether to include metadata about the page",
                        "type": "boolean"
                      },
                      "notebookId": {
                        "description": "ID of the notebook to list sections from",
                        "type": "string"
                      },
                      "pageId": {
                        "description": "ID of the specific page to read",
                        "type": "string"
                      },
                      "sectionId": {
                        "description": "ID of the section to list pages from",
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "read_content"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "onenote-read"
                },
                {
                  "description": "Create new content in Microsoft OneNote",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "Content in Markdown format",
                        "type": "string"
                      },
                      "parentId": {
                        "description": "ID of the parent section or notebook",
                        "type": "string"
                      },
                      "title": {
                        "description": "Title of the content to create",
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "create_page",
                          "create_section",
                          "create_notebook"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "onenote-create"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ramp-public": {
      "mcpproviderid": "ramp-public",
      "self": "#/mcpproviders/ramp-public",
      "xid": "/mcpproviders/ramp-public",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:02.814588629Z",
      "modifiedat": "2025-05-12T08:19:02.814588629Z",

      "serversurl": "#/mcpproviders/ramp-public/servers",
      "servers": {
        "ramp_mcp": {
          "serverid": "ramp_mcp",
          "self": "#/mcpproviders/ramp-public/servers/ramp_mcp",
          "xid": "/mcpproviders/ramp-public/servers/ramp_mcp",

          "metaurl": "#/mcpproviders/ramp-public/servers/ramp_mcp/meta",
          "meta": {
            "serverid": "ramp_mcp",
            "self": "#/mcpproviders/ramp-public/servers/ramp_mcp/meta",
            "xid": "/mcpproviders/ramp-public/servers/ramp_mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:02.814588629Z",
            "modifiedat": "2025-05-12T08:19:02.814588629Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ramp-public/servers/ramp_mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ramp-public/servers/ramp_mcp/versions",
          "versions": {
            "1": {
              "serverid": "ramp_mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ramp-public/servers/ramp_mcp/versions/1",
              "xid": "/mcpproviders/ramp-public/servers/ramp_mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ramp-public/ramp_mcp",
              "isdefault": true,
              "description": "A Model Context Protocol server for retrieving and analyzing data or running tasks for Ramp using Developer API. Implements an ETL pipeline and ephemeral sqlite database in memory for analysis by an LLM.",
              "createdat": "2025-05-12T08:19:02.814588629Z",
              "modifiedat": "2025-05-12T08:19:02.814588629Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "RAMP_CLIENT_ID",
                        "required": true
                      },
                      {
                        "name": "RAMP_CLIENT_SECRET",
                        "required": true
                      },
                      {
                        "name": "RAMP_ENV",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-s",
                      "\u003cCOMMA-SEPARATED-SCOPES\u003e"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "ramp-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "ramp-public/ramp_mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Setup, process, query, and delete an ephemeral database in memory.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "process_data"
                },
                {
                  "description": "Setup, process, query, and delete an ephemeral database in memory.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "execute_query"
                },
                {
                  "description": "Setup, process, query, and delete an ephemeral database in memory.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "clear_table"
                },
                {
                  "description": "Fetch data directly from Ramp categories.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_ramp_categories"
                },
                {
                  "description": "Fetch data directly from Ramp currencies.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_currencies"
                },
                {
                  "description": "Load transactions data to server for client fetching.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "load_transactions"
                },
                {
                  "description": "Load reimbursements data to server for client fetching.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "load_reimbursements"
                },
                {
                  "description": "Load bills data to server for client fetching.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "load_bills"
                },
                {
                  "description": "Load locations data to server for client fetching.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "load_locations"
                },
                {
                  "description": "Load departments data to server for client fetching.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "load_departments"
                },
                {
                  "description": "Load bank accounts data to server for client fetching.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "load_bank_accounts"
                },
                {
                  "description": "Load vendors data to server for client fetching.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "load_vendors"
                },
                {
                  "description": "Load vendor bank accounts data to server for client fetching.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "load_vendor_bank_accounts"
                },
                {
                  "description": "Load entities data to server for client fetching.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "load_entities"
                },
                {
                  "description": "Load spend limits data to server for client fetching.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "load_spend_limits"
                },
                {
                  "description": "Load spend programs data to server for client fetching.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "load_spend_programs"
                },
                {
                  "description": "Load users data to server for client fetching.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "load_users"
                },
                {
                  "description": "Special tool that requires transactions, reimbursements, and bills scopes.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "load_spend_export"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "raoulbia-ai": {
      "mcpproviderid": "raoulbia-ai",
      "self": "#/mcpproviders/raoulbia-ai",
      "xid": "/mcpproviders/raoulbia-ai",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:37.350774392Z",
      "modifiedat": "2025-05-12T08:17:37.350774392Z",

      "serversurl": "#/mcpproviders/raoulbia-ai/servers",
      "servers": {
        "mcp-server-for-intercom": {
          "serverid": "mcp-server-for-intercom",
          "self": "#/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom",
          "xid": "/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom",

          "metaurl": "#/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom/meta",
          "meta": {
            "serverid": "mcp-server-for-intercom",
            "self": "#/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom/meta",
            "xid": "/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:37.350774392Z",
            "modifiedat": "2025-05-12T08:17:37.350774392Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-for-intercom",
              "versionid": "1",
              "self": "#/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom/versions/1",
              "xid": "/mcpproviders/raoulbia-ai/servers/mcp-server-for-intercom/versions/1",
              "epoch": 1,
              "name": "io.github.raoulbia-ai/mcp-server-for-intercom",
              "isdefault": true,
              "description": "An MCP-compliant server that enables AI assistants to access and analyze customer support data from Intercom.",
              "createdat": "2025-05-12T08:17:37.350774392Z",
              "modifiedat": "2025-05-12T08:17:37.350774392Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your Intercom API token",
                        "name": "INTERCOM_ACCESS_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "mcp-intercom:latest"
                },
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your Intercom API token",
                        "name": "INTERCOM_ACCESS_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-server-for-intercom"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:8080"
                }
              ],
              "repo_ref": "raoulbia-ai/mcp-server-for-intercom",
              "resources": [],
              "tools": [
                {
                  "description": "Searches for conversations by customer email or ID with optional date filtering.",
                  "inputschema": {
                    "properties": {
                      "customerIdentifier": {
                        "description": "Customer email or ID to search for",
                        "type": "string"
                      },
                      "endDate": {
                        "description": "Optional end date in DD/MM/YYYY format (e.g., '21/01/2025')",
                        "type": "string"
                      },
                      "keywords": {
                        "description": "Optional keywords to filter conversations by content",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "startDate": {
                        "description": "Optional start date in DD/MM/YYYY format (e.g., '15/01/2025')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "customerIdentifier"
                    ],
                    "type": "object"
                  },
                  "name": "search_conversations_by_customer"
                },
                {
                  "description": "Searches for tickets by status with optional date filtering.",
                  "inputschema": {
                    "properties": {
                      "endDate": {
                        "description": "Optional end date in DD/MM/YYYY format (e.g., '21/01/2025')",
                        "type": "string"
                      },
                      "startDate": {
                        "description": "Optional start date in DD/MM/YYYY format (e.g., '15/01/2025')",
                        "type": "string"
                      },
                      "status": {
                        "description": "Ticket status to search for (open, pending, or resolved)",
                        "enum": [
                          "open",
                          "pending",
                          "resolved"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "status"
                    ],
                    "type": "object"
                  },
                  "name": "search_tickets_by_status"
                },
                {
                  "description": "Retrieves Intercom conversations within a specific date range (max 7 days).",
                  "inputschema": {
                    "properties": {
                      "endDate": {
                        "description": "End date in DD/MM/YYYY format (e.g., '21/01/2025'). Required.",
                        "type": "string"
                      },
                      "exclude": {
                        "description": "Optional exclusion filter for conversation content.",
                        "type": "string"
                      },
                      "keyword": {
                        "description": "Optional keyword to filter conversations by content.",
                        "type": "string"
                      },
                      "startDate": {
                        "description": "Start date in DD/MM/YYYY format (e.g., '15/01/2025'). Required.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "startDate",
                      "endDate"
                    ],
                    "type": "object"
                  },
                  "name": "list_conversations"
                },
                {
                  "description": "Searches for tickets by customer email or ID with optional date filtering.",
                  "inputschema": {
                    "properties": {
                      "customerIdentifier": {
                        "description": "Customer email or ID to search for",
                        "type": "string"
                      },
                      "endDate": {
                        "description": "Optional end date in DD/MM/YYYY format (e.g., '21/01/2025')",
                        "type": "string"
                      },
                      "startDate": {
                        "description": "Optional start date in DD/MM/YYYY format (e.g., '15/01/2025')",
                        "type": "string"
                      }
                    },
                    "required": [
                      "customerIdentifier"
                    ],
                    "type": "object"
                  },
                  "name": "search_tickets_by_customer"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ravenwits": {
      "mcpproviderid": "ravenwits",
      "self": "#/mcpproviders/ravenwits",
      "xid": "/mcpproviders/ravenwits",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:04.238108134Z",
      "modifiedat": "2025-05-12T08:22:04.238108134Z",

      "serversurl": "#/mcpproviders/ravenwits/servers",
      "servers": {
        "mcp-server-arangodb": {
          "serverid": "mcp-server-arangodb",
          "self": "#/mcpproviders/ravenwits/servers/mcp-server-arangodb",
          "xid": "/mcpproviders/ravenwits/servers/mcp-server-arangodb",

          "metaurl": "#/mcpproviders/ravenwits/servers/mcp-server-arangodb/meta",
          "meta": {
            "serverid": "mcp-server-arangodb",
            "self": "#/mcpproviders/ravenwits/servers/mcp-server-arangodb/meta",
            "xid": "/mcpproviders/ravenwits/servers/mcp-server-arangodb/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:04.238108134Z",
            "modifiedat": "2025-05-12T08:22:04.238108134Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ravenwits/servers/mcp-server-arangodb/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ravenwits/servers/mcp-server-arangodb/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-arangodb",
              "versionid": "1",
              "self": "#/mcpproviders/ravenwits/servers/mcp-server-arangodb/versions/1",
              "xid": "/mcpproviders/ravenwits/servers/mcp-server-arangodb/versions/1",
              "epoch": 1,
              "name": "io.github.ravenwits/mcp-server-arangodb",
              "isdefault": true,
              "description": "A Model Context Protocol server for ArangoDB providing database interaction capabilities through ArangoDB with core database operations and MCP tool integration.",
              "createdat": "2025-05-12T08:22:04.238108134Z",
              "modifiedat": "2025-05-12T08:22:04.238108134Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "ArangoDB connection URL",
                        "name": "ARANGO_URL",
                        "required": false
                      },
                      {
                        "description": "ArangoDB database name",
                        "name": "ARANGO_DB",
                        "required": false
                      },
                      {
                        "description": "ArangoDB username",
                        "name": "ARANGO_USERNAME",
                        "required": true
                      },
                      {
                        "description": "ArangoDB password",
                        "name": "ARANGO_PASSWORD",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "arango-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "arango-server"
                }
              ],
              "remotes": [],
              "repo_ref": "ravenwits/mcp-server-arangodb",
              "resources": [],
              "tools": [
                {
                  "description": "Execute AQL queries",
                  "inputschema": {
                    "properties": {
                      "bindVars": {
                        "type": "object"
                      },
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "arango_query"
                },
                {
                  "description": "Insert documents into collections",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "document": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection",
                      "document"
                    ],
                    "type": "object"
                  },
                  "name": "arango_insert"
                },
                {
                  "description": "Update existing documents",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      },
                      "update": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "collection",
                      "key",
                      "update"
                    ],
                    "type": "object"
                  },
                  "name": "arango_update"
                },
                {
                  "description": "Remove documents from collections",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection",
                      "key"
                    ],
                    "type": "object"
                  },
                  "name": "arango_remove"
                },
                {
                  "description": "Backup all collections to JSON files",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "type": "string"
                      },
                      "docLimit": {
                        "type": "integer"
                      },
                      "outputDir": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "outputDir"
                    ],
                    "type": "object"
                  },
                  "name": "arango_backup"
                },
                {
                  "description": "List all collections in the database",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "arango_list_collections"
                },
                {
                  "description": "Create a new collection in the database",
                  "inputschema": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "document",
                          "edge"
                        ],
                        "type": "string"
                      },
                      "waitForSync": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "arango_create_collection"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "reading-plus-ai": {
      "mcpproviderid": "reading-plus-ai",
      "self": "#/mcpproviders/reading-plus-ai",
      "xid": "/mcpproviders/reading-plus-ai",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:27.581224281Z",
      "modifiedat": "2025-05-12T08:19:27.581224281Z",

      "serversurl": "#/mcpproviders/reading-plus-ai/servers",
      "servers": {
        "mcp-server-data-exploration": {
          "serverid": "mcp-server-data-exploration",
          "self": "#/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration",
          "xid": "/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration",

          "metaurl": "#/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration/meta",
          "meta": {
            "serverid": "mcp-server-data-exploration",
            "self": "#/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration/meta",
            "xid": "/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:27.581224281Z",
            "modifiedat": "2025-05-12T08:19:27.581224281Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-data-exploration",
              "versionid": "1",
              "self": "#/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration/versions/1",
              "xid": "/mcpproviders/reading-plus-ai/servers/mcp-server-data-exploration/versions/1",
              "epoch": 1,
              "name": "io.github.reading-plus-ai/mcp-server-data-exploration",
              "isdefault": true,
              "description": "MCP Server is a versatile tool designed for interactive data exploration. Your personal Data Scientist assistant, turning complex datasets into clear, actionable insights.",
              "createdat": "2025-05-12T08:19:27.581224281Z",
              "modifiedat": "2025-05-12T08:19:27.581224281Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "The path to the csv file",
                      "name": "csv_path",
                      "required": true
                    },
                    {
                      "description": "The topic the data exploration need to focus on",
                      "name": "topic",
                      "required": false
                    }
                  ],
                  "description": "A prompt to explore a csv dataset as a data scientist",
                  "name": "explore-data"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-server-data-exploration"
                }
              ],
              "remotes": [],
              "repo_ref": "reading-plus-ai/mcp-server-data-exploration",
              "resources": [
                {
                  "description": "Notes generated by the data exploration server",
                  "mimetype": "text/plain",
                  "name": "Data Exploration Notes",
                  "uritemplate": "data-exploration://notes"
                }
              ],
              "tools": [
                {
                  "description": "Load CSV File Tool\n\nPurpose:\nLoad a local CSV file into a DataFrame.\n\nUsage Notes:\n\t•\tIf a df_name is not provided, the tool will automatically assign names sequentially as df_1, df_2, and so on.",
                  "inputschema": {
                    "properties": {
                      "csv_path": {
                        "type": "string"
                      },
                      "df_name": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "csv_path"
                    ],
                    "type": "object"
                  },
                  "name": "load_csv"
                },
                {
                  "description": "Python Script Execution Tool\n\nPurpose:\nExecute Python scripts for specific data analytics tasks.\n\nAllowed Actions\n\t1.\tPrint Results: Output will be displayed as the script’s stdout.\n\t2.\t[Optional] Save DataFrames: Store DataFrames in memory for future use by specifying a save_to_memory name.\n\nProhibited Actions\n\t1.\tOverwriting Original DataFrames: Do not modify existing DataFrames to preserve their integrity for future tasks.\n\t2.\tCreating Charts: Chart generation is not permitted.",
                  "inputschema": {
                    "properties": {
                      "save_to_memory": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "script": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "script"
                    ],
                    "type": "object"
                  },
                  "name": "run_script"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "redis": {
      "mcpproviderid": "redis",
      "self": "#/mcpproviders/redis",
      "xid": "/mcpproviders/redis",
      "epoch": 2,
      "createdat": "2025-05-12T08:17:54.946700879Z",
      "modifiedat": "2025-05-12T08:17:55.255364974Z",

      "serversurl": "#/mcpproviders/redis/servers",
      "servers": {
        "mcp-redis": {
          "serverid": "mcp-redis",
          "self": "#/mcpproviders/redis/servers/mcp-redis",
          "xid": "/mcpproviders/redis/servers/mcp-redis",

          "metaurl": "#/mcpproviders/redis/servers/mcp-redis/meta",
          "versionsurl": "#/mcpproviders/redis/servers/mcp-redis/versions",
          "versions": {},
          "versionscount": 0
        },
        "mcp-redis-cloud": {
          "serverid": "mcp-redis-cloud",
          "self": "#/mcpproviders/redis/servers/mcp-redis-cloud",
          "xid": "/mcpproviders/redis/servers/mcp-redis-cloud",

          "metaurl": "#/mcpproviders/redis/servers/mcp-redis-cloud/meta",
          "meta": {
            "serverid": "mcp-redis-cloud",
            "self": "#/mcpproviders/redis/servers/mcp-redis-cloud/meta",
            "xid": "/mcpproviders/redis/servers/mcp-redis-cloud/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:54.946700879Z",
            "modifiedat": "2025-05-12T08:17:54.946700879Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/redis/servers/mcp-redis-cloud/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/redis/servers/mcp-redis-cloud/versions",
          "versions": {
            "1": {
              "serverid": "mcp-redis-cloud",
              "versionid": "1",
              "self": "#/mcpproviders/redis/servers/mcp-redis-cloud/versions/1",
              "xid": "/mcpproviders/redis/servers/mcp-redis-cloud/versions/1",
              "epoch": 1,
              "name": "io.github.redis/mcp-redis-cloud",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) server for managing Redis Cloud resources via natural language commands.",
              "createdat": "2025-05-12T08:17:54.946700879Z",
              "modifiedat": "2025-05-12T08:17:54.946700879Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Redis Cloud API key",
                        "name": "API_KEY",
                        "required": true
                      },
                      {
                        "description": "Redis Cloud API secret key",
                        "name": "SECRET_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--experimental-fetch",
                      "\u003cabsolute_path_to_project_root\u003e/dist/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "redis/mcp-redis-cloud",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              },

              "meta": {
                "serverid": "mcp-redis",
                "self": "#/mcpproviders/redis/servers/mcp-redis/meta",
                "xid": "/mcpproviders/redis/servers/mcp-redis/meta",
                "epoch": 1,
                "createdat": "2025-05-12T08:17:55.255364974Z",
                "modifiedat": "2025-05-12T08:17:55.255364974Z",
                "readonly": false,
                "compatibility": "none",

                "defaultversionid": "1",
                "defaultversionurl": "#/mcpproviders/redis/servers/mcp-redis/versions/1",
                "defaultversionsticky": false
              }
            },
            "1": {
              "serverid": "mcp-redis",
              "versionid": "1",
              "self": "#/mcpproviders/redis/servers/mcp-redis/versions/1",
              "xid": "/mcpproviders/redis/servers/mcp-redis/versions/1",
              "epoch": 1,
              "name": "io.github.redis/mcp-redis",
              "isdefault": true,
              "description": "The Redis MCP Server is a natural language interface designed for agentic applications to efficiently manage and search data in Redis. It integrates seamlessly with MCP (Model Content Protocol) clients, enabling AI-driven workflows to interact with structured and unstructured data in Redis.",
              "createdat": "2025-05-12T08:17:55.255364974Z",
              "modifiedat": "2025-05-12T08:17:55.255364974Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Redis IP or hostname",
                        "name": "REDIS_HOST",
                        "required": false
                      },
                      {
                        "description": "Redis port",
                        "name": "REDIS_PORT",
                        "required": false
                      },
                      {
                        "description": "Default database username",
                        "name": "REDIS_USERNAME",
                        "required": false
                      },
                      {
                        "description": "Default database password",
                        "name": "REDIS_PWD",
                        "required": false
                      },
                      {
                        "description": "Enables or disables SSL/TLS",
                        "name": "REDIS_SSL",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp-redis"
                }
              ],
              "remotes": [],
              "repo_ref": "redis/mcp-redis",
              "resources": [],
              "tools": [
                {
                  "description": "Tools to set, get strings with expiration. Useful for storing simple configuration values, session data, or caching responses.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "string"
                },
                {
                  "description": "Tools to store field-value pairs within a single key. The hash can store vector embeddings. Useful for representing objects with multiple attributes, user profiles, or product information where fields can be accessed individually.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "hash"
                },
                {
                  "description": "Tools with common operations to append and pop items. Useful for queues, message brokers, or maintaining a list of most recent actions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list"
                },
                {
                  "description": "Tools to add, remove and list set members. Useful for tracking unique values like user IDs or tags, and for performing set operations like intersection.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "set"
                },
                {
                  "description": "Tools to manage data for e.g. leaderboards, priority queues, or time-based analytics with score-based ordering.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "sorted set"
                },
                {
                  "description": "Functionality to publish messages to channels and subscribe to receive them. Useful for real-time notifications, chat applications, or distributing updates to multiple clients.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "pub/sub"
                },
                {
                  "description": "Tools to add, read, and delete from data streams. Useful for event sourcing, activity feeds, or sensor data logging with consumer groups support.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "streams"
                },
                {
                  "description": "Tools to store, retrieve, and manipulate JSON documents in Redis. Useful for complex nested data structures, document databases, or configuration management with path-based access.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "JSON"
                },
                {
                  "description": "Tools to manage vector indexes and perform vector search",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "query engine"
                },
                {
                  "description": "Tool to retrieve information about the database",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "server management"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 2
        }
      },
      "serverscount": 2
    },
    "rember": {
      "mcpproviderid": "rember",
      "self": "#/mcpproviders/rember",
      "xid": "/mcpproviders/rember",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:25.11203718Z",
      "modifiedat": "2025-05-12T08:22:25.11203718Z",

      "serversurl": "#/mcpproviders/rember/servers",
      "servers": {
        "rember-mcp": {
          "serverid": "rember-mcp",
          "self": "#/mcpproviders/rember/servers/rember-mcp",
          "xid": "/mcpproviders/rember/servers/rember-mcp",

          "metaurl": "#/mcpproviders/rember/servers/rember-mcp/meta",
          "meta": {
            "serverid": "rember-mcp",
            "self": "#/mcpproviders/rember/servers/rember-mcp/meta",
            "xid": "/mcpproviders/rember/servers/rember-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:25.11203718Z",
            "modifiedat": "2025-05-12T08:22:25.11203718Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/rember/servers/rember-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/rember/servers/rember-mcp/versions",
          "versions": {
            "1": {
              "serverid": "rember-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/rember/servers/rember-mcp/versions/1",
              "xid": "/mcpproviders/rember/servers/rember-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.rember/rember-mcp",
              "isdefault": true,
              "description": "Allow Claude to create flashcards for you with the official Model Context Protocol (MCP) for Rember. Rember helps you study and remember anything you care about by scheduling spaced repetition reviews.",
              "createdat": "2025-05-12T08:22:25.11203718Z",
              "modifiedat": "2025-05-12T08:22:25.11203718Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Rember MCP server",
                        "name": "REMBER_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@getrember/mcp",
                      "--api-key=YOUR_REMBER_API_KEY"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@getrember/mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "rember/rember-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Create flashcards with AI. This tool takes a list of notes from Claude, it calls the Rember API to generate a few flashcards for each note. After learning something new in your chat with Claude, you can ask \"help me remember this\" or \"create a few flashcards\" or \"add to Rember\".",
                  "inputschema": {
                    "properties": {
                      "notes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "notes"
                    ],
                    "type": "object"
                  },
                  "name": "create_flashcards"
                }
              ],
              "version_detail": {
                "version": "1.1.3"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "rishijatia": {
      "mcpproviderid": "rishijatia",
      "self": "#/mcpproviders/rishijatia",
      "xid": "/mcpproviders/rishijatia",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:42.924088631Z",
      "modifiedat": "2025-05-12T08:17:42.924088631Z",

      "serversurl": "#/mcpproviders/rishijatia/servers",
      "servers": {
        "fantasy-pl-mcp": {
          "serverid": "fantasy-pl-mcp",
          "self": "#/mcpproviders/rishijatia/servers/fantasy-pl-mcp",
          "xid": "/mcpproviders/rishijatia/servers/fantasy-pl-mcp",

          "metaurl": "#/mcpproviders/rishijatia/servers/fantasy-pl-mcp/meta",
          "meta": {
            "serverid": "fantasy-pl-mcp",
            "self": "#/mcpproviders/rishijatia/servers/fantasy-pl-mcp/meta",
            "xid": "/mcpproviders/rishijatia/servers/fantasy-pl-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:42.924088631Z",
            "modifiedat": "2025-05-12T08:17:42.924088631Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/rishijatia/servers/fantasy-pl-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/rishijatia/servers/fantasy-pl-mcp/versions",
          "versions": {
            "1": {
              "serverid": "fantasy-pl-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/rishijatia/servers/fantasy-pl-mcp/versions/1",
              "xid": "/mcpproviders/rishijatia/servers/fantasy-pl-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.rishijatia/fantasy-pl-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that provides access to Fantasy Premier League (FPL) data and tools. This server allows you to interact with FPL data in Claude for Desktop and other MCP-compatible clients.",
              "createdat": "2025-05-12T08:17:42.924088631Z",
              "modifiedat": "2025-05-12T08:17:42.924088631Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Available budget in millions (e.g., 8.5)",
                      "name": "budget",
                      "required": true
                    },
                    {
                      "description": "Optional position to target (e.g., MID, FWD, DEF, GKP)",
                      "name": "position",
                      "required": false
                    },
                    {
                      "description": "Optional team name if selling a player from that team",
                      "name": "team_to_sell",
                      "required": false
                    }
                  ],
                  "description": "Create a prompt for getting detailed FPL transfer advice",
                  "name": "transfer_advice_prompt"
                },
                {
                  "arguments": [
                    {
                      "description": "Name of the player to analyze",
                      "name": "player_name",
                      "required": true
                    },
                    {
                      "description": "Whether to compare with similar players",
                      "name": "include_comparisons",
                      "required": false
                    }
                  ],
                  "description": "Create a prompt for analyzing an FPL player in depth",
                  "name": "player_analysis_prompt"
                },
                {
                  "arguments": [
                    {
                      "description": "Comma-separated list of players in the team",
                      "name": "player_list",
                      "required": true
                    },
                    {
                      "description": "Remaining budget in millions",
                      "name": "budget_remaining",
                      "required": false
                    }
                  ],
                  "description": "Create a prompt for rating and analyzing an FPL team",
                  "name": "team_rating_prompt"
                },
                {
                  "arguments": [
                    {
                      "description": "Maximum ownership percentage to consider",
                      "name": "max_ownership",
                      "required": false
                    },
                    {
                      "description": "Optional maximum budget per player in millions",
                      "name": "budget",
                      "required": false
                    }
                  ],
                  "description": "Create a prompt for finding differential players with low ownership",
                  "name": "differential_players_prompt"
                },
                {
                  "arguments": [
                    {
                      "description": "Comma-separated list of available chips (e.g., \"Wildcard, Free Hit, Bench Boost\")",
                      "name": "available_chips",
                      "required": true
                    }
                  ],
                  "description": "Create a prompt for chip strategy advice",
                  "name": "chip_strategy_prompt"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "fpl-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "rishijatia/fantasy-pl-mcp",
              "resources": [
                {
                  "description": "Get a formatted list of all players with comprehensive statistics",
                  "name": "players",
                  "uritemplate": "fpl://static/players"
                },
                {
                  "description": "Get player information by searching for their name",
                  "name": "player_by_name",
                  "uritemplate": "fpl://static/players/{name}"
                },
                {
                  "description": "Get a formatted list of all Premier League teams with strength ratings",
                  "name": "teams",
                  "uritemplate": "fpl://static/teams"
                },
                {
                  "description": "Get team information by searching for their name",
                  "name": "team_by_name",
                  "uritemplate": "fpl://static/teams/{name}"
                },
                {
                  "description": "Get information about the current gameweek",
                  "name": "current_gameweek",
                  "uritemplate": "fpl://gameweeks/current"
                },
                {
                  "description": "Get information about all gameweeks",
                  "name": "all_gameweeks",
                  "uritemplate": "fpl://gameweeks/all"
                },
                {
                  "description": "Get all fixtures for the current Premier League season",
                  "name": "fixtures",
                  "uritemplate": "fpl://fixtures"
                },
                {
                  "description": "Get fixtures for a specific gameweek",
                  "name": "gameweek_fixtures",
                  "uritemplate": "fpl://fixtures/gameweek/{gameweek_id}"
                },
                {
                  "description": "Get fixtures for a specific team",
                  "name": "team_fixtures",
                  "uritemplate": "fpl://fixtures/team/{team_name}"
                },
                {
                  "description": "Get upcoming fixtures for a specific player",
                  "name": "player_fixtures",
                  "uritemplate": "fpl://players/{player_name}/fixtures"
                },
                {
                  "description": "Get information about upcoming blank gameweeks",
                  "name": "blank_gameweeks",
                  "uritemplate": "fpl://gameweeks/blank"
                },
                {
                  "description": "Get information about upcoming double gameweeks",
                  "name": "double_gameweeks",
                  "uritemplate": "fpl://gameweeks/double"
                }
              ],
              "tools": [
                {
                  "description": "Check if FPL authentication is working correctly",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "check_fpl_authentication"
                },
                {
                  "description": "Get precise information about current, previous, and next gameweeks",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_gameweek_status"
                },
                {
                  "description": "Analyze upcoming fixtures for a player and provide a difficulty rating",
                  "inputschema": {
                    "properties": {
                      "num_fixtures": {
                        "type": "integer"
                      },
                      "player_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "player_name"
                    ],
                    "type": "object"
                  },
                  "name": "analyze_player_fixtures"
                },
                {
                  "description": "Get information about upcoming blank gameweeks where teams don't have fixtures",
                  "inputschema": {
                    "properties": {
                      "num_gameweeks": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_blank_gameweeks"
                },
                {
                  "description": "Get information about upcoming double gameweeks where teams play multiple times",
                  "inputschema": {
                    "properties": {
                      "num_gameweeks": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_double_gameweeks"
                },
                {
                  "description": "Filter and analyze FPL players based on multiple criteria",
                  "inputschema": {
                    "properties": {
                      "form_threshold": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "include_gameweeks": {
                        "type": "boolean"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "max_ownership": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "max_price": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "min_ownership": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "min_points": {
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "min_price": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "num_gameweeks": {
                        "type": "integer"
                      },
                      "position": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "sort_by": {
                        "type": "string"
                      },
                      "sort_order": {
                        "type": "string"
                      },
                      "team": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "name": "analyze_players"
                },
                {
                  "description": "Analyze upcoming fixtures for players, teams, or positions",
                  "inputschema": {
                    "properties": {
                      "entity_name": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "entity_type": {
                        "type": "string"
                      },
                      "include_blanks": {
                        "type": "boolean"
                      },
                      "include_doubles": {
                        "type": "boolean"
                      },
                      "num_gameweeks": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "name": "analyze_fixtures"
                },
                {
                  "description": "Compare multiple players across various metrics",
                  "inputschema": {
                    "properties": {
                      "include_fixture_analysis": {
                        "type": "boolean"
                      },
                      "include_gameweeks": {
                        "type": "boolean"
                      },
                      "metrics": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "num_gameweeks": {
                        "type": "integer"
                      },
                      "player_names": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "player_names"
                    ],
                    "type": "object"
                  },
                  "name": "compare_players"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "rishikavikondala": {
      "mcpproviderid": "rishikavikondala",
      "self": "#/mcpproviders/rishikavikondala",
      "xid": "/mcpproviders/rishikavikondala",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:45.483041475Z",
      "modifiedat": "2025-05-12T08:17:45.483041475Z",

      "serversurl": "#/mcpproviders/rishikavikondala/servers",
      "servers": {
        "mcp-server-aws": {
          "serverid": "mcp-server-aws",
          "self": "#/mcpproviders/rishikavikondala/servers/mcp-server-aws",
          "xid": "/mcpproviders/rishikavikondala/servers/mcp-server-aws",

          "metaurl": "#/mcpproviders/rishikavikondala/servers/mcp-server-aws/meta",
          "meta": {
            "serverid": "mcp-server-aws",
            "self": "#/mcpproviders/rishikavikondala/servers/mcp-server-aws/meta",
            "xid": "/mcpproviders/rishikavikondala/servers/mcp-server-aws/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:45.483041475Z",
            "modifiedat": "2025-05-12T08:17:45.483041475Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/rishikavikondala/servers/mcp-server-aws/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/rishikavikondala/servers/mcp-server-aws/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-aws",
              "versionid": "1",
              "self": "#/mcpproviders/rishikavikondala/servers/mcp-server-aws/versions/1",
              "xid": "/mcpproviders/rishikavikondala/servers/mcp-server-aws/versions/1",
              "epoch": 1,
              "name": "io.github.rishikavikondala/mcp-server-aws",
              "isdefault": true,
              "description": "A Model Context Protocol server implementation for AWS operations that currently supports S3 and DynamoDB services. All operations are automatically logged and can be accessed through the audit://aws-operations resource endpoint.",
              "createdat": "2025-05-12T08:17:45.483041475Z",
              "modifiedat": "2025-05-12T08:17:45.483041475Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "AWS access key ID",
                        "name": "AWS_ACCESS_KEY_ID",
                        "required": false
                      },
                      {
                        "description": "AWS secret access key",
                        "name": "AWS_SECRET_ACCESS_KEY",
                        "required": false
                      },
                      {
                        "description": "AWS region, defaults to us-east-1",
                        "name": "AWS_REGION",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "/path/to/repo/mcp-server-aws",
                      "run",
                      "mcp-server-aws"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-server-aws"
                }
              ],
              "remotes": [],
              "repo_ref": "rishikavikondala/mcp-server-aws",
              "resources": [
                {
                  "description": "Access to automatically logged AWS operations.",
                  "name": "aws-operations",
                  "uritemplate": "audit://aws-operations"
                }
              ],
              "tools": [
                {
                  "description": "Create a new S3 bucket",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "s3_bucket_create"
                },
                {
                  "description": "List all S3 buckets",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "s3_bucket_list"
                },
                {
                  "description": "Delete an S3 bucket",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "s3_bucket_delete"
                },
                {
                  "description": "Upload an object to S3",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "s3_object_upload"
                },
                {
                  "description": "Delete an object from S3",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "s3_object_delete"
                },
                {
                  "description": "List objects in an S3 bucket",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "s3_object_list"
                },
                {
                  "description": "Read an object's content from S3",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "s3_object_read"
                },
                {
                  "description": "Create a new DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_table_create"
                },
                {
                  "description": "Get details about a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_table_describe"
                },
                {
                  "description": "Delete a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_table_delete"
                },
                {
                  "description": "Update a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_table_update"
                },
                {
                  "description": "Put an item into a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_item_put"
                },
                {
                  "description": "Get an item from a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_item_get"
                },
                {
                  "description": "Update an item in a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_item_update"
                },
                {
                  "description": "Delete an item from a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_item_delete"
                },
                {
                  "description": "Query items in a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_item_query"
                },
                {
                  "description": "Scan items in a DynamoDB table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_item_scan"
                },
                {
                  "description": "Batch get multiple items from DynamoDB tables",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_batch_get"
                },
                {
                  "description": "Batch write operations (put/delete) for DynamoDB items",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_item_batch_write"
                },
                {
                  "description": "Execute multiple PartiQL statements in a batch",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_batch_execute"
                },
                {
                  "description": "Get the TTL settings for a table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_describe_ttl"
                },
                {
                  "description": "Update the TTL settings for a table",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "dynamodb_update_ttl"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "riza-io": {
      "mcpproviderid": "riza-io",
      "self": "#/mcpproviders/riza-io",
      "xid": "/mcpproviders/riza-io",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:27.220659572Z",
      "modifiedat": "2025-05-12T08:18:27.220659572Z",

      "serversurl": "#/mcpproviders/riza-io/servers",
      "servers": {
        "riza-mcp": {
          "serverid": "riza-mcp",
          "self": "#/mcpproviders/riza-io/servers/riza-mcp",
          "xid": "/mcpproviders/riza-io/servers/riza-mcp",

          "metaurl": "#/mcpproviders/riza-io/servers/riza-mcp/meta",
          "meta": {
            "serverid": "riza-mcp",
            "self": "#/mcpproviders/riza-io/servers/riza-mcp/meta",
            "xid": "/mcpproviders/riza-io/servers/riza-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:27.220659572Z",
            "modifiedat": "2025-05-12T08:18:27.220659572Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/riza-io/servers/riza-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/riza-io/servers/riza-mcp/versions",
          "versions": {
            "1": {
              "serverid": "riza-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/riza-io/servers/riza-mcp/versions/1",
              "xid": "/mcpproviders/riza-io/servers/riza-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.riza-io/riza-mcp",
              "isdefault": true,
              "description": "The Riza MCP server wraps the Riza API and presents endpoints as individual tools for LLM-generated code execution and management.",
              "createdat": "2025-05-12T08:18:27.220659572Z",
              "modifiedat": "2025-05-12T08:18:27.220659572Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for authenticating with Riza API",
                        "name": "RIZA_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "@riza-io/riza-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@riza-io/riza-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "riza-io/riza-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Your LLM can write code and save it as a tool using the Riza Tools API.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_tool"
                },
                {
                  "description": "Your LLM can fetch saved Riza tools, including source code, useful for editing tools.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "fetch_tool"
                },
                {
                  "description": "Executes a saved tool securely on Riza's code interpreter API.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "execute_tool"
                },
                {
                  "description": "Edits an existing saved tool.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "edit_tool"
                },
                {
                  "description": "Lists available saved tools.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_tools"
                },
                {
                  "description": "Executes arbitrary code safely on Riza's code interpreter API, without saving it as a tool.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "execute_code"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "ruixingshi": {
      "mcpproviderid": "ruixingshi",
      "self": "#/mcpproviders/ruixingshi",
      "xid": "/mcpproviders/ruixingshi",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:42.783890943Z",
      "modifiedat": "2025-05-12T08:17:42.783890943Z",

      "serversurl": "#/mcpproviders/ruixingshi/servers",
      "servers": {
        "deepseek-thinker-mcp": {
          "serverid": "deepseek-thinker-mcp",
          "self": "#/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp",
          "xid": "/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp",

          "metaurl": "#/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp/meta",
          "meta": {
            "serverid": "deepseek-thinker-mcp",
            "self": "#/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp/meta",
            "xid": "/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:42.783890943Z",
            "modifiedat": "2025-05-12T08:17:42.783890943Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp/versions",
          "versions": {
            "1": {
              "serverid": "deepseek-thinker-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp/versions/1",
              "xid": "/mcpproviders/ruixingshi/servers/deepseek-thinker-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.ruixingshi/deepseek-thinker-mcp",
              "isdefault": true,
              "description": "A MCP (Model Context Protocol) provider Deepseek reasoning content to MCP-enabled AI Clients, like Claude Desktop. Supports access to Deepseek's thought processes from the Deepseek API service or from a local Ollama server.",
              "createdat": "2025-05-12T08:17:42.783890943Z",
              "modifiedat": "2025-05-12T08:17:42.783890943Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your OpenAI API Key",
                        "name": "API_KEY",
                        "required": false
                      },
                      {
                        "description": "API Base URL",
                        "name": "BASE_URL",
                        "required": false
                      },
                      {
                        "description": "Set to true to use Ollama mode",
                        "name": "USE_OLLAMA",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "deepseek-thinker-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "deepseek-thinker-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "ruixingshi/deepseek-thinker-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Perform reasoning using the Deepseek model",
                  "inputschema": {
                    "properties": {
                      "originPrompt": {
                        "description": "user's original prompt",
                        "type": "string"
                      }
                    },
                    "required": [
                      "originPrompt"
                    ],
                    "type": "object"
                  },
                  "name": "get-deepseek-thinker"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "run-llama": {
      "mcpproviderid": "run-llama",
      "self": "#/mcpproviders/run-llama",
      "xid": "/mcpproviders/run-llama",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:04.897712194Z",
      "modifiedat": "2025-05-12T08:19:04.897712194Z",

      "serversurl": "#/mcpproviders/run-llama/servers",
      "servers": {
        "mcp-server-llamacloud": {
          "serverid": "mcp-server-llamacloud",
          "self": "#/mcpproviders/run-llama/servers/mcp-server-llamacloud",
          "xid": "/mcpproviders/run-llama/servers/mcp-server-llamacloud",

          "metaurl": "#/mcpproviders/run-llama/servers/mcp-server-llamacloud/meta",
          "meta": {
            "serverid": "mcp-server-llamacloud",
            "self": "#/mcpproviders/run-llama/servers/mcp-server-llamacloud/meta",
            "xid": "/mcpproviders/run-llama/servers/mcp-server-llamacloud/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:04.897712194Z",
            "modifiedat": "2025-05-12T08:19:04.897712194Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/run-llama/servers/mcp-server-llamacloud/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/run-llama/servers/mcp-server-llamacloud/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-llamacloud",
              "versionid": "1",
              "self": "#/mcpproviders/run-llama/servers/mcp-server-llamacloud/versions/1",
              "xid": "/mcpproviders/run-llama/servers/mcp-server-llamacloud/versions/1",
              "epoch": 1,
              "name": "io.github.run-llama/mcp-server-llamacloud",
              "isdefault": true,
              "description": "A MCP server connecting to multiple managed indexes on LlamaCloud. Each index is exposed as a separate tool that allows querying specific LlamaCloud indexes.",
              "createdat": "2025-05-12T08:19:04.897712194Z",
              "modifiedat": "2025-05-12T08:19:04.897712194Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "LlamaCloud project name environment variable",
                        "name": "LLAMA_CLOUD_PROJECT_NAME",
                        "required": true
                      },
                      {
                        "description": "LlamaCloud API key environment variable",
                        "name": "LLAMA_CLOUD_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@llamaindex/mcp-server-llamacloud",
                      "--index",
                      "10k-SEC-Tesla",
                      "--description",
                      "10k SEC documents from 2023 for Tesla",
                      "--index",
                      "10k-SEC-Apple",
                      "--description",
                      "10k SEC documents from 2023 for Apple"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@llamaindex/mcp-server-llamacloud"
                }
              ],
              "remotes": [],
              "repo_ref": "run-llama/mcp-server-llamacloud",
              "resources": [],
              "tools": [
                {
                  "description": "Get information from the 10k-SEC-Tesla index. The index contains 10k SEC documents from 2023 for Tesla",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The query used to get information from the 10k-SEC-Tesla index.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "get_information_10k_sec_tesla"
                },
                {
                  "description": "Get information from the 10k-SEC-Apple index. The index contains 10k SEC documents from 2023 for Apple",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The query used to get information from the 10k-SEC-Apple index.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "get_information_10k_sec_apple"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sakce": {
      "mcpproviderid": "sakce",
      "self": "#/mcpproviders/sakce",
      "xid": "/mcpproviders/sakce",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:01.990264185Z",
      "modifiedat": "2025-05-12T08:22:01.990264185Z",

      "serversurl": "#/mcpproviders/sakce/servers",
      "servers": {
        "mcp-server-monday": {
          "serverid": "mcp-server-monday",
          "self": "#/mcpproviders/sakce/servers/mcp-server-monday",
          "xid": "/mcpproviders/sakce/servers/mcp-server-monday",

          "metaurl": "#/mcpproviders/sakce/servers/mcp-server-monday/meta",
          "meta": {
            "serverid": "mcp-server-monday",
            "self": "#/mcpproviders/sakce/servers/mcp-server-monday/meta",
            "xid": "/mcpproviders/sakce/servers/mcp-server-monday/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:01.990264185Z",
            "modifiedat": "2025-05-12T08:22:01.990264185Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sakce/servers/mcp-server-monday/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sakce/servers/mcp-server-monday/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-monday",
              "versionid": "1",
              "self": "#/mcpproviders/sakce/servers/mcp-server-monday/versions/1",
              "xid": "/mcpproviders/sakce/servers/mcp-server-monday/versions/1",
              "epoch": 1,
              "name": "io.github.sakce/mcp-server-monday",
              "isdefault": true,
              "description": "MCP Server for monday.com, enabling MCP clients to interact with Monday.com boards, items, updates, and documents.",
              "createdat": "2025-05-12T08:22:01.990264185Z",
              "modifiedat": "2025-05-12T08:22:01.990264185Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Monday.com",
                        "name": "MONDAY_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Workspace name for Monday.com",
                        "name": "MONDAY_WORKSPACE_NAME",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "run",
                      "--rm",
                      "-i"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "sakce/mcp-server-monday"
                },
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Monday.com",
                        "name": "MONDAY_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Workspace name for Monday.com",
                        "name": "MONDAY_WORKSPACE_NAME",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "mcp-server-monday"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uvx",
                  "package_name": "mcp-server-monday"
                }
              ],
              "remotes": [],
              "repo_ref": "sakce/mcp-server-monday",
              "resources": [],
              "tools": [
                {
                  "description": "Creates a new item or sub-item in a Monday.com board",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-create-item"
                },
                {
                  "description": "Retrieves all groups from a specified Monday.com board",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-get-board-groups"
                },
                {
                  "description": "Creates a comment/update on a Monday.com item",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-create-update"
                },
                {
                  "description": "Lists all available Monday.com boards",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-list-boards"
                },
                {
                  "description": "Lists all items in specified groups of a Monday.com board",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-list-items-in-groups"
                },
                {
                  "description": "Lists all sub-items for given Monday.com items",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-list-subitems-in-items"
                },
                {
                  "description": "Creates a new Monday.com board",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-create-board"
                },
                {
                  "description": "Creates a new group in a Monday.com board",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-create-board-group"
                },
                {
                  "description": "Moves a Monday.com item to a different group",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-move-item-to-group"
                },
                {
                  "description": "Deletes a Monday.com item",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-delete-item"
                },
                {
                  "description": "Archives a Monday.com item",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-archive-item"
                },
                {
                  "description": "Retrieves updates/comments for a specific item",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-get-item-updates"
                },
                {
                  "description": "Lists documents in Monday.com, optionally filtered by folder",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-get-docs"
                },
                {
                  "description": "Retrieves the content of a specific document",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-get-doc-content"
                },
                {
                  "description": "Creates a new document in Monday.com",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-create-doc"
                },
                {
                  "description": "Adds a block to an existing document",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "monday-add-doc-block"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "scorzeth": {
      "mcpproviderid": "scorzeth",
      "self": "#/mcpproviders/scorzeth",
      "xid": "/mcpproviders/scorzeth",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:59.125162156Z",
      "modifiedat": "2025-05-12T08:17:59.125162156Z",

      "serversurl": "#/mcpproviders/scorzeth/servers",
      "servers": {
        "anki-mcp-server": {
          "serverid": "anki-mcp-server",
          "self": "#/mcpproviders/scorzeth/servers/anki-mcp-server",
          "xid": "/mcpproviders/scorzeth/servers/anki-mcp-server",

          "metaurl": "#/mcpproviders/scorzeth/servers/anki-mcp-server/meta",
          "meta": {
            "serverid": "anki-mcp-server",
            "self": "#/mcpproviders/scorzeth/servers/anki-mcp-server/meta",
            "xid": "/mcpproviders/scorzeth/servers/anki-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:59.125162156Z",
            "modifiedat": "2025-05-12T08:17:59.125162156Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/scorzeth/servers/anki-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/scorzeth/servers/anki-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "anki-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/scorzeth/servers/anki-mcp-server/versions/1",
              "xid": "/mcpproviders/scorzeth/servers/anki-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.scorzeth/anki-mcp-server",
              "isdefault": true,
              "description": "An MCP server implementation that connects to a locally running Anki, providing card review and creation.",
              "createdat": "2025-05-12T08:17:59.125162156Z",
              "modifiedat": "2025-05-12T08:17:59.125162156Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "anki-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "scorzeth/anki-mcp-server",
              "resources": [
                {
                  "description": "Returns all cards from current deck",
                  "mimetype": "application/json",
                  "name": "Current Deck",
                  "uritemplate": "anki://search/deckcurrent"
                },
                {
                  "description": "Returns cards in review and learning waiting to be studied",
                  "mimetype": "application/json",
                  "name": "Due cards",
                  "uritemplate": "anki://search/isdue"
                },
                {
                  "description": "Returns all unseen cards",
                  "mimetype": "application/json",
                  "name": "New cards",
                  "uritemplate": "anki://search/isnew"
                }
              ],
              "tools": [
                {
                  "description": "After the user answers cards you've quizzed them on, use this tool to mark them answered and update their ease",
                  "inputschema": {
                    "properties": {
                      "answers": {
                        "items": {
                          "properties": {
                            "cardId": {
                              "description": "Id of the card to answer",
                              "type": "number"
                            },
                            "ease": {
                              "description": "Ease of the card between 1 (Again) and 4 (Easy)",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "name": "update_cards"
                },
                {
                  "description": "Create a new flashcard in Anki for the user. Must use HTML formatting only. IMPORTANT FORMATTING RULES:\n1. Must use HTML tags for ALL formatting - NO markdown\n2. Use \u003cbr\u003e for ALL line breaks\n3. For code blocks, use \u003cpre\u003e with inline CSS styling\n4. Example formatting:\n   - Line breaks: \u003cbr\u003e\n   - Code: \u003cpre style=\"background-color: transparent; padding: 10px; border-radius: 5px;\"\u003e\n   - Lists: \u003col\u003e and \u003cli\u003e tags\n   - Bold: \u003cstrong\u003e\n   - Italic: \u003cem\u003e",
                  "inputschema": {
                    "properties": {
                      "back": {
                        "description": "The back of the card. Must use HTML formatting only.",
                        "type": "string"
                      },
                      "front": {
                        "description": "The front of the card. Must use HTML formatting only.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "front",
                      "back"
                    ],
                    "type": "object"
                  },
                  "name": "add_card"
                },
                {
                  "description": "Returns a given number (num) of cards due for review.",
                  "inputschema": {
                    "properties": {
                      "num": {
                        "description": "Number of due cards to get",
                        "type": "number"
                      }
                    },
                    "required": [
                      "num"
                    ],
                    "type": "object"
                  },
                  "name": "get_due_cards"
                },
                {
                  "description": "Returns a given number (num) of new and unseen cards.",
                  "inputschema": {
                    "properties": {
                      "num": {
                        "description": "Number of new cards to get",
                        "type": "number"
                      }
                    },
                    "required": [
                      "num"
                    ],
                    "type": "object"
                  },
                  "name": "get_new_cards"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "screenshotone": {
      "mcpproviderid": "screenshotone",
      "self": "#/mcpproviders/screenshotone",
      "xid": "/mcpproviders/screenshotone",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:37.289286518Z",
      "modifiedat": "2025-05-12T08:17:37.289286518Z",

      "serversurl": "#/mcpproviders/screenshotone/servers",
      "servers": {
        "mcp": {
          "serverid": "mcp",
          "self": "#/mcpproviders/screenshotone/servers/mcp",
          "xid": "/mcpproviders/screenshotone/servers/mcp",

          "metaurl": "#/mcpproviders/screenshotone/servers/mcp/meta",
          "meta": {
            "serverid": "mcp",
            "self": "#/mcpproviders/screenshotone/servers/mcp/meta",
            "xid": "/mcpproviders/screenshotone/servers/mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:37.289286518Z",
            "modifiedat": "2025-05-12T08:17:37.289286518Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/screenshotone/servers/mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/screenshotone/servers/mcp/versions",
          "versions": {
            "1": {
              "serverid": "mcp",
              "versionid": "1",
              "self": "#/mcpproviders/screenshotone/servers/mcp/versions/1",
              "xid": "/mcpproviders/screenshotone/servers/mcp/versions/1",
              "epoch": 1,
              "name": "io.github.screenshotone/mcp",
              "isdefault": true,
              "description": "An official implementation of an MCP (Model Context Protocol) server for ScreenshotOne that provides a tool to render a screenshot of a website and returns it as an image.",
              "documentation": "https://screenshotone.com/blog/mcp-server/",
              "createdat": "2025-05-12T08:17:37.289286518Z",
              "modifiedat": "2025-05-12T08:17:37.289286518Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for ScreenshotOne service",
                        "name": "SCREENSHOTONE_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "screenshotone-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "screenshotone/mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Render a screenshot of a website and returns it as an image.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "render-website-screenshot"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "semgrep": {
      "mcpproviderid": "semgrep",
      "self": "#/mcpproviders/semgrep",
      "xid": "/mcpproviders/semgrep",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:07.886383344Z",
      "modifiedat": "2025-05-12T08:18:07.886383344Z",

      "serversurl": "#/mcpproviders/semgrep/servers",
      "servers": {
        "mcp": {
          "serverid": "mcp",
          "self": "#/mcpproviders/semgrep/servers/mcp",
          "xid": "/mcpproviders/semgrep/servers/mcp",

          "metaurl": "#/mcpproviders/semgrep/servers/mcp/meta",
          "meta": {
            "serverid": "mcp",
            "self": "#/mcpproviders/semgrep/servers/mcp/meta",
            "xid": "/mcpproviders/semgrep/servers/mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:07.886383344Z",
            "modifiedat": "2025-05-12T08:18:07.886383344Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/semgrep/servers/mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/semgrep/servers/mcp/versions",
          "versions": {
            "1": {
              "serverid": "mcp",
              "versionid": "1",
              "self": "#/mcpproviders/semgrep/servers/mcp/versions/1",
              "xid": "/mcpproviders/semgrep/servers/mcp/versions/1",
              "epoch": 1,
              "name": "io.github.semgrep/mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for using Semgrep to scan code for security vulnerabilities. Secure your vibe coding! Semgrep is a fast, deterministic static analysis tool that semantically understands many languages and comes with over 5,000 rules.",
              "createdat": "2025-05-12T08:18:07.886383344Z",
              "modifiedat": "2025-05-12T08:18:07.886383344Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-t",
                      "stdio"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "ghcr.io/semgrep/mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "semgrep/mcp",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sendaifun": {
      "mcpproviderid": "sendaifun",
      "self": "#/mcpproviders/sendaifun",
      "xid": "/mcpproviders/sendaifun",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:05.975337538Z",
      "modifiedat": "2025-05-12T08:18:05.975337538Z",

      "serversurl": "#/mcpproviders/sendaifun/servers",
      "servers": {
        "solana-agent-kit": {
          "serverid": "solana-agent-kit",
          "self": "#/mcpproviders/sendaifun/servers/solana-agent-kit",
          "xid": "/mcpproviders/sendaifun/servers/solana-agent-kit",

          "metaurl": "#/mcpproviders/sendaifun/servers/solana-agent-kit/meta",
          "meta": {
            "serverid": "solana-agent-kit",
            "self": "#/mcpproviders/sendaifun/servers/solana-agent-kit/meta",
            "xid": "/mcpproviders/sendaifun/servers/solana-agent-kit/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:05.975337538Z",
            "modifiedat": "2025-05-12T08:18:05.975337538Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sendaifun/servers/solana-agent-kit/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sendaifun/servers/solana-agent-kit/versions",
          "versions": {
            "1": {
              "serverid": "solana-agent-kit",
              "versionid": "1",
              "self": "#/mcpproviders/sendaifun/servers/solana-agent-kit/versions/1",
              "xid": "/mcpproviders/sendaifun/servers/solana-agent-kit/versions/1",
              "epoch": 1,
              "name": "io.github.sendaifun/solana-agent-kit",
              "isdefault": true,
              "description": "An MCP server exposing Solana Agent Kit actions as MCP tools, enabling onchain interaction via Model Context Protocol.",
              "documentation": "https://docs.sendai.fun/v0/introduction",
              "createdat": "2025-05-12T08:18:05.975337538Z",
              "modifiedat": "2025-05-12T08:18:05.975337538Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Groq model access",
                        "name": "GROQ_API_KEY",
                        "required": false
                      },
                      {
                        "description": "API key for OpenAI access",
                        "name": "OPENAI_API_KEY",
                        "required": false
                      },
                      {
                        "description": "Private key for Solana wallet",
                        "name": "SOLANA_PRIVATE_KEY",
                        "required": true
                      },
                      {
                        "description": "RPC URL for Solana network",
                        "name": "RPC_URL",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "solana-agent-kit"
                }
              ],
              "remotes": [],
              "repo_ref": "sendaifun/solana-agent-kit",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sergehuber": {
      "mcpproviderid": "sergehuber",
      "self": "#/mcpproviders/sergehuber",
      "xid": "/mcpproviders/sergehuber",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:08.860994824Z",
      "modifiedat": "2025-05-12T08:18:08.860994824Z",

      "serversurl": "#/mcpproviders/sergehuber/servers",
      "servers": {
        "inoyu-mcp-unomi-server": {
          "serverid": "inoyu-mcp-unomi-server",
          "self": "#/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server",
          "xid": "/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server",

          "metaurl": "#/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server/meta",
          "meta": {
            "serverid": "inoyu-mcp-unomi-server",
            "self": "#/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server/meta",
            "xid": "/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:08.860994824Z",
            "modifiedat": "2025-05-12T08:18:08.860994824Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server/versions",
          "versions": {
            "1": {
              "serverid": "inoyu-mcp-unomi-server",
              "versionid": "1",
              "self": "#/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server/versions/1",
              "xid": "/mcpproviders/sergehuber/servers/inoyu-mcp-unomi-server/versions/1",
              "epoch": 1,
              "name": "io.github.sergehuber/inoyu-mcp-unomi-server",
              "isdefault": true,
              "description": "A Model Context Protocol server enabling Claude to maintain user context through Apache Unomi profile management.",
              "createdat": "2025-05-12T08:18:08.860994824Z",
              "modifiedat": "2025-05-12T08:18:08.860994824Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Base URL of the Apache Unomi server",
                        "name": "UNOMI_BASE_URL",
                        "required": true
                      },
                      {
                        "description": "Username for Apache Unomi authentication (default 'karaf')",
                        "name": "UNOMI_USERNAME",
                        "required": true
                      },
                      {
                        "description": "Password for Apache Unomi authentication (default 'karaf')",
                        "name": "UNOMI_PASSWORD",
                        "required": true
                      },
                      {
                        "description": "Fallback profile ID for Unomi",
                        "name": "UNOMI_PROFILE_ID",
                        "required": true
                      },
                      {
                        "description": "Unomi key for protected events (default '670c26d1cc413346c3b2fd9ce65dab41')",
                        "name": "UNOMI_KEY",
                        "required": true
                      },
                      {
                        "description": "Email address used for profile lookup",
                        "name": "UNOMI_EMAIL",
                        "required": false
                      },
                      {
                        "description": "Source identifier for Claude Desktop",
                        "name": "UNOMI_SOURCE_ID",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "@inoyu/mcp-unomi-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@inoyu/mcp-unomi-server"
                }
              ],
              "remotes": [],
              "repo_ref": "sergehuber/inoyu-mcp-unomi-server",
              "resources": [
                {
                  "description": "List of available Apache Unomi profiles",
                  "mimetype": "application/json",
                  "name": "Unomi Profiles",
                  "uritemplate": "unomi://profiles/list"
                }
              ],
              "tools": [
                {
                  "description": "Create a new Unomi scope",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "description": "Description of the scope",
                        "type": "string"
                      },
                      "name": {
                        "description": "Human-readable name for the scope",
                        "type": "string"
                      },
                      "scope": {
                        "description": "Scope identifier",
                        "type": "string"
                      }
                    },
                    "required": [
                      "scope"
                    ],
                    "type": "object"
                  },
                  "name": "create_scope"
                },
                {
                  "description": "Update properties of your profile using environment-provided ID",
                  "inputschema": {
                    "properties": {
                      "properties": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "number",
                            "boolean",
                            "null"
                          ]
                        },
                        "description": "Key-value pairs of properties to update",
                        "type": "object"
                      }
                    },
                    "required": [
                      "properties"
                    ],
                    "type": "object"
                  },
                  "name": "update_my_profile"
                },
                {
                  "description": "Get your profile using environment-provided IDs",
                  "inputschema": {
                    "properties": {
                      "requireScores": {
                        "description": "Whether to include scores in the response",
                        "type": "boolean"
                      },
                      "requireSegments": {
                        "description": "Whether to include segments in the response",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_my_profile"
                },
                {
                  "description": "Get a specific Unomi profile by ID",
                  "inputschema": {
                    "properties": {
                      "profileId": {
                        "description": "Profile ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "profileId"
                    ],
                    "type": "object"
                  },
                  "name": "get_profile"
                },
                {
                  "description": "Search Unomi profiles",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of results",
                        "type": "number"
                      },
                      "offset": {
                        "description": "Result offset for pagination",
                        "type": "number"
                      },
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_profiles"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "shanejonas": {
      "mcpproviderid": "shanejonas",
      "self": "#/mcpproviders/shanejonas",
      "xid": "/mcpproviders/shanejonas",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:42.511509224Z",
      "modifiedat": "2025-05-12T08:17:42.511509224Z",

      "serversurl": "#/mcpproviders/shanejonas/servers",
      "servers": {
        "openrpc-mpc-server": {
          "serverid": "openrpc-mpc-server",
          "self": "#/mcpproviders/shanejonas/servers/openrpc-mpc-server",
          "xid": "/mcpproviders/shanejonas/servers/openrpc-mpc-server",

          "metaurl": "#/mcpproviders/shanejonas/servers/openrpc-mpc-server/meta",
          "meta": {
            "serverid": "openrpc-mpc-server",
            "self": "#/mcpproviders/shanejonas/servers/openrpc-mpc-server/meta",
            "xid": "/mcpproviders/shanejonas/servers/openrpc-mpc-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:42.511509224Z",
            "modifiedat": "2025-05-12T08:17:42.511509224Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/shanejonas/servers/openrpc-mpc-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/shanejonas/servers/openrpc-mpc-server/versions",
          "versions": {
            "1": {
              "serverid": "openrpc-mpc-server",
              "versionid": "1",
              "self": "#/mcpproviders/shanejonas/servers/openrpc-mpc-server/versions/1",
              "xid": "/mcpproviders/shanejonas/servers/openrpc-mpc-server/versions/1",
              "epoch": 1,
              "name": "io.github.shanejonas/openrpc-mpc-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that provides JSON-RPC functionality through OpenRPC.",
              "createdat": "2025-05-12T08:17:42.511509224Z",
              "modifiedat": "2025-05-12T08:17:42.511509224Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-y",
                      "openrpc-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "openrpc-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "shanejonas/openrpc-mpc-server",
              "resources": [],
              "tools": [
                {
                  "description": "Call any JSON-RPC method on a server with parameters. A user would prompt: Call method \u003cmethod\u003e on \u003cserver url\u003e with params \u003cparams\u003e",
                  "inputschema": {
                    "properties": {
                      "method": {
                        "description": "JSON-RPC method name to call",
                        "type": "string"
                      },
                      "params": {
                        "description": "Stringified Parameters to pass to the method",
                        "type": "string"
                      },
                      "server": {
                        "description": "Server URL",
                        "type": "string"
                      }
                    },
                    "required": [
                      "server",
                      "method"
                    ],
                    "type": "object"
                  },
                  "name": "rpc_call"
                },
                {
                  "description": "This uses JSON-RPC to call `rpc.discover` which is part of the OpenRPC Specification for discovery for JSON-RPC servers. A user would prompt: What JSON-RPC methods does this server have? \u003cserver url\u003e",
                  "inputschema": {
                    "properties": {
                      "server": {
                        "description": "Server URL",
                        "type": "string"
                      }
                    },
                    "required": [
                      "server"
                    ],
                    "type": "object"
                  },
                  "name": "rpc_discover"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "shannonlal": {
      "mcpproviderid": "shannonlal",
      "self": "#/mcpproviders/shannonlal",
      "xid": "/mcpproviders/shannonlal",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:44.943373915Z",
      "modifiedat": "2025-05-12T08:17:44.943373915Z",

      "serversurl": "#/mcpproviders/shannonlal/servers",
      "servers": {
        "mcp-postman": {
          "serverid": "mcp-postman",
          "self": "#/mcpproviders/shannonlal/servers/mcp-postman",
          "xid": "/mcpproviders/shannonlal/servers/mcp-postman",

          "metaurl": "#/mcpproviders/shannonlal/servers/mcp-postman/meta",
          "meta": {
            "serverid": "mcp-postman",
            "self": "#/mcpproviders/shannonlal/servers/mcp-postman/meta",
            "xid": "/mcpproviders/shannonlal/servers/mcp-postman/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:44.943373915Z",
            "modifiedat": "2025-05-12T08:17:44.943373915Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/shannonlal/servers/mcp-postman/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/shannonlal/servers/mcp-postman/versions",
          "versions": {
            "1": {
              "serverid": "mcp-postman",
              "versionid": "1",
              "self": "#/mcpproviders/shannonlal/servers/mcp-postman/versions/1",
              "xid": "/mcpproviders/shannonlal/servers/mcp-postman/versions/1",
              "epoch": 1,
              "name": "io.github.shannonlal/mcp-postman",
              "isdefault": true,
              "description": "An MCP (Model Context Protocol) server that enables running Postman collections using Newman. This server allows LLMs to execute API tests and get detailed results through a standardized interface.",
              "createdat": "2025-05-12T08:17:44.943373915Z",
              "modifiedat": "2025-05-12T08:17:44.943373915Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "/absolute/path/to/mcp-postman/build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@smithery/mcp-postman"
                }
              ],
              "remotes": [],
              "repo_ref": "shannonlal/mcp-postman",
              "resources": [],
              "tools": [
                {
                  "description": "Run a Postman Collection using Newman",
                  "inputschema": {
                    "properties": {
                      "collection": {
                        "description": "Path or URL to the Postman collection",
                        "type": "string"
                      },
                      "environment": {
                        "description": "Optional path or URL to environment file",
                        "type": "string"
                      },
                      "globals": {
                        "description": "Optional path or URL to globals file",
                        "type": "string"
                      },
                      "iterationCount": {
                        "description": "Optional number of iterations to run",
                        "type": "number"
                      }
                    },
                    "required": [
                      "collection"
                    ],
                    "type": "object"
                  },
                  "name": "run-collection"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "singlestore-labs": {
      "mcpproviderid": "singlestore-labs",
      "self": "#/mcpproviders/singlestore-labs",
      "xid": "/mcpproviders/singlestore-labs",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:39.003819234Z",
      "modifiedat": "2025-05-12T08:20:39.003819234Z",

      "serversurl": "#/mcpproviders/singlestore-labs/servers",
      "servers": {
        "mcp-server-singlestore": {
          "serverid": "mcp-server-singlestore",
          "self": "#/mcpproviders/singlestore-labs/servers/mcp-server-singlestore",
          "xid": "/mcpproviders/singlestore-labs/servers/mcp-server-singlestore",

          "metaurl": "#/mcpproviders/singlestore-labs/servers/mcp-server-singlestore/meta",
          "meta": {
            "serverid": "mcp-server-singlestore",
            "self": "#/mcpproviders/singlestore-labs/servers/mcp-server-singlestore/meta",
            "xid": "/mcpproviders/singlestore-labs/servers/mcp-server-singlestore/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:39.003819234Z",
            "modifiedat": "2025-05-12T08:20:39.003819234Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/singlestore-labs/servers/mcp-server-singlestore/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/singlestore-labs/servers/mcp-server-singlestore/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-singlestore",
              "versionid": "1",
              "self": "#/mcpproviders/singlestore-labs/servers/mcp-server-singlestore/versions/1",
              "xid": "/mcpproviders/singlestore-labs/servers/mcp-server-singlestore/versions/1",
              "epoch": 1,
              "name": "io.github.singlestore-labs/mcp-server-singlestore",
              "isdefault": true,
              "description": "MCP server for SingleStore enabling integration with LLM clients like Claude Desktop and Cursor to perform operations using natural language.",
              "createdat": "2025-05-12T08:20:39.003819234Z",
              "modifiedat": "2025-05-12T08:20:39.003819234Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "singlestore-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "singlestore-labs/mcp-server-singlestore",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve details about the workspace groups accessible to the user",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "workspace_groups_info"
                },
                {
                  "description": "Retrieve details about the workspaces in a specific workspace group",
                  "inputschema": {
                    "properties": {
                      "workspaceGroupID": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "workspaceGroupID"
                    ],
                    "type": "object"
                  },
                  "name": "workspaces_info"
                },
                {
                  "description": "Retrieve details about the user's current organization",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "organization_info"
                },
                {
                  "description": "Retrieve a list of all regions that support workspaces for the user",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_of_regions"
                },
                {
                  "description": "Execute SQL operations on a connected workspace",
                  "inputschema": {
                    "properties": {
                      "database": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      },
                      "sql_query": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      },
                      "workspace_group_identifier": {
                        "type": "string"
                      },
                      "workspace_identifier": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "workspace_group_identifier",
                      "workspace_identifier",
                      "username",
                      "password",
                      "database",
                      "sql_query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_sql"
                },
                {
                  "description": "List all starter workspaces accessible to the user",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_virtual_workspaces"
                },
                {
                  "description": "Create a new starter workspace",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "create_virtual_workspace"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sirmews": {
      "mcpproviderid": "sirmews",
      "self": "#/mcpproviders/sirmews",
      "xid": "/mcpproviders/sirmews",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:02.748375727Z",
      "modifiedat": "2025-05-12T08:18:02.748375727Z",

      "serversurl": "#/mcpproviders/sirmews/servers",
      "servers": {
        "mcp-pinecone": {
          "serverid": "mcp-pinecone",
          "self": "#/mcpproviders/sirmews/servers/mcp-pinecone",
          "xid": "/mcpproviders/sirmews/servers/mcp-pinecone",

          "metaurl": "#/mcpproviders/sirmews/servers/mcp-pinecone/meta",
          "meta": {
            "serverid": "mcp-pinecone",
            "self": "#/mcpproviders/sirmews/servers/mcp-pinecone/meta",
            "xid": "/mcpproviders/sirmews/servers/mcp-pinecone/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:02.748375727Z",
            "modifiedat": "2025-05-12T08:18:02.748375727Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sirmews/servers/mcp-pinecone/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sirmews/servers/mcp-pinecone/versions",
          "versions": {
            "1": {
              "serverid": "mcp-pinecone",
              "versionid": "1",
              "self": "#/mcpproviders/sirmews/servers/mcp-pinecone/versions/1",
              "xid": "/mcpproviders/sirmews/servers/mcp-pinecone/versions/1",
              "epoch": 1,
              "name": "io.github.sirmews/mcp-pinecone",
              "isdefault": true,
              "description": "Pinecone Model Context Protocol Server for Claude Desktop. Implements reading and writing to a Pinecone index with tools for semantic search, document processing, and stats.",
              "createdat": "2025-05-12T08:18:02.748375727Z",
              "modifiedat": "2025-05-12T08:18:02.748375727Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "The question to answer, or the context to search for",
                      "name": "query",
                      "required": true
                    }
                  ],
                  "description": "Search Pinecone index and construct an answer based on relevant pinecone documents",
                  "name": "pinecone-query"
                },
                {
                  "arguments": [
                    {
                      "description": "The content to store as a Pinecone document",
                      "name": "content",
                      "required": true
                    },
                    {
                      "description": "The namespace to store the document in",
                      "name": "namespace",
                      "required": false
                    }
                  ],
                  "description": "Store content as document in Pinecone",
                  "name": "pinecone-store"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--directory",
                      "{project_dir}",
                      "run",
                      "mcp-pinecone"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-pinecone"
                }
              ],
              "remotes": [],
              "repo_ref": "sirmews/mcp-pinecone",
              "resources": [
                {
                  "description": "Vector resource identified by vector ID in Pinecone index",
                  "mimetype": "text/plain",
                  "name": "Pinecone Vector",
                  "uritemplate": "pinecone://vectors/{id}"
                }
              ],
              "tools": [
                {
                  "description": "Search pinecone for documents",
                  "inputschema": {
                    "properties": {
                      "category": {
                        "type": "string"
                      },
                      "date_range": {
                        "properties": {
                          "end": {
                            "format": "date",
                            "type": "string"
                          },
                          "start": {
                            "format": "date",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "namespace": {
                        "description": "Optional namespace to search in",
                        "type": "string"
                      },
                      "query": {
                        "type": "string"
                      },
                      "tags": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "top_k": {
                        "default": 10,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "semantic-search"
                },
                {
                  "description": "Read a document from pinecone",
                  "inputschema": {
                    "properties": {
                      "document_id": {
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Optional namespace to read from",
                        "type": "string"
                      }
                    },
                    "required": [
                      "document_id"
                    ],
                    "type": "object"
                  },
                  "name": "read-document"
                },
                {
                  "description": "Process a document. This will optionally chunk, then embed, and upsert the document into pinecone.",
                  "inputschema": {
                    "properties": {
                      "document_id": {
                        "type": "string"
                      },
                      "metadata": {
                        "type": "object"
                      },
                      "namespace": {
                        "description": "Optional namespace to store the document in",
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "document_id",
                      "text",
                      "metadata"
                    ],
                    "type": "object"
                  },
                  "name": "process-document"
                },
                {
                  "description": "List all documents in the knowledge base by namespace",
                  "inputschema": {
                    "properties": {
                      "namespace": {
                        "description": "Namespace to list documents in",
                        "type": "string"
                      }
                    },
                    "required": [
                      "namespace"
                    ],
                    "type": "object"
                  },
                  "name": "list-documents"
                },
                {
                  "description": "Get stats about the Pinecone index specified in this server",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "pinecone-stats"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "skydeckai": {
      "mcpproviderid": "skydeckai",
      "self": "#/mcpproviders/skydeckai",
      "xid": "/mcpproviders/skydeckai",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:46.085206552Z",
      "modifiedat": "2025-05-12T08:17:46.085206552Z",

      "serversurl": "#/mcpproviders/skydeckai/servers",
      "servers": {
        "mcp-server-rememberizer": {
          "serverid": "mcp-server-rememberizer",
          "self": "#/mcpproviders/skydeckai/servers/mcp-server-rememberizer",
          "xid": "/mcpproviders/skydeckai/servers/mcp-server-rememberizer",

          "metaurl": "#/mcpproviders/skydeckai/servers/mcp-server-rememberizer/meta",
          "meta": {
            "serverid": "mcp-server-rememberizer",
            "self": "#/mcpproviders/skydeckai/servers/mcp-server-rememberizer/meta",
            "xid": "/mcpproviders/skydeckai/servers/mcp-server-rememberizer/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:46.085206552Z",
            "modifiedat": "2025-05-12T08:17:46.085206552Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/skydeckai/servers/mcp-server-rememberizer/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/skydeckai/servers/mcp-server-rememberizer/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-rememberizer",
              "versionid": "1",
              "self": "#/mcpproviders/skydeckai/servers/mcp-server-rememberizer/versions/1",
              "xid": "/mcpproviders/skydeckai/servers/mcp-server-rememberizer/versions/1",
              "epoch": 1,
              "name": "io.github.skydeckai/mcp-server-rememberizer",
              "isdefault": true,
              "description": "A Model Context Protocol server for interacting with Rememberizer's document and knowledge management API. This server enables Large Language Models to search, retrieve, and manage documents and integrations through Rememberizer.",
              "createdat": "2025-05-12T08:17:46.085206552Z",
              "modifiedat": "2025-05-12T08:17:46.085206552Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API token for Rememberizer.ai",
                        "name": "REMEMBERIZER_API_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp-server-rememberizer"
                }
              ],
              "remotes": [],
              "repo_ref": "skydeckai/mcp-server-rememberizer",
              "resources": [
                {
                  "description": "Documents resource accessible by document ID.",
                  "mimetype": "text/json",
                  "name": "Documents",
                  "uritemplate": "document/{id}"
                },
                {
                  "description": "Slack discussions resource accessible by Slack discussion ID.",
                  "mimetype": "text/json",
                  "name": "Slack discussions",
                  "uritemplate": "slack/{id}"
                }
              ],
              "tools": [
                {
                  "description": "Get information about your Rememberizer.ai personal/team knowledge repository account. This includes account holder name and email address.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "rememberizer_account_information"
                },
                {
                  "description": "Send a block of text and retrieve cosine similar matches from your connected Rememberizer personal/team internal knowledge and memory repository.",
                  "inputschema": {
                    "properties": {
                      "from_datetime_ISO8601": {
                        "description": "Start date in ISO 8601 format with timezone (e.g., 2023-01-01T00:00:00Z). Use this to filter results from a specific date.",
                        "type": "string"
                      },
                      "match_this": {
                        "description": "Up to a 400-word sentence for which you wish to find semantically similar chunks of knowledge.",
                        "type": "string"
                      },
                      "n_results": {
                        "description": "Number of semantically similar chunks of text to return. Use 'n_results=3' for up to 5, and 'n_results=10' for more information. If you do not receive enough information, consider trying again with a larger 'n_results' value.",
                        "type": "integer"
                      },
                      "to_datetime_ISO8601": {
                        "description": "End date in ISO 8601 format with timezone (e.g., 2024-01-01T00:00:00Z). Use this to filter results until a specific date.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "match_this"
                    ],
                    "type": "object"
                  },
                  "name": "retrieve_semantically_similar_internal_knowledge"
                },
                {
                  "description": "Search for documents in Rememberizer in its personal/team internal knowledge and memory repository using a simple query that returns the results of an agentic search. The search may include sources such as Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files. Consider using the tool list_internal_knowledge_systems to find out which are available. Use the tool list_internal_knowledge_systems to find out which sources are available. You can specify a from_datetime_ISO8601 and a to_datetime_ISO8601, and you should look at the context of your request to make sure you put reasonable parameters around this by, for example, converting a reference to recently to a start date two weeks before today, or converting yesterday to a timeframe during the last day. But do be aware of the effect of time zone differences in the source data and for the requestor.",
                  "inputschema": {
                    "properties": {
                      "from_datetime_ISO8601": {
                        "description": "Start date in ISO 8601 format with timezone (e.g., 2023-01-01T00:00:00Z). Use this to filter results from a specific date.",
                        "type": "string"
                      },
                      "n_results": {
                        "description": "Number of semantically similar chunks of text to return. Use 'n_results=3' for up to 5, and 'n_results=10' for more information. If you do not receive enough information, consider trying again with a larger 'n_results' value.",
                        "type": "integer"
                      },
                      "query": {
                        "description": "Up to a 400-word sentence for which you wish to find semantically similar chunks of knowledge.",
                        "type": "string"
                      },
                      "to_datetime_ISO8601": {
                        "description": "End date in ISO 8601 format with timezone (e.g., 2024-01-01T00:00:00Z). Use this to filter results until a specific date.",
                        "type": "string"
                      },
                      "user_context": {
                        "description": "The additional context for the query. You might need to summarize the conversation up to this point for better context-awared results.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "smart_search_internal_knowledge"
                },
                {
                  "description": "List the sources of personal/team internal knowledge. These may include Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_internal_knowledge_systems"
                },
                {
                  "description": "Retrieves a paginated list of all documents in your personal/team knowledge system. Sources could include Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files. Consider using the tool list_internal_knowledge_systems to find out which are available. Use this tool to browse through available documents and their metadata. Examples: - List first 100 documents: {\"page\": 1, \"page_size\": 100} - Get next page: {\"page\": 2, \"page_size\": 100} - Get maximum allowed documents: {\"page\": 1, \"page_size\": 1000}.",
                  "inputschema": {
                    "properties": {
                      "page": {
                        "default": 1,
                        "description": "Page number for pagination (starts at 1)",
                        "minimum": 1,
                        "type": "integer"
                      },
                      "page_size": {
                        "default": 100,
                        "description": "Number of documents per page (1-1000)",
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_personal_team_knowledge_documents"
                },
                {
                  "description": "Save a piece of text information in your Rememberizer.ai knowledge system so that it may be recalled in future through tools retrieve_semantically_similar_internal_knowledge or smart_search_internal_knowledge.",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "The information you wish to memorize.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the information. This is used to identify the information in the future.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "remember_this"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "smithery-ai": {
      "mcpproviderid": "smithery-ai",
      "self": "#/mcpproviders/smithery-ai",
      "xid": "/mcpproviders/smithery-ai",
      "epoch": 1,
      "createdat": "2025-05-12T08:21:53.21629387Z",
      "modifiedat": "2025-05-12T08:21:53.21629387Z",

      "serversurl": "#/mcpproviders/smithery-ai/servers",
      "servers": {
        "mcp-obsidian": {
          "serverid": "mcp-obsidian",
          "self": "#/mcpproviders/smithery-ai/servers/mcp-obsidian",
          "xid": "/mcpproviders/smithery-ai/servers/mcp-obsidian",

          "metaurl": "#/mcpproviders/smithery-ai/servers/mcp-obsidian/meta",
          "meta": {
            "serverid": "mcp-obsidian",
            "self": "#/mcpproviders/smithery-ai/servers/mcp-obsidian/meta",
            "xid": "/mcpproviders/smithery-ai/servers/mcp-obsidian/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:53.21629387Z",
            "modifiedat": "2025-05-12T08:21:53.21629387Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/smithery-ai/servers/mcp-obsidian/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/smithery-ai/servers/mcp-obsidian/versions",
          "versions": {
            "1": {
              "serverid": "mcp-obsidian",
              "versionid": "1",
              "self": "#/mcpproviders/smithery-ai/servers/mcp-obsidian/versions/1",
              "xid": "/mcpproviders/smithery-ai/servers/mcp-obsidian/versions/1",
              "epoch": 1,
              "name": "io.github.smithery-ai/mcp-obsidian",
              "isdefault": true,
              "description": "Connector to allow Claude Desktop (or any MCP client) to read and search any directory containing Markdown notes (such as an Obsidian vault).",
              "createdat": "2025-05-12T08:21:53.21629387Z",
              "modifiedat": "2025-05-12T08:21:53.21629387Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "-y",
                      "mcp-obsidian",
                      "${input:vaultPath}"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-obsidian"
                }
              ],
              "remotes": [],
              "repo_ref": "smithery-ai/mcp-obsidian",
              "resources": [],
              "tools": [
                {
                  "description": "Read the contents of multiple notes. Each note's content is returned with its path as a reference. Failed reads for individual notes won't stop the entire operation. Reading too many at once may result in an error.",
                  "inputschema": {
                    "properties": {
                      "paths": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "paths"
                    ],
                    "type": "object"
                  },
                  "name": "read_notes"
                },
                {
                  "description": "Searches for a note by its name. The search is case-insensitive and matches partial names. Queries can also be a valid regex. Returns paths of the notes that match the query.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_notes"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "smn2gnt": {
      "mcpproviderid": "smn2gnt",
      "self": "#/mcpproviders/smn2gnt",
      "xid": "/mcpproviders/smn2gnt",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:40.526787212Z",
      "modifiedat": "2025-05-12T08:17:40.526787212Z",

      "serversurl": "#/mcpproviders/smn2gnt/servers",
      "servers": {
        "MCP-Salesforce": {
          "serverid": "MCP-Salesforce",
          "self": "#/mcpproviders/smn2gnt/servers/MCP-Salesforce",
          "xid": "/mcpproviders/smn2gnt/servers/MCP-Salesforce",

          "metaurl": "#/mcpproviders/smn2gnt/servers/MCP-Salesforce/meta",
          "meta": {
            "serverid": "MCP-Salesforce",
            "self": "#/mcpproviders/smn2gnt/servers/MCP-Salesforce/meta",
            "xid": "/mcpproviders/smn2gnt/servers/MCP-Salesforce/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:40.526787212Z",
            "modifiedat": "2025-05-12T08:17:40.526787212Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/smn2gnt/servers/MCP-Salesforce/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/smn2gnt/servers/MCP-Salesforce/versions",
          "versions": {
            "1": {
              "serverid": "MCP-Salesforce",
              "versionid": "1",
              "self": "#/mcpproviders/smn2gnt/servers/MCP-Salesforce/versions/1",
              "xid": "/mcpproviders/smn2gnt/servers/MCP-Salesforce/versions/1",
              "epoch": 1,
              "name": "io.github.smn2gnt/MCP-Salesforce",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation for Salesforce integration, allowing LLMs to interact with Salesforce data through SOQL queries and SOSL searches.",
              "createdat": "2025-05-12T08:17:40.526787212Z",
              "modifiedat": "2025-05-12T08:17:40.526787212Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "SALESFORCE_USERNAME"
                      },
                      {
                        "name": "SALESFORCE_PASSWORD"
                      },
                      {
                        "name": "SALESFORCE_SECURITY_TOKEN"
                      }
                    ],
                    "positional_arguments": [
                      "--from",
                      "mcp-salesforce-connector",
                      "salesforce"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "unknown",
                  "package_name": "mcp-salesforce-connector"
                }
              ],
              "remotes": [],
              "repo_ref": "smn2gnt/MCP-Salesforce",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sooperset": {
      "mcpproviderid": "sooperset",
      "self": "#/mcpproviders/sooperset",
      "xid": "/mcpproviders/sooperset",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:39.678412302Z",
      "modifiedat": "2025-05-12T08:17:39.678412302Z",

      "serversurl": "#/mcpproviders/sooperset/servers",
      "servers": {
        "mcp-atlassian": {
          "serverid": "mcp-atlassian",
          "self": "#/mcpproviders/sooperset/servers/mcp-atlassian",
          "xid": "/mcpproviders/sooperset/servers/mcp-atlassian",

          "metaurl": "#/mcpproviders/sooperset/servers/mcp-atlassian/meta",
          "meta": {
            "serverid": "mcp-atlassian",
            "self": "#/mcpproviders/sooperset/servers/mcp-atlassian/meta",
            "xid": "/mcpproviders/sooperset/servers/mcp-atlassian/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:39.678412302Z",
            "modifiedat": "2025-05-12T08:17:39.678412302Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sooperset/servers/mcp-atlassian/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sooperset/servers/mcp-atlassian/versions",
          "versions": {
            "1": {
              "serverid": "mcp-atlassian",
              "versionid": "1",
              "self": "#/mcpproviders/sooperset/servers/mcp-atlassian/versions/1",
              "xid": "/mcpproviders/sooperset/servers/mcp-atlassian/versions/1",
              "epoch": 1,
              "name": "io.github.sooperset/mcp-atlassian",
              "isdefault": true,
              "description": "Model Context Protocol (MCP) server for Atlassian products (Confluence and Jira). This integration supports both Confluence \u0026 Jira Cloud and Server/Data Center deployments.",
              "createdat": "2025-05-12T08:17:39.678412302Z",
              "modifiedat": "2025-05-12T08:17:39.678412302Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "ghcr.io/sooperset/mcp-atlassian:latest"
                }
              ],
              "remotes": [],
              "repo_ref": "sooperset/mcp-atlassian",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sparfenyuk": {
      "mcpproviderid": "sparfenyuk",
      "self": "#/mcpproviders/sparfenyuk",
      "xid": "/mcpproviders/sparfenyuk",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:47.36416303Z",
      "modifiedat": "2025-05-12T08:17:47.36416303Z",

      "serversurl": "#/mcpproviders/sparfenyuk/servers",
      "servers": {
        "mcp-proxy": {
          "serverid": "mcp-proxy",
          "self": "#/mcpproviders/sparfenyuk/servers/mcp-proxy",
          "xid": "/mcpproviders/sparfenyuk/servers/mcp-proxy",

          "metaurl": "#/mcpproviders/sparfenyuk/servers/mcp-proxy/meta",
          "meta": {
            "serverid": "mcp-proxy",
            "self": "#/mcpproviders/sparfenyuk/servers/mcp-proxy/meta",
            "xid": "/mcpproviders/sparfenyuk/servers/mcp-proxy/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:47.36416303Z",
            "modifiedat": "2025-05-12T08:17:47.36416303Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sparfenyuk/servers/mcp-proxy/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sparfenyuk/servers/mcp-proxy/versions",
          "versions": {
            "1": {
              "serverid": "mcp-proxy",
              "versionid": "1",
              "self": "#/mcpproviders/sparfenyuk/servers/mcp-proxy/versions/1",
              "xid": "/mcpproviders/sparfenyuk/servers/mcp-proxy/versions/1",
              "epoch": 1,
              "name": "io.github.sparfenyuk/mcp-proxy",
              "isdefault": true,
              "description": "The mcp-proxy is a tool that lets you switch between server transports. It supports proxying MCP server requests between stdio and SSE transports, enabling clients like Claude Desktop to communicate with MCP servers over SSE or stdio.",
              "createdat": "2025-05-12T08:17:47.36416303Z",
              "modifiedat": "2025-05-12T08:17:47.36416303Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Access token for authorization header",
                        "name": "API_ACCESS_TOKEN",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "sparfenyuk/mcp-proxy:latest"
                },
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Access token for authorization header",
                        "name": "API_ACCESS_TOKEN",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp-proxy"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://example.io/sse"
                }
              ],
              "repo_ref": "sparfenyuk/mcp-proxy",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "starwind-ui": {
      "mcpproviderid": "starwind-ui",
      "self": "#/mcpproviders/starwind-ui",
      "xid": "/mcpproviders/starwind-ui",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:32.237218015Z",
      "modifiedat": "2025-05-12T08:20:32.237218015Z",

      "serversurl": "#/mcpproviders/starwind-ui/servers",
      "servers": {
        "starwind-ui-mcp": {
          "serverid": "starwind-ui-mcp",
          "self": "#/mcpproviders/starwind-ui/servers/starwind-ui-mcp",
          "xid": "/mcpproviders/starwind-ui/servers/starwind-ui-mcp",

          "metaurl": "#/mcpproviders/starwind-ui/servers/starwind-ui-mcp/meta",
          "meta": {
            "serverid": "starwind-ui-mcp",
            "self": "#/mcpproviders/starwind-ui/servers/starwind-ui-mcp/meta",
            "xid": "/mcpproviders/starwind-ui/servers/starwind-ui-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:32.237218015Z",
            "modifiedat": "2025-05-12T08:20:32.237218015Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/starwind-ui/servers/starwind-ui-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/starwind-ui/servers/starwind-ui-mcp/versions",
          "versions": {
            "1": {
              "serverid": "starwind-ui-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/starwind-ui/servers/starwind-ui-mcp/versions/1",
              "xid": "/mcpproviders/starwind-ui/servers/starwind-ui-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.starwind-ui/starwind-ui-mcp",
              "isdefault": true,
              "description": "A TypeScript implementation of a Model Context Protocol (MCP) server for Starwind UI, providing tools to help developers work with Starwind UI components.",
              "createdat": "2025-05-12T08:20:32.237218015Z",
              "modifiedat": "2025-05-12T08:20:32.237218015Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "dist/server.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "starwind-ui/starwind-ui-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Initializes a new Starwind UI project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "init_project"
                },
                {
                  "description": "Generates installation commands for Starwind UI components",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "install_component"
                },
                {
                  "description": "Generates update commands for Starwind UI components",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_component"
                },
                {
                  "description": "Returns documentation links for Starwind UI components and guides",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_documentation"
                },
                {
                  "description": "Fetches LLM data from starwind.dev (rate limited, with caching)",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "fetch_llm_data"
                },
                {
                  "description": "Detects and returns the current package manager information",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_package_manager"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "stefanoamorelli": {
      "mcpproviderid": "stefanoamorelli",
      "self": "#/mcpproviders/stefanoamorelli",
      "xid": "/mcpproviders/stefanoamorelli",
      "epoch": 2,
      "createdat": "2025-05-12T08:21:46.726263083Z",
      "modifiedat": "2025-05-12T08:21:48.86109871Z",

      "serversurl": "#/mcpproviders/stefanoamorelli/servers",
      "servers": {
        "nasdaq-data-link-mcp": {
          "serverid": "nasdaq-data-link-mcp",
          "self": "#/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp",
          "xid": "/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp",

          "metaurl": "#/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp/meta",
          "meta": {
            "serverid": "nasdaq-data-link-mcp",
            "self": "#/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp/meta",
            "xid": "/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:48.86109871Z",
            "modifiedat": "2025-05-12T08:21:48.86109871Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp/versions",
          "versions": {
            "1": {
              "serverid": "nasdaq-data-link-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp/versions/1",
              "xid": "/mcpproviders/stefanoamorelli/servers/nasdaq-data-link-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.stefanoamorelli/nasdaq-data-link-mcp",
              "isdefault": true,
              "description": "A community developed and maintained Model Context Protocol (MCP) server that provides access to Nasdaq Data Link financial and economic datasets through natural language interfaces and large language models.",
              "createdat": "2025-05-12T08:21:48.86109871Z",
              "modifiedat": "2025-05-12T08:21:48.86109871Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [],
              "remotes": [],
              "repo_ref": "stefanoamorelli/nasdaq-data-link-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieves indicator values from World Bank dataset.",
                  "inputschema": {
                    "properties": {
                      "country": {
                        "type": "string"
                      },
                      "indicator": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "country",
                      "indicator"
                    ],
                    "type": "object"
                  },
                  "name": "get_indicator_value"
                },
                {
                  "description": "Returns country code for a given country name.",
                  "inputschema": {
                    "properties": {
                      "countryName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "countryName"
                    ],
                    "type": "object"
                  },
                  "name": "country_code"
                },
                {
                  "description": "Lists all available World Bank indicators.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_worldbank_indicators"
                },
                {
                  "description": "Searches World Bank indicators by keyword.",
                  "inputschema": {
                    "properties": {
                      "keyword": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "keyword"
                    ],
                    "type": "object"
                  },
                  "name": "search_worldbank_indicators"
                },
                {
                  "description": "Retrieves Retail Trading Activity Tracker 10 (RTAT10) data for specific dates and optional tickers.",
                  "inputschema": {
                    "properties": {
                      "dates": {
                        "type": "string"
                      },
                      "tickers": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "dates"
                    ],
                    "type": "object"
                  },
                  "name": "get_rtat10"
                },
                {
                  "description": "Retrieves Retail Trading Activity (RTAT) data for specific dates and optional tickers.",
                  "inputschema": {
                    "properties": {
                      "dates": {
                        "type": "string"
                      },
                      "tickers": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "dates"
                    ],
                    "type": "object"
                  },
                  "name": "get_rtat"
                },
                {
                  "description": "Retrieves company statistics from Nasdaq Equities 360 database.",
                  "inputschema": {
                    "properties": {
                      "figi": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_stock_stats"
                },
                {
                  "description": "Lists all available fields in the stock statistics database with descriptions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_stock_stat_fields"
                },
                {
                  "description": "Retrieves fundamental financial data from Nasdaq Equities 360 Fundamental Summary database.",
                  "inputschema": {
                    "properties": {
                      "calendardate": {
                        "type": "string"
                      },
                      "dimension": {
                        "type": "string"
                      },
                      "figi": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_fundamental_data"
                },
                {
                  "description": "Lists all available fields in the fundamental summary database with descriptions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_fundamental_fields"
                },
                {
                  "description": "Retrieves detailed financial data from Nasdaq Equities 360 Fundamental Details database.",
                  "inputschema": {
                    "properties": {
                      "calendardate": {
                        "type": "string"
                      },
                      "dimension": {
                        "type": "string"
                      },
                      "figi": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_detailed_financials"
                },
                {
                  "description": "Lists all available fields in the fundamental details database with descriptions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_detailed_financial_fields"
                },
                {
                  "description": "Retrieves balance sheet data from Nasdaq Equities 360 Balance Sheet database.",
                  "inputschema": {
                    "properties": {
                      "calendardate": {
                        "type": "string"
                      },
                      "dimension": {
                        "type": "string"
                      },
                      "figi": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_balance_sheet_data"
                },
                {
                  "description": "Lists all available fields in the balance sheet database with descriptions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_balance_sheet_fields"
                },
                {
                  "description": "Retrieves cash flow statement data from Nasdaq Equities 360 Cash Flow database.",
                  "inputschema": {
                    "properties": {
                      "calendardate": {
                        "type": "string"
                      },
                      "dimension": {
                        "type": "string"
                      },
                      "figi": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_cash_flow_data"
                },
                {
                  "description": "Lists all available fields in the cash flow statement database with descriptions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_cash_flow_fields"
                },
                {
                  "description": "Retrieves corporate actions data from Nasdaq Equities 360 Corporate Actions database.",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string"
                      },
                      "figi": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_corporate_action_data"
                },
                {
                  "description": "Lists all available fields in the corporate actions database with descriptions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_corporate_action_fields"
                },
                {
                  "description": "Retrieves company reference data from Nasdaq Equities 360 Reference Data database.",
                  "inputschema": {
                    "properties": {
                      "figi": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_company_reference_data"
                },
                {
                  "description": "Lists all available fields in the company reference database with descriptions.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_reference_data_fields"
                },
                {
                  "description": "Retrieves Trade Summary data from Nasdaq Data Link NDAQ/TS datatable.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_trade_summary_data"
                }
              ],
              "version_detail": {
                "version": "0.1.2"
              }
            }
          },
          "versionscount": 1
        },
        "sec-edgar-mcp": {
          "serverid": "sec-edgar-mcp",
          "self": "#/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp",
          "xid": "/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp",

          "metaurl": "#/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp/meta",
          "meta": {
            "serverid": "sec-edgar-mcp",
            "self": "#/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp/meta",
            "xid": "/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:21:46.726263083Z",
            "modifiedat": "2025-05-12T08:21:46.726263083Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp/versions",
          "versions": {
            "1": {
              "serverid": "sec-edgar-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp/versions/1",
              "xid": "/mcpproviders/stefanoamorelli/servers/sec-edgar-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.stefanoamorelli/sec-edgar-mcp",
              "isdefault": true,
              "description": "SEC EDGAR MCP is an open-source MCP server that connects AI models to the rich dataset of SEC EDGAR filings, enabling AI assistants to query official SEC financial data in real-time.",
              "createdat": "2025-05-12T08:21:46.726263083Z",
              "modifiedat": "2025-05-12T08:21:46.726263083Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "User-Agent string required by SEC EDGAR API",
                        "name": "SEC_API_USER_AGENT",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "sec-edgar-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "stefanoamorelli/sec-edgar-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Fetches submissions (filings) for a given company CIK.",
                  "inputschema": {
                    "properties": {
                      "cik": {
                        "description": "Central Index Key of the company",
                        "type": "string"
                      }
                    },
                    "required": [
                      "cik"
                    ],
                    "type": "object"
                  },
                  "name": "get_submissions"
                },
                {
                  "description": "Fetches specific financial concepts for a company.",
                  "inputschema": {
                    "properties": {
                      "cik": {
                        "description": "Central Index Key of the company",
                        "type": "string"
                      },
                      "concept": {
                        "description": "Financial concept to retrieve",
                        "type": "string"
                      }
                    },
                    "required": [
                      "cik",
                      "concept"
                    ],
                    "type": "object"
                  },
                  "name": "get_company_concepts"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "stippi": {
      "mcpproviderid": "stippi",
      "self": "#/mcpproviders/stippi",
      "xid": "/mcpproviders/stippi",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:49.241202835Z",
      "modifiedat": "2025-05-12T08:18:49.241202835Z",

      "serversurl": "#/mcpproviders/stippi/servers",
      "servers": {
        "code-assistant": {
          "serverid": "code-assistant",
          "self": "#/mcpproviders/stippi/servers/code-assistant",
          "xid": "/mcpproviders/stippi/servers/code-assistant",

          "metaurl": "#/mcpproviders/stippi/servers/code-assistant/meta",
          "meta": {
            "serverid": "code-assistant",
            "self": "#/mcpproviders/stippi/servers/code-assistant/meta",
            "xid": "/mcpproviders/stippi/servers/code-assistant/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:49.241202835Z",
            "modifiedat": "2025-05-12T08:18:49.241202835Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/stippi/servers/code-assistant/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/stippi/servers/code-assistant/versions",
          "versions": {
            "1": {
              "serverid": "code-assistant",
              "versionid": "1",
              "self": "#/mcpproviders/stippi/servers/code-assistant/versions/1",
              "xid": "/mcpproviders/stippi/servers/code-assistant/versions/1",
              "epoch": 1,
              "name": "io.github.stippi/code-assistant",
              "isdefault": true,
              "description": "A CLI tool built in Rust for assisting with code-related tasks, capable of running as a Model Context Protocol server providing tools and resources to LLMs running in an MCP client.",
              "createdat": "2025-05-12T08:18:49.241202835Z",
              "modifiedat": "2025-05-12T08:18:49.241202835Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "optional, enables perplexity_ask tool",
                        "name": "PERPLEXITY_API_KEY",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "rust",
                  "package_name": "code-assistant"
                }
              ],
              "remotes": [],
              "repo_ref": "stippi/code-assistant",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "stripe": {
      "mcpproviderid": "stripe",
      "self": "#/mcpproviders/stripe",
      "xid": "/mcpproviders/stripe",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:27.306495835Z",
      "modifiedat": "2025-05-12T08:20:27.306495835Z",

      "serversurl": "#/mcpproviders/stripe/servers",
      "servers": {
        "agent-toolkit": {
          "serverid": "agent-toolkit",
          "self": "#/mcpproviders/stripe/servers/agent-toolkit",
          "xid": "/mcpproviders/stripe/servers/agent-toolkit",

          "metaurl": "#/mcpproviders/stripe/servers/agent-toolkit/meta",
          "meta": {
            "serverid": "agent-toolkit",
            "self": "#/mcpproviders/stripe/servers/agent-toolkit/meta",
            "xid": "/mcpproviders/stripe/servers/agent-toolkit/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:27.306495835Z",
            "modifiedat": "2025-05-12T08:20:27.306495835Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/stripe/servers/agent-toolkit/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/stripe/servers/agent-toolkit/versions",
          "versions": {
            "1": {
              "serverid": "agent-toolkit",
              "versionid": "1",
              "self": "#/mcpproviders/stripe/servers/agent-toolkit/versions/1",
              "xid": "/mcpproviders/stripe/servers/agent-toolkit/versions/1",
              "epoch": 1,
              "name": "io.github.stripe/agent-toolkit",
              "isdefault": true,
              "description": "Enables integration with Stripe APIs through function calling, supporting multiple agent frameworks including Model Context Protocol (MCP).",
              "createdat": "2025-05-12T08:20:27.306495835Z",
              "modifiedat": "2025-05-12T08:20:27.306495835Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [],
              "remotes": [],
              "repo_ref": "stripe/agent-toolkit",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.4.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "strowk": {
      "mcpproviderid": "strowk",
      "self": "#/mcpproviders/strowk",
      "xid": "/mcpproviders/strowk",
      "epoch": 2,
      "createdat": "2025-05-12T08:18:10.623237811Z",
      "modifiedat": "2025-05-12T08:18:11.139251586Z",

      "serversurl": "#/mcpproviders/strowk/servers",
      "servers": {
        "foxy-contexts": {
          "serverid": "foxy-contexts",
          "self": "#/mcpproviders/strowk/servers/foxy-contexts",
          "xid": "/mcpproviders/strowk/servers/foxy-contexts",

          "metaurl": "#/mcpproviders/strowk/servers/foxy-contexts/meta",
          "meta": {
            "serverid": "foxy-contexts",
            "self": "#/mcpproviders/strowk/servers/foxy-contexts/meta",
            "xid": "/mcpproviders/strowk/servers/foxy-contexts/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:11.139251586Z",
            "modifiedat": "2025-05-12T08:18:11.139251586Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/strowk/servers/foxy-contexts/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/strowk/servers/foxy-contexts/versions",
          "versions": {
            "1": {
              "serverid": "foxy-contexts",
              "versionid": "1",
              "self": "#/mcpproviders/strowk/servers/foxy-contexts/versions/1",
              "xid": "/mcpproviders/strowk/servers/foxy-contexts/versions/1",
              "epoch": 1,
              "name": "io.github.strowk/foxy-contexts",
              "isdefault": true,
              "description": "Foxy contexts is a Golang library for building context servers supporting Model Context Protocol. This library only supports server side of the protocol. Using it you can build context servers using declarative approach, by defining tools, resources and prompts and then registering them with your app.Builder.",
              "createdat": "2025-05-12T08:18:11.139251586Z",
              "modifiedat": "2025-05-12T08:18:11.139251586Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [],
              "remotes": [],
              "repo_ref": "strowk/foxy-contexts",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "mcp-k8s-go": {
          "serverid": "mcp-k8s-go",
          "self": "#/mcpproviders/strowk/servers/mcp-k8s-go",
          "xid": "/mcpproviders/strowk/servers/mcp-k8s-go",

          "metaurl": "#/mcpproviders/strowk/servers/mcp-k8s-go/meta",
          "meta": {
            "serverid": "mcp-k8s-go",
            "self": "#/mcpproviders/strowk/servers/mcp-k8s-go/meta",
            "xid": "/mcpproviders/strowk/servers/mcp-k8s-go/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:10.623237811Z",
            "modifiedat": "2025-05-12T08:18:10.623237811Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/strowk/servers/mcp-k8s-go/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/strowk/servers/mcp-k8s-go/versions",
          "versions": {
            "1": {
              "serverid": "mcp-k8s-go",
              "versionid": "1",
              "self": "#/mcpproviders/strowk/servers/mcp-k8s-go/versions/1",
              "xid": "/mcpproviders/strowk/servers/mcp-k8s-go/versions/1",
              "epoch": 1,
              "name": "io.github.strowk/mcp-k8s-go",
              "isdefault": true,
              "description": "Golang-based MCP server connecting to Kubernetes. Provides listing and retrieval of Kubernetes contexts, namespaces, resources, nodes, pods, events, pod logs, and running commands in pods.",
              "createdat": "2025-05-12T08:18:10.623237811Z",
              "modifiedat": "2025-05-12T08:18:10.623237811Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "unspecified"
                },
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "@strowk/mcp-k8s"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@strowk/mcp-k8s"
                }
              ],
              "remotes": [],
              "repo_ref": "strowk/mcp-k8s-go",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "suekou": {
      "mcpproviderid": "suekou",
      "self": "#/mcpproviders/suekou",
      "xid": "/mcpproviders/suekou",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:15.737478659Z",
      "modifiedat": "2025-05-12T08:19:15.737478659Z",

      "serversurl": "#/mcpproviders/suekou/servers",
      "servers": {
        "mcp-notion-server": {
          "serverid": "mcp-notion-server",
          "self": "#/mcpproviders/suekou/servers/mcp-notion-server",
          "xid": "/mcpproviders/suekou/servers/mcp-notion-server",

          "metaurl": "#/mcpproviders/suekou/servers/mcp-notion-server/meta",
          "meta": {
            "serverid": "mcp-notion-server",
            "self": "#/mcpproviders/suekou/servers/mcp-notion-server/meta",
            "xid": "/mcpproviders/suekou/servers/mcp-notion-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:15.737478659Z",
            "modifiedat": "2025-05-12T08:19:15.737478659Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/suekou/servers/mcp-notion-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/suekou/servers/mcp-notion-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-notion-server",
              "versionid": "1",
              "self": "#/mcpproviders/suekou/servers/mcp-notion-server/versions/1",
              "xid": "/mcpproviders/suekou/servers/mcp-notion-server/versions/1",
              "epoch": 1,
              "name": "io.github.suekou/mcp-notion-server",
              "isdefault": true,
              "description": "MCP Server for the Notion API, enabling LLM to interact with Notion workspaces. Additionally, it employs Markdown conversion to reduce context size when communicating with LLMs, optimizing token usage and making interactions more efficient.",
              "createdat": "2025-05-12T08:19:15.737478659Z",
              "modifiedat": "2025-05-12T08:19:15.737478659Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your Notion API integration token.",
                        "name": "NOTION_API_TOKEN",
                        "required": true
                      },
                      {
                        "description": "Set to \"true\" to enable experimental Markdown conversion.",
                        "name": "NOTION_MARKDOWN_CONVERSION",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@suekou/mcp-notion-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@suekou/mcp-notion-server"
                }
              ],
              "remotes": [],
              "repo_ref": "suekou/mcp-notion-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "suhail-ak-s": {
      "mcpproviderid": "suhail-ak-s",
      "self": "#/mcpproviders/suhail-ak-s",
      "xid": "/mcpproviders/suhail-ak-s",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:15.763486075Z",
      "modifiedat": "2025-05-12T08:22:15.763486075Z",

      "serversurl": "#/mcpproviders/suhail-ak-s/servers",
      "servers": {
        "mcp-typesense-server": {
          "serverid": "mcp-typesense-server",
          "self": "#/mcpproviders/suhail-ak-s/servers/mcp-typesense-server",
          "xid": "/mcpproviders/suhail-ak-s/servers/mcp-typesense-server",

          "metaurl": "#/mcpproviders/suhail-ak-s/servers/mcp-typesense-server/meta",
          "meta": {
            "serverid": "mcp-typesense-server",
            "self": "#/mcpproviders/suhail-ak-s/servers/mcp-typesense-server/meta",
            "xid": "/mcpproviders/suhail-ak-s/servers/mcp-typesense-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:15.763486075Z",
            "modifiedat": "2025-05-12T08:22:15.763486075Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/suhail-ak-s/servers/mcp-typesense-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/suhail-ak-s/servers/mcp-typesense-server/versions",
          "versions": {
            "1": {
              "serverid": "mcp-typesense-server",
              "versionid": "1",
              "self": "#/mcpproviders/suhail-ak-s/servers/mcp-typesense-server/versions/1",
              "xid": "/mcpproviders/suhail-ak-s/servers/mcp-typesense-server/versions/1",
              "epoch": 1,
              "name": "io.github.suhail-ak-s/mcp-typesense-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation that provides AI models with access to Typesense search capabilities. This server enables LLMs to discover, search, and analyze data stored in Typesense collections.",
              "createdat": "2025-05-12T08:22:15.763486075Z",
              "modifiedat": "2025-05-12T08:22:15.763486075Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "Name of the collection to analyze",
                      "name": "collection_name",
                      "required": true
                    }
                  ],
                  "description": "Analyze collection structure and contents",
                  "name": "analyze_collection"
                },
                {
                  "arguments": [
                    {
                      "description": "Name of the collection for search suggestions",
                      "name": "collection_name",
                      "required": true
                    }
                  ],
                  "description": "Get suggestions for effective search queries for a collection",
                  "name": "search_suggestions"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "dist/index.js",
                      "--host",
                      "your-typesense-host",
                      "--port",
                      "8108",
                      "--protocol",
                      "http",
                      "--api-key",
                      "your-api-key"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "typesense-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "suhail-ak-s/mcp-typesense-server",
              "resources": [
                {
                  "description": "JSON schema information for each collection including field names and data types and sample documents",
                  "mimetype": "application/json",
                  "name": "Collection Schemas",
                  "uritemplate": "typesense://collections/{collection}"
                }
              ],
              "tools": [
                {
                  "description": "Search for documents in Typesense collections with powerful filtering",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "filters": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "query_text": {
                        "type": "string"
                      },
                      "search_fields": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "sort_options": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query_text",
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "typesense_query"
                },
                {
                  "description": "Retrieve specific documents by ID from collections",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      },
                      "document_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_name",
                      "document_id"
                    ],
                    "type": "object"
                  },
                  "name": "typesense_get_document"
                },
                {
                  "description": "Get statistics about a Typesense collection",
                  "inputschema": {
                    "properties": {
                      "collection_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "collection_name"
                    ],
                    "type": "object"
                  },
                  "name": "typesense_collection_stats"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "sunsetcoder": {
      "mcpproviderid": "sunsetcoder",
      "self": "#/mcpproviders/sunsetcoder",
      "xid": "/mcpproviders/sunsetcoder",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:44.366561595Z",
      "modifiedat": "2025-05-12T08:22:44.366561595Z",

      "serversurl": "#/mcpproviders/sunsetcoder/servers",
      "servers": {
        "flightradar24-mcp-server": {
          "serverid": "flightradar24-mcp-server",
          "self": "#/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server",
          "xid": "/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server",

          "metaurl": "#/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server/meta",
          "meta": {
            "serverid": "flightradar24-mcp-server",
            "self": "#/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server/meta",
            "xid": "/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:44.366561595Z",
            "modifiedat": "2025-05-12T08:22:44.366561595Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "flightradar24-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server/versions/1",
              "xid": "/mcpproviders/sunsetcoder/servers/flightradar24-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.sunsetcoder/flightradar24-mcp-server",
              "isdefault": true,
              "description": "A Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data. Perfect for aviation enthusiasts, travel planners, or anyone curious about flights overhead!",
              "createdat": "2025-05-12T08:22:44.366561595Z",
              "modifiedat": "2025-05-12T08:22:44.366561595Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Flightradar24 API key",
                        "name": "FR24_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Flightradar24 API base URL",
                        "name": "FR24_API_URL",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "/Users/\u003cusername\u003e/\u003cFULL_PATH...\u003e/flightradar24-mcp-server/dist/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "sunsetcoder/flightradar24-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Get real-time flight positions with various filtering options",
                  "inputschema": {
                    "properties": {
                      "airports": {
                        "description": "Comma-separated list of airport ICAO codes",
                        "type": "string"
                      },
                      "bounds": {
                        "description": "Geographical bounds (lat1,lon1,lat2,lon2)",
                        "type": "string"
                      },
                      "categories": {
                        "description": "Aircraft categories (P,C,J)",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Maximum number of results",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "name": "get_flight_positions"
                },
                {
                  "description": "Get estimated arrival time for a specific flight",
                  "inputschema": {
                    "properties": {
                      "flightNumber": {
                        "description": "Flight number (e.g., UA123)",
                        "pattern": "^[A-Z0-9]{2,8}$",
                        "type": "string"
                      }
                    },
                    "required": [
                      "flightNumber"
                    ],
                    "type": "object"
                  },
                  "name": "get_flight_eta"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "syucream": {
      "mcpproviderid": "syucream",
      "self": "#/mcpproviders/syucream",
      "xid": "/mcpproviders/syucream",
      "epoch": 2,
      "createdat": "2025-05-12T08:19:30.016779002Z",
      "modifiedat": "2025-05-12T08:19:31.255802122Z",

      "serversurl": "#/mcpproviders/syucream/servers",
      "servers": {
        "holaspirit-mcp-server": {
          "serverid": "holaspirit-mcp-server",
          "self": "#/mcpproviders/syucream/servers/holaspirit-mcp-server",
          "xid": "/mcpproviders/syucream/servers/holaspirit-mcp-server",

          "metaurl": "#/mcpproviders/syucream/servers/holaspirit-mcp-server/meta",
          "meta": {
            "serverid": "holaspirit-mcp-server",
            "self": "#/mcpproviders/syucream/servers/holaspirit-mcp-server/meta",
            "xid": "/mcpproviders/syucream/servers/holaspirit-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:30.016779002Z",
            "modifiedat": "2025-05-12T08:19:30.016779002Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/syucream/servers/holaspirit-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/syucream/servers/holaspirit-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "holaspirit-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/syucream/servers/holaspirit-mcp-server/versions/1",
              "xid": "/mcpproviders/syucream/servers/holaspirit-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.syucream/holaspirit-mcp-server",
              "isdefault": true,
              "description": "A MCP(Model Context Protocol) server that accesses to Holaspirit API. This server provides MCP-compatible access to Holaspirit's API, allowing AI assistants to interact with your Holaspirit data through a standardized interface.",
              "createdat": "2025-05-12T08:19:30.016779002Z",
              "modifiedat": "2025-05-12T08:19:30.016779002Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your Holaspirit API token",
                        "name": "HOLASPIRIT_API_TOKEN",
                        "required": true
                      },
                      {
                        "description": "Your Holaspirit organization ID",
                        "name": "HOLASPIRIT_ORGANIZATION_ID",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "holaspirit-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "holaspirit-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "syucream/holaspirit-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "List all tasks in the organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_list_tasks"
                },
                {
                  "description": "List all metrics in the organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_list_metrics"
                },
                {
                  "description": "List all circles in the organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_list_circles"
                },
                {
                  "description": "Get details of a specific circle",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_get_circle"
                },
                {
                  "description": "List all roles in the organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_list_roles"
                },
                {
                  "description": "Get details of a specific role",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_get_role"
                },
                {
                  "description": "List all domains in the organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_list_domains"
                },
                {
                  "description": "List all policies in the organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_list_policies"
                },
                {
                  "description": "List all meetings in the organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_list_meetings"
                },
                {
                  "description": "Get details of a specific meeting",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_get_meeting"
                },
                {
                  "description": "Get member feed",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_get_member_feed"
                },
                {
                  "description": "Get tensions for a meeting or meetings",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_get_tensions"
                },
                {
                  "description": "Search for a member by email",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "holaspirit_search_member"
                }
              ],
              "version_detail": {
                "version": "0.0.1"
              }
            }
          },
          "versionscount": 1
        },
        "lightdash-mcp-server": {
          "serverid": "lightdash-mcp-server",
          "self": "#/mcpproviders/syucream/servers/lightdash-mcp-server",
          "xid": "/mcpproviders/syucream/servers/lightdash-mcp-server",

          "metaurl": "#/mcpproviders/syucream/servers/lightdash-mcp-server/meta",
          "meta": {
            "serverid": "lightdash-mcp-server",
            "self": "#/mcpproviders/syucream/servers/lightdash-mcp-server/meta",
            "xid": "/mcpproviders/syucream/servers/lightdash-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:31.255802122Z",
            "modifiedat": "2025-05-12T08:19:31.255802122Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/syucream/servers/lightdash-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/syucream/servers/lightdash-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "lightdash-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/syucream/servers/lightdash-mcp-server/versions/1",
              "xid": "/mcpproviders/syucream/servers/lightdash-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.syucream/lightdash-mcp-server",
              "isdefault": true,
              "description": "A MCP(Model Context Protocol) server that accesses to Lightdash. This server provides MCP-compatible access to Lightdash's API, allowing AI assistants to interact with your Lightdash data through a standardized interface.",
              "createdat": "2025-05-12T08:19:31.255802122Z",
              "modifiedat": "2025-05-12T08:19:31.255802122Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Your Lightdash PAT",
                        "name": "LIGHTDASH_API_KEY",
                        "required": true
                      },
                      {
                        "description": "The API base URL",
                        "name": "LIGHTDASH_API_URL",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "lightdash-mcp-server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "lightdash-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "syucream/lightdash-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "List all projects in the Lightdash organization",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_list_projects"
                },
                {
                  "description": "Get details of a specific project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_project"
                },
                {
                  "description": "List all spaces in a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_list_spaces"
                },
                {
                  "description": "List all charts in a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_list_charts"
                },
                {
                  "description": "List all dashboards in a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_list_dashboards"
                },
                {
                  "description": "Get custom metrics for a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_custom_metrics"
                },
                {
                  "description": "Get catalog for a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_catalog"
                },
                {
                  "description": "Get metrics catalog for a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_metrics_catalog"
                },
                {
                  "description": "Get charts as code for a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_charts_as_code"
                },
                {
                  "description": "Get dashboards as code for a project",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_dashboards_as_code"
                },
                {
                  "description": "Get metadata for a specific table in the data catalog",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_metadata"
                },
                {
                  "description": "Get analytics for a specific table in the data catalog",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_analytics"
                },
                {
                  "description": "Get organization user attributes",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "lightdash_get_user_attributes"
                }
              ],
              "version_detail": {
                "version": "0.0.1"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 2
    },
    "tadata-org": {
      "mcpproviderid": "tadata-org",
      "self": "#/mcpproviders/tadata-org",
      "xid": "/mcpproviders/tadata-org",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:46.705737023Z",
      "modifiedat": "2025-05-12T08:17:46.705737023Z",

      "serversurl": "#/mcpproviders/tadata-org/servers",
      "servers": {
        "fastapi_mcp": {
          "serverid": "fastapi_mcp",
          "self": "#/mcpproviders/tadata-org/servers/fastapi_mcp",
          "xid": "/mcpproviders/tadata-org/servers/fastapi_mcp",

          "metaurl": "#/mcpproviders/tadata-org/servers/fastapi_mcp/meta",
          "meta": {
            "serverid": "fastapi_mcp",
            "self": "#/mcpproviders/tadata-org/servers/fastapi_mcp/meta",
            "xid": "/mcpproviders/tadata-org/servers/fastapi_mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:46.705737023Z",
            "modifiedat": "2025-05-12T08:17:46.705737023Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/tadata-org/servers/fastapi_mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/tadata-org/servers/fastapi_mcp/versions",
          "versions": {
            "1": {
              "serverid": "fastapi_mcp",
              "versionid": "1",
              "self": "#/mcpproviders/tadata-org/servers/fastapi_mcp/versions/1",
              "xid": "/mcpproviders/tadata-org/servers/fastapi_mcp/versions/1",
              "epoch": 1,
              "name": "io.github.tadata-org/fastapi_mcp",
              "isdefault": true,
              "description": "Expose your FastAPI endpoints as Model Context Protocol (MCP) tools, with Auth!",
              "createdat": "2025-05-12T08:17:46.705737023Z",
              "modifiedat": "2025-05-12T08:17:46.705737023Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://apiserver/mcp"
                }
              ],
              "repo_ref": "tadata-org/fastapi_mcp",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "tavily-ai": {
      "mcpproviderid": "tavily-ai",
      "self": "#/mcpproviders/tavily-ai",
      "xid": "/mcpproviders/tavily-ai",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:38.350822481Z",
      "modifiedat": "2025-05-12T08:17:38.350822481Z",

      "serversurl": "#/mcpproviders/tavily-ai/servers",
      "servers": {
        "tavily-mcp": {
          "serverid": "tavily-mcp",
          "self": "#/mcpproviders/tavily-ai/servers/tavily-mcp",
          "xid": "/mcpproviders/tavily-ai/servers/tavily-mcp",

          "metaurl": "#/mcpproviders/tavily-ai/servers/tavily-mcp/meta",
          "meta": {
            "serverid": "tavily-mcp",
            "self": "#/mcpproviders/tavily-ai/servers/tavily-mcp/meta",
            "xid": "/mcpproviders/tavily-ai/servers/tavily-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:38.350822481Z",
            "modifiedat": "2025-05-12T08:17:38.350822481Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/tavily-ai/servers/tavily-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/tavily-ai/servers/tavily-mcp/versions",
          "versions": {
            "1": {
              "serverid": "tavily-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/tavily-ai/servers/tavily-mcp/versions/1",
              "xid": "/mcpproviders/tavily-ai/servers/tavily-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.tavily-ai/tavily-mcp",
              "isdefault": true,
              "description": "The Tavily MCP server provides seamless interaction with the tavily-search and tavily-extract tools, enabling real-time web search and intelligent data extraction capabilities via the Model Context Protocol.",
              "createdat": "2025-05-12T08:17:38.350822481Z",
              "modifiedat": "2025-05-12T08:17:38.350822481Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for Tavily service",
                        "name": "TAVILY_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "tavily-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "tavily-ai/tavily-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "A powerful web search tool that provides comprehensive, real-time results using Tavily's AI search engine. Returns relevant web content with customizable parameters for result count, content type, and domain filtering. Ideal for gathering current information, news, and detailed web content analysis.",
                  "inputschema": {
                    "properties": {
                      "days": {
                        "default": 3,
                        "description": "The number of days back from the current date to include in the search results. This specifies the time frame of data to be retrieved. Please note that this feature is only available when using the 'news' search topic",
                        "type": "number"
                      },
                      "exclude_domains": {
                        "default": [],
                        "description": "List of domains to specifically exclude, if the user asks to exclude a domain set this to the domain of the site",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "include_domains": {
                        "default": [],
                        "description": "A list of domains to specifically include in the search results, if the user asks to search on specific sites set this to the domain of the site",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "include_image_descriptions": {
                        "default": false,
                        "description": "Include a list of query-related images and their descriptions in the response",
                        "type": "boolean"
                      },
                      "include_images": {
                        "default": false,
                        "description": "Include a list of query-related images in the response",
                        "type": "boolean"
                      },
                      "include_raw_content": {
                        "default": false,
                        "description": "Include the cleaned and parsed HTML content of each search result",
                        "type": "boolean"
                      },
                      "max_results": {
                        "default": 10,
                        "description": "The maximum number of search results to return",
                        "maximum": 20,
                        "minimum": 5,
                        "type": "number"
                      },
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      },
                      "search_depth": {
                        "default": "basic",
                        "description": "The depth of the search. It can be 'basic' or 'advanced'",
                        "enum": [
                          "basic",
                          "advanced"
                        ],
                        "type": "string"
                      },
                      "time_range": {
                        "description": "The time range back from the current date to include in the search results. This feature is available for both 'general' and 'news' search topics",
                        "enum": [
                          "day",
                          "week",
                          "month",
                          "year",
                          "d",
                          "w",
                          "m",
                          "y"
                        ],
                        "type": "string"
                      },
                      "topic": {
                        "default": "general",
                        "description": "The category of the search. This will determine which of our agents will be used for the search",
                        "enum": [
                          "general",
                          "news"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "tavily-search"
                },
                {
                  "description": "A powerful web content extraction tool that retrieves and processes raw content from specified URLs, ideal for data collection, content analysis, and research tasks.",
                  "inputschema": {
                    "properties": {
                      "extract_depth": {
                        "default": "basic",
                        "description": "Depth of extraction - 'basic' or 'advanced', if usrls are linkedin use 'advanced' or if explicitly told to use advanced",
                        "enum": [
                          "basic",
                          "advanced"
                        ],
                        "type": "string"
                      },
                      "include_images": {
                        "default": false,
                        "description": "Include a list of images extracted from the urls in the response",
                        "type": "boolean"
                      },
                      "urls": {
                        "description": "List of URLs to extract content from",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "urls"
                    ],
                    "type": "object"
                  },
                  "name": "tavily-extract"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "teddyzxcv": {
      "mcpproviderid": "teddyzxcv",
      "self": "#/mcpproviders/teddyzxcv",
      "xid": "/mcpproviders/teddyzxcv",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:42.456539965Z",
      "modifiedat": "2025-05-12T08:20:42.456539965Z",

      "serversurl": "#/mcpproviders/teddyzxcv/servers",
      "servers": {
        "ntfy-mcp": {
          "serverid": "ntfy-mcp",
          "self": "#/mcpproviders/teddyzxcv/servers/ntfy-mcp",
          "xid": "/mcpproviders/teddyzxcv/servers/ntfy-mcp",

          "metaurl": "#/mcpproviders/teddyzxcv/servers/ntfy-mcp/meta",
          "meta": {
            "serverid": "ntfy-mcp",
            "self": "#/mcpproviders/teddyzxcv/servers/ntfy-mcp/meta",
            "xid": "/mcpproviders/teddyzxcv/servers/ntfy-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:42.456539965Z",
            "modifiedat": "2025-05-12T08:20:42.456539965Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/teddyzxcv/servers/ntfy-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/teddyzxcv/servers/ntfy-mcp/versions",
          "versions": {
            "1": {
              "serverid": "ntfy-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/teddyzxcv/servers/ntfy-mcp/versions/1",
              "xid": "/mcpproviders/teddyzxcv/servers/ntfy-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.teddyzxcv/ntfy-mcp",
              "isdefault": true,
              "description": "The MCP server that keeps you caffeinated and informed by sending ntfy notifications whenever your AI assistant completes a task.",
              "createdat": "2025-05-12T08:20:42.456539965Z",
              "modifiedat": "2025-05-12T08:20:42.456539965Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Topic name for ntfy notifications",
                        "name": "NTFY_TOPIC",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "/path/to/ntfy-mcp/build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "teddyzxcv/ntfy-mcp",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "tesla0225": {
      "mcpproviderid": "tesla0225",
      "self": "#/mcpproviders/tesla0225",
      "xid": "/mcpproviders/tesla0225",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:01.866951332Z",
      "modifiedat": "2025-05-12T08:18:01.866951332Z",

      "serversurl": "#/mcpproviders/tesla0225/servers",
      "servers": {
        "mcp-create": {
          "serverid": "mcp-create",
          "self": "#/mcpproviders/tesla0225/servers/mcp-create",
          "xid": "/mcpproviders/tesla0225/servers/mcp-create",

          "metaurl": "#/mcpproviders/tesla0225/servers/mcp-create/meta",
          "meta": {
            "serverid": "mcp-create",
            "self": "#/mcpproviders/tesla0225/servers/mcp-create/meta",
            "xid": "/mcpproviders/tesla0225/servers/mcp-create/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:01.866951332Z",
            "modifiedat": "2025-05-12T08:18:01.866951332Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/tesla0225/servers/mcp-create/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/tesla0225/servers/mcp-create/versions",
          "versions": {
            "1": {
              "serverid": "mcp-create",
              "versionid": "1",
              "self": "#/mcpproviders/tesla0225/servers/mcp-create/versions/1",
              "xid": "/mcpproviders/tesla0225/servers/mcp-create/versions/1",
              "epoch": 1,
              "name": "io.github.tesla0225/mcp-create",
              "isdefault": true,
              "description": "A dynamic MCP server management service that creates, runs, and manages Model Context Protocol (MCP) servers dynamically. This service itself functions as an MCP server and launches/manages other MCP servers as child processes, enabling a flexible MCP ecosystem.",
              "createdat": "2025-05-12T08:18:01.866951332Z",
              "modifiedat": "2025-05-12T08:18:01.866951332Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "run",
                      "-i",
                      "--rm",
                      "mcp-create"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "mcp-create"
                },
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "tesla0225/mcp-create",
              "resources": [],
              "tools": [
                {
                  "description": "Create a new MCP server from a template.\n  \n  以下のテンプレートコードをベースに、ユーザーの要求に合わせたサーバーを実装してください。\n  言語に応じて適切なテンプレートを選択し、必要に応じて機能を追加・変更してください。\n  \n  TypeScriptテンプレート:\n  ```typescript\n  import { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\n  import { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\n  import { \n    CallToolRequestSchema, \n    ListToolsRequestSchema \n  } from \"@modelcontextprotocol/sdk/types.js\";\n\n  const server = new Server({\n    name: \"dynamic-test-server\",\n    version: \"1.0.0\"\n  }, {\n    capabilities: {\n      tools: {}\n    }\n  });\n\n  // ここでツールを実装してください\n  server.setRequestHandler(ListToolsRequestSchema, async () =\u003e {\n    return {\n      tools: [{\n        name: \"echo\",\n        description: \"Echo back a message\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            message: { type: \"string\" }\n          },\n          required: [\"message\"]\n        }\n      }]\n    };\n  });\n\n  server.setRequestHandler(CallToolRequestSchema, async (request) =\u003e {\n    if (request.params.name === \"echo\") {\n      // TypeScriptの型を適切に扱うため、型アサーションを使用\n      const message = request.params.arguments.message as string;\n      // または any を使う: const message: any = request.params.arguments.message;\n      \n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Echo: ${message}`\n          }\n        ]\n      };\n    }\n    throw new Error(\"Tool not found\");\n  });\n\n  // Server startup\n  const transport = new StdioServerTransport();\n  server.connect(transport);\n  ```\n  \n  Pythonテンプレート:\n  ```python\n  import asyncio\n  from mcp.server import Server\n  from mcp.server.stdio import stdio_server\n\n  app = Server(\"dynamic-test-server\")\n\n  @app.list_tools()\n  async def list_tools():\n      return [\n          {\n              \"name\": \"echo\",\n              \"description\": \"Echo back a message\",\n              \"inputSchema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                      \"message\": {\"type\": \"string\"}\n                  },\n                  \"required\": [\"message\"]\n              }\n          }\n      ]\n\n  @app.call_tool()\n  async def call_tool(name, arguments):\n      if name == \"echo\":\n          return [{\"type\": \"text\", \"text\": f\"Echo: {arguments.get('message')}\"}]\n      raise ValueError(f\"Tool not found: {name}\")\n\n  async def main():\n      async with stdio_server() as streams:\n          await app.run(\n              streams[0],\n              streams[1],\n              app.create_initialization_options()\n          )\n\n  if __name__ == \"__main__\":\n      asyncio.run(main())\n  ```\n  \n  注意事項：\n  - TypeScript実装時は、引数の型を適切に扱うために型アサーション（as string）を使用するか、\n    明示的に型を宣言してください（例：const value: string = request.params.arguments.someValue）。\n  - 複雑な型を扱う場合は、interface や type を定義して型安全性を確保することをお勧めします。\n  \n  ユーザーの要求に応じて上記のテンプレートを参考にカスタマイズしてください。その際、基本的な構造を維持しつつ、ツール名や機能を変更できます。",
                  "inputschema": {
                    "properties": {
                      "code": {
                        "description": "カスタマイズしたサーバーコード。テンプレートを元に変更したコードを入力してください。省略した場合はデフォルトのテンプレートが使用されます。",
                        "type": "string"
                      },
                      "dependencies": {
                        "description": "使用するライブラリとそのバージョン（例: { \"axios\": \"^1.0.0\" }）",
                        "type": "object"
                      },
                      "language": {
                        "description": "The programming language for the template",
                        "enum": [
                          "typescript",
                          "python"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "language"
                    ],
                    "type": "object"
                  },
                  "name": "create-server-from-template"
                },
                {
                  "description": "Execute a tool on a server",
                  "inputschema": {
                    "properties": {
                      "args": {
                        "description": "The arguments to pass to the tool",
                        "type": "object"
                      },
                      "serverId": {
                        "description": "The ID of the server",
                        "type": "string"
                      },
                      "toolName": {
                        "description": "The name of the tool to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "serverId",
                      "toolName"
                    ],
                    "type": "object"
                  },
                  "name": "execute-tool"
                },
                {
                  "description": "Get the tools available on a server",
                  "inputschema": {
                    "properties": {
                      "serverId": {
                        "description": "The ID of the server",
                        "type": "string"
                      }
                    },
                    "required": [
                      "serverId"
                    ],
                    "type": "object"
                  },
                  "name": "get-server-tools"
                },
                {
                  "description": "Delete a server",
                  "inputschema": {
                    "properties": {
                      "serverId": {
                        "description": "The ID of the server",
                        "type": "string"
                      }
                    },
                    "required": [
                      "serverId"
                    ],
                    "type": "object"
                  },
                  "name": "delete-server"
                },
                {
                  "description": "List all running servers",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list-servers"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "tevonsb": {
      "mcpproviderid": "tevonsb",
      "self": "#/mcpproviders/tevonsb",
      "xid": "/mcpproviders/tevonsb",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:20.728167807Z",
      "modifiedat": "2025-05-12T08:20:20.728167807Z",

      "serversurl": "#/mcpproviders/tevonsb/servers",
      "servers": {
        "homeassistant-mcp": {
          "serverid": "homeassistant-mcp",
          "self": "#/mcpproviders/tevonsb/servers/homeassistant-mcp",
          "xid": "/mcpproviders/tevonsb/servers/homeassistant-mcp",

          "metaurl": "#/mcpproviders/tevonsb/servers/homeassistant-mcp/meta",
          "meta": {
            "serverid": "homeassistant-mcp",
            "self": "#/mcpproviders/tevonsb/servers/homeassistant-mcp/meta",
            "xid": "/mcpproviders/tevonsb/servers/homeassistant-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:20.728167807Z",
            "modifiedat": "2025-05-12T08:20:20.728167807Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/tevonsb/servers/homeassistant-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/tevonsb/servers/homeassistant-mcp/versions",
          "versions": {
            "1": {
              "serverid": "homeassistant-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/tevonsb/servers/homeassistant-mcp/versions/1",
              "xid": "/mcpproviders/tevonsb/servers/homeassistant-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.tevonsb/homeassistant-mcp",
              "isdefault": true,
              "description": "The server uses the MCP protocol to share access to a local Home Assistant instance with an LLM application. A powerful bridge between your Home Assistant instance and Language Learning Models (LLMs), enabling natural language control and monitoring of your smart home devices through the Model Context Protocol (MCP). This server provides a comprehensive API for managing your entire Home Assistant ecosystem, from device control to system administration.",
              "createdat": "2025-05-12T08:20:20.728167807Z",
              "modifiedat": "2025-05-12T08:20:20.728167807Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "not specified"
                },
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Home Assistant host URL",
                        "name": "HASS_HOST",
                        "required": false
                      },
                      {
                        "description": "Home Assistant access token",
                        "name": "HASS_TOKEN",
                        "required": true
                      },
                      {
                        "description": "Port to run the server on",
                        "name": "PORT",
                        "required": false
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "litemcp"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:3000"
                }
              ],
              "repo_ref": "tevonsb/homeassistant-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "List all available Home Assistant devices",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_devices"
                },
                {
                  "description": "Control Home Assistant devices and services",
                  "inputschema": {
                    "properties": {
                      "brightness": {
                        "description": "Brightness level for lights (0-255)",
                        "maximum": 255,
                        "minimum": 0,
                        "type": "number"
                      },
                      "color_temp": {
                        "description": "Color temperature for lights",
                        "type": "number"
                      },
                      "command": {
                        "description": "The command to execute",
                        "enum": [
                          "turn_on",
                          "turn_off",
                          "toggle",
                          "open",
                          "close",
                          "stop",
                          "set_position",
                          "set_tilt_position",
                          "set_temperature",
                          "set_hvac_mode",
                          "set_fan_mode",
                          "set_humidity"
                        ],
                        "type": "string"
                      },
                      "entity_id": {
                        "description": "The entity ID to control",
                        "type": "string"
                      },
                      "fan_mode": {
                        "description": "Fan mode for climate devices",
                        "enum": [
                          "auto",
                          "low",
                          "medium",
                          "high"
                        ],
                        "type": "string"
                      },
                      "humidity": {
                        "description": "Target humidity for climate devices",
                        "maximum": 100,
                        "minimum": 0,
                        "type": "number"
                      },
                      "hvac_mode": {
                        "description": "HVAC mode for climate devices",
                        "enum": [
                          "off",
                          "heat",
                          "cool",
                          "heat_cool",
                          "auto",
                          "dry",
                          "fan_only"
                        ],
                        "type": "string"
                      },
                      "position": {
                        "description": "Position for covers (0-100)",
                        "maximum": 100,
                        "minimum": 0,
                        "type": "number"
                      },
                      "rgb_color": {
                        "description": "RGB color values",
                        "items": [
                          {
                            "type": "number"
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "number"
                          }
                        ],
                        "type": "array"
                      },
                      "state": {
                        "description": "The desired state for the entity",
                        "type": "string"
                      },
                      "target_temp_high": {
                        "description": "Target high temperature for climate devices",
                        "type": "number"
                      },
                      "target_temp_low": {
                        "description": "Target low temperature for climate devices",
                        "type": "number"
                      },
                      "temperature": {
                        "description": "Target temperature for climate devices",
                        "type": "number"
                      },
                      "tilt_position": {
                        "description": "Tilt position for covers (0-100)",
                        "maximum": 100,
                        "minimum": 0,
                        "type": "number"
                      }
                    },
                    "required": [
                      "command",
                      "entity_id"
                    ],
                    "type": "object"
                  },
                  "name": "control"
                },
                {
                  "description": "Get state history for Home Assistant entities",
                  "inputschema": {
                    "properties": {
                      "end_time": {
                        "description": "End time in ISO format. Defaults to now",
                        "type": "string"
                      },
                      "entity_id": {
                        "description": "The entity ID to get history for",
                        "type": "string"
                      },
                      "minimal_response": {
                        "description": "Return minimal response to reduce data size",
                        "type": "boolean"
                      },
                      "significant_changes_only": {
                        "description": "Only return significant state changes",
                        "type": "boolean"
                      },
                      "start_time": {
                        "description": "Start time in ISO format. Defaults to 24 hours ago",
                        "type": "string"
                      }
                    },
                    "required": [
                      "entity_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_history"
                },
                {
                  "description": "Manage and activate Home Assistant scenes",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform with scenes",
                        "enum": [
                          "list",
                          "activate"
                        ],
                        "type": "string"
                      },
                      "scene_id": {
                        "description": "Scene ID to activate (required for activate action)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "scene"
                },
                {
                  "description": "Send notifications through Home Assistant",
                  "inputschema": {
                    "properties": {
                      "data": {
                        "additionalProperties": true,
                        "description": "Additional notification data",
                        "type": "object"
                      },
                      "message": {
                        "description": "The notification message",
                        "type": "string"
                      },
                      "target": {
                        "description": "Specific notification target (e.g., mobile_app_phone)",
                        "type": "string"
                      },
                      "title": {
                        "description": "The notification title",
                        "type": "string"
                      }
                    },
                    "required": [
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "notify"
                },
                {
                  "description": "Manage Home Assistant automations",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform with automation",
                        "enum": [
                          "list",
                          "toggle",
                          "trigger"
                        ],
                        "type": "string"
                      },
                      "automation_id": {
                        "description": "Automation ID (required for toggle and trigger actions)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "automation"
                },
                {
                  "description": "Manage Home Assistant add-ons",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform with add-on",
                        "enum": [
                          "list",
                          "info",
                          "install",
                          "uninstall",
                          "start",
                          "stop",
                          "restart"
                        ],
                        "type": "string"
                      },
                      "slug": {
                        "description": "Add-on slug (required for all actions except list)",
                        "type": "string"
                      },
                      "version": {
                        "description": "Version to install (only for install action)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "addon"
                },
                {
                  "description": "Manage HACS packages and custom components",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform with package",
                        "enum": [
                          "list",
                          "install",
                          "uninstall",
                          "update"
                        ],
                        "type": "string"
                      },
                      "category": {
                        "description": "Package category",
                        "enum": [
                          "integration",
                          "plugin",
                          "theme",
                          "python_script",
                          "appdaemon",
                          "netdaemon"
                        ],
                        "type": "string"
                      },
                      "repository": {
                        "description": "Repository URL or name (required for install)",
                        "type": "string"
                      },
                      "version": {
                        "description": "Version to install",
                        "type": "string"
                      }
                    },
                    "required": [
                      "action",
                      "category"
                    ],
                    "type": "object"
                  },
                  "name": "package"
                },
                {
                  "description": "Advanced automation configuration and management",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform with automation config",
                        "enum": [
                          "create",
                          "update",
                          "delete",
                          "duplicate"
                        ],
                        "type": "string"
                      },
                      "automation_id": {
                        "description": "Automation ID (required for update, delete, and duplicate)",
                        "type": "string"
                      },
                      "config": {
                        "description": "Automation configuration (required for create and update)",
                        "properties": {
                          "action": {
                            "description": "List of actions",
                            "items": {},
                            "type": "array"
                          },
                          "alias": {
                            "description": "Friendly name for the automation",
                            "type": "string"
                          },
                          "condition": {
                            "description": "List of conditions",
                            "items": {},
                            "type": "array"
                          },
                          "description": {
                            "description": "Description of what the automation does",
                            "type": "string"
                          },
                          "mode": {
                            "description": "How multiple triggerings are handled",
                            "enum": [
                              "single",
                              "parallel",
                              "queued",
                              "restart"
                            ],
                            "type": "string"
                          },
                          "trigger": {
                            "description": "List of triggers",
                            "items": {},
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "automation_config"
                },
                {
                  "description": "Subscribe to Home Assistant events via Server-Sent Events (SSE)",
                  "inputschema": {
                    "properties": {
                      "domain": {
                        "description": "Domain to monitor (e.g., \"light\", \"switch\", etc.)",
                        "type": "string"
                      },
                      "entity_id": {
                        "description": "Specific entity ID to monitor for state changes",
                        "type": "string"
                      },
                      "events": {
                        "description": "List of event types to subscribe to",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "token": {
                        "description": "Authentication token (required)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "token"
                    ],
                    "type": "object"
                  },
                  "name": "subscribe_events"
                },
                {
                  "description": "Get SSE connection statistics",
                  "inputschema": {
                    "properties": {
                      "token": {
                        "description": "Authentication token (required)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "token"
                    ],
                    "type": "object"
                  },
                  "name": "get_sse_stats"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "thirdweb-dev": {
      "mcpproviderid": "thirdweb-dev",
      "self": "#/mcpproviders/thirdweb-dev",
      "xid": "/mcpproviders/thirdweb-dev",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:46.513163087Z",
      "modifiedat": "2025-05-12T08:17:46.513163087Z",

      "serversurl": "#/mcpproviders/thirdweb-dev/servers",
      "servers": {
        "ai": {
          "serverid": "ai",
          "self": "#/mcpproviders/thirdweb-dev/servers/ai",
          "xid": "/mcpproviders/thirdweb-dev/servers/ai",

          "metaurl": "#/mcpproviders/thirdweb-dev/servers/ai/meta",
          "meta": {
            "serverid": "ai",
            "self": "#/mcpproviders/thirdweb-dev/servers/ai/meta",
            "xid": "/mcpproviders/thirdweb-dev/servers/ai/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:46.513163087Z",
            "modifiedat": "2025-05-12T08:17:46.513163087Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/thirdweb-dev/servers/ai/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/thirdweb-dev/servers/ai/versions",
          "versions": {
            "1": {
              "serverid": "ai",
              "versionid": "1",
              "self": "#/mcpproviders/thirdweb-dev/servers/ai/versions/1",
              "xid": "/mcpproviders/thirdweb-dev/servers/ai/versions/1",
              "epoch": 1,
              "name": "io.github.thirdweb-dev/ai",
              "isdefault": true,
              "description": "MCP server providing blockchain tools via the MCP protocol, enabling compatible LLM clients to interact with blockchain data and AI agents.",
              "createdat": "2025-05-12T08:17:46.513163087Z",
              "modifiedat": "2025-05-12T08:17:46.513163087Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for thirdweb services",
                        "name": "THIRDWEB_SECRET_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "thirdweb-ai"
                }
              ],
              "remotes": [],
              "repo_ref": "thirdweb-dev/ai",
              "resources": [],
              "tools": [
                {
                  "description": "Tools for blockchain data intelligence including chains, transactions, blocks, events, prices, and tokens.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "Insight Tools"
                },
                {
                  "description": "AI agent blockchain interaction tools enabling natural language powered blockchain tasks.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "Nebula Tools"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "tinybirdco": {
      "mcpproviderid": "tinybirdco",
      "self": "#/mcpproviders/tinybirdco",
      "xid": "/mcpproviders/tinybirdco",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:37.934307099Z",
      "modifiedat": "2025-05-12T08:17:37.934307099Z",

      "serversurl": "#/mcpproviders/tinybirdco/servers",
      "servers": {
        "mcp-tinybird": {
          "serverid": "mcp-tinybird",
          "self": "#/mcpproviders/tinybirdco/servers/mcp-tinybird",
          "xid": "/mcpproviders/tinybirdco/servers/mcp-tinybird",

          "metaurl": "#/mcpproviders/tinybirdco/servers/mcp-tinybird/meta",
          "meta": {
            "serverid": "mcp-tinybird",
            "self": "#/mcpproviders/tinybirdco/servers/mcp-tinybird/meta",
            "xid": "/mcpproviders/tinybirdco/servers/mcp-tinybird/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:37.934307099Z",
            "modifiedat": "2025-05-12T08:17:37.934307099Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/tinybirdco/servers/mcp-tinybird/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/tinybirdco/servers/mcp-tinybird/versions",
          "versions": {
            "1": {
              "serverid": "mcp-tinybird",
              "versionid": "1",
              "self": "#/mcpproviders/tinybirdco/servers/mcp-tinybird/versions/1",
              "xid": "/mcpproviders/tinybirdco/servers/mcp-tinybird/versions/1",
              "epoch": 1,
              "name": "io.github.tinybirdco/mcp-tinybird",
              "isdefault": true,
              "description": "An MCP server to interact with a Tinybird Workspace from any MCP client. Supports querying Tinybird Data Sources, getting results from Tinybird API Endpoints, and pushing Datafiles. Supports both SSE and STDIO modes.",
              "createdat": "2025-05-12T08:17:37.934307099Z",
              "modifiedat": "2025-05-12T08:17:37.934307099Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "The topic of the data you want to explore",
                      "name": "topic",
                      "required": true
                    }
                  ],
                  "description": "A prompt to get insights from the Data Sources and Pipe Endpoints in the Tinybird Workspace",
                  "name": "tinybird-default"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Tinybird API URL",
                        "name": "TB_API_URL",
                        "required": true
                      },
                      {
                        "description": "Tinybird Admin Token",
                        "name": "TB_ADMIN_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "mcp-tinybird",
                      "stdio"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@tinybirdco/mcp-tinybird"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:8000"
                }
              ],
              "repo_ref": "tinybirdco/mcp-tinybird",
              "resources": [
                {
                  "description": "A living document of discovered insights",
                  "mimetype": "text/plain",
                  "name": "Insights from Tinybird",
                  "uritemplate": "tinybird://insights"
                },
                {
                  "description": "Syntax and context to build .datasource datafiles",
                  "mimetype": "text/plain",
                  "name": "Context for datasource definition",
                  "uritemplate": "tinybird://datasource-definition-context"
                }
              ],
              "tools": [
                {
                  "description": "List all Data Sources in the Tinybird Workspace",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list-data-sources"
                },
                {
                  "description": "Get details of a Data Source in the Tinybird Workspace, such as the schema",
                  "inputschema": {
                    "properties": {
                      "datasource_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "datasource_id"
                    ],
                    "type": "object"
                  },
                  "name": "get-data-source"
                },
                {
                  "description": "List all Pipe Endpoints in the Tinybird Workspace",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "list-pipes"
                },
                {
                  "description": "Get details of a Pipe Endpoint in the Tinybird Workspace, such as the nodes SQLs to understand what they do or what Data Sources they use",
                  "inputschema": {
                    "properties": {
                      "pipe_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "pipe_id"
                    ],
                    "type": "object"
                  },
                  "name": "get-pipe"
                },
                {
                  "description": "Requests data from a Pipe Endpoint in the Tinybird Workspace, includes parameters",
                  "inputschema": {
                    "properties": {
                      "params": {
                        "properties": {},
                        "type": "object"
                      },
                      "pipe_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "pipe_id"
                    ],
                    "type": "object"
                  },
                  "name": "request-pipe-data"
                },
                {
                  "description": "Runs a select query to the Tinybird Workspace. It may query Data Sources or Pipe Endpoints",
                  "inputschema": {
                    "properties": {
                      "select_query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "select_query"
                    ],
                    "type": "object"
                  },
                  "name": "run-select-query"
                },
                {
                  "description": "Add a business insight to the memo",
                  "inputschema": {
                    "properties": {
                      "insight": {
                        "description": "Business insight discovered from data analysis",
                        "type": "string"
                      }
                    },
                    "required": [
                      "insight"
                    ],
                    "type": "object"
                  },
                  "name": "append-insight"
                },
                {
                  "description": "The Tinybird product description and documentation, including API Reference in LLM friendly format",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "llms-tinybird-docs"
                },
                {
                  "description": "Analyze the Pipe Endpoint SQL",
                  "inputschema": {
                    "properties": {
                      "pipe_name": {
                        "description": "The Pipe Endpoint name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "pipe_name"
                    ],
                    "type": "object"
                  },
                  "name": "analyze-pipe"
                },
                {
                  "description": "Push a .datasource or .pipe file to the Workspace",
                  "inputschema": {
                    "properties": {
                      "files": {
                        "description": "The datafile local path",
                        "type": "string"
                      }
                    },
                    "required": [
                      "files"
                    ],
                    "type": "object"
                  },
                  "name": "push-datafile"
                },
                {
                  "description": "Sends an event to a Data Source in Tinybird. The data needs to be in NDJSON format and conform to the Data Source schema in Tinybird",
                  "inputschema": {
                    "properties": {
                      "data": {
                        "description": "A JSON object that will be converted to a NDJSON String to save in the Tinybird Data Source via the events API. It should contain one key for each column in the Data Source",
                        "type": "string"
                      },
                      "datasource_name": {
                        "description": "The name of the Data Source in Tinybird",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "save-event"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "tinyfish-io": {
      "mcpproviderid": "tinyfish-io",
      "self": "#/mcpproviders/tinyfish-io",
      "xid": "/mcpproviders/tinyfish-io",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:59.498713219Z",
      "modifiedat": "2025-05-12T08:17:59.498713219Z",

      "serversurl": "#/mcpproviders/tinyfish-io/servers",
      "servers": {
        "agentql-mcp": {
          "serverid": "agentql-mcp",
          "self": "#/mcpproviders/tinyfish-io/servers/agentql-mcp",
          "xid": "/mcpproviders/tinyfish-io/servers/agentql-mcp",

          "metaurl": "#/mcpproviders/tinyfish-io/servers/agentql-mcp/meta",
          "meta": {
            "serverid": "agentql-mcp",
            "self": "#/mcpproviders/tinyfish-io/servers/agentql-mcp/meta",
            "xid": "/mcpproviders/tinyfish-io/servers/agentql-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:59.498713219Z",
            "modifiedat": "2025-05-12T08:17:59.498713219Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/tinyfish-io/servers/agentql-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/tinyfish-io/servers/agentql-mcp/versions",
          "versions": {
            "1": {
              "serverid": "agentql-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/tinyfish-io/servers/agentql-mcp/versions/1",
              "xid": "/mcpproviders/tinyfish-io/servers/agentql-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.tinyfish-io/agentql-mcp",
              "isdefault": true,
              "description": "This is a Model Context Protocol (MCP) server that integrates AgentQL's data extraction capabilities.",
              "createdat": "2025-05-12T08:17:59.498713219Z",
              "modifiedat": "2025-05-12T08:17:59.498713219Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "name": "AGENTQL_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "agentql-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "agentql-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "tinyfish-io/agentql-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Extracts structured data as JSON from a web page given a URL using a Natural Language description of the data.",
                  "inputschema": {
                    "properties": {
                      "prompt": {
                        "description": "Natural Language description of the data to extract from the page",
                        "type": "string"
                      },
                      "url": {
                        "description": "The URL of the public webpage to extract data from",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url",
                      "prompt"
                    ],
                    "type": "object"
                  },
                  "name": "extract-web-data"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "topoteretes": {
      "mcpproviderid": "topoteretes",
      "self": "#/mcpproviders/topoteretes",
      "xid": "/mcpproviders/topoteretes",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:28.799336531Z",
      "modifiedat": "2025-05-12T08:19:28.799336531Z",

      "serversurl": "#/mcpproviders/topoteretes/servers",
      "servers": {
        "cognee": {
          "serverid": "cognee",
          "self": "#/mcpproviders/topoteretes/servers/cognee",
          "xid": "/mcpproviders/topoteretes/servers/cognee",

          "metaurl": "#/mcpproviders/topoteretes/servers/cognee/meta",
          "meta": {
            "serverid": "cognee",
            "self": "#/mcpproviders/topoteretes/servers/cognee/meta",
            "xid": "/mcpproviders/topoteretes/servers/cognee/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:28.799336531Z",
            "modifiedat": "2025-05-12T08:19:28.799336531Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/topoteretes/servers/cognee/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/topoteretes/servers/cognee/versions",
          "versions": {
            "1": {
              "serverid": "cognee",
              "versionid": "1",
              "self": "#/mcpproviders/topoteretes/servers/cognee/versions/1",
              "xid": "/mcpproviders/topoteretes/servers/cognee/versions/1",
              "epoch": 1,
              "name": "io.github.topoteretes/cognee",
              "isdefault": true,
              "description": "Build dynamic Agent memory using scalable, modular ECL (Extract, Cognify, Load) pipelines.",
              "createdat": "2025-05-12T08:19:28.799336531Z",
              "modifiedat": "2025-05-12T08:19:28.799336531Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for LLM provider",
                        "name": "LLM_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "cognee"
                }
              ],
              "remotes": [],
              "repo_ref": "topoteretes/cognee",
              "resources": [],
              "tools": [
                {
                  "description": "Cognifies text into knowledge graph",
                  "inputschema": {
                    "properties": {
                      "graph_model_file": {
                        "description": "The path to the graph model file (Optional)",
                        "type": "string"
                      },
                      "graph_model_name": {
                        "description": "The name of the graph model (Optional)",
                        "type": "string"
                      },
                      "text": {
                        "description": "The text to cognify",
                        "type": "string"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "type": "object"
                  },
                  "name": "cognify"
                },
                {
                  "description": "Transforms codebase into knowledge graph",
                  "inputschema": {
                    "properties": {
                      "repo_path": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "repo_path"
                    ],
                    "type": "object"
                  },
                  "name": "codify"
                },
                {
                  "description": "Searches for information in knowledge graph",
                  "inputschema": {
                    "properties": {
                      "search_query": {
                        "description": "The query to search for",
                        "type": "string"
                      },
                      "search_type": {
                        "description": "The type of search to perform (e.g., INSIGHTS, CODE)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "search_query"
                    ],
                    "type": "object"
                  },
                  "name": "search"
                },
                {
                  "description": "Prunes knowledge graph",
                  "inputschema": {
                    "properties": {},
                    "type": "object"
                  },
                  "name": "prune"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "translated": {
      "mcpproviderid": "translated",
      "self": "#/mcpproviders/translated",
      "xid": "/mcpproviders/translated",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:19.301482992Z",
      "modifiedat": "2025-05-12T08:18:19.301482992Z",

      "serversurl": "#/mcpproviders/translated/servers",
      "servers": {
        "lara-mcp": {
          "serverid": "lara-mcp",
          "self": "#/mcpproviders/translated/servers/lara-mcp",
          "xid": "/mcpproviders/translated/servers/lara-mcp",

          "metaurl": "#/mcpproviders/translated/servers/lara-mcp/meta",
          "meta": {
            "serverid": "lara-mcp",
            "self": "#/mcpproviders/translated/servers/lara-mcp/meta",
            "xid": "/mcpproviders/translated/servers/lara-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:19.301482992Z",
            "modifiedat": "2025-05-12T08:18:19.301482992Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/translated/servers/lara-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/translated/servers/lara-mcp/versions",
          "versions": {
            "1": {
              "serverid": "lara-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/translated/servers/lara-mcp/versions/1",
              "xid": "/mcpproviders/translated/servers/lara-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.translated/lara-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) Server for Lara Translate API, enabling powerful translation capabilities with support for language detection, context-aware translations and translation memories.",
              "createdat": "2025-05-12T08:18:19.301482992Z",
              "modifiedat": "2025-05-12T08:18:19.301482992Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Access key ID for Lara Translate API",
                        "name": "LARA_ACCESS_KEY_ID",
                        "required": true
                      },
                      {
                        "description": "Access key secret for Lara Translate API",
                        "name": "LARA_ACCESS_KEY_SECRET",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@translated/lara-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "translated/lara-mcp",
              "resources": [
                {
                  "description": "List of translation memories in your Lara Translate account.",
                  "name": "Translation Memories",
                  "uritemplate": "memories://list"
                },
                {
                  "description": "List of Lara Translate supported languages.",
                  "name": "Supported Languages",
                  "uritemplate": "languages://list"
                }
              ],
              "tools": [
                {
                  "description": "Translate text between languages with support for language detection, context-aware translations and translation memories using Lara Translate.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "translate"
                },
                {
                  "description": "Create a translation memory with a custom name in your Lara Translate account. Translation memories store pairs of source and target text segments (translation units) for reuse in future translations.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "create_memory"
                },
                {
                  "description": "Deletes a translation memory from your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_memory"
                },
                {
                  "description": "Updates a translation memory in your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "update_memory"
                },
                {
                  "description": "Adds a translation to a translation memory in your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "add_translation"
                },
                {
                  "description": "Deletes a translation from a translation memory from your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "delete_translation"
                },
                {
                  "description": "Imports a TMX file into a translation memory in your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "import_tmx"
                },
                {
                  "description": "Checks the status of a TMX file import job in your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "check_import_status"
                },
                {
                  "description": "Lists all translation memories in your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_memories"
                },
                {
                  "description": "Lists all supported languages in your Lara Translate account.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "list_languages"
                }
              ],
              "version_detail": {
                "version": "0.0.10"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "unibaseio": {
      "mcpproviderid": "unibaseio",
      "self": "#/mcpproviders/unibaseio",
      "xid": "/mcpproviders/unibaseio",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:00.660932584Z",
      "modifiedat": "2025-05-12T08:18:00.660932584Z",

      "serversurl": "#/mcpproviders/unibaseio/servers",
      "servers": {
        "membase-mcp": {
          "serverid": "membase-mcp",
          "self": "#/mcpproviders/unibaseio/servers/membase-mcp",
          "xid": "/mcpproviders/unibaseio/servers/membase-mcp",

          "metaurl": "#/mcpproviders/unibaseio/servers/membase-mcp/meta",
          "meta": {
            "serverid": "membase-mcp",
            "self": "#/mcpproviders/unibaseio/servers/membase-mcp/meta",
            "xid": "/mcpproviders/unibaseio/servers/membase-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:00.660932584Z",
            "modifiedat": "2025-05-12T08:18:00.660932584Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/unibaseio/servers/membase-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/unibaseio/servers/membase-mcp/versions",
          "versions": {
            "1": {
              "serverid": "membase-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/unibaseio/servers/membase-mcp/versions/1",
              "xid": "/mcpproviders/unibaseio/servers/membase-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.unibaseio/membase-mcp",
              "isdefault": true,
              "description": "The membase mcp server enables seamless integration with the membase protocol for decentralized storage. It provides functionality to upload and download memory to/from the Unibase DA network, managing conversations and messages for AI agents.",
              "createdat": "2025-05-12T08:18:00.660932584Z",
              "modifiedat": "2025-05-12T08:18:00.660932584Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "your account to upload",
                        "name": "MEMBASE_ACCOUNT",
                        "required": true
                      },
                      {
                        "description": "your conversation id, should be unique, will preload its history",
                        "name": "MEMBASE_CONVERSATION_ID",
                        "required": true
                      },
                      {
                        "description": "your instance id",
                        "name": "MEMBASE_ID",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "path/to/membase-mcp",
                      "run",
                      "src/membase_mcp/server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "membase-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "unibaseio/membase-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Get the current conversation id.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_conversation_id"
                },
                {
                  "description": "Switch to a different conversation.",
                  "inputschema": {
                    "properties": {
                      "conversation_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "conversation_id"
                    ],
                    "type": "object"
                  },
                  "name": "switch_conversation"
                },
                {
                  "description": "Save a message/memory into the current conversation.",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "msg_type": {
                        "enum": [
                          "user",
                          "assistant"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "save_message"
                },
                {
                  "description": "Get the last n messages from the current conversation.",
                  "inputschema": {
                    "properties": {
                      "recent_n": {
                        "type": "integer"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_messages"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "v-3": {
      "mcpproviderid": "v-3",
      "self": "#/mcpproviders/v-3",
      "xid": "/mcpproviders/v-3",
      "epoch": 3,
      "createdat": "2025-05-12T08:17:56.579294774Z",
      "modifiedat": "2025-05-12T08:17:57.28391522Z",

      "serversurl": "#/mcpproviders/v-3/servers",
      "servers": {
        "discordmcp": {
          "serverid": "discordmcp",
          "self": "#/mcpproviders/v-3/servers/discordmcp",
          "xid": "/mcpproviders/v-3/servers/discordmcp",

          "metaurl": "#/mcpproviders/v-3/servers/discordmcp/meta",
          "meta": {
            "serverid": "discordmcp",
            "self": "#/mcpproviders/v-3/servers/discordmcp/meta",
            "xid": "/mcpproviders/v-3/servers/discordmcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:56.579294774Z",
            "modifiedat": "2025-05-12T08:17:56.579294774Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/v-3/servers/discordmcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/v-3/servers/discordmcp/versions",
          "versions": {
            "1": {
              "serverid": "discordmcp",
              "versionid": "1",
              "self": "#/mcpproviders/v-3/servers/discordmcp/versions/1",
              "xid": "/mcpproviders/v-3/servers/discordmcp/versions/1",
              "epoch": 1,
              "name": "io.github.v-3/discordmcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables LLMs to interact with Discord channels, allowing them to send and read messages through Discord's API. Using this server, LLMs like Claude can directly interact with Discord channels while maintaining user control and security.",
              "createdat": "2025-05-12T08:17:56.579294774Z",
              "modifiedat": "2025-05-12T08:17:56.579294774Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Discord bot token",
                        "name": "DISCORD_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "discordmcp"
                }
              ],
              "remotes": [],
              "repo_ref": "v-3/discordmcp",
              "resources": [],
              "tools": [
                {
                  "description": "Sends a message to a specified Discord channel.",
                  "inputschema": {
                    "properties": {
                      "channel": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      },
                      "server": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "channel",
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "send-message"
                },
                {
                  "description": "Reads recent messages from a specified Discord channel.",
                  "inputschema": {
                    "properties": {
                      "channel": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "server": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "channel"
                    ],
                    "type": "object"
                  },
                  "name": "read-messages"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "google-calendar": {
          "serverid": "google-calendar",
          "self": "#/mcpproviders/v-3/servers/google-calendar",
          "xid": "/mcpproviders/v-3/servers/google-calendar",

          "metaurl": "#/mcpproviders/v-3/servers/google-calendar/meta",
          "meta": {
            "serverid": "google-calendar",
            "self": "#/mcpproviders/v-3/servers/google-calendar/meta",
            "xid": "/mcpproviders/v-3/servers/google-calendar/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:56.913030939Z",
            "modifiedat": "2025-05-12T08:17:56.913030939Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/v-3/servers/google-calendar/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/v-3/servers/google-calendar/versions",
          "versions": {
            "1": {
              "serverid": "google-calendar",
              "versionid": "1",
              "self": "#/mcpproviders/v-3/servers/google-calendar/versions/1",
              "xid": "/mcpproviders/v-3/servers/google-calendar/versions/1",
              "epoch": 1,
              "name": "io.github.v-3/google-calendar",
              "isdefault": true,
              "description": "This MCP server allows Claude to interact with your Google Calendar, enabling capabilities like listing events, creating meetings, and finding free time slots.",
              "createdat": "2025-05-12T08:17:56.913030939Z",
              "modifiedat": "2025-05-12T08:17:56.913030939Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Google OAuth client ID",
                        "name": "GOOGLE_CLIENT_ID",
                        "required": true
                      },
                      {
                        "description": "Google OAuth client secret",
                        "name": "GOOGLE_CLIENT_SECRET",
                        "required": true
                      },
                      {
                        "description": "OAuth redirect URI",
                        "name": "GOOGLE_REDIRECT_URI",
                        "required": true
                      },
                      {
                        "description": "OAuth refresh token",
                        "name": "GOOGLE_REFRESH_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/google-calendar-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "v-3/google-calendar",
              "resources": [],
              "tools": [
                {
                  "description": "List calendar events within a specified time range",
                  "inputschema": {
                    "properties": {
                      "maxResults": {
                        "description": "Maximum number of events to return",
                        "type": "number"
                      },
                      "timeMax": {
                        "description": "End time (ISO string)",
                        "type": "string"
                      },
                      "timeMin": {
                        "description": "Start time (ISO string)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list_events"
                },
                {
                  "description": "Create a new calendar event",
                  "inputschema": {
                    "properties": {
                      "attendees": {
                        "description": "List of attendee email addresses",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "description": {
                        "description": "Event description",
                        "type": "string"
                      },
                      "endTime": {
                        "description": "Event end time (ISO string)",
                        "type": "string"
                      },
                      "startTime": {
                        "description": "Event start time (ISO string)",
                        "type": "string"
                      },
                      "summary": {
                        "description": "Event title",
                        "type": "string"
                      }
                    },
                    "required": [
                      "summary",
                      "startTime",
                      "endTime"
                    ],
                    "type": "object"
                  },
                  "name": "create_event"
                },
                {
                  "description": "Update an existing calendar event",
                  "inputschema": {
                    "properties": {
                      "description": {
                        "description": "New event description",
                        "type": "string"
                      },
                      "endTime": {
                        "description": "New end time (ISO string)",
                        "type": "string"
                      },
                      "eventId": {
                        "description": "ID of the event to update",
                        "type": "string"
                      },
                      "required": [
                        "eventId"
                      ],
                      "startTime": {
                        "description": "New start time (ISO string)",
                        "type": "string"
                      },
                      "summary": {
                        "description": "New event title",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "update_event"
                },
                {
                  "description": "Delete a calendar event",
                  "inputschema": {
                    "properties": {
                      "eventId": {
                        "description": "ID of the event to delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "eventId"
                    ],
                    "type": "object"
                  },
                  "name": "delete_event"
                },
                {
                  "description": "Find available time slots in the calendar",
                  "inputschema": {
                    "properties": {
                      "duration": {
                        "description": "Desired duration in minutes",
                        "type": "number"
                      },
                      "timeMax": {
                        "description": "End of time range (ISO string)",
                        "type": "string"
                      },
                      "timeMin": {
                        "description": "Start of time range (ISO string)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "timeMin",
                      "timeMax",
                      "duration"
                    ],
                    "type": "object"
                  },
                  "name": "find_free_time"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "notion-server": {
          "serverid": "notion-server",
          "self": "#/mcpproviders/v-3/servers/notion-server",
          "xid": "/mcpproviders/v-3/servers/notion-server",

          "metaurl": "#/mcpproviders/v-3/servers/notion-server/meta",
          "meta": {
            "serverid": "notion-server",
            "self": "#/mcpproviders/v-3/servers/notion-server/meta",
            "xid": "/mcpproviders/v-3/servers/notion-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:57.28391522Z",
            "modifiedat": "2025-05-12T08:17:57.28391522Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/v-3/servers/notion-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/v-3/servers/notion-server/versions",
          "versions": {
            "1": {
              "serverid": "notion-server",
              "versionid": "1",
              "self": "#/mcpproviders/v-3/servers/notion-server/versions/1",
              "xid": "/mcpproviders/v-3/servers/notion-server/versions/1",
              "epoch": 1,
              "name": "io.github.v-3/notion-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that provides seamless integration with Notion. This server enables Language Models to interact with your Notion workspace through standardized tools for searching, reading, creating, and updating pages and databases.",
              "createdat": "2025-05-12T08:17:57.28391522Z",
              "modifiedat": "2025-05-12T08:17:57.28391522Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Notion API key environment variable",
                        "name": "NOTION_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "/absolute/path/to/notion-server/build/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "v-3/notion-server",
              "resources": [],
              "tools": [
                {
                  "description": "Search through Notion pages",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_pages"
                },
                {
                  "description": "Read a regular page's content (not for databases - use retrieve_database for databases). Shows block IDs with their types (needed for block operations)",
                  "inputschema": {
                    "properties": {
                      "pageId": {
                        "description": "ID of the page to read",
                        "type": "string"
                      }
                    },
                    "required": [
                      "pageId"
                    ],
                    "type": "object"
                  },
                  "name": "read_page"
                },
                {
                  "description": "Create a new page or database item. For database items, include 'properties' matching database schema. For pages, use 'title' and 'content'",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "Page content in markdown format (optional)",
                        "type": "string"
                      },
                      "parentPageId": {
                        "description": "ID of the parent page where this page will be created",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Additional properties for database items (optional)",
                        "type": "object"
                      },
                      "title": {
                        "description": "Page title (optional)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "parentPageId"
                    ],
                    "type": "object"
                  },
                  "name": "create_page"
                },
                {
                  "description": "Update an existing Notion page",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "New content to append",
                        "type": "string"
                      },
                      "mode": {
                        "description": "Update mode: replace all content, append to existing, or merge",
                        "enum": [
                          "replace",
                          "append",
                          "merge"
                        ],
                        "optional": true,
                        "type": "string"
                      },
                      "pageId": {
                        "description": "ID of the page to update",
                        "type": "string"
                      },
                      "position": {
                        "description": "Position for merge mode: start or end",
                        "enum": [
                          "start",
                          "end"
                        ],
                        "optional": true,
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of content to append",
                        "enum": [
                          "paragraph",
                          "task",
                          "todo",
                          "heading",
                          "image"
                        ],
                        "optional": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "pageId",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "update_page"
                },
                {
                  "description": "Get all comments from a page",
                  "inputschema": {
                    "properties": {
                      "pageId": {
                        "description": "ID of the page",
                        "type": "string"
                      },
                      "pageSize": {
                        "description": "Number of comments to retrieve (max 100)",
                        "type": "number"
                      },
                      "startCursor": {
                        "description": "Pagination cursor",
                        "type": "string"
                      }
                    },
                    "required": [
                      "pageId"
                    ],
                    "type": "object"
                  },
                  "name": "retrieve_comments"
                },
                {
                  "description": "Add a comment to a page",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "Comment text",
                        "type": "string"
                      },
                      "pageId": {
                        "description": "ID of the page to comment on",
                        "type": "string"
                      }
                    },
                    "required": [
                      "pageId",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "add_comment"
                },
                {
                  "description": "Create a new database in a page",
                  "inputschema": {
                    "properties": {
                      "parentPageId": {
                        "description": "ID of the parent page",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Database schema properties",
                        "type": "object"
                      },
                      "title": {
                        "description": "Database title",
                        "type": "string"
                      }
                    },
                    "required": [
                      "parentPageId",
                      "title",
                      "properties"
                    ],
                    "type": "object"
                  },
                  "name": "create_database"
                },
                {
                  "description": "Query a database",
                  "inputschema": {
                    "properties": {
                      "databaseId": {
                        "description": "ID of the database",
                        "type": "string"
                      },
                      "filter": {
                        "description": "Filter conditions",
                        "type": "object"
                      },
                      "sort": {
                        "description": "Sort conditions",
                        "type": "object"
                      }
                    },
                    "required": [
                      "databaseId"
                    ],
                    "type": "object"
                  },
                  "name": "query_database"
                },
                {
                  "description": "Update a block's content (must use same type as original block, use read_page first to get block IDs and types)",
                  "inputschema": {
                    "properties": {
                      "blockId": {
                        "description": "ID of the block to update",
                        "type": "string"
                      },
                      "content": {
                        "description": "New content for the block",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of block",
                        "enum": [
                          "paragraph",
                          "heading_1",
                          "heading_2",
                          "heading_3",
                          "bulleted_list_item",
                          "numbered_list_item"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "blockId",
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "update_block"
                },
                {
                  "description": "Delete a specific block from a page",
                  "inputschema": {
                    "properties": {
                      "blockId": {
                        "description": "ID of the block to delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "blockId"
                    ],
                    "type": "object"
                  },
                  "name": "delete_block"
                },
                {
                  "description": "Update a database item's properties (use query_database first to see required property structure)",
                  "inputschema": {
                    "properties": {
                      "pageId": {
                        "description": "ID of the database item (page) to update",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Properties to update",
                        "type": "object"
                      }
                    },
                    "required": [
                      "pageId",
                      "properties"
                    ],
                    "type": "object"
                  },
                  "name": "update_database_item"
                },
                {
                  "description": "Retrieve a database's metadata",
                  "inputschema": {
                    "properties": {
                      "databaseId": {
                        "description": "ID of the database to retrieve",
                        "type": "string"
                      }
                    },
                    "required": [
                      "databaseId"
                    ],
                    "type": "object"
                  },
                  "name": "retrieve_database"
                },
                {
                  "description": "Update a database's properties",
                  "inputschema": {
                    "properties": {
                      "databaseId": {
                        "description": "ID of the database to update",
                        "type": "string"
                      },
                      "description": {
                        "description": "New description for the database",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Properties schema to update",
                        "type": "object"
                      },
                      "title": {
                        "description": "New title for the database",
                        "type": "string"
                      }
                    },
                    "required": [
                      "databaseId"
                    ],
                    "type": "object"
                  },
                  "name": "update_database"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 3
    },
    "varunneal": {
      "mcpproviderid": "varunneal",
      "self": "#/mcpproviders/varunneal",
      "xid": "/mcpproviders/varunneal",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:01.053692743Z",
      "modifiedat": "2025-05-12T08:18:01.053692743Z",

      "serversurl": "#/mcpproviders/varunneal/servers",
      "servers": {
        "spotify-mcp": {
          "serverid": "spotify-mcp",
          "self": "#/mcpproviders/varunneal/servers/spotify-mcp",
          "xid": "/mcpproviders/varunneal/servers/spotify-mcp",

          "metaurl": "#/mcpproviders/varunneal/servers/spotify-mcp/meta",
          "meta": {
            "serverid": "spotify-mcp",
            "self": "#/mcpproviders/varunneal/servers/spotify-mcp/meta",
            "xid": "/mcpproviders/varunneal/servers/spotify-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:01.053692743Z",
            "modifiedat": "2025-05-12T08:18:01.053692743Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/varunneal/servers/spotify-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/varunneal/servers/spotify-mcp/versions",
          "versions": {
            "1": {
              "serverid": "spotify-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/varunneal/servers/spotify-mcp/versions/1",
              "xid": "/mcpproviders/varunneal/servers/spotify-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.varunneal/spotify-mcp",
              "isdefault": true,
              "description": "MCP project to connect Claude with Spotify. Built on top of spotipy-dev's API. Supports playback control, search, info retrieval, and queue management.",
              "createdat": "2025-05-12T08:18:01.053692743Z",
              "modifiedat": "2025-05-12T08:18:01.053692743Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "--directory",
                      "/path/to/spotify_mcp",
                      "run",
                      "spotify-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "@modelcontextprotocol/inspector"
                }
              ],
              "remotes": [],
              "repo_ref": "varunneal/spotify-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Manages the current playback with the following actions: - get: Get information about user's current track. - start: Starts playing new item or resumes current playback if called with no uri. - pause: Pauses current playback. - skip: Skips current track.",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform: 'get', 'start', 'pause' or 'skip'.",
                        "type": "string"
                      },
                      "num_skips": {
                        "description": "Number of tracks to skip for `skip` action.",
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "spotify_uri": {
                        "description": "Spotify uri of item to play for 'start' action. If omitted, resumes current playback.",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "SpotifyPlayback"
                },
                {
                  "description": "Manage the playback queue - get the queue or add tracks.",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform: 'add' or 'get'.",
                        "type": "string"
                      },
                      "track_id": {
                        "description": "Track ID to add to queue (required for add action)",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "SpotifyQueue"
                },
                {
                  "description": "Get detailed information about a Spotify item (track, album, artist, or playlist).",
                  "inputschema": {
                    "properties": {
                      "item_uri": {
                        "description": "URI of the item to get information about. If 'playlist' or 'album', returns its tracks. If 'artist', returns albums and top tracks.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "item_uri"
                    ],
                    "type": "object"
                  },
                  "name": "SpotifyGetInfo"
                },
                {
                  "description": "Search for tracks, albums, artists, or playlists on Spotify.",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of items to return",
                        "type": "integer"
                      },
                      "qtype": {
                        "description": "Type of items to search for (track, album, artist, playlist, or comma-separated combination)",
                        "type": "string"
                      },
                      "query": {
                        "description": "query term",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "SpotifySearch"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "vectorize-io": {
      "mcpproviderid": "vectorize-io",
      "self": "#/mcpproviders/vectorize-io",
      "xid": "/mcpproviders/vectorize-io",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:36.344649998Z",
      "modifiedat": "2025-05-12T08:18:36.344649998Z",

      "serversurl": "#/mcpproviders/vectorize-io/servers",
      "servers": {
        "vectorize-mcp-server": {
          "serverid": "vectorize-mcp-server",
          "self": "#/mcpproviders/vectorize-io/servers/vectorize-mcp-server",
          "xid": "/mcpproviders/vectorize-io/servers/vectorize-mcp-server",

          "metaurl": "#/mcpproviders/vectorize-io/servers/vectorize-mcp-server/meta",
          "meta": {
            "serverid": "vectorize-mcp-server",
            "self": "#/mcpproviders/vectorize-io/servers/vectorize-mcp-server/meta",
            "xid": "/mcpproviders/vectorize-io/servers/vectorize-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:36.344649998Z",
            "modifiedat": "2025-05-12T08:18:36.344649998Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/vectorize-io/servers/vectorize-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/vectorize-io/servers/vectorize-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "vectorize-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/vectorize-io/servers/vectorize-mcp-server/versions/1",
              "xid": "/mcpproviders/vectorize-io/servers/vectorize-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.vectorize-io/vectorize-mcp-server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation that integrates with Vectorize for advanced Vector retrieval and text extraction.",
              "createdat": "2025-05-12T08:18:36.344649998Z",
              "modifiedat": "2025-05-12T08:18:36.344649998Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Vectorize Organization ID",
                        "name": "VECTORIZE_ORG_ID",
                        "required": true
                      },
                      {
                        "description": "Vectorize Token",
                        "name": "VECTORIZE_TOKEN",
                        "required": true
                      },
                      {
                        "description": "Vectorize Pipeline ID",
                        "name": "VECTORIZE_PIPELINE_ID",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "-y",
                      "@vectorize-io/vectorize-mcp-server@latest"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@vectorize-io/vectorize-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "vectorize-io/vectorize-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve documents from the configured pipeline.",
                  "inputschema": {
                    "properties": {
                      "k": {
                        "default": 4,
                        "description": "The number of documents to retrieve.",
                        "type": "number"
                      },
                      "question": {
                        "description": "The term to search for.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "question"
                    ],
                    "type": "object"
                  },
                  "name": "retrieve"
                },
                {
                  "description": "Generate a deep research on the configured pipeline.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The deep research query.",
                        "type": "string"
                      },
                      "webSearch": {
                        "description": "Whether to perform a web search.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "query",
                      "webSearch"
                    ],
                    "type": "object"
                  },
                  "name": "deep-research"
                },
                {
                  "description": "Perform text extraction and chunking on a document.",
                  "inputschema": {
                    "properties": {
                      "base64Document": {
                        "description": "Document encoded in base64.",
                        "type": "string"
                      },
                      "contentType": {
                        "description": "Document content type.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "base64Document",
                      "contentType"
                    ],
                    "type": "object"
                  },
                  "name": "extract"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "vidhupv": {
      "mcpproviderid": "vidhupv",
      "self": "#/mcpproviders/vidhupv",
      "xid": "/mcpproviders/vidhupv",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:14.611693809Z",
      "modifiedat": "2025-05-12T08:19:14.611693809Z",

      "serversurl": "#/mcpproviders/vidhupv/servers",
      "servers": {
        "x-mcp": {
          "serverid": "x-mcp",
          "self": "#/mcpproviders/vidhupv/servers/x-mcp",
          "xid": "/mcpproviders/vidhupv/servers/x-mcp",

          "metaurl": "#/mcpproviders/vidhupv/servers/x-mcp/meta",
          "meta": {
            "serverid": "x-mcp",
            "self": "#/mcpproviders/vidhupv/servers/x-mcp/meta",
            "xid": "/mcpproviders/vidhupv/servers/x-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:14.611693809Z",
            "modifiedat": "2025-05-12T08:19:14.611693809Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/vidhupv/servers/x-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/vidhupv/servers/x-mcp/versions",
          "versions": {
            "1": {
              "serverid": "x-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/vidhupv/servers/x-mcp/versions/1",
              "xid": "/mcpproviders/vidhupv/servers/x-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.vidhupv/x-mcp",
              "isdefault": true,
              "description": "An MCP server to create, manage and publish X/Twitter posts directly through Claude chat.",
              "createdat": "2025-05-12T08:19:14.611693809Z",
              "modifiedat": "2025-05-12T08:19:14.611693809Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Twitter API key",
                        "name": "TWITTER_API_KEY",
                        "required": true
                      },
                      {
                        "description": "Twitter API secret",
                        "name": "TWITTER_API_SECRET",
                        "required": true
                      },
                      {
                        "description": "Twitter access token",
                        "name": "TWITTER_ACCESS_TOKEN",
                        "required": true
                      },
                      {
                        "description": "Twitter access token secret",
                        "name": "TWITTER_ACCESS_TOKEN_SECRET",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "/path/to/x-mcp",
                      "run",
                      "x-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "x-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "vidhupv/x-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Create a draft tweet",
                  "inputschema": {
                    "properties": {
                      "content": {
                        "description": "The content of the tweet",
                        "type": "string"
                      }
                    },
                    "required": [
                      "content"
                    ],
                    "type": "object"
                  },
                  "name": "create_draft_tweet"
                },
                {
                  "description": "Create a draft tweet thread",
                  "inputschema": {
                    "properties": {
                      "contents": {
                        "description": "An array of tweet contents for the thread",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "contents"
                    ],
                    "type": "object"
                  },
                  "name": "create_draft_thread"
                },
                {
                  "description": "List all draft tweets and threads",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_drafts"
                },
                {
                  "description": "Publish a draft tweet or thread",
                  "inputschema": {
                    "properties": {
                      "draft_id": {
                        "description": "ID of the draft to publish",
                        "type": "string"
                      }
                    },
                    "required": [
                      "draft_id"
                    ],
                    "type": "object"
                  },
                  "name": "publish_draft"
                },
                {
                  "description": "Delete a draft tweet or thread",
                  "inputschema": {
                    "properties": {
                      "draft_id": {
                        "description": "ID of the draft to delete",
                        "type": "string"
                      }
                    },
                    "required": [
                      "draft_id"
                    ],
                    "type": "object"
                  },
                  "name": "delete_draft"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "vishalmysore": {
      "mcpproviderid": "vishalmysore",
      "self": "#/mcpproviders/vishalmysore",
      "xid": "/mcpproviders/vishalmysore",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:06.500287837Z",
      "modifiedat": "2025-05-12T08:22:06.500287837Z",

      "serversurl": "#/mcpproviders/vishalmysore/servers",
      "servers": {
        "choturobo": {
          "serverid": "choturobo",
          "self": "#/mcpproviders/vishalmysore/servers/choturobo",
          "xid": "/mcpproviders/vishalmysore/servers/choturobo",

          "metaurl": "#/mcpproviders/vishalmysore/servers/choturobo/meta",
          "meta": {
            "serverid": "choturobo",
            "self": "#/mcpproviders/vishalmysore/servers/choturobo/meta",
            "xid": "/mcpproviders/vishalmysore/servers/choturobo/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:06.500287837Z",
            "modifiedat": "2025-05-12T08:22:06.500287837Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/vishalmysore/servers/choturobo/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/vishalmysore/servers/choturobo/versions",
          "versions": {
            "1": {
              "serverid": "choturobo",
              "versionid": "1",
              "self": "#/mcpproviders/vishalmysore/servers/choturobo/versions/1",
              "xid": "/mcpproviders/vishalmysore/servers/choturobo/versions/1",
              "epoch": 1,
              "name": "io.github.vishalmysore/choturobo",
              "isdefault": true,
              "description": "Arduino-based robotics server integrating AI using the MCP (Model Context Protocol) framework from Claude AI by Anthropic. Controls hardware components like LEDs, motors, servos, fans, sensors via MCP tools and prompts.",
              "createdat": "2025-05-12T08:22:06.500287837Z",
              "modifiedat": "2025-05-12T08:22:06.500287837Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "name": "steps"
                    }
                  ],
                  "description": "Prompt to move Chotu a specified number of steps.",
                  "name": "move-chotu"
                },
                {
                  "arguments": [],
                  "description": "Prompt to initialize Chotu and prepare for operation.",
                  "name": "start-chotu"
                },
                {
                  "arguments": [],
                  "description": "Prompt to stop Chotu safely and shut down operations.",
                  "name": "stop-chotu"
                },
                {
                  "arguments": [
                    {
                      "name": "direction"
                    }
                  ],
                  "description": "Prompt to turn Chotu left or right.",
                  "name": "turn-chotu"
                },
                {
                  "arguments": [
                    {
                      "name": "speed"
                    }
                  ],
                  "description": "Prompt to set Chotu's speed.",
                  "name": "set-chotu-speed"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "server.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "vishalmysore/choturobo",
              "resources": [],
              "tools": [
                {
                  "description": "Blink the eyes of Chotu for a specified time.",
                  "inputschema": {
                    "properties": {
                      "time": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "time"
                    ],
                    "type": "object"
                  },
                  "name": "chotuBlinkEyes"
                },
                {
                  "description": "Sound a buzzer for a specified time.",
                  "inputschema": {
                    "properties": {
                      "time": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "time"
                    ],
                    "type": "object"
                  },
                  "name": "chotuBuzzSound"
                },
                {
                  "description": "Run a motor at a certain speed.",
                  "inputschema": {
                    "properties": {
                      "speed": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "speed"
                    ],
                    "type": "object"
                  },
                  "name": "runMotor"
                },
                {
                  "description": "Move a servo motor to a specific angle.",
                  "inputschema": {
                    "properties": {
                      "angle": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "angle"
                    ],
                    "type": "object"
                  },
                  "name": "moveServo"
                },
                {
                  "description": "Turn a fan on or off.",
                  "inputschema": {
                    "properties": {
                      "state": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "state"
                    ],
                    "type": "object"
                  },
                  "name": "controlFan"
                },
                {
                  "description": "Switch a relay on or off.",
                  "inputschema": {
                    "properties": {
                      "state": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "state"
                    ],
                    "type": "object"
                  },
                  "name": "toggleRelay"
                },
                {
                  "description": "Read temperature from a sensor.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "readTemperature"
                },
                {
                  "description": "Measure distance using an ultrasonic sensor.",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "readDistance"
                },
                {
                  "description": "Move the motor clockwise for a number of steps.",
                  "inputschema": {
                    "properties": {
                      "steps": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "steps"
                    ],
                    "type": "object"
                  },
                  "name": "moveBackward"
                },
                {
                  "description": "Move the motor counterclockwise for a number of steps.",
                  "inputschema": {
                    "properties": {
                      "steps": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "steps"
                    ],
                    "type": "object"
                  },
                  "name": "moveForward"
                },
                {
                  "description": "Make Chotu speak a given message.",
                  "inputschema": {
                    "properties": {
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "makeChotuSpeak"
                },
                {
                  "description": "Make Chotu sing a given message.",
                  "inputschema": {
                    "properties": {
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "message"
                    ],
                    "type": "object"
                  },
                  "name": "makeChotuSing"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "vivekVells": {
      "mcpproviderid": "vivekVells",
      "self": "#/mcpproviders/vivekVells",
      "xid": "/mcpproviders/vivekVells",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:47.571417791Z",
      "modifiedat": "2025-05-12T08:17:47.571417791Z",

      "serversurl": "#/mcpproviders/vivekVells/servers",
      "servers": {
        "mcp-pandoc": {
          "serverid": "mcp-pandoc",
          "self": "#/mcpproviders/vivekVells/servers/mcp-pandoc",
          "xid": "/mcpproviders/vivekVells/servers/mcp-pandoc",

          "metaurl": "#/mcpproviders/vivekVells/servers/mcp-pandoc/meta",
          "meta": {
            "serverid": "mcp-pandoc",
            "self": "#/mcpproviders/vivekVells/servers/mcp-pandoc/meta",
            "xid": "/mcpproviders/vivekVells/servers/mcp-pandoc/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:47.571417791Z",
            "modifiedat": "2025-05-12T08:17:47.571417791Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/vivekVells/servers/mcp-pandoc/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/vivekVells/servers/mcp-pandoc/versions",
          "versions": {
            "1": {
              "serverid": "mcp-pandoc",
              "versionid": "1",
              "self": "#/mcpproviders/vivekVells/servers/mcp-pandoc/versions/1",
              "xid": "/mcpproviders/vivekVells/servers/mcp-pandoc/versions/1",
              "epoch": 1,
              "name": "io.github.vivekVells/mcp-pandoc",
              "isdefault": true,
              "description": "A Model Context Protocol server for document format conversion using pandoc. This server provides tools to transform content between different document formats while preserving formatting and structure.",
              "createdat": "2025-05-12T08:17:47.571417791Z",
              "modifiedat": "2025-05-12T08:17:47.571417791Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "mcp-pandoc"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "mcp-pandoc"
                }
              ],
              "remotes": [],
              "repo_ref": "vivekVells/mcp-pandoc",
              "resources": [],
              "tools": [
                {
                  "description": "Converts content between different formats. Transforms input content from any supported format into the specified output format.\n\n🚨 CRITICAL REQUIREMENTS - PLEASE READ:\n1. PDF Conversion:\n   * You MUST install TeX Live BEFORE attempting PDF conversion:\n   * Ubuntu/Debian: `sudo apt-get install texlive-xetex`\n   * macOS: `brew install texlive`\n   * Windows: Install MiKTeX or TeX Live from https://miktex.org/ or https://tug.org/texlive/\n   * PDF conversion will FAIL without this installation\n\n2. File Paths - EXPLICIT REQUIREMENTS:\n   * When asked to save or convert to a file, you MUST provide:\n     - Complete directory path\n     - Filename\n     - File extension\n   * Example request: 'Write a story and save as PDF'\n   * You MUST specify: '/path/to/story.pdf' or 'C:\\Documents\\story.pdf'\n   * The tool will NOT automatically generate filenames or extensions\n\n3. File Location After Conversion:\n   * After successful conversion, the tool will display the exact path where the file is saved\n   * Look for message: 'Content successfully converted and saved to: [file_path]'\n   * You can find your converted file at the specified location\n   * If no path is specified, files may be saved in system temp directory (/tmp/ on Unix systems)\n   * For better control, always provide explicit output file paths\n\nSupported formats:\n- Basic formats: txt, html, markdown\n- Advanced formats (REQUIRE complete file paths): pdf, docx, rst, latex, epub\n\n✅ CORRECT Usage Examples:\n1. 'Convert this text to HTML' (basic conversion)\n   - Tool will show converted content\n\n2. 'Save this text as PDF at /documents/story.pdf'\n   - Correct: specifies path + filename + extension\n   - Tool will show: 'Content successfully converted and saved to: /documents/story.pdf'\n\n❌ INCORRECT Usage Examples:\n1. 'Save this as PDF in /documents/'\n   - Missing filename and extension\n2. 'Convert to PDF'\n   - Missing complete file path\n\nWhen requesting conversion, ALWAYS specify:\n1. The content or input file\n2. The desired output format\n3. For advanced formats: complete output path + filename + extension\nExample: 'Convert this markdown to PDF and save as /path/to/output.pdf'\n\nNote: After conversion, always check the success message for the exact file location.",
                  "inputschema": {
                    "allOf": [
                      {
                        "if": {
                          "properties": {
                            "output_format": {
                              "enum": [
                                "pdf",
                                "docx",
                                "rst",
                                "latex",
                                "epub"
                              ]
                            }
                          }
                        },
                        "then": {
                          "required": [
                            "output_file"
                          ]
                        }
                      }
                    ],
                    "oneOf": [
                      {
                        "required": [
                          "contents"
                        ]
                      },
                      {
                        "required": [
                          "input_file"
                        ]
                      }
                    ],
                    "properties": {
                      "contents": {
                        "description": "The content to be converted (required if input_file not provided)",
                        "type": "string"
                      },
                      "input_file": {
                        "description": "Complete path to input file including filename and extension (e.g., '/path/to/input.md')",
                        "type": "string"
                      },
                      "input_format": {
                        "default": "markdown",
                        "description": "Source format of the content (defaults to markdown)",
                        "enum": [
                          "markdown",
                          "html",
                          "pdf",
                          "docx",
                          "rst",
                          "latex",
                          "epub",
                          "txt"
                        ],
                        "type": "string"
                      },
                      "output_file": {
                        "description": "Complete path where to save the output including filename and extension (required for pdf, docx, rst, latex, epub formats)",
                        "type": "string"
                      },
                      "output_format": {
                        "default": "markdown",
                        "description": "Desired output format (defaults to markdown)",
                        "enum": [
                          "markdown",
                          "html",
                          "pdf",
                          "docx",
                          "rst",
                          "latex",
                          "epub",
                          "txt"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "convert-contents"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "voska": {
      "mcpproviderid": "voska",
      "self": "#/mcpproviders/voska",
      "xid": "/mcpproviders/voska",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:18.618836132Z",
      "modifiedat": "2025-05-12T08:18:18.618836132Z",

      "serversurl": "#/mcpproviders/voska/servers",
      "servers": {
        "hass-mcp": {
          "serverid": "hass-mcp",
          "self": "#/mcpproviders/voska/servers/hass-mcp",
          "xid": "/mcpproviders/voska/servers/hass-mcp",

          "metaurl": "#/mcpproviders/voska/servers/hass-mcp/meta",
          "meta": {
            "serverid": "hass-mcp",
            "self": "#/mcpproviders/voska/servers/hass-mcp/meta",
            "xid": "/mcpproviders/voska/servers/hass-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:18.618836132Z",
            "modifiedat": "2025-05-12T08:18:18.618836132Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/voska/servers/hass-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/voska/servers/hass-mcp/versions",
          "versions": {
            "1": {
              "serverid": "hass-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/voska/servers/hass-mcp/versions/1",
              "xid": "/mcpproviders/voska/servers/hass-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.voska/hass-mcp",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server for Home Assistant integration with Claude and other LLMs. Enables AI assistants to query device states, control entities, get summaries, troubleshoot automations, search entities, and create guided conversations.",
              "createdat": "2025-05-12T08:18:18.618836132Z",
              "modifiedat": "2025-05-12T08:18:18.618836132Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "The type of trigger for the automation",
                      "name": "trigger_type",
                      "required": true
                    },
                    {
                      "description": "Optional entity to use as the trigger source",
                      "name": "entity_id",
                      "required": false
                    }
                  ],
                  "description": "Guide a user through creating a Home Assistant automation",
                  "name": "create_automation"
                },
                {
                  "arguments": [
                    {
                      "description": "The entity ID of the automation to troubleshoot",
                      "name": "automation_id",
                      "required": true
                    }
                  ],
                  "description": "Help a user troubleshoot an automation that isn't working",
                  "name": "debug_automation"
                },
                {
                  "arguments": [
                    {
                      "description": "The entity ID having issues",
                      "name": "entity_id",
                      "required": true
                    }
                  ],
                  "description": "Guide a user through troubleshooting issues with an entity",
                  "name": "troubleshoot_entity"
                },
                {
                  "arguments": [],
                  "description": "Analyze usage patterns and suggest optimized routines based on actual behavior",
                  "name": "routine_optimizer"
                },
                {
                  "arguments": [],
                  "description": "Review all automations, find conflicts, redundancies, or improvement opportunities",
                  "name": "automation_health_check"
                },
                {
                  "arguments": [],
                  "description": "Audit entity names and suggest standardization improvements",
                  "name": "entity_naming_consistency"
                },
                {
                  "arguments": [],
                  "description": "Create optimized dashboards based on user preferences and usage patterns",
                  "name": "dashboard_layout_generator"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "URL of the Home Assistant instance",
                        "name": "HA_URL",
                        "required": true
                      },
                      {
                        "description": "Home Assistant Long-Lived Access Token",
                        "name": "HA_TOKEN",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "run",
                      "-i",
                      "--rm",
                      "-e",
                      "HA_URL",
                      "-e",
                      "HA_TOKEN",
                      "voska/hass-mcp"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "voska/hass-mcp:latest"
                }
              ],
              "remotes": [],
              "repo_ref": "voska/hass-mcp",
              "resources": [
                {
                  "description": "Get the state of a Home Assistant entity as a resource",
                  "mimetype": "text/markdown",
                  "name": "entity",
                  "uritemplate": "hass://entities/{entity_id}"
                },
                {
                  "description": "Get a list of all Home Assistant entities as a resource",
                  "mimetype": "text/markdown",
                  "name": "entities",
                  "uritemplate": "hass://entities"
                },
                {
                  "description": "Search for entities matching a query string with a specified result limit",
                  "mimetype": "text/markdown",
                  "name": "search_entities",
                  "uritemplate": "hass://search/{query}/{limit}"
                },
                {
                  "description": "Get detailed information about a Home Assistant entity as a resource",
                  "mimetype": "text/markdown",
                  "name": "entity_detailed",
                  "uritemplate": "hass://entities/{entity_id}/detailed"
                },
                {
                  "description": "Get a list of entities for a specific domain as a resource",
                  "mimetype": "text/markdown",
                  "name": "entities_by_domain",
                  "uritemplate": "hass://entities/domain/{domain}"
                }
              ],
              "tools": [
                {
                  "description": "Get the Home Assistant version",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_version"
                },
                {
                  "description": "Get the state of a Home Assistant entity with optional field filtering",
                  "inputschema": {
                    "properties": {
                      "detailed": {
                        "description": "Return all entity fields without filtering",
                        "type": "boolean"
                      },
                      "entity_id": {
                        "description": "The entity ID to get (e.g. 'light.living_room')",
                        "type": "string"
                      },
                      "fields": {
                        "description": "Optional list of fields to include",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "entity_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_entity"
                },
                {
                  "description": "Perform an action on a Home Assistant entity (on, off, toggle)",
                  "inputschema": {
                    "properties": {
                      "action": {
                        "description": "Action to perform ('on', 'off', 'toggle')",
                        "type": "string"
                      },
                      "entity_id": {
                        "description": "The entity ID to control",
                        "type": "string"
                      }
                    },
                    "required": [
                      "entity_id",
                      "action"
                    ],
                    "type": "object"
                  },
                  "name": "entity_action"
                },
                {
                  "description": "Get a list of Home Assistant entities with optional filtering",
                  "inputschema": {
                    "properties": {
                      "detailed": {
                        "description": "Return all entity fields without filtering",
                        "type": "boolean"
                      },
                      "domain": {
                        "description": "Optional domain to filter by",
                        "type": "string"
                      },
                      "fields": {
                        "description": "Optional list of specific fields to include",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "limit": {
                        "description": "Maximum number of entities to return",
                        "type": "integer"
                      },
                      "search_query": {
                        "description": "Optional search term to filter entities",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_entities"
                },
                {
                  "description": "Search for entities matching a query string",
                  "inputschema": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of results to return",
                        "type": "integer"
                      },
                      "query": {
                        "description": "Search query to match entity IDs, names, and attributes",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_entities_tool"
                },
                {
                  "description": "Get a summary of entities in a specific domain",
                  "inputschema": {
                    "properties": {
                      "domain": {
                        "description": "The domain to summarize",
                        "type": "string"
                      },
                      "example_limit": {
                        "description": "Maximum number of examples to include for each state",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "domain"
                    ],
                    "type": "object"
                  },
                  "name": "domain_summary"
                },
                {
                  "description": "Get a comprehensive overview of the entire Home Assistant system",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "system_overview"
                },
                {
                  "description": "Get a list of all automations from Home Assistant",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "list_automations"
                },
                {
                  "description": "Restart Home Assistant",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "restart_ha"
                },
                {
                  "description": "Call any Home Assistant service (low-level API access)",
                  "inputschema": {
                    "properties": {
                      "data": {
                        "description": "Optional data to pass to the service",
                        "type": [
                          "object",
                          "null"
                        ]
                      },
                      "domain": {
                        "description": "The domain of the service",
                        "type": "string"
                      },
                      "service": {
                        "description": "The service to call",
                        "type": "string"
                      }
                    },
                    "required": [
                      "domain",
                      "service"
                    ],
                    "type": "object"
                  },
                  "name": "call_service"
                },
                {
                  "description": "Get the history of an entity's state changes",
                  "inputschema": {
                    "properties": {
                      "entity_id": {
                        "description": "The entity ID to get history for",
                        "type": "string"
                      },
                      "hours": {
                        "description": "Number of hours of history to retrieve",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "entity_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_history"
                },
                {
                  "description": "Get the Home Assistant error log for troubleshooting",
                  "inputschema": {
                    "properties": {},
                    "required": [],
                    "type": "object"
                  },
                  "name": "get_error_log"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "wanaku-ai": {
      "mcpproviderid": "wanaku-ai",
      "self": "#/mcpproviders/wanaku-ai",
      "xid": "/mcpproviders/wanaku-ai",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:39.453478679Z",
      "modifiedat": "2025-05-12T08:22:39.453478679Z",

      "serversurl": "#/mcpproviders/wanaku-ai/servers",
      "servers": {
        "wanaku": {
          "serverid": "wanaku",
          "self": "#/mcpproviders/wanaku-ai/servers/wanaku",
          "xid": "/mcpproviders/wanaku-ai/servers/wanaku",

          "metaurl": "#/mcpproviders/wanaku-ai/servers/wanaku/meta",
          "meta": {
            "serverid": "wanaku",
            "self": "#/mcpproviders/wanaku-ai/servers/wanaku/meta",
            "xid": "/mcpproviders/wanaku-ai/servers/wanaku/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:39.453478679Z",
            "modifiedat": "2025-05-12T08:22:39.453478679Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/wanaku-ai/servers/wanaku/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/wanaku-ai/servers/wanaku/versions",
          "versions": {
            "1": {
              "serverid": "wanaku",
              "versionid": "1",
              "self": "#/mcpproviders/wanaku-ai/servers/wanaku/versions/1",
              "xid": "/mcpproviders/wanaku-ai/servers/wanaku/versions/1",
              "epoch": 1,
              "name": "io.github.wanaku-ai/wanaku",
              "isdefault": true,
              "description": "The Wanaku MCP Router is a router for AI-enabled applications powered by the Model Context Protocol (MCP). This protocol is an open protocol that standardizes how applications provide context to LLMs.",
              "createdat": "2025-05-12T08:22:39.453478679Z",
              "modifiedat": "2025-05-12T08:22:39.453478679Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "unknown",
                  "package_name": "unknown"
                }
              ],
              "remotes": [],
              "repo_ref": "wanaku-ai/wanaku",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "whataboutyou-ai": {
      "mcpproviderid": "whataboutyou-ai",
      "self": "#/mcpproviders/whataboutyou-ai",
      "xid": "/mcpproviders/whataboutyou-ai",
      "epoch": 1,
      "createdat": "2025-05-12T08:17:37.872021001Z",
      "modifiedat": "2025-05-12T08:17:37.872021001Z",

      "serversurl": "#/mcpproviders/whataboutyou-ai/servers",
      "servers": {
        "eunomia-mcp-server": {
          "serverid": "eunomia-mcp-server",
          "self": "#/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server",
          "xid": "/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server",

          "metaurl": "#/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server/meta",
          "meta": {
            "serverid": "eunomia-mcp-server",
            "self": "#/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server/meta",
            "xid": "/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:17:37.872021001Z",
            "modifiedat": "2025-05-12T08:17:37.872021001Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "eunomia-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server/versions/1",
              "xid": "/mcpproviders/whataboutyou-ai/servers/eunomia-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.whataboutyou-ai/eunomia-mcp-server",
              "isdefault": true,
              "description": "Eunomia MCP Server is an extension of the Eunomia framework that connects Eunomia instruments with MCP servers. It provides a simple way to orchestrate data governance policies (like PII detection or user access control) and seamlessly integrate them with external server processes in the MCP ecosystem.",
              "createdat": "2025-05-12T08:17:37.872021001Z",
              "modifiedat": "2025-05-12T08:17:37.872021001Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "run",
                      "orchestra_server"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python-asyncio",
                  "package_name": "eunomia-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "whataboutyou-ai/eunomia-mcp-server",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "wildfly-extras": {
      "mcpproviderid": "wildfly-extras",
      "self": "#/mcpproviders/wildfly-extras",
      "xid": "/mcpproviders/wildfly-extras",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:44.229344735Z",
      "modifiedat": "2025-05-12T08:19:44.229344735Z",

      "serversurl": "#/mcpproviders/wildfly-extras/servers",
      "servers": {
        "wildfly-mcp": {
          "serverid": "wildfly-mcp",
          "self": "#/mcpproviders/wildfly-extras/servers/wildfly-mcp",
          "xid": "/mcpproviders/wildfly-extras/servers/wildfly-mcp",

          "metaurl": "#/mcpproviders/wildfly-extras/servers/wildfly-mcp/meta",
          "meta": {
            "serverid": "wildfly-mcp",
            "self": "#/mcpproviders/wildfly-extras/servers/wildfly-mcp/meta",
            "xid": "/mcpproviders/wildfly-extras/servers/wildfly-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:44.229344735Z",
            "modifiedat": "2025-05-12T08:19:44.229344735Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/wildfly-extras/servers/wildfly-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/wildfly-extras/servers/wildfly-mcp/versions",
          "versions": {
            "1": {
              "serverid": "wildfly-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/wildfly-extras/servers/wildfly-mcp/versions/1",
              "xid": "/mcpproviders/wildfly-extras/servers/wildfly-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.wildfly-extras/wildfly-mcp",
              "isdefault": true,
              "description": "A WildFly MCP server to integrate with your AI chatbot in order to interact with WildFly server using natural language.",
              "createdat": "2025-05-12T08:19:44.229344735Z",
              "modifiedat": "2025-05-12T08:19:44.229344735Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [],
              "remotes": [],
              "repo_ref": "wildfly-extras/wildfly-mcp",
              "resources": [],
              "tools": []
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "wilsonchenghy": {
      "mcpproviderid": "wilsonchenghy",
      "self": "#/mcpproviders/wilsonchenghy",
      "xid": "/mcpproviders/wilsonchenghy",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:19.120064887Z",
      "modifiedat": "2025-05-12T08:19:19.120064887Z",

      "serversurl": "#/mcpproviders/wilsonchenghy/servers",
      "servers": {
        "ShaderToy-MCP": {
          "serverid": "ShaderToy-MCP",
          "self": "#/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP",
          "xid": "/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP",

          "metaurl": "#/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP/meta",
          "meta": {
            "serverid": "ShaderToy-MCP",
            "self": "#/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP/meta",
            "xid": "/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:19.120064887Z",
            "modifiedat": "2025-05-12T08:19:19.120064887Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP/versions",
          "versions": {
            "1": {
              "serverid": "ShaderToy-MCP",
              "versionid": "1",
              "self": "#/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP/versions/1",
              "xid": "/mcpproviders/wilsonchenghy/servers/ShaderToy-MCP/versions/1",
              "epoch": 1,
              "name": "io.github.wilsonchenghy/ShaderToy-MCP",
              "isdefault": true,
              "description": "MCP Server for ShaderToy, connecting LLM like Claude with ShaderToy through Model Context Protocol (MCP), allowing the LLM to query and read the entire web page and generate complex shaders.",
              "createdat": "2025-05-12T08:19:19.120064887Z",
              "modifiedat": "2025-05-12T08:19:19.120064887Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "API key for ShaderToy access",
                        "name": "SHADERTOY_APP_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "run",
                      "--with",
                      "mcp[cli]",
                      "mcp",
                      "run",
                      "\u003cpath_to_project\u003e/ShaderToy-MCP/src/ShaderToy-MCP/server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "mcp[cli]"
                }
              ],
              "remotes": [],
              "repo_ref": "wilsonchenghy/ShaderToy-MCP",
              "resources": [],
              "tools": [
                {
                  "description": "Retrieve information on any shader on ShaderToy.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_shader_info"
                },
                {
                  "description": "Search for shaders available on ShaderToy through a search prompt.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "search_shader"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "xxxbrian": {
      "mcpproviderid": "xxxbrian",
      "self": "#/mcpproviders/xxxbrian",
      "xid": "/mcpproviders/xxxbrian",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:32.406783882Z",
      "modifiedat": "2025-05-12T08:18:32.406783882Z",

      "serversurl": "#/mcpproviders/xxxbrian/servers",
      "servers": {
        "mcp-rquest": {
          "serverid": "mcp-rquest",
          "self": "#/mcpproviders/xxxbrian/servers/mcp-rquest",
          "xid": "/mcpproviders/xxxbrian/servers/mcp-rquest",

          "metaurl": "#/mcpproviders/xxxbrian/servers/mcp-rquest/meta",
          "meta": {
            "serverid": "mcp-rquest",
            "self": "#/mcpproviders/xxxbrian/servers/mcp-rquest/meta",
            "xid": "/mcpproviders/xxxbrian/servers/mcp-rquest/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:32.406783882Z",
            "modifiedat": "2025-05-12T08:18:32.406783882Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/xxxbrian/servers/mcp-rquest/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/xxxbrian/servers/mcp-rquest/versions",
          "versions": {
            "1": {
              "serverid": "mcp-rquest",
              "versionid": "1",
              "self": "#/mcpproviders/xxxbrian/servers/mcp-rquest/versions/1",
              "xid": "/mcpproviders/xxxbrian/servers/mcp-rquest/versions/1",
              "epoch": 1,
              "name": "io.github.xxxbrian/mcp-rquest",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that provides advanced HTTP request capabilities for Claude and other LLMs. Built on rquest, this server enables realistic browser emulation with accurate TLS/JA3/JA4 fingerprints, allowing models to interact with websites more naturally and bypass common anti-bot measures. It also supports converting PDF and HTML documents to Markdown for easier processing by LLMs.",
              "createdat": "2025-05-12T08:18:32.406783882Z",
              "modifiedat": "2025-05-12T08:18:32.406783882Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "mcp-rquest"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uvx",
                  "package_name": "mcp-rquest"
                }
              ],
              "remotes": [],
              "repo_ref": "xxxbrian/mcp-rquest",
              "resources": [],
              "tools": [
                {
                  "description": "Perform GET requests with optional parameters",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_get"
                },
                {
                  "description": "Submit data via POST requests",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_post"
                },
                {
                  "description": "Update resources with PUT requests",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_put"
                },
                {
                  "description": "Remove resources with DELETE requests",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_delete"
                },
                {
                  "description": "Partially update resources",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_patch"
                },
                {
                  "description": "Retrieve only headers from a resource",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_head"
                },
                {
                  "description": "Retrieve options for a resource",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_options"
                },
                {
                  "description": "Diagnostic request tracing",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "http_trace"
                },
                {
                  "description": "Retrieve stored large responses, optionally by line range",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_stored_response"
                },
                {
                  "description": "Convert HTML or PDF responses to Markdown format for better LLM processing",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_stored_response_with_markdown"
                },
                {
                  "description": "Get the current state of the PDF models loading process",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_model_state"
                },
                {
                  "description": "Restart the PDF models loading process if it failed or got stuck",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "restart_model_loading"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "yangkyeongmo": {
      "mcpproviderid": "yangkyeongmo",
      "self": "#/mcpproviders/yangkyeongmo",
      "xid": "/mcpproviders/yangkyeongmo",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:56.708865033Z",
      "modifiedat": "2025-05-12T08:18:56.708865033Z",

      "serversurl": "#/mcpproviders/yangkyeongmo/servers",
      "servers": {
        "mcp-server-apache-airflow": {
          "serverid": "mcp-server-apache-airflow",
          "self": "#/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow",
          "xid": "/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow",

          "metaurl": "#/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow/meta",
          "meta": {
            "serverid": "mcp-server-apache-airflow",
            "self": "#/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow/meta",
            "xid": "/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:56.708865033Z",
            "modifiedat": "2025-05-12T08:18:56.708865033Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-apache-airflow",
              "versionid": "1",
              "self": "#/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow/versions/1",
              "xid": "/mcpproviders/yangkyeongmo/servers/mcp-server-apache-airflow/versions/1",
              "epoch": 1,
              "name": "io.github.yangkyeongmo/mcp-server-apache-airflow",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server implementation for Apache Airflow, enabling seamless integration with MCP clients. This project provides a standardized way to interact with Apache Airflow through the Model Context Protocol.",
              "createdat": "2025-05-12T08:18:56.708865033Z",
              "modifiedat": "2025-05-12T08:18:56.708865033Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "container",
                  "package_name": "apache/airflow:latest"
                }
              ],
              "remotes": [
                {
                  "transporttype": "http",
                  "url": "http://localhost:8080/api/v1"
                }
              ],
              "repo_ref": "yangkyeongmo/mcp-server-apache-airflow",
              "resources": [
                {
                  "description": "Endpoints for managing DAGs in Apache Airflow.",
                  "name": "DAG Management",
                  "uritemplate": "/api/v1/dags"
                },
                {
                  "description": "Endpoints for managing DAG runs.",
                  "name": "DAG Runs",
                  "uritemplate": "/api/v1/dags/{dag_id}/dagRuns"
                },
                {
                  "description": "Endpoints for managing tasks within DAGs.",
                  "name": "Tasks",
                  "uritemplate": "/api/v1/dags/{dag_id}/tasks"
                },
                {
                  "description": "Endpoints for managing Airflow variables.",
                  "name": "Variables",
                  "uritemplate": "/api/v1/variables"
                },
                {
                  "description": "Endpoints for managing Airflow connections.",
                  "name": "Connections",
                  "uritemplate": "/api/v1/connections"
                },
                {
                  "description": "Endpoints for managing Airflow pools.",
                  "name": "Pools",
                  "uritemplate": "/api/v1/pools"
                },
                {
                  "description": "Endpoints for managing XCom entries.",
                  "name": "XComs",
                  "uritemplate": "/api/v1/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries"
                },
                {
                  "description": "Endpoints for managing datasets.",
                  "name": "Datasets",
                  "uritemplate": "/api/v1/datasets"
                }
              ],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "yanmxa": {
      "mcpproviderid": "yanmxa",
      "self": "#/mcpproviders/yanmxa",
      "xid": "/mcpproviders/yanmxa",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:50.99615876Z",
      "modifiedat": "2025-05-12T08:19:50.99615876Z",

      "serversurl": "#/mcpproviders/yanmxa/servers",
      "servers": {
        "multicluster-mcp-server": {
          "serverid": "multicluster-mcp-server",
          "self": "#/mcpproviders/yanmxa/servers/multicluster-mcp-server",
          "xid": "/mcpproviders/yanmxa/servers/multicluster-mcp-server",

          "metaurl": "#/mcpproviders/yanmxa/servers/multicluster-mcp-server/meta",
          "meta": {
            "serverid": "multicluster-mcp-server",
            "self": "#/mcpproviders/yanmxa/servers/multicluster-mcp-server/meta",
            "xid": "/mcpproviders/yanmxa/servers/multicluster-mcp-server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:50.99615876Z",
            "modifiedat": "2025-05-12T08:19:50.99615876Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/yanmxa/servers/multicluster-mcp-server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/yanmxa/servers/multicluster-mcp-server/versions",
          "versions": {
            "1": {
              "serverid": "multicluster-mcp-server",
              "versionid": "1",
              "self": "#/mcpproviders/yanmxa/servers/multicluster-mcp-server/versions/1",
              "xid": "/mcpproviders/yanmxa/servers/multicluster-mcp-server/versions/1",
              "epoch": 1,
              "name": "io.github.yanmxa/multicluster-mcp-server",
              "isdefault": true,
              "description": "The Multi-Cluster MCP Server provides a robust gateway for Generative AI (GenAI) systems to interact with multiple Kubernetes clusters through the Model Context Protocol (MCP). It facilitates comprehensive operations on Kubernetes resources, streamlined multi-cluster management, and delivered interactive cluster observability.",
              "createdat": "2025-05-12T08:19:50.99615876Z",
              "modifiedat": "2025-05-12T08:19:50.99615876Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "yanmxa/multicluster-mcp-server",
              "resources": [],
              "tools": [
                {
                  "description": "Tool to create new notes",
                  "inputschema": {
                    "properties": {},
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  },
                  "name": "create_note"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "yeonupark": {
      "mcpproviderid": "yeonupark",
      "self": "#/mcpproviders/yeonupark",
      "xid": "/mcpproviders/yeonupark",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:44.179959301Z",
      "modifiedat": "2025-05-12T08:20:44.179959301Z",

      "serversurl": "#/mcpproviders/yeonupark/servers",
      "servers": {
        "mcp-soccer-data": {
          "serverid": "mcp-soccer-data",
          "self": "#/mcpproviders/yeonupark/servers/mcp-soccer-data",
          "xid": "/mcpproviders/yeonupark/servers/mcp-soccer-data",

          "metaurl": "#/mcpproviders/yeonupark/servers/mcp-soccer-data/meta",
          "meta": {
            "serverid": "mcp-soccer-data",
            "self": "#/mcpproviders/yeonupark/servers/mcp-soccer-data/meta",
            "xid": "/mcpproviders/yeonupark/servers/mcp-soccer-data/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:44.179959301Z",
            "modifiedat": "2025-05-12T08:20:44.179959301Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/yeonupark/servers/mcp-soccer-data/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/yeonupark/servers/mcp-soccer-data/versions",
          "versions": {
            "1": {
              "serverid": "mcp-soccer-data",
              "versionid": "1",
              "self": "#/mcpproviders/yeonupark/servers/mcp-soccer-data/versions/1",
              "xid": "/mcpproviders/yeonupark/servers/mcp-soccer-data/versions/1",
              "epoch": 1,
              "name": "io.github.yeonupark/mcp-soccer-data",
              "isdefault": true,
              "description": "An open-source Model Context Protocol (MCP) server that connects to the SoccerDataAPI to deliver up-to-date football match information via natural language interactions.",
              "createdat": "2025-05-12T08:20:44.179959301Z",
              "modifiedat": "2025-05-12T08:20:44.179959301Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Authentication key for Soccerdata API",
                        "name": "AUTH_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "--directory",
                      "src/",
                      "run",
                      "--env-file",
                      ".env",
                      "server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "@yeonupark/mcp-soccer-data"
                }
              ],
              "remotes": [],
              "repo_ref": "yeonupark/mcp-soccer-data",
              "resources": [],
              "tools": [
                {
                  "description": "Returns real-time information about ongoing football matches around the world.",
                  "inputschema": {
                    "type": "object"
                  },
                  "name": "get_livescores()"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "yuanoOo": {
      "mcpproviderid": "yuanoOo",
      "self": "#/mcpproviders/yuanoOo",
      "xid": "/mcpproviders/yuanoOo",
      "epoch": 1,
      "createdat": "2025-05-12T08:19:53.745475311Z",
      "modifiedat": "2025-05-12T08:19:53.745475311Z",

      "serversurl": "#/mcpproviders/yuanoOo/servers",
      "servers": {
        "oceanbase_mcp_server": {
          "serverid": "oceanbase_mcp_server",
          "self": "#/mcpproviders/yuanoOo/servers/oceanbase_mcp_server",
          "xid": "/mcpproviders/yuanoOo/servers/oceanbase_mcp_server",

          "metaurl": "#/mcpproviders/yuanoOo/servers/oceanbase_mcp_server/meta",
          "meta": {
            "serverid": "oceanbase_mcp_server",
            "self": "#/mcpproviders/yuanoOo/servers/oceanbase_mcp_server/meta",
            "xid": "/mcpproviders/yuanoOo/servers/oceanbase_mcp_server/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:19:53.745475311Z",
            "modifiedat": "2025-05-12T08:19:53.745475311Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/yuanoOo/servers/oceanbase_mcp_server/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/yuanoOo/servers/oceanbase_mcp_server/versions",
          "versions": {
            "1": {
              "serverid": "oceanbase_mcp_server",
              "versionid": "1",
              "self": "#/mcpproviders/yuanoOo/servers/oceanbase_mcp_server/versions/1",
              "xid": "/mcpproviders/yuanoOo/servers/oceanbase_mcp_server/versions/1",
              "epoch": 1,
              "name": "io.github.yuanoOo/oceanbase_mcp_server",
              "isdefault": true,
              "description": "A Model Context Protocol (MCP) server that enables secure interaction with OceanBase databases. This server allows AI assistants to list tables, read data, and execute SQL queries through a controlled interface, making database exploration and analysis safer and more structured.",
              "createdat": "2025-05-12T08:19:53.745475311Z",
              "modifiedat": "2025-05-12T08:19:53.745475311Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Database host",
                        "name": "OB_HOST",
                        "required": true
                      },
                      {
                        "description": "Database port",
                        "name": "OB_PORT",
                        "required": false
                      },
                      {
                        "description": "Database username",
                        "name": "OB_USER",
                        "required": true
                      },
                      {
                        "description": "Database password",
                        "name": "OB_PASSWORD",
                        "required": true
                      },
                      {
                        "description": "Database name",
                        "name": "OB_DATABASE",
                        "required": true
                      }
                    ],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "oceanbase-mcp-server"
                }
              ],
              "remotes": [],
              "repo_ref": "yuanoOo/oceanbase_mcp_server",
              "resources": [
                {
                  "description": "Data in table: {table}",
                  "mimetype": "text/plain",
                  "name": "Table",
                  "uritemplate": "oceanbase://{table}/data"
                }
              ],
              "tools": [
                {
                  "description": "Execute an SQL query on the OceanBase server",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "The SQL query to execute",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_sql"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "zcaceres": {
      "mcpproviderid": "zcaceres",
      "self": "#/mcpproviders/zcaceres",
      "xid": "/mcpproviders/zcaceres",
      "epoch": 4,
      "createdat": "2025-05-12T08:18:13.3389114Z",
      "modifiedat": "2025-05-12T08:18:15.091264348Z",

      "serversurl": "#/mcpproviders/zcaceres/servers",
      "servers": {
        "easy-mcp": {
          "serverid": "easy-mcp",
          "self": "#/mcpproviders/zcaceres/servers/easy-mcp",
          "xid": "/mcpproviders/zcaceres/servers/easy-mcp",

          "metaurl": "#/mcpproviders/zcaceres/servers/easy-mcp/meta",
          "meta": {
            "serverid": "easy-mcp",
            "self": "#/mcpproviders/zcaceres/servers/easy-mcp/meta",
            "xid": "/mcpproviders/zcaceres/servers/easy-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:14.492677108Z",
            "modifiedat": "2025-05-12T08:18:14.492677108Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zcaceres/servers/easy-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zcaceres/servers/easy-mcp/versions",
          "versions": {
            "1": {
              "serverid": "easy-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/zcaceres/servers/easy-mcp/versions/1",
              "xid": "/mcpproviders/zcaceres/servers/easy-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.zcaceres/easy-mcp",
              "isdefault": true,
              "description": "EasyMCP is the simplest way to create Model Context Protocol (MCP) servers in TypeScript. It hides the plumbing, formatting, and other boilerplate definitions behind simple declarations. Easy MCP allows you to define the bare minimum of what you need to get started. Or you can define more complex resources, templates, tools, and prompts.",
              "createdat": "2025-05-12T08:18:14.492677108Z",
              "modifiedat": "2025-05-12T08:18:14.492677108Z",
              "ancestor": "1",
              "prompts": [
                {
                  "arguments": [
                    {
                      "description": "",
                      "name": "name",
                      "required": true
                    }
                  ],
                  "description": "",
                  "name": "greetingPrompt"
                },
                {
                  "arguments": [
                    {
                      "description": "",
                      "name": "name",
                      "required": true
                    }
                  ],
                  "description": "",
                  "name": "simplePrompt"
                },
                {
                  "arguments": [
                    {
                      "description": "The name of the thing to prompt",
                      "name": "name",
                      "required": true
                    }
                  ],
                  "description": "A prompt with a name and description",
                  "name": "configured-prompt"
                },
                {
                  "arguments": [
                    {
                      "description": "",
                      "name": "name",
                      "required": true
                    }
                  ],
                  "description": "",
                  "name": "simplePrompt"
                },
                {
                  "arguments": [
                    {
                      "description": "User's name",
                      "name": "name",
                      "required": true
                    },
                    {
                      "description": "User's age",
                      "name": "age",
                      "required": false
                    }
                  ],
                  "description": "A custom prompt with multiple parameters",
                  "name": "customPrompt"
                }
              ],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "start:decorators"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "easy-mcp"
                }
              ],
              "remotes": [],
              "repo_ref": "zcaceres/easy-mcp",
              "resources": [
                {
                  "description": "",
                  "mimetype": "",
                  "name": "simpleResource",
                  "uritemplate": "simple-resource"
                },
                {
                  "description": "",
                  "mimetype": "",
                  "name": "myResourceTemplate",
                  "uritemplate": "greeting/{name}"
                },
                {
                  "description": "",
                  "mimetype": "",
                  "name": "simpleResource",
                  "uritemplate": "test://simple-resource"
                },
                {
                  "description": "",
                  "mimetype": "",
                  "name": "resourceWithParam",
                  "uritemplate": "test://resource/{param}"
                }
              ],
              "tools": [
                {
                  "description": "",
                  "inputschema": {
                    "properties": {
                      "height": {
                        "type": "number"
                      },
                      "nickname": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "nickname",
                      "height"
                    ],
                    "type": "object"
                  },
                  "name": "simpleFunc"
                },
                {
                  "description": "An optional description",
                  "inputschema": {
                    "properties": {
                      "active": {
                        "type": "string"
                      },
                      "age": {
                        "type": "number"
                      },
                      "items": {
                        "items": {},
                        "type": "array"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "name": "middleFunc"
                },
                {
                  "description": "A function with various parameter types",
                  "inputschema": {
                    "properties": {
                      "date": {
                        "type": "string"
                      },
                      "season": {
                        "type": "string"
                      },
                      "year": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "date",
                      "season"
                    ],
                    "type": "object"
                  },
                  "name": "complexTool"
                },
                {
                  "description": "A tool that uses context",
                  "inputschema": {
                    "properties": {
                      "context": {
                        "type": "object"
                      },
                      "dataSource": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "dataSource",
                      "context"
                    ],
                    "type": "object"
                  },
                  "name": "processData"
                },
                {
                  "description": "",
                  "inputschema": {
                    "properties": {
                      "param1": {
                        "type": "string"
                      },
                      "param2": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "param1",
                      "param2"
                    ],
                    "type": "object"
                  },
                  "name": "simpleTool"
                },
                {
                  "description": "A tool with optional parameters",
                  "inputschema": {
                    "properties": {
                      "optionalParam": {
                        "type": "number"
                      },
                      "requiredParam": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "requiredParam"
                    ],
                    "type": "object"
                  },
                  "name": "toolWithOptionals"
                }
              ],
              "version_detail": {
                "version": "1.0.0"
              }
            }
          },
          "versionscount": 1
        },
        "fetch-mcp": {
          "serverid": "fetch-mcp",
          "self": "#/mcpproviders/zcaceres/servers/fetch-mcp",
          "xid": "/mcpproviders/zcaceres/servers/fetch-mcp",

          "metaurl": "#/mcpproviders/zcaceres/servers/fetch-mcp/meta",
          "meta": {
            "serverid": "fetch-mcp",
            "self": "#/mcpproviders/zcaceres/servers/fetch-mcp/meta",
            "xid": "/mcpproviders/zcaceres/servers/fetch-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:15.091264348Z",
            "modifiedat": "2025-05-12T08:18:15.091264348Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zcaceres/servers/fetch-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zcaceres/servers/fetch-mcp/versions",
          "versions": {
            "1": {
              "serverid": "fetch-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/zcaceres/servers/fetch-mcp/versions/1",
              "xid": "/mcpproviders/zcaceres/servers/fetch-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.zcaceres/fetch-mcp",
              "isdefault": true,
              "description": "This MCP server provides functionality to fetch web content in various formats, including HTML, JSON, plain text, and Markdown.",
              "createdat": "2025-05-12T08:18:15.091264348Z",
              "modifiedat": "2025-05-12T08:18:15.091264348Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "dist/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/sdk"
                }
              ],
              "remotes": [],
              "repo_ref": "zcaceres/fetch-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Fetch a website and return the content as HTML",
                  "inputschema": {
                    "properties": {
                      "headers": {
                        "description": "Optional headers to include in the request",
                        "type": "object"
                      },
                      "url": {
                        "description": "URL of the website to fetch",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "fetch_html"
                },
                {
                  "description": "Fetch a website and return the content as Markdown",
                  "inputschema": {
                    "properties": {
                      "headers": {
                        "description": "Optional headers to include in the request",
                        "type": "object"
                      },
                      "url": {
                        "description": "URL of the website to fetch",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "fetch_markdown"
                },
                {
                  "description": "Fetch a website, return the content as plain text (no HTML)",
                  "inputschema": {
                    "properties": {
                      "headers": {
                        "description": "Optional headers to include in the request",
                        "type": "object"
                      },
                      "url": {
                        "description": "URL of the website to fetch",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "fetch_txt"
                },
                {
                  "description": "Fetch a JSON file from a URL",
                  "inputschema": {
                    "properties": {
                      "headers": {
                        "description": "Optional headers to include in the request",
                        "type": "object"
                      },
                      "url": {
                        "description": "URL of the JSON to fetch",
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "fetch_json"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        },
        "gtasks-mcp": {
          "serverid": "gtasks-mcp",
          "self": "#/mcpproviders/zcaceres/servers/gtasks-mcp",
          "xid": "/mcpproviders/zcaceres/servers/gtasks-mcp",

          "metaurl": "#/mcpproviders/zcaceres/servers/gtasks-mcp/meta",
          "meta": {
            "serverid": "gtasks-mcp",
            "self": "#/mcpproviders/zcaceres/servers/gtasks-mcp/meta",
            "xid": "/mcpproviders/zcaceres/servers/gtasks-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:13.913226851Z",
            "modifiedat": "2025-05-12T08:18:13.913226851Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zcaceres/servers/gtasks-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zcaceres/servers/gtasks-mcp/versions",
          "versions": {
            "1": {
              "serverid": "gtasks-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/zcaceres/servers/gtasks-mcp/versions/1",
              "xid": "/mcpproviders/zcaceres/servers/gtasks-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.zcaceres/gtasks-mcp",
              "isdefault": true,
              "description": "This MCP server integrates with Google Tasks to allow listing, reading, searching, creating, updating, and deleting tasks.",
              "createdat": "2025-05-12T08:18:13.913226851Z",
              "modifiedat": "2025-05-12T08:18:13.913226851Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "dist/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@zcaceres/gtasks"
                }
              ],
              "remotes": [],
              "repo_ref": "zcaceres/gtasks-mcp",
              "resources": [
                {
                  "description": "Represents individual tasks in Google Tasks. Supports reading task details including title, status, due date, notes, and other metadata. Can be listed, read, created, updated, and deleted using the provided tools.",
                  "mimetype": "text/plain",
                  "name": "Tasks",
                  "uritemplate": "gtasks:///{task_id}"
                }
              ],
              "tools": [
                {
                  "description": "Search for a task in Google Tasks",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "description": "Search query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search"
                },
                {
                  "description": "List all tasks in Google Tasks",
                  "inputschema": {
                    "properties": {
                      "cursor": {
                        "description": "Cursor for pagination",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": "list"
                },
                {
                  "description": "Create a new task in Google Tasks",
                  "inputschema": {
                    "properties": {
                      "due": {
                        "description": "Due date",
                        "type": "string"
                      },
                      "notes": {
                        "description": "Task notes",
                        "type": "string"
                      },
                      "taskListId": {
                        "description": "Task list ID",
                        "type": "string"
                      },
                      "title": {
                        "description": "Task title",
                        "type": "string"
                      }
                    },
                    "required": [
                      "title"
                    ],
                    "type": "object"
                  },
                  "name": "create"
                },
                {
                  "description": "Clear completed tasks from a Google Tasks task list",
                  "inputschema": {
                    "properties": {
                      "taskListId": {
                        "description": "Task list ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "taskListId"
                    ],
                    "type": "object"
                  },
                  "name": "clear"
                },
                {
                  "description": "Delete a task in Google Tasks",
                  "inputschema": {
                    "properties": {
                      "id": {
                        "description": "Task id",
                        "type": "string"
                      },
                      "taskListId": {
                        "description": "Task list ID",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "taskListId"
                    ],
                    "type": "object"
                  },
                  "name": "delete"
                },
                {
                  "description": "Update a task in Google Tasks",
                  "inputschema": {
                    "properties": {
                      "due": {
                        "description": "Due date",
                        "type": "string"
                      },
                      "id": {
                        "description": "Task ID",
                        "type": "string"
                      },
                      "notes": {
                        "description": "Task notes",
                        "type": "string"
                      },
                      "status": {
                        "description": "Task status (needsAction or completed)",
                        "enum": [
                          "needsAction",
                          "completed"
                        ],
                        "type": "string"
                      },
                      "taskListId": {
                        "description": "Task list ID",
                        "type": "string"
                      },
                      "title": {
                        "description": "Task title",
                        "type": "string"
                      },
                      "uri": {
                        "description": "Task URI",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "name": "update"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        },
        "markdownify-mcp": {
          "serverid": "markdownify-mcp",
          "self": "#/mcpproviders/zcaceres/servers/markdownify-mcp",
          "xid": "/mcpproviders/zcaceres/servers/markdownify-mcp",

          "metaurl": "#/mcpproviders/zcaceres/servers/markdownify-mcp/meta",
          "meta": {
            "serverid": "markdownify-mcp",
            "self": "#/mcpproviders/zcaceres/servers/markdownify-mcp/meta",
            "xid": "/mcpproviders/zcaceres/servers/markdownify-mcp/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:13.3389114Z",
            "modifiedat": "2025-05-12T08:18:13.3389114Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zcaceres/servers/markdownify-mcp/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zcaceres/servers/markdownify-mcp/versions",
          "versions": {
            "1": {
              "serverid": "markdownify-mcp",
              "versionid": "1",
              "self": "#/mcpproviders/zcaceres/servers/markdownify-mcp/versions/1",
              "xid": "/mcpproviders/zcaceres/servers/markdownify-mcp/versions/1",
              "epoch": 1,
              "name": "io.github.zcaceres/markdownify-mcp",
              "isdefault": true,
              "description": "Markdownify is a Model Context Protocol (MCP) server that converts various file types and web content to Markdown format. It provides a set of tools to transform PDFs, images, audio files, web pages, and more into easily readable and shareable Markdown text.",
              "createdat": "2025-05-12T08:18:13.3389114Z",
              "modifiedat": "2025-05-12T08:18:13.3389114Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "By default, the server will use the default install location of `uv`",
                        "name": "UV_PATH",
                        "required": false
                      }
                    ],
                    "positional_arguments": [
                      "dist/index.js"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "npm",
                  "package_name": "@modelcontextprotocol/mcp-markdownify-server"
                }
              ],
              "remotes": [],
              "repo_ref": "zcaceres/markdownify-mcp",
              "resources": [],
              "tools": [
                {
                  "description": "Convert YouTube videos to Markdown",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "youtube-to-markdown"
                },
                {
                  "description": "Convert PDF files to Markdown",
                  "inputschema": {
                    "properties": {
                      "filepath": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "filepath"
                    ],
                    "type": "object"
                  },
                  "name": "pdf-to-markdown"
                },
                {
                  "description": "Convert Bing search results to Markdown",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "bing-search-to-markdown"
                },
                {
                  "description": "Convert web pages to Markdown",
                  "inputschema": {
                    "properties": {
                      "url": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "url"
                    ],
                    "type": "object"
                  },
                  "name": "webpage-to-markdown"
                },
                {
                  "description": "Convert images to Markdown with metadata",
                  "inputschema": {
                    "properties": {
                      "filepath": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "filepath"
                    ],
                    "type": "object"
                  },
                  "name": "image-to-markdown"
                },
                {
                  "description": "Convert audio files to Markdown with transcription",
                  "inputschema": {
                    "properties": {
                      "filepath": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "filepath"
                    ],
                    "type": "object"
                  },
                  "name": "audio-to-markdown"
                },
                {
                  "description": "Convert DOCX files to Markdown",
                  "inputschema": {
                    "properties": {
                      "filepath": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "filepath"
                    ],
                    "type": "object"
                  },
                  "name": "docx-to-markdown"
                },
                {
                  "description": "Convert XLSX files to Markdown",
                  "inputschema": {
                    "properties": {
                      "filepath": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "filepath"
                    ],
                    "type": "object"
                  },
                  "name": "xlsx-to-markdown"
                },
                {
                  "description": "Convert PPTX files to Markdown",
                  "inputschema": {
                    "properties": {
                      "filepath": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "filepath"
                    ],
                    "type": "object"
                  },
                  "name": "pptx-to-markdown"
                },
                {
                  "description": "Retrieve an existing Markdown file",
                  "inputschema": {
                    "properties": {
                      "filepath": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "filepath"
                    ],
                    "type": "object"
                  },
                  "name": "get-markdown-file"
                }
              ],
              "version_detail": {
                "version": "0.1.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 4
    },
    "zenml-io": {
      "mcpproviderid": "zenml-io",
      "self": "#/mcpproviders/zenml-io",
      "xid": "/mcpproviders/zenml-io",
      "epoch": 1,
      "createdat": "2025-05-12T08:20:08.216640601Z",
      "modifiedat": "2025-05-12T08:20:08.216640601Z",

      "serversurl": "#/mcpproviders/zenml-io/servers",
      "servers": {
        "mcp-zenml": {
          "serverid": "mcp-zenml",
          "self": "#/mcpproviders/zenml-io/servers/mcp-zenml",
          "xid": "/mcpproviders/zenml-io/servers/mcp-zenml",

          "metaurl": "#/mcpproviders/zenml-io/servers/mcp-zenml/meta",
          "meta": {
            "serverid": "mcp-zenml",
            "self": "#/mcpproviders/zenml-io/servers/mcp-zenml/meta",
            "xid": "/mcpproviders/zenml-io/servers/mcp-zenml/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:20:08.216640601Z",
            "modifiedat": "2025-05-12T08:20:08.216640601Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zenml-io/servers/mcp-zenml/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zenml-io/servers/mcp-zenml/versions",
          "versions": {
            "1": {
              "serverid": "mcp-zenml",
              "versionid": "1",
              "self": "#/mcpproviders/zenml-io/servers/mcp-zenml/versions/1",
              "xid": "/mcpproviders/zenml-io/servers/mcp-zenml/versions/1",
              "epoch": 1,
              "name": "io.github.zenml-io/mcp-zenml",
              "isdefault": true,
              "description": "This project implements a Model Context Protocol (MCP) server for interacting with the ZenML API. It provides MCP tools to access core read functionality from the ZenML server, including users, stacks, pipelines, pipeline runs, pipeline steps, services, stack components, flavors, pipeline run templates, schedules, artifacts metadata, service connectors, step code, and step logs. It also allows triggering new pipeline runs if a run template is present.",
              "createdat": "2025-05-12T08:20:08.216640601Z",
              "modifiedat": "2025-05-12T08:20:08.216640601Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [
                      {
                        "description": "Log level for server output",
                        "name": "LOGLEVEL",
                        "required": false
                      },
                      {
                        "description": "Disable colored output",
                        "name": "NO_COLOR",
                        "required": false
                      },
                      {
                        "description": "Python unbuffered output",
                        "name": "PYTHONUNBUFFERED",
                        "required": false
                      },
                      {
                        "description": "Python IO encoding",
                        "name": "PYTHONIOENCODING",
                        "required": false
                      },
                      {
                        "description": "URL of the ZenML server",
                        "name": "ZENML_STORE_URL",
                        "required": true
                      },
                      {
                        "description": "API key for ZenML server authentication",
                        "name": "ZENML_STORE_API_KEY",
                        "required": true
                      }
                    ],
                    "positional_arguments": [
                      "run",
                      "zenml_server.py"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "uv"
                }
              ],
              "remotes": [],
              "repo_ref": "zenml-io/mcp-zenml",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "zilliztech": {
      "mcpproviderid": "zilliztech",
      "self": "#/mcpproviders/zilliztech",
      "xid": "/mcpproviders/zilliztech",
      "epoch": 1,
      "createdat": "2025-05-12T08:18:23.139246295Z",
      "modifiedat": "2025-05-12T08:18:23.139246295Z",

      "serversurl": "#/mcpproviders/zilliztech/servers",
      "servers": {
        "mcp-server-milvus": {
          "serverid": "mcp-server-milvus",
          "self": "#/mcpproviders/zilliztech/servers/mcp-server-milvus",
          "xid": "/mcpproviders/zilliztech/servers/mcp-server-milvus",

          "metaurl": "#/mcpproviders/zilliztech/servers/mcp-server-milvus/meta",
          "meta": {
            "serverid": "mcp-server-milvus",
            "self": "#/mcpproviders/zilliztech/servers/mcp-server-milvus/meta",
            "xid": "/mcpproviders/zilliztech/servers/mcp-server-milvus/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:18:23.139246295Z",
            "modifiedat": "2025-05-12T08:18:23.139246295Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zilliztech/servers/mcp-server-milvus/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zilliztech/servers/mcp-server-milvus/versions",
          "versions": {
            "1": {
              "serverid": "mcp-server-milvus",
              "versionid": "1",
              "self": "#/mcpproviders/zilliztech/servers/mcp-server-milvus/versions/1",
              "xid": "/mcpproviders/zilliztech/servers/mcp-server-milvus/versions/1",
              "epoch": 1,
              "name": "io.github.zilliztech/mcp-server-milvus",
              "isdefault": true,
              "description": "This MCP server provides access to Milvus vector database functionality, enabling integration between LLM applications and external data sources via the Model Context Protocol.",
              "createdat": "2025-05-12T08:18:23.139246295Z",
              "modifiedat": "2025-05-12T08:18:23.139246295Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [
                      "run",
                      "src/mcp_server_milvus/server.py",
                      "--milvus-uri",
                      "http://localhost:19530"
                    ],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "python",
                  "package_name": "mcp-server-milvus"
                }
              ],
              "remotes": [],
              "repo_ref": "zilliztech/mcp-server-milvus",
              "resources": [],
              "tools": [],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    },
    "zzaebok": {
      "mcpproviderid": "zzaebok",
      "self": "#/mcpproviders/zzaebok",
      "xid": "/mcpproviders/zzaebok",
      "epoch": 1,
      "createdat": "2025-05-12T08:22:22.724554634Z",
      "modifiedat": "2025-05-12T08:22:22.724554634Z",

      "serversurl": "#/mcpproviders/zzaebok/servers",
      "servers": {
        "mcp-wikidata": {
          "serverid": "mcp-wikidata",
          "self": "#/mcpproviders/zzaebok/servers/mcp-wikidata",
          "xid": "/mcpproviders/zzaebok/servers/mcp-wikidata",

          "metaurl": "#/mcpproviders/zzaebok/servers/mcp-wikidata/meta",
          "meta": {
            "serverid": "mcp-wikidata",
            "self": "#/mcpproviders/zzaebok/servers/mcp-wikidata/meta",
            "xid": "/mcpproviders/zzaebok/servers/mcp-wikidata/meta",
            "epoch": 1,
            "createdat": "2025-05-12T08:22:22.724554634Z",
            "modifiedat": "2025-05-12T08:22:22.724554634Z",
            "readonly": false,
            "compatibility": "none",

            "defaultversionid": "1",
            "defaultversionurl": "#/mcpproviders/zzaebok/servers/mcp-wikidata/versions/1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/mcpproviders/zzaebok/servers/mcp-wikidata/versions",
          "versions": {
            "1": {
              "serverid": "mcp-wikidata",
              "versionid": "1",
              "self": "#/mcpproviders/zzaebok/servers/mcp-wikidata/versions/1",
              "xid": "/mcpproviders/zzaebok/servers/mcp-wikidata/versions/1",
              "epoch": 1,
              "name": "io.github.zzaebok/mcp-wikidata",
              "isdefault": true,
              "description": "A server implementation for Wikidata API using the Model Context Protocol (MCP). This project provides tools to interact with Wikidata, such as searching identifiers (entity and property), extracting metadata (label and description) and executing sparql query.",
              "createdat": "2025-05-12T08:22:22.724554634Z",
              "modifiedat": "2025-05-12T08:22:22.724554634Z",
              "ancestor": "1",
              "prompts": [],
              "registries": [
                {
                  "command_arguments": {
                    "environment_variables": [],
                    "positional_arguments": [],
                    "sub_commands": []
                  },
                  "license": "",
                  "name": "uv",
                  "package_name": "@zzaebok/mcp-wikidata"
                }
              ],
              "remotes": [],
              "repo_ref": "zzaebok/mcp-wikidata",
              "resources": [],
              "tools": [
                {
                  "description": "Search for a Wikidata entity ID by its query.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_entity"
                },
                {
                  "description": "Search for a Wikidata property ID by its query.",
                  "inputschema": {
                    "properties": {
                      "query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "query"
                    ],
                    "type": "object"
                  },
                  "name": "search_property"
                },
                {
                  "description": "Get the properties associated with a given Wikidata entity ID.",
                  "inputschema": {
                    "properties": {
                      "entity_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "entity_id"
                    ],
                    "type": "object"
                  },
                  "name": "get_properties"
                },
                {
                  "description": "Execute a SPARQL query.",
                  "inputschema": {
                    "properties": {
                      "sparql_query": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "sparql_query"
                    ],
                    "type": "object"
                  },
                  "name": "execute_sparql"
                }
              ],
              "version_detail": {
                "version": "0.0.0"
              }
            }
          },
          "versionscount": 1
        }
      },
      "serverscount": 1
    }
  },
  "mcpproviderscount": 303
}
